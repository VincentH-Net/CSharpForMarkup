// Start of generated C# Markup API for Microsoft.WindowsAppSDK
#if NET8_0 && WINUI

using System;
using System.Collections.Generic;
using System.Numerics;
using System.Windows.Input;
using System.Runtime.Versioning;
using Microsoft;
using UI = Microsoft.UI;
using Xaml = Microsoft.UI.Xaml;
using VirtualKey = Windows.System.VirtualKey;
using VirtualKeyModifiers = Windows.System.VirtualKeyModifiers;
using Drawing = System.Drawing;

namespace CSharpMarkup.WinUI // AdaptiveTrigger
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.AdaptiveTrigger"/></summary>
        public static AdaptiveTrigger AdaptiveTrigger(double? MinWindowHeight = default, double? MinWindowWidth = default)
        {
            var ui = new Xaml.AdaptiveTrigger();
            if (MinWindowHeight is not null) ui.MinWindowHeight = MinWindowHeight.Value;
            if (MinWindowWidth is not null) ui.MinWindowWidth = MinWindowWidth.Value;
            return CSharpMarkup.WinUI.AdaptiveTrigger.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.AdaptiveTrigger"/></summary>
        public static AdaptiveTrigger AdaptiveTrigger()
        {
            var ui = new Xaml.AdaptiveTrigger();
            return CSharpMarkup.WinUI.AdaptiveTrigger.StartChain(ui);
        }
    }

    public partial class AdaptiveTrigger : StateTriggerBase, IUI<Xaml.AdaptiveTrigger>
    {
        static AdaptiveTrigger instance;

        internal static AdaptiveTrigger StartChain(Xaml.AdaptiveTrigger ui)
        {
            if (instance == null) instance = new AdaptiveTrigger();
            instance.UI = ui;
            return instance;
        }

        Xaml.AdaptiveTrigger ui;

        public new Xaml.AdaptiveTrigger UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.AdaptiveTrigger(AdaptiveTrigger view) => view?.UI;

        public static implicit operator AdaptiveTrigger(Xaml.AdaptiveTrigger ui) => AdaptiveTrigger.StartChain(ui);

        public AdaptiveTrigger Invoke(Action<Xaml.AdaptiveTrigger> action) { action?.Invoke(UI); return this; }

        protected AdaptiveTrigger() { }
    }

    public static partial class AdaptiveTriggerExtensions
    {
        /// <summary>Set <see cref="Xaml.AdaptiveTrigger.MinWindowHeight"/></summary>
        public static TView MinWindowHeight<TView>(this TView view, double value) where TView : AdaptiveTrigger { view.UI.MinWindowHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.AdaptiveTrigger.MinWindowWidth"/></summary>
        public static TView MinWindowWidth<TView>(this TView view, double value) where TView : AdaptiveTrigger { view.UI.MinWindowWidth = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.AdaptiveTrigger.MinWindowHeight"/></summary>
        public static DependencyProperty<TTarget, double> MinWindowHeight<TTarget>(this TTarget target) where TTarget : AdaptiveTrigger
        => DependencyProperty<TTarget, double>.Get(target, Xaml.AdaptiveTrigger.MinWindowHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.AdaptiveTrigger.MinWindowWidth"/></summary>
        public static DependencyProperty<TTarget, double> MinWindowWidth<TTarget>(this TTarget target) where TTarget : AdaptiveTrigger
        => DependencyProperty<TTarget, double>.Get(target, Xaml.AdaptiveTrigger.MinWindowWidthProperty);
    }
}

namespace CSharpMarkup.WinUI // AutomationAnnotation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Automation.AutomationAnnotation"/></summary>
        public static AutomationAnnotation AutomationAnnotation(Xaml.UIElement Element = default, Xaml.Automation.AnnotationType? Type = default)
        {
            var ui = new Xaml.Automation.AutomationAnnotation();
            if (Element is not null) ui.Element = Element;
            if (Type is not null) ui.Type = Type.Value;
            return CSharpMarkup.WinUI.AutomationAnnotation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Automation.AutomationAnnotation"/></summary>
        public static AutomationAnnotation AutomationAnnotation()
        {
            var ui = new Xaml.Automation.AutomationAnnotation();
            return CSharpMarkup.WinUI.AutomationAnnotation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Automation.AutomationAnnotation"/></summary>
        public static AutomationAnnotation AutomationAnnotation(Xaml.Automation.AnnotationType type, Xaml.UIElement element)
        {
            var ui = new Xaml.Automation.AutomationAnnotation(type, element);
            return CSharpMarkup.WinUI.AutomationAnnotation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Automation.AutomationAnnotation"/></summary>
        public static AutomationAnnotation AutomationAnnotation(Xaml.Automation.AnnotationType type)
        {
            var ui = new Xaml.Automation.AutomationAnnotation(type);
            return CSharpMarkup.WinUI.AutomationAnnotation.StartChain(ui);
        }
    }

    public partial class AutomationAnnotation : DependencyObject, IUI<Xaml.Automation.AutomationAnnotation>
    {
        static AutomationAnnotation instance;

        internal static AutomationAnnotation StartChain(Xaml.Automation.AutomationAnnotation ui)
        {
            if (instance == null) instance = new AutomationAnnotation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Automation.AutomationAnnotation ui;

        public new Xaml.Automation.AutomationAnnotation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Automation.AutomationAnnotation(AutomationAnnotation view) => view?.UI;

        public static implicit operator AutomationAnnotation(Xaml.Automation.AutomationAnnotation ui) => AutomationAnnotation.StartChain(ui);

        public AutomationAnnotation Invoke(Action<Xaml.Automation.AutomationAnnotation> action) { action?.Invoke(UI); return this; }

        protected AutomationAnnotation() { }
    }

    public static partial class AutomationAnnotationExtensions
    {
        /// <summary>Set <see cref="Xaml.Automation.AutomationAnnotation.Element"/></summary>
        public static TView Element<TView>(this TView view, Xaml.UIElement value) where TView : AutomationAnnotation { view.UI.Element = value; return view; }

        /// <summary>Set <see cref="Xaml.Automation.AutomationAnnotation.Type"/></summary>
        public static TView Type<TView>(this TView view, Xaml.Automation.AnnotationType value) where TView : AutomationAnnotation { view.UI.Type = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationAnnotation.Element"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Element<TTarget>(this TTarget target) where TTarget : AutomationAnnotation
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Automation.AutomationAnnotation.ElementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationAnnotation.Type"/></summary>
        public static DependencyProperty<TTarget, Xaml.Automation.AnnotationType> Type<TTarget>(this TTarget target) where TTarget : AutomationAnnotation
        => DependencyProperty<TTarget, Xaml.Automation.AnnotationType>.Get(target, Xaml.Automation.AutomationAnnotation.TypeProperty);
    }
}

namespace CSharpMarkup.WinUI // AutomationProperties
{
    public static partial class AutomationPropertiesExtensions
    {
        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.AcceleratorKey"/></summary>
        public static TTarget AutomationProperties_AcceleratorKey<TTarget>(this TTarget target, string value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetAcceleratorKey(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.AcceleratorKey"/></summary>
        public static DependencyProperty<TTarget, string> AutomationProperties_AcceleratorKey<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Automation.AutomationProperties.AcceleratorKeyProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.AccessibilityView"/></summary>
        public static TTarget AutomationProperties_AccessibilityView<TTarget>(this TTarget target, Xaml.Automation.Peers.AccessibilityView value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetAccessibilityView(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.AccessibilityView"/></summary>
        public static DependencyProperty<TTarget, Xaml.Automation.Peers.AccessibilityView> AutomationProperties_AccessibilityView<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.Automation.Peers.AccessibilityView>.Get(target, Xaml.Automation.AutomationProperties.AccessibilityViewProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.AccessKey"/></summary>
        public static TTarget AutomationProperties_AccessKey<TTarget>(this TTarget target, string value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetAccessKey(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.AccessKey"/></summary>
        public static DependencyProperty<TTarget, string> AutomationProperties_AccessKey<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Automation.AutomationProperties.AccessKeyProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.AutomationId"/></summary>
        public static TTarget AutomationProperties_AutomationId<TTarget>(this TTarget target, string value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetAutomationId(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.AutomationId"/></summary>
        public static DependencyProperty<TTarget, string> AutomationProperties_AutomationId<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Automation.AutomationProperties.AutomationIdProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.Culture"/></summary>
        public static TTarget AutomationProperties_Culture<TTarget>(this TTarget target, int value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetCulture(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.Culture"/></summary>
        public static DependencyProperty<TTarget, int> AutomationProperties_Culture<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Automation.AutomationProperties.CultureProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.FullDescription"/></summary>
        public static TTarget AutomationProperties_FullDescription<TTarget>(this TTarget target, string value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetFullDescription(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.FullDescription"/></summary>
        public static DependencyProperty<TTarget, string> AutomationProperties_FullDescription<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Automation.AutomationProperties.FullDescriptionProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.HeadingLevel"/></summary>
        public static TTarget AutomationProperties_HeadingLevel<TTarget>(this TTarget target, Xaml.Automation.Peers.AutomationHeadingLevel value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetHeadingLevel(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.HeadingLevel"/></summary>
        public static DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationHeadingLevel> AutomationProperties_HeadingLevel<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationHeadingLevel>.Get(target, Xaml.Automation.AutomationProperties.HeadingLevelProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.HelpText"/></summary>
        public static TTarget AutomationProperties_HelpText<TTarget>(this TTarget target, string value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetHelpText(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.HelpText"/></summary>
        public static DependencyProperty<TTarget, string> AutomationProperties_HelpText<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Automation.AutomationProperties.HelpTextProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.IsDataValidForForm"/></summary>
        public static TTarget AutomationProperties_IsDataValidForForm<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetIsDataValidForForm(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.IsDataValidForForm"/></summary>
        public static DependencyProperty<TTarget, bool> AutomationProperties_IsDataValidForForm<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Automation.AutomationProperties.IsDataValidForFormProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.IsDialog"/></summary>
        public static TTarget AutomationProperties_IsDialog<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetIsDialog(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.IsDialog"/></summary>
        public static DependencyProperty<TTarget, bool> AutomationProperties_IsDialog<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Automation.AutomationProperties.IsDialogProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.IsPeripheral"/></summary>
        public static TTarget AutomationProperties_IsPeripheral<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetIsPeripheral(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.IsPeripheral"/></summary>
        public static DependencyProperty<TTarget, bool> AutomationProperties_IsPeripheral<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Automation.AutomationProperties.IsPeripheralProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.IsRequiredForForm"/></summary>
        public static TTarget AutomationProperties_IsRequiredForForm<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetIsRequiredForForm(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.IsRequiredForForm"/></summary>
        public static DependencyProperty<TTarget, bool> AutomationProperties_IsRequiredForForm<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Automation.AutomationProperties.IsRequiredForFormProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.ItemStatus"/></summary>
        public static TTarget AutomationProperties_ItemStatus<TTarget>(this TTarget target, string value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetItemStatus(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.ItemStatus"/></summary>
        public static DependencyProperty<TTarget, string> AutomationProperties_ItemStatus<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Automation.AutomationProperties.ItemStatusProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.ItemType"/></summary>
        public static TTarget AutomationProperties_ItemType<TTarget>(this TTarget target, string value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetItemType(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.ItemType"/></summary>
        public static DependencyProperty<TTarget, string> AutomationProperties_ItemType<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Automation.AutomationProperties.ItemTypeProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.LabeledBy"/></summary>
        public static TTarget AutomationProperties_LabeledBy<TTarget>(this TTarget target, Xaml.UIElement value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetLabeledBy(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.LabeledBy"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> AutomationProperties_LabeledBy<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Automation.AutomationProperties.LabeledByProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.LandmarkType"/></summary>
        public static TTarget AutomationProperties_LandmarkType<TTarget>(this TTarget target, Xaml.Automation.Peers.AutomationLandmarkType value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetLandmarkType(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.LandmarkType"/></summary>
        public static DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationLandmarkType> AutomationProperties_LandmarkType<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationLandmarkType>.Get(target, Xaml.Automation.AutomationProperties.LandmarkTypeProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.Level"/></summary>
        public static TTarget AutomationProperties_Level<TTarget>(this TTarget target, int value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetLevel(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.Level"/></summary>
        public static DependencyProperty<TTarget, int> AutomationProperties_Level<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Automation.AutomationProperties.LevelProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.LiveSetting"/></summary>
        public static TTarget AutomationProperties_LiveSetting<TTarget>(this TTarget target, Xaml.Automation.Peers.AutomationLiveSetting value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetLiveSetting(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.LiveSetting"/></summary>
        public static DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationLiveSetting> AutomationProperties_LiveSetting<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationLiveSetting>.Get(target, Xaml.Automation.AutomationProperties.LiveSettingProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.LocalizedControlType"/></summary>
        public static TTarget AutomationProperties_LocalizedControlType<TTarget>(this TTarget target, string value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetLocalizedControlType(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.LocalizedControlType"/></summary>
        public static DependencyProperty<TTarget, string> AutomationProperties_LocalizedControlType<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Automation.AutomationProperties.LocalizedControlTypeProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.LocalizedLandmarkType"/></summary>
        public static TTarget AutomationProperties_LocalizedLandmarkType<TTarget>(this TTarget target, string value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetLocalizedLandmarkType(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.LocalizedLandmarkType"/></summary>
        public static DependencyProperty<TTarget, string> AutomationProperties_LocalizedLandmarkType<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Automation.AutomationProperties.LocalizedLandmarkTypeProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.Name"/></summary>
        public static TTarget AutomationProperties_Name<TTarget>(this TTarget target, string value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetName(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.Name"/></summary>
        public static DependencyProperty<TTarget, string> AutomationProperties_Name<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Automation.AutomationProperties.NameProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.PositionInSet"/></summary>
        public static TTarget AutomationProperties_PositionInSet<TTarget>(this TTarget target, int value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetPositionInSet(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.PositionInSet"/></summary>
        public static DependencyProperty<TTarget, int> AutomationProperties_PositionInSet<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Automation.AutomationProperties.PositionInSetProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.SizeOfSet"/></summary>
        public static TTarget AutomationProperties_SizeOfSet<TTarget>(this TTarget target, int value) where TTarget : DependencyObject
        { Xaml.Automation.AutomationProperties.SetSizeOfSet(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.SizeOfSet"/></summary>
        public static DependencyProperty<TTarget, int> AutomationProperties_SizeOfSet<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Automation.AutomationProperties.SizeOfSetProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties"/> attached properties</summary>
        public static TTarget AutomationProperties<TTarget>(this TTarget target

            , string AcceleratorKey = default

            , Xaml.Automation.Peers.AccessibilityView? AccessibilityView = default

            , string AccessKey = default

            , string AutomationId = default

            , int? Culture = default

            , string FullDescription = default

            , Xaml.Automation.Peers.AutomationHeadingLevel? HeadingLevel = default

            , string HelpText = default

            , bool? IsDataValidForForm = default

            , bool? IsDialog = default

            , bool? IsPeripheral = default

            , bool? IsRequiredForForm = default

            , string ItemStatus = default

            , string ItemType = default

            , Xaml.UIElement LabeledBy = default

            , Xaml.Automation.Peers.AutomationLandmarkType? LandmarkType = default

            , int? Level = default

            , Xaml.Automation.Peers.AutomationLiveSetting? LiveSetting = default

            , string LocalizedControlType = default

            , string LocalizedLandmarkType = default

            , string Name = default

            , int? PositionInSet = default

            , int? SizeOfSet = default

        ) where TTarget : DependencyObject
        {
            if (AcceleratorKey is not null) Xaml.Automation.AutomationProperties.SetAcceleratorKey(target.UI, AcceleratorKey);

            if (AccessibilityView is not null) Xaml.Automation.AutomationProperties.SetAccessibilityView(target.UI, AccessibilityView.Value);

            if (AccessKey is not null) Xaml.Automation.AutomationProperties.SetAccessKey(target.UI, AccessKey);

            if (AutomationId is not null) Xaml.Automation.AutomationProperties.SetAutomationId(target.UI, AutomationId);

            if (Culture is not null) Xaml.Automation.AutomationProperties.SetCulture(target.UI, Culture.Value);

            if (FullDescription is not null) Xaml.Automation.AutomationProperties.SetFullDescription(target.UI, FullDescription);

            if (HeadingLevel is not null) Xaml.Automation.AutomationProperties.SetHeadingLevel(target.UI, HeadingLevel.Value);

            if (HelpText is not null) Xaml.Automation.AutomationProperties.SetHelpText(target.UI, HelpText);

            if (IsDataValidForForm is not null) Xaml.Automation.AutomationProperties.SetIsDataValidForForm(target.UI, IsDataValidForForm.Value);

            if (IsDialog is not null) Xaml.Automation.AutomationProperties.SetIsDialog(target.UI, IsDialog.Value);

            if (IsPeripheral is not null) Xaml.Automation.AutomationProperties.SetIsPeripheral(target.UI, IsPeripheral.Value);

            if (IsRequiredForForm is not null) Xaml.Automation.AutomationProperties.SetIsRequiredForForm(target.UI, IsRequiredForForm.Value);

            if (ItemStatus is not null) Xaml.Automation.AutomationProperties.SetItemStatus(target.UI, ItemStatus);

            if (ItemType is not null) Xaml.Automation.AutomationProperties.SetItemType(target.UI, ItemType);

            if (LabeledBy is not null) Xaml.Automation.AutomationProperties.SetLabeledBy(target.UI, LabeledBy);

            if (LandmarkType is not null) Xaml.Automation.AutomationProperties.SetLandmarkType(target.UI, LandmarkType.Value);

            if (Level is not null) Xaml.Automation.AutomationProperties.SetLevel(target.UI, Level.Value);

            if (LiveSetting is not null) Xaml.Automation.AutomationProperties.SetLiveSetting(target.UI, LiveSetting.Value);

            if (LocalizedControlType is not null) Xaml.Automation.AutomationProperties.SetLocalizedControlType(target.UI, LocalizedControlType);

            if (LocalizedLandmarkType is not null) Xaml.Automation.AutomationProperties.SetLocalizedLandmarkType(target.UI, LocalizedLandmarkType);

            if (Name is not null) Xaml.Automation.AutomationProperties.SetName(target.UI, Name);

            if (PositionInSet is not null) Xaml.Automation.AutomationProperties.SetPositionInSet(target.UI, PositionInSet.Value);

            if (SizeOfSet is not null) Xaml.Automation.AutomationProperties.SetSizeOfSet(target.UI, SizeOfSet.Value);

            return target;
        }

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties.AutomationControlType"/></summary>
        public static TTarget AutomationProperties_AutomationControlType<TTarget>(this TTarget target, Xaml.Automation.Peers.AutomationControlType value) where TTarget : UIElement
        { Xaml.Automation.AutomationProperties.SetAutomationControlType(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.AutomationProperties.AutomationControlType"/></summary>
        public static DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> AutomationProperties_AutomationControlType<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType>.Get(target, Xaml.Automation.AutomationProperties.AutomationControlTypeProperty);

        /// <summary>Set <see cref="Xaml.Automation.AutomationProperties"/> attached properties</summary>
        public static TTarget AutomationProperties<TTarget>(this TTarget target

            , Xaml.Automation.Peers.AutomationControlType? AutomationControlType = default

            , string AcceleratorKey = default

            , Xaml.Automation.Peers.AccessibilityView? AccessibilityView = default

            , string AccessKey = default

            , string AutomationId = default

            , int? Culture = default

            , string FullDescription = default

            , Xaml.Automation.Peers.AutomationHeadingLevel? HeadingLevel = default

            , string HelpText = default

            , bool? IsDataValidForForm = default

            , bool? IsDialog = default

            , bool? IsPeripheral = default

            , bool? IsRequiredForForm = default

            , string ItemStatus = default

            , string ItemType = default

            , Xaml.UIElement LabeledBy = default

            , Xaml.Automation.Peers.AutomationLandmarkType? LandmarkType = default

            , int? Level = default

            , Xaml.Automation.Peers.AutomationLiveSetting? LiveSetting = default

            , string LocalizedControlType = default

            , string LocalizedLandmarkType = default

            , string Name = default

            , int? PositionInSet = default

            , int? SizeOfSet = default

        ) where TTarget : UIElement
        {
            if (AutomationControlType is not null) Xaml.Automation.AutomationProperties.SetAutomationControlType(target.UI, AutomationControlType.Value);

            if (AcceleratorKey is not null) Xaml.Automation.AutomationProperties.SetAcceleratorKey(target.UI, AcceleratorKey);

            if (AccessibilityView is not null) Xaml.Automation.AutomationProperties.SetAccessibilityView(target.UI, AccessibilityView.Value);

            if (AccessKey is not null) Xaml.Automation.AutomationProperties.SetAccessKey(target.UI, AccessKey);

            if (AutomationId is not null) Xaml.Automation.AutomationProperties.SetAutomationId(target.UI, AutomationId);

            if (Culture is not null) Xaml.Automation.AutomationProperties.SetCulture(target.UI, Culture.Value);

            if (FullDescription is not null) Xaml.Automation.AutomationProperties.SetFullDescription(target.UI, FullDescription);

            if (HeadingLevel is not null) Xaml.Automation.AutomationProperties.SetHeadingLevel(target.UI, HeadingLevel.Value);

            if (HelpText is not null) Xaml.Automation.AutomationProperties.SetHelpText(target.UI, HelpText);

            if (IsDataValidForForm is not null) Xaml.Automation.AutomationProperties.SetIsDataValidForForm(target.UI, IsDataValidForForm.Value);

            if (IsDialog is not null) Xaml.Automation.AutomationProperties.SetIsDialog(target.UI, IsDialog.Value);

            if (IsPeripheral is not null) Xaml.Automation.AutomationProperties.SetIsPeripheral(target.UI, IsPeripheral.Value);

            if (IsRequiredForForm is not null) Xaml.Automation.AutomationProperties.SetIsRequiredForForm(target.UI, IsRequiredForForm.Value);

            if (ItemStatus is not null) Xaml.Automation.AutomationProperties.SetItemStatus(target.UI, ItemStatus);

            if (ItemType is not null) Xaml.Automation.AutomationProperties.SetItemType(target.UI, ItemType);

            if (LabeledBy is not null) Xaml.Automation.AutomationProperties.SetLabeledBy(target.UI, LabeledBy);

            if (LandmarkType is not null) Xaml.Automation.AutomationProperties.SetLandmarkType(target.UI, LandmarkType.Value);

            if (Level is not null) Xaml.Automation.AutomationProperties.SetLevel(target.UI, Level.Value);

            if (LiveSetting is not null) Xaml.Automation.AutomationProperties.SetLiveSetting(target.UI, LiveSetting.Value);

            if (LocalizedControlType is not null) Xaml.Automation.AutomationProperties.SetLocalizedControlType(target.UI, LocalizedControlType);

            if (LocalizedLandmarkType is not null) Xaml.Automation.AutomationProperties.SetLocalizedLandmarkType(target.UI, LocalizedLandmarkType);

            if (Name is not null) Xaml.Automation.AutomationProperties.SetName(target.UI, Name);

            if (PositionInSet is not null) Xaml.Automation.AutomationProperties.SetPositionInSet(target.UI, PositionInSet.Value);

            if (SizeOfSet is not null) Xaml.Automation.AutomationProperties.SetSizeOfSet(target.UI, SizeOfSet.Value);

            return target;
        }
    }
}

namespace CSharpMarkup.WinUI // AnimatedVisualPlayerAutomationPeer
{
    public partial class AnimatedVisualPlayerAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.AnimatedVisualPlayerAutomationPeer>
    {
        Xaml.Automation.Peers.AnimatedVisualPlayerAutomationPeer ui;

        public new Xaml.Automation.Peers.AnimatedVisualPlayerAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public AnimatedVisualPlayerAutomationPeer Invoke(Action<Xaml.Automation.Peers.AnimatedVisualPlayerAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected AnimatedVisualPlayerAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // AppBarAutomationPeer
{
    public partial class AppBarAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.AppBarAutomationPeer>
    {
        Xaml.Automation.Peers.AppBarAutomationPeer ui;

        public new Xaml.Automation.Peers.AppBarAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public AppBarAutomationPeer Invoke(Action<Xaml.Automation.Peers.AppBarAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected AppBarAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // AppBarButtonAutomationPeer
{
    public partial class AppBarButtonAutomationPeer : ButtonAutomationPeer, IUI<Xaml.Automation.Peers.AppBarButtonAutomationPeer>
    {
        Xaml.Automation.Peers.AppBarButtonAutomationPeer ui;

        public new Xaml.Automation.Peers.AppBarButtonAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public AppBarButtonAutomationPeer Invoke(Action<Xaml.Automation.Peers.AppBarButtonAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected AppBarButtonAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // AppBarToggleButtonAutomationPeer
{
    public partial class AppBarToggleButtonAutomationPeer : ToggleButtonAutomationPeer, IUI<Xaml.Automation.Peers.AppBarToggleButtonAutomationPeer>
    {
        Xaml.Automation.Peers.AppBarToggleButtonAutomationPeer ui;

        public new Xaml.Automation.Peers.AppBarToggleButtonAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public AppBarToggleButtonAutomationPeer Invoke(Action<Xaml.Automation.Peers.AppBarToggleButtonAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected AppBarToggleButtonAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // AutomationPeer
{
    public partial class AutomationPeer : DependencyObject, IUI<Xaml.Automation.Peers.AutomationPeer>
    {
        Xaml.Automation.Peers.AutomationPeer ui;

        public new Xaml.Automation.Peers.AutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public AutomationPeer Invoke(Action<Xaml.Automation.Peers.AutomationPeer> action) { action?.Invoke(UI); return this; }

        protected AutomationPeer() { }
    }

    public static partial class AutomationPeerExtensions
    {
        /// <summary>Set <see cref="Xaml.Automation.Peers.AutomationPeer.EventsSource"/></summary>
        public static TView EventsSource<TView>(this TView view, Xaml.Automation.Peers.AutomationPeer value) where TView : AutomationPeer { view.UI.EventsSource = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // AutomationPeerAnnotation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Automation.Peers.AutomationPeerAnnotation"/></summary>
        public static AutomationPeerAnnotation AutomationPeerAnnotation(Xaml.Automation.Peers.AutomationPeer Peer = default, Xaml.Automation.AnnotationType? Type = default)
        {
            var ui = new Xaml.Automation.Peers.AutomationPeerAnnotation();
            if (Peer is not null) ui.Peer = Peer;
            if (Type is not null) ui.Type = Type.Value;
            return CSharpMarkup.WinUI.AutomationPeerAnnotation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Automation.Peers.AutomationPeerAnnotation"/></summary>
        public static AutomationPeerAnnotation AutomationPeerAnnotation()
        {
            var ui = new Xaml.Automation.Peers.AutomationPeerAnnotation();
            return CSharpMarkup.WinUI.AutomationPeerAnnotation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Automation.Peers.AutomationPeerAnnotation"/></summary>
        public static AutomationPeerAnnotation AutomationPeerAnnotation(Xaml.Automation.AnnotationType type, Xaml.Automation.Peers.AutomationPeer peer)
        {
            var ui = new Xaml.Automation.Peers.AutomationPeerAnnotation(type, peer);
            return CSharpMarkup.WinUI.AutomationPeerAnnotation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Automation.Peers.AutomationPeerAnnotation"/></summary>
        public static AutomationPeerAnnotation AutomationPeerAnnotation(Xaml.Automation.AnnotationType type)
        {
            var ui = new Xaml.Automation.Peers.AutomationPeerAnnotation(type);
            return CSharpMarkup.WinUI.AutomationPeerAnnotation.StartChain(ui);
        }
    }

    public partial class AutomationPeerAnnotation : DependencyObject, IUI<Xaml.Automation.Peers.AutomationPeerAnnotation>
    {
        static AutomationPeerAnnotation instance;

        internal static AutomationPeerAnnotation StartChain(Xaml.Automation.Peers.AutomationPeerAnnotation ui)
        {
            if (instance == null) instance = new AutomationPeerAnnotation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Automation.Peers.AutomationPeerAnnotation ui;

        public new Xaml.Automation.Peers.AutomationPeerAnnotation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Automation.Peers.AutomationPeerAnnotation(AutomationPeerAnnotation view) => view?.UI;

        public static implicit operator AutomationPeerAnnotation(Xaml.Automation.Peers.AutomationPeerAnnotation ui) => AutomationPeerAnnotation.StartChain(ui);

        public AutomationPeerAnnotation Invoke(Action<Xaml.Automation.Peers.AutomationPeerAnnotation> action) { action?.Invoke(UI); return this; }

        protected AutomationPeerAnnotation() { }
    }

    public static partial class AutomationPeerAnnotationExtensions
    {
        /// <summary>Set <see cref="Xaml.Automation.Peers.AutomationPeerAnnotation.Peer"/></summary>
        public static TView Peer<TView>(this TView view, Xaml.Automation.Peers.AutomationPeer value) where TView : AutomationPeerAnnotation { view.UI.Peer = value; return view; }

        /// <summary>Set <see cref="Xaml.Automation.Peers.AutomationPeerAnnotation.Type"/></summary>
        public static TView Type<TView>(this TView view, Xaml.Automation.AnnotationType value) where TView : AutomationPeerAnnotation { view.UI.Type = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.Peers.AutomationPeerAnnotation.Peer"/></summary>
        public static DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationPeer> Peer<TTarget>(this TTarget target) where TTarget : AutomationPeerAnnotation
        => DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationPeer>.Get(target, Xaml.Automation.Peers.AutomationPeerAnnotation.PeerProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Automation.Peers.AutomationPeerAnnotation.Type"/></summary>
        public static DependencyProperty<TTarget, Xaml.Automation.AnnotationType> Type<TTarget>(this TTarget target) where TTarget : AutomationPeerAnnotation
        => DependencyProperty<TTarget, Xaml.Automation.AnnotationType>.Get(target, Xaml.Automation.Peers.AutomationPeerAnnotation.TypeProperty);
    }
}

namespace CSharpMarkup.WinUI // AutoSuggestBoxAutomationPeer
{
    public partial class AutoSuggestBoxAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.AutoSuggestBoxAutomationPeer>
    {
        Xaml.Automation.Peers.AutoSuggestBoxAutomationPeer ui;

        public new Xaml.Automation.Peers.AutoSuggestBoxAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public AutoSuggestBoxAutomationPeer Invoke(Action<Xaml.Automation.Peers.AutoSuggestBoxAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected AutoSuggestBoxAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // BreadcrumbBarItemAutomationPeer
{
    public partial class BreadcrumbBarItemAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.BreadcrumbBarItemAutomationPeer>
    {
        Xaml.Automation.Peers.BreadcrumbBarItemAutomationPeer ui;

        public new Xaml.Automation.Peers.BreadcrumbBarItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public BreadcrumbBarItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.BreadcrumbBarItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected BreadcrumbBarItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ButtonAutomationPeer
{
    public partial class ButtonAutomationPeer : ButtonBaseAutomationPeer, IUI<Xaml.Automation.Peers.ButtonAutomationPeer>
    {
        Xaml.Automation.Peers.ButtonAutomationPeer ui;

        public new Xaml.Automation.Peers.ButtonAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ButtonAutomationPeer Invoke(Action<Xaml.Automation.Peers.ButtonAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ButtonAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ButtonBaseAutomationPeer
{
    public partial class ButtonBaseAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ButtonBaseAutomationPeer>
    {
        Xaml.Automation.Peers.ButtonBaseAutomationPeer ui;

        public new Xaml.Automation.Peers.ButtonBaseAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ButtonBaseAutomationPeer Invoke(Action<Xaml.Automation.Peers.ButtonBaseAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ButtonBaseAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // CalendarDatePickerAutomationPeer
{
    public partial class CalendarDatePickerAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.CalendarDatePickerAutomationPeer>
    {
        Xaml.Automation.Peers.CalendarDatePickerAutomationPeer ui;

        public new Xaml.Automation.Peers.CalendarDatePickerAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public CalendarDatePickerAutomationPeer Invoke(Action<Xaml.Automation.Peers.CalendarDatePickerAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected CalendarDatePickerAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // CheckBoxAutomationPeer
{
    public partial class CheckBoxAutomationPeer : ToggleButtonAutomationPeer, IUI<Xaml.Automation.Peers.CheckBoxAutomationPeer>
    {
        Xaml.Automation.Peers.CheckBoxAutomationPeer ui;

        public new Xaml.Automation.Peers.CheckBoxAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public CheckBoxAutomationPeer Invoke(Action<Xaml.Automation.Peers.CheckBoxAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected CheckBoxAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ColorPickerSliderAutomationPeer
{
    public partial class ColorPickerSliderAutomationPeer : SliderAutomationPeer, IUI<Xaml.Automation.Peers.ColorPickerSliderAutomationPeer>
    {
        Xaml.Automation.Peers.ColorPickerSliderAutomationPeer ui;

        public new Xaml.Automation.Peers.ColorPickerSliderAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ColorPickerSliderAutomationPeer Invoke(Action<Xaml.Automation.Peers.ColorPickerSliderAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ColorPickerSliderAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ColorSpectrumAutomationPeer
{
    public partial class ColorSpectrumAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ColorSpectrumAutomationPeer>
    {
        Xaml.Automation.Peers.ColorSpectrumAutomationPeer ui;

        public new Xaml.Automation.Peers.ColorSpectrumAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ColorSpectrumAutomationPeer Invoke(Action<Xaml.Automation.Peers.ColorSpectrumAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ColorSpectrumAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ComboBoxAutomationPeer
{
    public partial class ComboBoxAutomationPeer : SelectorAutomationPeer, IUI<Xaml.Automation.Peers.ComboBoxAutomationPeer>
    {
        Xaml.Automation.Peers.ComboBoxAutomationPeer ui;

        public new Xaml.Automation.Peers.ComboBoxAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ComboBoxAutomationPeer Invoke(Action<Xaml.Automation.Peers.ComboBoxAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ComboBoxAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ComboBoxItemAutomationPeer
{
    public partial class ComboBoxItemAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ComboBoxItemAutomationPeer>
    {
        Xaml.Automation.Peers.ComboBoxItemAutomationPeer ui;

        public new Xaml.Automation.Peers.ComboBoxItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ComboBoxItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.ComboBoxItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ComboBoxItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ComboBoxItemDataAutomationPeer
{
    public partial class ComboBoxItemDataAutomationPeer : SelectorItemAutomationPeer, IUI<Xaml.Automation.Peers.ComboBoxItemDataAutomationPeer>
    {
        Xaml.Automation.Peers.ComboBoxItemDataAutomationPeer ui;

        public new Xaml.Automation.Peers.ComboBoxItemDataAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ComboBoxItemDataAutomationPeer Invoke(Action<Xaml.Automation.Peers.ComboBoxItemDataAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ComboBoxItemDataAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // DatePickerAutomationPeer
{
    public partial class DatePickerAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.DatePickerAutomationPeer>
    {
        Xaml.Automation.Peers.DatePickerAutomationPeer ui;

        public new Xaml.Automation.Peers.DatePickerAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public DatePickerAutomationPeer Invoke(Action<Xaml.Automation.Peers.DatePickerAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected DatePickerAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // DatePickerFlyoutPresenterAutomationPeer
{
    public partial class DatePickerFlyoutPresenterAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.DatePickerFlyoutPresenterAutomationPeer>
    {
        Xaml.Automation.Peers.DatePickerFlyoutPresenterAutomationPeer ui;

        public new Xaml.Automation.Peers.DatePickerFlyoutPresenterAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public DatePickerFlyoutPresenterAutomationPeer Invoke(Action<Xaml.Automation.Peers.DatePickerFlyoutPresenterAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected DatePickerFlyoutPresenterAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // DropDownButtonAutomationPeer
{
    public partial class DropDownButtonAutomationPeer : ButtonAutomationPeer, IUI<Xaml.Automation.Peers.DropDownButtonAutomationPeer>
    {
        Xaml.Automation.Peers.DropDownButtonAutomationPeer ui;

        public new Xaml.Automation.Peers.DropDownButtonAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public DropDownButtonAutomationPeer Invoke(Action<Xaml.Automation.Peers.DropDownButtonAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected DropDownButtonAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ExpanderAutomationPeer
{
    public partial class ExpanderAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ExpanderAutomationPeer>
    {
        Xaml.Automation.Peers.ExpanderAutomationPeer ui;

        public new Xaml.Automation.Peers.ExpanderAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ExpanderAutomationPeer Invoke(Action<Xaml.Automation.Peers.ExpanderAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ExpanderAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // FlipViewAutomationPeer
{
    public partial class FlipViewAutomationPeer : SelectorAutomationPeer, IUI<Xaml.Automation.Peers.FlipViewAutomationPeer>
    {
        Xaml.Automation.Peers.FlipViewAutomationPeer ui;

        public new Xaml.Automation.Peers.FlipViewAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public FlipViewAutomationPeer Invoke(Action<Xaml.Automation.Peers.FlipViewAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected FlipViewAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // FlipViewItemAutomationPeer
{
    public partial class FlipViewItemAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.FlipViewItemAutomationPeer>
    {
        Xaml.Automation.Peers.FlipViewItemAutomationPeer ui;

        public new Xaml.Automation.Peers.FlipViewItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public FlipViewItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.FlipViewItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected FlipViewItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // FlipViewItemDataAutomationPeer
{
    public partial class FlipViewItemDataAutomationPeer : SelectorItemAutomationPeer, IUI<Xaml.Automation.Peers.FlipViewItemDataAutomationPeer>
    {
        Xaml.Automation.Peers.FlipViewItemDataAutomationPeer ui;

        public new Xaml.Automation.Peers.FlipViewItemDataAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public FlipViewItemDataAutomationPeer Invoke(Action<Xaml.Automation.Peers.FlipViewItemDataAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected FlipViewItemDataAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // FlyoutPresenterAutomationPeer
{
    public partial class FlyoutPresenterAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.FlyoutPresenterAutomationPeer>
    {
        Xaml.Automation.Peers.FlyoutPresenterAutomationPeer ui;

        public new Xaml.Automation.Peers.FlyoutPresenterAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public FlyoutPresenterAutomationPeer Invoke(Action<Xaml.Automation.Peers.FlyoutPresenterAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected FlyoutPresenterAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // FrameworkElementAutomationPeer
{
    public partial class FrameworkElementAutomationPeer : AutomationPeer, IUI<Xaml.Automation.Peers.FrameworkElementAutomationPeer>
    {
        Xaml.Automation.Peers.FrameworkElementAutomationPeer ui;

        public new Xaml.Automation.Peers.FrameworkElementAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public FrameworkElementAutomationPeer Invoke(Action<Xaml.Automation.Peers.FrameworkElementAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected FrameworkElementAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // GridViewAutomationPeer
{
    public partial class GridViewAutomationPeer : ListViewBaseAutomationPeer, IUI<Xaml.Automation.Peers.GridViewAutomationPeer>
    {
        Xaml.Automation.Peers.GridViewAutomationPeer ui;

        public new Xaml.Automation.Peers.GridViewAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public GridViewAutomationPeer Invoke(Action<Xaml.Automation.Peers.GridViewAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected GridViewAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // GridViewHeaderItemAutomationPeer
{
    public partial class GridViewHeaderItemAutomationPeer : ListViewBaseHeaderItemAutomationPeer, IUI<Xaml.Automation.Peers.GridViewHeaderItemAutomationPeer>
    {
        Xaml.Automation.Peers.GridViewHeaderItemAutomationPeer ui;

        public new Xaml.Automation.Peers.GridViewHeaderItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public GridViewHeaderItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.GridViewHeaderItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected GridViewHeaderItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // GridViewItemAutomationPeer
{
    public partial class GridViewItemAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.GridViewItemAutomationPeer>
    {
        Xaml.Automation.Peers.GridViewItemAutomationPeer ui;

        public new Xaml.Automation.Peers.GridViewItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public GridViewItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.GridViewItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected GridViewItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // GridViewItemDataAutomationPeer
{
    public partial class GridViewItemDataAutomationPeer : SelectorItemAutomationPeer, IUI<Xaml.Automation.Peers.GridViewItemDataAutomationPeer>
    {
        Xaml.Automation.Peers.GridViewItemDataAutomationPeer ui;

        public new Xaml.Automation.Peers.GridViewItemDataAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public GridViewItemDataAutomationPeer Invoke(Action<Xaml.Automation.Peers.GridViewItemDataAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected GridViewItemDataAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // GroupItemAutomationPeer
{
    public partial class GroupItemAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.GroupItemAutomationPeer>
    {
        Xaml.Automation.Peers.GroupItemAutomationPeer ui;

        public new Xaml.Automation.Peers.GroupItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public GroupItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.GroupItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected GroupItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // HubAutomationPeer
{
    public partial class HubAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.HubAutomationPeer>
    {
        Xaml.Automation.Peers.HubAutomationPeer ui;

        public new Xaml.Automation.Peers.HubAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public HubAutomationPeer Invoke(Action<Xaml.Automation.Peers.HubAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected HubAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // HubSectionAutomationPeer
{
    public partial class HubSectionAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.HubSectionAutomationPeer>
    {
        Xaml.Automation.Peers.HubSectionAutomationPeer ui;

        public new Xaml.Automation.Peers.HubSectionAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public HubSectionAutomationPeer Invoke(Action<Xaml.Automation.Peers.HubSectionAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected HubSectionAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // HyperlinkButtonAutomationPeer
{
    public partial class HyperlinkButtonAutomationPeer : ButtonBaseAutomationPeer, IUI<Xaml.Automation.Peers.HyperlinkButtonAutomationPeer>
    {
        Xaml.Automation.Peers.HyperlinkButtonAutomationPeer ui;

        public new Xaml.Automation.Peers.HyperlinkButtonAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public HyperlinkButtonAutomationPeer Invoke(Action<Xaml.Automation.Peers.HyperlinkButtonAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected HyperlinkButtonAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ImageAutomationPeer
{
    public partial class ImageAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ImageAutomationPeer>
    {
        Xaml.Automation.Peers.ImageAutomationPeer ui;

        public new Xaml.Automation.Peers.ImageAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ImageAutomationPeer Invoke(Action<Xaml.Automation.Peers.ImageAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ImageAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // InfoBarAutomationPeer
{
    public partial class InfoBarAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.InfoBarAutomationPeer>
    {
        Xaml.Automation.Peers.InfoBarAutomationPeer ui;

        public new Xaml.Automation.Peers.InfoBarAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public InfoBarAutomationPeer Invoke(Action<Xaml.Automation.Peers.InfoBarAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected InfoBarAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ItemAutomationPeer
{
    public partial class ItemAutomationPeer : AutomationPeer, IUI<Xaml.Automation.Peers.ItemAutomationPeer>
    {
        Xaml.Automation.Peers.ItemAutomationPeer ui;

        public new Xaml.Automation.Peers.ItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.ItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ItemContainerAutomationPeer
{
    public partial class ItemContainerAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ItemContainerAutomationPeer>
    {
        Xaml.Automation.Peers.ItemContainerAutomationPeer ui;

        public new Xaml.Automation.Peers.ItemContainerAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ItemContainerAutomationPeer Invoke(Action<Xaml.Automation.Peers.ItemContainerAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ItemContainerAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ItemsControlAutomationPeer
{
    public partial class ItemsControlAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ItemsControlAutomationPeer>
    {
        Xaml.Automation.Peers.ItemsControlAutomationPeer ui;

        public new Xaml.Automation.Peers.ItemsControlAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ItemsControlAutomationPeer Invoke(Action<Xaml.Automation.Peers.ItemsControlAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ItemsControlAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ItemsViewAutomationPeer
{
    public partial class ItemsViewAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ItemsViewAutomationPeer>
    {
        Xaml.Automation.Peers.ItemsViewAutomationPeer ui;

        public new Xaml.Automation.Peers.ItemsViewAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ItemsViewAutomationPeer Invoke(Action<Xaml.Automation.Peers.ItemsViewAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ItemsViewAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ListBoxAutomationPeer
{
    public partial class ListBoxAutomationPeer : SelectorAutomationPeer, IUI<Xaml.Automation.Peers.ListBoxAutomationPeer>
    {
        Xaml.Automation.Peers.ListBoxAutomationPeer ui;

        public new Xaml.Automation.Peers.ListBoxAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ListBoxAutomationPeer Invoke(Action<Xaml.Automation.Peers.ListBoxAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ListBoxAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ListBoxItemAutomationPeer
{
    public partial class ListBoxItemAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ListBoxItemAutomationPeer>
    {
        Xaml.Automation.Peers.ListBoxItemAutomationPeer ui;

        public new Xaml.Automation.Peers.ListBoxItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ListBoxItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.ListBoxItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ListBoxItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ListBoxItemDataAutomationPeer
{
    public partial class ListBoxItemDataAutomationPeer : SelectorItemAutomationPeer, IUI<Xaml.Automation.Peers.ListBoxItemDataAutomationPeer>
    {
        Xaml.Automation.Peers.ListBoxItemDataAutomationPeer ui;

        public new Xaml.Automation.Peers.ListBoxItemDataAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ListBoxItemDataAutomationPeer Invoke(Action<Xaml.Automation.Peers.ListBoxItemDataAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ListBoxItemDataAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ListPickerFlyoutPresenterAutomationPeer
{
    public partial class ListPickerFlyoutPresenterAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ListPickerFlyoutPresenterAutomationPeer>
    {
        Xaml.Automation.Peers.ListPickerFlyoutPresenterAutomationPeer ui;

        public new Xaml.Automation.Peers.ListPickerFlyoutPresenterAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ListPickerFlyoutPresenterAutomationPeer Invoke(Action<Xaml.Automation.Peers.ListPickerFlyoutPresenterAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ListPickerFlyoutPresenterAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ListViewAutomationPeer
{
    public partial class ListViewAutomationPeer : ListViewBaseAutomationPeer, IUI<Xaml.Automation.Peers.ListViewAutomationPeer>
    {
        Xaml.Automation.Peers.ListViewAutomationPeer ui;

        public new Xaml.Automation.Peers.ListViewAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ListViewAutomationPeer Invoke(Action<Xaml.Automation.Peers.ListViewAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ListViewAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ListViewBaseAutomationPeer
{
    public partial class ListViewBaseAutomationPeer : SelectorAutomationPeer, IUI<Xaml.Automation.Peers.ListViewBaseAutomationPeer>
    {
        Xaml.Automation.Peers.ListViewBaseAutomationPeer ui;

        public new Xaml.Automation.Peers.ListViewBaseAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ListViewBaseAutomationPeer Invoke(Action<Xaml.Automation.Peers.ListViewBaseAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ListViewBaseAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ListViewBaseHeaderItemAutomationPeer
{
    public partial class ListViewBaseHeaderItemAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ListViewBaseHeaderItemAutomationPeer>
    {
        Xaml.Automation.Peers.ListViewBaseHeaderItemAutomationPeer ui;

        public new Xaml.Automation.Peers.ListViewBaseHeaderItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ListViewBaseHeaderItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.ListViewBaseHeaderItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ListViewBaseHeaderItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ListViewHeaderItemAutomationPeer
{
    public partial class ListViewHeaderItemAutomationPeer : ListViewBaseHeaderItemAutomationPeer, IUI<Xaml.Automation.Peers.ListViewHeaderItemAutomationPeer>
    {
        Xaml.Automation.Peers.ListViewHeaderItemAutomationPeer ui;

        public new Xaml.Automation.Peers.ListViewHeaderItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ListViewHeaderItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.ListViewHeaderItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ListViewHeaderItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ListViewItemAutomationPeer
{
    public partial class ListViewItemAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ListViewItemAutomationPeer>
    {
        Xaml.Automation.Peers.ListViewItemAutomationPeer ui;

        public new Xaml.Automation.Peers.ListViewItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ListViewItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.ListViewItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ListViewItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ListViewItemDataAutomationPeer
{
    public partial class ListViewItemDataAutomationPeer : SelectorItemAutomationPeer, IUI<Xaml.Automation.Peers.ListViewItemDataAutomationPeer>
    {
        Xaml.Automation.Peers.ListViewItemDataAutomationPeer ui;

        public new Xaml.Automation.Peers.ListViewItemDataAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ListViewItemDataAutomationPeer Invoke(Action<Xaml.Automation.Peers.ListViewItemDataAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ListViewItemDataAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // LoopingSelectorAutomationPeer
{
    public partial class LoopingSelectorAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.LoopingSelectorAutomationPeer>
    {
        Xaml.Automation.Peers.LoopingSelectorAutomationPeer ui;

        public new Xaml.Automation.Peers.LoopingSelectorAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public LoopingSelectorAutomationPeer Invoke(Action<Xaml.Automation.Peers.LoopingSelectorAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected LoopingSelectorAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // LoopingSelectorItemAutomationPeer
{
    public partial class LoopingSelectorItemAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.LoopingSelectorItemAutomationPeer>
    {
        Xaml.Automation.Peers.LoopingSelectorItemAutomationPeer ui;

        public new Xaml.Automation.Peers.LoopingSelectorItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public LoopingSelectorItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.LoopingSelectorItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected LoopingSelectorItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // LoopingSelectorItemDataAutomationPeer
{
    public partial class LoopingSelectorItemDataAutomationPeer : AutomationPeer, IUI<Xaml.Automation.Peers.LoopingSelectorItemDataAutomationPeer>
    {
        Xaml.Automation.Peers.LoopingSelectorItemDataAutomationPeer ui;

        public new Xaml.Automation.Peers.LoopingSelectorItemDataAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public LoopingSelectorItemDataAutomationPeer Invoke(Action<Xaml.Automation.Peers.LoopingSelectorItemDataAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected LoopingSelectorItemDataAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // MediaPlayerElementAutomationPeer
{
    public partial class MediaPlayerElementAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.MediaPlayerElementAutomationPeer>
    {
        Xaml.Automation.Peers.MediaPlayerElementAutomationPeer ui;

        public new Xaml.Automation.Peers.MediaPlayerElementAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public MediaPlayerElementAutomationPeer Invoke(Action<Xaml.Automation.Peers.MediaPlayerElementAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected MediaPlayerElementAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // MediaTransportControlsAutomationPeer
{
    public partial class MediaTransportControlsAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.MediaTransportControlsAutomationPeer>
    {
        Xaml.Automation.Peers.MediaTransportControlsAutomationPeer ui;

        public new Xaml.Automation.Peers.MediaTransportControlsAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public MediaTransportControlsAutomationPeer Invoke(Action<Xaml.Automation.Peers.MediaTransportControlsAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected MediaTransportControlsAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // MenuBarAutomationPeer
{
    public partial class MenuBarAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.MenuBarAutomationPeer>
    {
        Xaml.Automation.Peers.MenuBarAutomationPeer ui;

        public new Xaml.Automation.Peers.MenuBarAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public MenuBarAutomationPeer Invoke(Action<Xaml.Automation.Peers.MenuBarAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected MenuBarAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // MenuBarItemAutomationPeer
{
    public partial class MenuBarItemAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.MenuBarItemAutomationPeer>
    {
        Xaml.Automation.Peers.MenuBarItemAutomationPeer ui;

        public new Xaml.Automation.Peers.MenuBarItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public MenuBarItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.MenuBarItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected MenuBarItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // MenuFlyoutItemAutomationPeer
{
    public partial class MenuFlyoutItemAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.MenuFlyoutItemAutomationPeer>
    {
        Xaml.Automation.Peers.MenuFlyoutItemAutomationPeer ui;

        public new Xaml.Automation.Peers.MenuFlyoutItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public MenuFlyoutItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.MenuFlyoutItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected MenuFlyoutItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // MenuFlyoutPresenterAutomationPeer
{
    public partial class MenuFlyoutPresenterAutomationPeer : ItemsControlAutomationPeer, IUI<Xaml.Automation.Peers.MenuFlyoutPresenterAutomationPeer>
    {
        Xaml.Automation.Peers.MenuFlyoutPresenterAutomationPeer ui;

        public new Xaml.Automation.Peers.MenuFlyoutPresenterAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public MenuFlyoutPresenterAutomationPeer Invoke(Action<Xaml.Automation.Peers.MenuFlyoutPresenterAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected MenuFlyoutPresenterAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // NavigationViewAutomationPeer
{
    public partial class NavigationViewAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.NavigationViewAutomationPeer>
    {
        Xaml.Automation.Peers.NavigationViewAutomationPeer ui;

        public new Xaml.Automation.Peers.NavigationViewAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public NavigationViewAutomationPeer Invoke(Action<Xaml.Automation.Peers.NavigationViewAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected NavigationViewAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // NavigationViewItemAutomationPeer
{
    public partial class NavigationViewItemAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.NavigationViewItemAutomationPeer>
    {
        Xaml.Automation.Peers.NavigationViewItemAutomationPeer ui;

        public new Xaml.Automation.Peers.NavigationViewItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public NavigationViewItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.NavigationViewItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected NavigationViewItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // NumberBoxAutomationPeer
{
    public partial class NumberBoxAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.NumberBoxAutomationPeer>
    {
        Xaml.Automation.Peers.NumberBoxAutomationPeer ui;

        public new Xaml.Automation.Peers.NumberBoxAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public NumberBoxAutomationPeer Invoke(Action<Xaml.Automation.Peers.NumberBoxAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected NumberBoxAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // PasswordBoxAutomationPeer
{
    public partial class PasswordBoxAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.PasswordBoxAutomationPeer>
    {
        Xaml.Automation.Peers.PasswordBoxAutomationPeer ui;

        public new Xaml.Automation.Peers.PasswordBoxAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PasswordBoxAutomationPeer Invoke(Action<Xaml.Automation.Peers.PasswordBoxAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected PasswordBoxAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // PersonPictureAutomationPeer
{
    public partial class PersonPictureAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.PersonPictureAutomationPeer>
    {
        Xaml.Automation.Peers.PersonPictureAutomationPeer ui;

        public new Xaml.Automation.Peers.PersonPictureAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PersonPictureAutomationPeer Invoke(Action<Xaml.Automation.Peers.PersonPictureAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected PersonPictureAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // PickerFlyoutPresenterAutomationPeer
{
    public partial class PickerFlyoutPresenterAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.PickerFlyoutPresenterAutomationPeer>
    {
        Xaml.Automation.Peers.PickerFlyoutPresenterAutomationPeer ui;

        public new Xaml.Automation.Peers.PickerFlyoutPresenterAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PickerFlyoutPresenterAutomationPeer Invoke(Action<Xaml.Automation.Peers.PickerFlyoutPresenterAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected PickerFlyoutPresenterAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // PipsPagerAutomationPeer
{
    public partial class PipsPagerAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.PipsPagerAutomationPeer>
    {
        Xaml.Automation.Peers.PipsPagerAutomationPeer ui;

        public new Xaml.Automation.Peers.PipsPagerAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PipsPagerAutomationPeer Invoke(Action<Xaml.Automation.Peers.PipsPagerAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected PipsPagerAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // PivotAutomationPeer
{
    public partial class PivotAutomationPeer : ItemsControlAutomationPeer, IUI<Xaml.Automation.Peers.PivotAutomationPeer>
    {
        Xaml.Automation.Peers.PivotAutomationPeer ui;

        public new Xaml.Automation.Peers.PivotAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PivotAutomationPeer Invoke(Action<Xaml.Automation.Peers.PivotAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected PivotAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // PivotItemAutomationPeer
{
    public partial class PivotItemAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.PivotItemAutomationPeer>
    {
        Xaml.Automation.Peers.PivotItemAutomationPeer ui;

        public new Xaml.Automation.Peers.PivotItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PivotItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.PivotItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected PivotItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // PivotItemDataAutomationPeer
{
    public partial class PivotItemDataAutomationPeer : ItemAutomationPeer, IUI<Xaml.Automation.Peers.PivotItemDataAutomationPeer>
    {
        Xaml.Automation.Peers.PivotItemDataAutomationPeer ui;

        public new Xaml.Automation.Peers.PivotItemDataAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PivotItemDataAutomationPeer Invoke(Action<Xaml.Automation.Peers.PivotItemDataAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected PivotItemDataAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ProgressBarAutomationPeer
{
    public partial class ProgressBarAutomationPeer : RangeBaseAutomationPeer, IUI<Xaml.Automation.Peers.ProgressBarAutomationPeer>
    {
        Xaml.Automation.Peers.ProgressBarAutomationPeer ui;

        public new Xaml.Automation.Peers.ProgressBarAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ProgressBarAutomationPeer Invoke(Action<Xaml.Automation.Peers.ProgressBarAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ProgressBarAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ProgressRingAutomationPeer
{
    public partial class ProgressRingAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ProgressRingAutomationPeer>
    {
        Xaml.Automation.Peers.ProgressRingAutomationPeer ui;

        public new Xaml.Automation.Peers.ProgressRingAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ProgressRingAutomationPeer Invoke(Action<Xaml.Automation.Peers.ProgressRingAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ProgressRingAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // RadioButtonAutomationPeer
{
    public partial class RadioButtonAutomationPeer : ToggleButtonAutomationPeer, IUI<Xaml.Automation.Peers.RadioButtonAutomationPeer>
    {
        Xaml.Automation.Peers.RadioButtonAutomationPeer ui;

        public new Xaml.Automation.Peers.RadioButtonAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public RadioButtonAutomationPeer Invoke(Action<Xaml.Automation.Peers.RadioButtonAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected RadioButtonAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // RadioButtonsAutomationPeer
{
    public partial class RadioButtonsAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.RadioButtonsAutomationPeer>
    {
        Xaml.Automation.Peers.RadioButtonsAutomationPeer ui;

        public new Xaml.Automation.Peers.RadioButtonsAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public RadioButtonsAutomationPeer Invoke(Action<Xaml.Automation.Peers.RadioButtonsAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected RadioButtonsAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // RangeBaseAutomationPeer
{
    public partial class RangeBaseAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.RangeBaseAutomationPeer>
    {
        Xaml.Automation.Peers.RangeBaseAutomationPeer ui;

        public new Xaml.Automation.Peers.RangeBaseAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public RangeBaseAutomationPeer Invoke(Action<Xaml.Automation.Peers.RangeBaseAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected RangeBaseAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // RatingControlAutomationPeer
{
    public partial class RatingControlAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.RatingControlAutomationPeer>
    {
        Xaml.Automation.Peers.RatingControlAutomationPeer ui;

        public new Xaml.Automation.Peers.RatingControlAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public RatingControlAutomationPeer Invoke(Action<Xaml.Automation.Peers.RatingControlAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected RatingControlAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // RepeatButtonAutomationPeer
{
    public partial class RepeatButtonAutomationPeer : ButtonBaseAutomationPeer, IUI<Xaml.Automation.Peers.RepeatButtonAutomationPeer>
    {
        Xaml.Automation.Peers.RepeatButtonAutomationPeer ui;

        public new Xaml.Automation.Peers.RepeatButtonAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public RepeatButtonAutomationPeer Invoke(Action<Xaml.Automation.Peers.RepeatButtonAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected RepeatButtonAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // RepeaterAutomationPeer
{
    public partial class RepeaterAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.RepeaterAutomationPeer>
    {
        Xaml.Automation.Peers.RepeaterAutomationPeer ui;

        public new Xaml.Automation.Peers.RepeaterAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public RepeaterAutomationPeer Invoke(Action<Xaml.Automation.Peers.RepeaterAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected RepeaterAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // RichEditBoxAutomationPeer
{
    public partial class RichEditBoxAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.RichEditBoxAutomationPeer>
    {
        Xaml.Automation.Peers.RichEditBoxAutomationPeer ui;

        public new Xaml.Automation.Peers.RichEditBoxAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public RichEditBoxAutomationPeer Invoke(Action<Xaml.Automation.Peers.RichEditBoxAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected RichEditBoxAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // RichTextBlockAutomationPeer
{
    public partial class RichTextBlockAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.RichTextBlockAutomationPeer>
    {
        Xaml.Automation.Peers.RichTextBlockAutomationPeer ui;

        public new Xaml.Automation.Peers.RichTextBlockAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public RichTextBlockAutomationPeer Invoke(Action<Xaml.Automation.Peers.RichTextBlockAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected RichTextBlockAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // RichTextBlockOverflowAutomationPeer
{
    public partial class RichTextBlockOverflowAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.RichTextBlockOverflowAutomationPeer>
    {
        Xaml.Automation.Peers.RichTextBlockOverflowAutomationPeer ui;

        public new Xaml.Automation.Peers.RichTextBlockOverflowAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public RichTextBlockOverflowAutomationPeer Invoke(Action<Xaml.Automation.Peers.RichTextBlockOverflowAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected RichTextBlockOverflowAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ScrollBarAutomationPeer
{
    public partial class ScrollBarAutomationPeer : RangeBaseAutomationPeer, IUI<Xaml.Automation.Peers.ScrollBarAutomationPeer>
    {
        Xaml.Automation.Peers.ScrollBarAutomationPeer ui;

        public new Xaml.Automation.Peers.ScrollBarAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ScrollBarAutomationPeer Invoke(Action<Xaml.Automation.Peers.ScrollBarAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ScrollBarAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ScrollPresenterAutomationPeer
{
    public partial class ScrollPresenterAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ScrollPresenterAutomationPeer>
    {
        Xaml.Automation.Peers.ScrollPresenterAutomationPeer ui;

        public new Xaml.Automation.Peers.ScrollPresenterAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ScrollPresenterAutomationPeer Invoke(Action<Xaml.Automation.Peers.ScrollPresenterAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ScrollPresenterAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ScrollViewerAutomationPeer
{
    public partial class ScrollViewerAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ScrollViewerAutomationPeer>
    {
        Xaml.Automation.Peers.ScrollViewerAutomationPeer ui;

        public new Xaml.Automation.Peers.ScrollViewerAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ScrollViewerAutomationPeer Invoke(Action<Xaml.Automation.Peers.ScrollViewerAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ScrollViewerAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // SelectorAutomationPeer
{
    public partial class SelectorAutomationPeer : ItemsControlAutomationPeer, IUI<Xaml.Automation.Peers.SelectorAutomationPeer>
    {
        Xaml.Automation.Peers.SelectorAutomationPeer ui;

        public new Xaml.Automation.Peers.SelectorAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public SelectorAutomationPeer Invoke(Action<Xaml.Automation.Peers.SelectorAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected SelectorAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // SelectorBarItemAutomationPeer
{
    public partial class SelectorBarItemAutomationPeer : ItemContainerAutomationPeer, IUI<Xaml.Automation.Peers.SelectorBarItemAutomationPeer>
    {
        Xaml.Automation.Peers.SelectorBarItemAutomationPeer ui;

        public new Xaml.Automation.Peers.SelectorBarItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public SelectorBarItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.SelectorBarItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected SelectorBarItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // SelectorItemAutomationPeer
{
    public partial class SelectorItemAutomationPeer : ItemAutomationPeer, IUI<Xaml.Automation.Peers.SelectorItemAutomationPeer>
    {
        Xaml.Automation.Peers.SelectorItemAutomationPeer ui;

        public new Xaml.Automation.Peers.SelectorItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public SelectorItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.SelectorItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected SelectorItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // SemanticZoomAutomationPeer
{
    public partial class SemanticZoomAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.SemanticZoomAutomationPeer>
    {
        Xaml.Automation.Peers.SemanticZoomAutomationPeer ui;

        public new Xaml.Automation.Peers.SemanticZoomAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public SemanticZoomAutomationPeer Invoke(Action<Xaml.Automation.Peers.SemanticZoomAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected SemanticZoomAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // SliderAutomationPeer
{
    public partial class SliderAutomationPeer : RangeBaseAutomationPeer, IUI<Xaml.Automation.Peers.SliderAutomationPeer>
    {
        Xaml.Automation.Peers.SliderAutomationPeer ui;

        public new Xaml.Automation.Peers.SliderAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public SliderAutomationPeer Invoke(Action<Xaml.Automation.Peers.SliderAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected SliderAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // SplitButtonAutomationPeer
{
    public partial class SplitButtonAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.SplitButtonAutomationPeer>
    {
        Xaml.Automation.Peers.SplitButtonAutomationPeer ui;

        public new Xaml.Automation.Peers.SplitButtonAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public SplitButtonAutomationPeer Invoke(Action<Xaml.Automation.Peers.SplitButtonAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected SplitButtonAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // TabViewAutomationPeer
{
    public partial class TabViewAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.TabViewAutomationPeer>
    {
        Xaml.Automation.Peers.TabViewAutomationPeer ui;

        public new Xaml.Automation.Peers.TabViewAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TabViewAutomationPeer Invoke(Action<Xaml.Automation.Peers.TabViewAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected TabViewAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // TabViewItemAutomationPeer
{
    public partial class TabViewItemAutomationPeer : ListViewItemAutomationPeer, IUI<Xaml.Automation.Peers.TabViewItemAutomationPeer>
    {
        Xaml.Automation.Peers.TabViewItemAutomationPeer ui;

        public new Xaml.Automation.Peers.TabViewItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TabViewItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.TabViewItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected TabViewItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // TeachingTipAutomationPeer
{
    public partial class TeachingTipAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.TeachingTipAutomationPeer>
    {
        Xaml.Automation.Peers.TeachingTipAutomationPeer ui;

        public new Xaml.Automation.Peers.TeachingTipAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TeachingTipAutomationPeer Invoke(Action<Xaml.Automation.Peers.TeachingTipAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected TeachingTipAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // TextBlockAutomationPeer
{
    public partial class TextBlockAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.TextBlockAutomationPeer>
    {
        Xaml.Automation.Peers.TextBlockAutomationPeer ui;

        public new Xaml.Automation.Peers.TextBlockAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TextBlockAutomationPeer Invoke(Action<Xaml.Automation.Peers.TextBlockAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected TextBlockAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // TextBoxAutomationPeer
{
    public partial class TextBoxAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.TextBoxAutomationPeer>
    {
        Xaml.Automation.Peers.TextBoxAutomationPeer ui;

        public new Xaml.Automation.Peers.TextBoxAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TextBoxAutomationPeer Invoke(Action<Xaml.Automation.Peers.TextBoxAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected TextBoxAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ThumbAutomationPeer
{
    public partial class ThumbAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ThumbAutomationPeer>
    {
        Xaml.Automation.Peers.ThumbAutomationPeer ui;

        public new Xaml.Automation.Peers.ThumbAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ThumbAutomationPeer Invoke(Action<Xaml.Automation.Peers.ThumbAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ThumbAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // TimePickerAutomationPeer
{
    public partial class TimePickerAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.TimePickerAutomationPeer>
    {
        Xaml.Automation.Peers.TimePickerAutomationPeer ui;

        public new Xaml.Automation.Peers.TimePickerAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TimePickerAutomationPeer Invoke(Action<Xaml.Automation.Peers.TimePickerAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected TimePickerAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // TimePickerFlyoutPresenterAutomationPeer
{
    public partial class TimePickerFlyoutPresenterAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.TimePickerFlyoutPresenterAutomationPeer>
    {
        Xaml.Automation.Peers.TimePickerFlyoutPresenterAutomationPeer ui;

        public new Xaml.Automation.Peers.TimePickerFlyoutPresenterAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TimePickerFlyoutPresenterAutomationPeer Invoke(Action<Xaml.Automation.Peers.TimePickerFlyoutPresenterAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected TimePickerFlyoutPresenterAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ToggleButtonAutomationPeer
{
    public partial class ToggleButtonAutomationPeer : ButtonBaseAutomationPeer, IUI<Xaml.Automation.Peers.ToggleButtonAutomationPeer>
    {
        Xaml.Automation.Peers.ToggleButtonAutomationPeer ui;

        public new Xaml.Automation.Peers.ToggleButtonAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ToggleButtonAutomationPeer Invoke(Action<Xaml.Automation.Peers.ToggleButtonAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ToggleButtonAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ToggleMenuFlyoutItemAutomationPeer
{
    public partial class ToggleMenuFlyoutItemAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ToggleMenuFlyoutItemAutomationPeer>
    {
        Xaml.Automation.Peers.ToggleMenuFlyoutItemAutomationPeer ui;

        public new Xaml.Automation.Peers.ToggleMenuFlyoutItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ToggleMenuFlyoutItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.ToggleMenuFlyoutItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ToggleMenuFlyoutItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ToggleSplitButtonAutomationPeer
{
    public partial class ToggleSplitButtonAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ToggleSplitButtonAutomationPeer>
    {
        Xaml.Automation.Peers.ToggleSplitButtonAutomationPeer ui;

        public new Xaml.Automation.Peers.ToggleSplitButtonAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ToggleSplitButtonAutomationPeer Invoke(Action<Xaml.Automation.Peers.ToggleSplitButtonAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ToggleSplitButtonAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // ToggleSwitchAutomationPeer
{
    public partial class ToggleSwitchAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.ToggleSwitchAutomationPeer>
    {
        Xaml.Automation.Peers.ToggleSwitchAutomationPeer ui;

        public new Xaml.Automation.Peers.ToggleSwitchAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ToggleSwitchAutomationPeer Invoke(Action<Xaml.Automation.Peers.ToggleSwitchAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected ToggleSwitchAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // TreeViewItemAutomationPeer
{
    public partial class TreeViewItemAutomationPeer : ListViewItemAutomationPeer, IUI<Xaml.Automation.Peers.TreeViewItemAutomationPeer>
    {
        Xaml.Automation.Peers.TreeViewItemAutomationPeer ui;

        public new Xaml.Automation.Peers.TreeViewItemAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TreeViewItemAutomationPeer Invoke(Action<Xaml.Automation.Peers.TreeViewItemAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected TreeViewItemAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // TreeViewItemDataAutomationPeer
{
    public partial class TreeViewItemDataAutomationPeer : ItemAutomationPeer, IUI<Xaml.Automation.Peers.TreeViewItemDataAutomationPeer>
    {
        Xaml.Automation.Peers.TreeViewItemDataAutomationPeer ui;

        public new Xaml.Automation.Peers.TreeViewItemDataAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TreeViewItemDataAutomationPeer Invoke(Action<Xaml.Automation.Peers.TreeViewItemDataAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected TreeViewItemDataAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // TreeViewListAutomationPeer
{
    public partial class TreeViewListAutomationPeer : ListViewAutomationPeer, IUI<Xaml.Automation.Peers.TreeViewListAutomationPeer>
    {
        Xaml.Automation.Peers.TreeViewListAutomationPeer ui;

        public new Xaml.Automation.Peers.TreeViewListAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TreeViewListAutomationPeer Invoke(Action<Xaml.Automation.Peers.TreeViewListAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected TreeViewListAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // WebView2AutomationPeer
{
    public partial class WebView2AutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Automation.Peers.WebView2AutomationPeer>
    {
        Xaml.Automation.Peers.WebView2AutomationPeer ui;

        public new Xaml.Automation.Peers.WebView2AutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public WebView2AutomationPeer Invoke(Action<Xaml.Automation.Peers.WebView2AutomationPeer> action) { action?.Invoke(UI); return this; }

        protected WebView2AutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // IRawElementProviderSimple
{
    public partial class IRawElementProviderSimple : DependencyObject, IUI<Xaml.Automation.Provider.IRawElementProviderSimple>
    {
        Xaml.Automation.Provider.IRawElementProviderSimple ui;

        public new Xaml.Automation.Provider.IRawElementProviderSimple UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public IRawElementProviderSimple Invoke(Action<Xaml.Automation.Provider.IRawElementProviderSimple> action) { action?.Invoke(UI); return this; }

        protected IRawElementProviderSimple() { }
    }
}

namespace CSharpMarkup.WinUI // ColorPaletteResources
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.ColorPaletteResources"/></summary>
        public static ColorPaletteResources ColorPaletteResources(Windows.UI.Color? Accent = default, Windows.UI.Color? AltHigh = default, Windows.UI.Color? AltLow = default, Windows.UI.Color? AltMedium = default, Windows.UI.Color? AltMediumHigh = default, Windows.UI.Color? AltMediumLow = default, Windows.UI.Color? BaseHigh = default, Windows.UI.Color? BaseLow = default, Windows.UI.Color? BaseMedium = default, Windows.UI.Color? BaseMediumHigh = default, Windows.UI.Color? BaseMediumLow = default, Windows.UI.Color? ChromeAltLow = default, Windows.UI.Color? ChromeBlackHigh = default, Windows.UI.Color? ChromeBlackLow = default, Windows.UI.Color? ChromeBlackMedium = default, Windows.UI.Color? ChromeBlackMediumLow = default, Windows.UI.Color? ChromeDisabledHigh = default, Windows.UI.Color? ChromeDisabledLow = default, Windows.UI.Color? ChromeGray = default, Windows.UI.Color? ChromeHigh = default, Windows.UI.Color? ChromeLow = default, Windows.UI.Color? ChromeMedium = default, Windows.UI.Color? ChromeMediumLow = default, Windows.UI.Color? ChromeWhite = default, Windows.UI.Color? ErrorText = default, Windows.UI.Color? ListLow = default, Windows.UI.Color? ListMedium = default)
        {
            var ui = new Xaml.ColorPaletteResources();
            if (Accent is not null) ui.Accent = Accent.Value;
            if (AltHigh is not null) ui.AltHigh = AltHigh.Value;
            if (AltLow is not null) ui.AltLow = AltLow.Value;
            if (AltMedium is not null) ui.AltMedium = AltMedium.Value;
            if (AltMediumHigh is not null) ui.AltMediumHigh = AltMediumHigh.Value;
            if (AltMediumLow is not null) ui.AltMediumLow = AltMediumLow.Value;
            if (BaseHigh is not null) ui.BaseHigh = BaseHigh.Value;
            if (BaseLow is not null) ui.BaseLow = BaseLow.Value;
            if (BaseMedium is not null) ui.BaseMedium = BaseMedium.Value;
            if (BaseMediumHigh is not null) ui.BaseMediumHigh = BaseMediumHigh.Value;
            if (BaseMediumLow is not null) ui.BaseMediumLow = BaseMediumLow.Value;
            if (ChromeAltLow is not null) ui.ChromeAltLow = ChromeAltLow.Value;
            if (ChromeBlackHigh is not null) ui.ChromeBlackHigh = ChromeBlackHigh.Value;
            if (ChromeBlackLow is not null) ui.ChromeBlackLow = ChromeBlackLow.Value;
            if (ChromeBlackMedium is not null) ui.ChromeBlackMedium = ChromeBlackMedium.Value;
            if (ChromeBlackMediumLow is not null) ui.ChromeBlackMediumLow = ChromeBlackMediumLow.Value;
            if (ChromeDisabledHigh is not null) ui.ChromeDisabledHigh = ChromeDisabledHigh.Value;
            if (ChromeDisabledLow is not null) ui.ChromeDisabledLow = ChromeDisabledLow.Value;
            if (ChromeGray is not null) ui.ChromeGray = ChromeGray.Value;
            if (ChromeHigh is not null) ui.ChromeHigh = ChromeHigh.Value;
            if (ChromeLow is not null) ui.ChromeLow = ChromeLow.Value;
            if (ChromeMedium is not null) ui.ChromeMedium = ChromeMedium.Value;
            if (ChromeMediumLow is not null) ui.ChromeMediumLow = ChromeMediumLow.Value;
            if (ChromeWhite is not null) ui.ChromeWhite = ChromeWhite.Value;
            if (ErrorText is not null) ui.ErrorText = ErrorText.Value;
            if (ListLow is not null) ui.ListLow = ListLow.Value;
            if (ListMedium is not null) ui.ListMedium = ListMedium.Value;
            return CSharpMarkup.WinUI.ColorPaletteResources.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.ColorPaletteResources"/></summary>
        public static ColorPaletteResources ColorPaletteResources()
        {
            var ui = new Xaml.ColorPaletteResources();
            return CSharpMarkup.WinUI.ColorPaletteResources.StartChain(ui);
        }
    }

    public partial class ColorPaletteResources : ResourceDictionary, IUI<Xaml.ColorPaletteResources>
    {
        static ColorPaletteResources instance;

        internal static ColorPaletteResources StartChain(Xaml.ColorPaletteResources ui)
        {
            if (instance == null) instance = new ColorPaletteResources();
            instance.UI = ui;
            return instance;
        }

        Xaml.ColorPaletteResources ui;

        public new Xaml.ColorPaletteResources UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.ColorPaletteResources(ColorPaletteResources view) => view?.UI;

        public static implicit operator ColorPaletteResources(Xaml.ColorPaletteResources ui) => ColorPaletteResources.StartChain(ui);

        public ColorPaletteResources Invoke(Action<Xaml.ColorPaletteResources> action) { action?.Invoke(UI); return this; }

        protected ColorPaletteResources() { }
    }

    public static partial class ColorPaletteResourcesExtensions
    {
        /// <summary>Set <see cref="Xaml.ColorPaletteResources.Accent"/></summary>
        public static TView Accent<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.Accent = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.AltHigh"/></summary>
        public static TView AltHigh<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.AltHigh = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.AltLow"/></summary>
        public static TView AltLow<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.AltLow = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.AltMedium"/></summary>
        public static TView AltMedium<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.AltMedium = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.AltMediumHigh"/></summary>
        public static TView AltMediumHigh<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.AltMediumHigh = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.AltMediumLow"/></summary>
        public static TView AltMediumLow<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.AltMediumLow = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.BaseHigh"/></summary>
        public static TView BaseHigh<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.BaseHigh = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.BaseLow"/></summary>
        public static TView BaseLow<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.BaseLow = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.BaseMedium"/></summary>
        public static TView BaseMedium<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.BaseMedium = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.BaseMediumHigh"/></summary>
        public static TView BaseMediumHigh<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.BaseMediumHigh = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.BaseMediumLow"/></summary>
        public static TView BaseMediumLow<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.BaseMediumLow = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ChromeAltLow"/></summary>
        public static TView ChromeAltLow<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ChromeAltLow = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ChromeBlackHigh"/></summary>
        public static TView ChromeBlackHigh<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ChromeBlackHigh = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ChromeBlackLow"/></summary>
        public static TView ChromeBlackLow<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ChromeBlackLow = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ChromeBlackMedium"/></summary>
        public static TView ChromeBlackMedium<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ChromeBlackMedium = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ChromeBlackMediumLow"/></summary>
        public static TView ChromeBlackMediumLow<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ChromeBlackMediumLow = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ChromeDisabledHigh"/></summary>
        public static TView ChromeDisabledHigh<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ChromeDisabledHigh = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ChromeDisabledLow"/></summary>
        public static TView ChromeDisabledLow<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ChromeDisabledLow = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ChromeGray"/></summary>
        public static TView ChromeGray<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ChromeGray = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ChromeHigh"/></summary>
        public static TView ChromeHigh<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ChromeHigh = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ChromeLow"/></summary>
        public static TView ChromeLow<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ChromeLow = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ChromeMedium"/></summary>
        public static TView ChromeMedium<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ChromeMedium = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ChromeMediumLow"/></summary>
        public static TView ChromeMediumLow<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ChromeMediumLow = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ChromeWhite"/></summary>
        public static TView ChromeWhite<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ChromeWhite = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ErrorText"/></summary>
        public static TView ErrorText<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ErrorText = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ListLow"/></summary>
        public static TView ListLow<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ListLow = value; return view; }

        /// <summary>Set <see cref="Xaml.ColorPaletteResources.ListMedium"/></summary>
        public static TView ListMedium<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPaletteResources { view.UI.ListMedium = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // AnimatedIcon
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.AnimatedIcon"/></summary>
        public static AnimatedIcon AnimatedIcon(Xaml.Controls.IAnimatedVisualSource2 Source)
        {
            var ui = new Xaml.Controls.AnimatedIcon();
            if (Source is not null) ui.Source = Source;
            return CSharpMarkup.WinUI.AnimatedIcon.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AnimatedIcon"/></summary>
        public static AnimatedIcon AnimatedIcon(Xaml.Controls.IconSource FallbackIconSource = default, bool? MirroredWhenRightToLeft = default, Xaml.Controls.IAnimatedVisualSource2 Source = default)
        {
            var ui = new Xaml.Controls.AnimatedIcon();
            if (FallbackIconSource is not null) ui.FallbackIconSource = FallbackIconSource;
            if (MirroredWhenRightToLeft is not null) ui.MirroredWhenRightToLeft = MirroredWhenRightToLeft.Value;
            if (Source is not null) ui.Source = Source;
            return CSharpMarkup.WinUI.AnimatedIcon.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AnimatedIcon"/></summary>
        public static AnimatedIcon AnimatedIcon()
        {
            var ui = new Xaml.Controls.AnimatedIcon();
            return CSharpMarkup.WinUI.AnimatedIcon.StartChain(ui);
        }
    }

    public partial class AnimatedIcon : IconElement, IUI<Xaml.Controls.AnimatedIcon>
    {
        static AnimatedIcon instance;

        internal static AnimatedIcon StartChain(Xaml.Controls.AnimatedIcon ui)
        {
            if (instance == null) instance = new AnimatedIcon();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.AnimatedIcon ui;

        public new Xaml.Controls.AnimatedIcon UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(AnimatedIcon view) => view?.UI;

        public static implicit operator Xaml.Controls.AnimatedIcon(AnimatedIcon view) => view?.UI;

        public static implicit operator AnimatedIcon(Xaml.Controls.AnimatedIcon ui) => AnimatedIcon.StartChain(ui);

        public AnimatedIcon Invoke(Action<Xaml.Controls.AnimatedIcon> action) { action?.Invoke(UI); return this; }

        protected AnimatedIcon() { }
    }

    public static partial class AnimatedIconExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.AnimatedIcon.FallbackIconSource"/></summary>
        public static TView FallbackIconSource<TView>(this TView view, Xaml.Controls.IconSource value) where TView : AnimatedIcon { view.UI.FallbackIconSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AnimatedIcon.MirroredWhenRightToLeft"/></summary>
        public static TView MirroredWhenRightToLeft<TView>(this TView view, bool value) where TView : AnimatedIcon { view.UI.MirroredWhenRightToLeft = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedIcon.FallbackIconSource"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconSource> FallbackIconSource<TTarget>(this TTarget target) where TTarget : AnimatedIcon
        => DependencyProperty<TTarget, Xaml.Controls.IconSource>.Get(target, Xaml.Controls.AnimatedIcon.FallbackIconSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedIcon.MirroredWhenRightToLeft"/></summary>
        public static DependencyProperty<TTarget, bool> MirroredWhenRightToLeft<TTarget>(this TTarget target) where TTarget : AnimatedIcon
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AnimatedIcon.MirroredWhenRightToLeftProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedIcon.Source"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IAnimatedVisualSource2> Source<TTarget>(this TTarget target) where TTarget : AnimatedIcon
        => DependencyProperty<TTarget, Xaml.Controls.IAnimatedVisualSource2>.Get(target, Xaml.Controls.AnimatedIcon.SourceProperty);

        /// <summary>Set <see cref="Xaml.Controls.AnimatedIcon.State"/></summary>
        public static TTarget AnimatedIcon_State<TTarget>(this TTarget target, string value) where TTarget : DependencyObject
        { Xaml.Controls.AnimatedIcon.SetState(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedIcon.State"/></summary>
        public static DependencyProperty<TTarget, string> AnimatedIcon_State<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.AnimatedIcon.StateProperty);
    }
}

namespace CSharpMarkup.WinUI // AnimatedIconSource
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.AnimatedIconSource"/></summary>
        public static AnimatedIconSource AnimatedIconSource(Xaml.Controls.IconSource FallbackIconSource = default, bool? MirroredWhenRightToLeft = default, Xaml.Controls.IAnimatedVisualSource2 Source = default)
        {
            var ui = new Xaml.Controls.AnimatedIconSource();
            if (FallbackIconSource is not null) ui.FallbackIconSource = FallbackIconSource;
            if (MirroredWhenRightToLeft is not null) ui.MirroredWhenRightToLeft = MirroredWhenRightToLeft.Value;
            if (Source is not null) ui.Source = Source;
            return CSharpMarkup.WinUI.AnimatedIconSource.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AnimatedIconSource"/></summary>
        public static AnimatedIconSource AnimatedIconSource()
        {
            var ui = new Xaml.Controls.AnimatedIconSource();
            return CSharpMarkup.WinUI.AnimatedIconSource.StartChain(ui);
        }
    }

    public partial class AnimatedIconSource : IconSource, IUI<Xaml.Controls.AnimatedIconSource>
    {
        static AnimatedIconSource instance;

        internal static AnimatedIconSource StartChain(Xaml.Controls.AnimatedIconSource ui)
        {
            if (instance == null) instance = new AnimatedIconSource();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.AnimatedIconSource ui;

        public new Xaml.Controls.AnimatedIconSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.AnimatedIconSource(AnimatedIconSource view) => view?.UI;

        public static implicit operator AnimatedIconSource(Xaml.Controls.AnimatedIconSource ui) => AnimatedIconSource.StartChain(ui);

        public AnimatedIconSource Invoke(Action<Xaml.Controls.AnimatedIconSource> action) { action?.Invoke(UI); return this; }

        protected AnimatedIconSource() { }
    }

    public static partial class AnimatedIconSourceExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.AnimatedIconSource.FallbackIconSource"/></summary>
        public static TView FallbackIconSource<TView>(this TView view, Xaml.Controls.IconSource value) where TView : AnimatedIconSource { view.UI.FallbackIconSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AnimatedIconSource.MirroredWhenRightToLeft"/></summary>
        public static TView MirroredWhenRightToLeft<TView>(this TView view, bool value) where TView : AnimatedIconSource { view.UI.MirroredWhenRightToLeft = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AnimatedIconSource.Source"/></summary>
        public static TView Source<TView>(this TView view, Xaml.Controls.IAnimatedVisualSource2 value) where TView : AnimatedIconSource { view.UI.Source = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedIconSource.FallbackIconSource"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconSource> FallbackIconSource<TTarget>(this TTarget target) where TTarget : AnimatedIconSource
        => DependencyProperty<TTarget, Xaml.Controls.IconSource>.Get(target, Xaml.Controls.AnimatedIconSource.FallbackIconSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedIconSource.MirroredWhenRightToLeft"/></summary>
        public static DependencyProperty<TTarget, bool> MirroredWhenRightToLeft<TTarget>(this TTarget target) where TTarget : AnimatedIconSource
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AnimatedIconSource.MirroredWhenRightToLeftProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedIconSource.Source"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IAnimatedVisualSource2> Source<TTarget>(this TTarget target) where TTarget : AnimatedIconSource
        => DependencyProperty<TTarget, Xaml.Controls.IAnimatedVisualSource2>.Get(target, Xaml.Controls.AnimatedIconSource.SourceProperty);
    }
}

namespace CSharpMarkup.WinUI // AnimatedVisualPlayer
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.AnimatedVisualPlayer"/></summary>
        public static AnimatedVisualPlayer AnimatedVisualPlayer(Xaml.Controls.IAnimatedVisualSource Source)
        {
            var ui = new Xaml.Controls.AnimatedVisualPlayer();
            if (Source is not null) ui.Source = Source;
            return CSharpMarkup.WinUI.AnimatedVisualPlayer.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AnimatedVisualPlayer"/></summary>
        public static AnimatedVisualPlayer AnimatedVisualPlayer(Xaml.Controls.PlayerAnimationOptimization? AnimationOptimization = default, bool? AutoPlay = default, Xaml.DataTemplate FallbackContent = default, double? PlaybackRate = default, Xaml.Media.Stretch? Stretch = default, Xaml.Controls.IAnimatedVisualSource Source = default)
        {
            var ui = new Xaml.Controls.AnimatedVisualPlayer();
            if (AnimationOptimization is not null) ui.AnimationOptimization = AnimationOptimization.Value;
            if (AutoPlay is not null) ui.AutoPlay = AutoPlay.Value;
            if (FallbackContent is not null) ui.FallbackContent = FallbackContent;
            if (PlaybackRate is not null) ui.PlaybackRate = PlaybackRate.Value;
            if (Stretch is not null) ui.Stretch = Stretch.Value;
            if (Source is not null) ui.Source = Source;
            return CSharpMarkup.WinUI.AnimatedVisualPlayer.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AnimatedVisualPlayer"/></summary>
        public static AnimatedVisualPlayer AnimatedVisualPlayer()
        {
            var ui = new Xaml.Controls.AnimatedVisualPlayer();
            return CSharpMarkup.WinUI.AnimatedVisualPlayer.StartChain(ui);
        }
    }

    public partial class AnimatedVisualPlayer : FrameworkElement, IUI<Xaml.Controls.AnimatedVisualPlayer>
    {
        static AnimatedVisualPlayer instance;

        internal static AnimatedVisualPlayer StartChain(Xaml.Controls.AnimatedVisualPlayer ui)
        {
            if (instance == null) instance = new AnimatedVisualPlayer();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.AnimatedVisualPlayer ui;

        public new Xaml.Controls.AnimatedVisualPlayer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(AnimatedVisualPlayer view) => view?.UI;

        public static implicit operator Xaml.Controls.AnimatedVisualPlayer(AnimatedVisualPlayer view) => view?.UI;

        public static implicit operator AnimatedVisualPlayer(Xaml.Controls.AnimatedVisualPlayer ui) => AnimatedVisualPlayer.StartChain(ui);

        public AnimatedVisualPlayer Invoke(Action<Xaml.Controls.AnimatedVisualPlayer> action) { action?.Invoke(UI); return this; }

        protected AnimatedVisualPlayer() { }
    }

    public static partial class AnimatedVisualPlayerExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.AnimatedVisualPlayer.AnimationOptimization"/></summary>
        public static TView AnimationOptimization<TView>(this TView view, Xaml.Controls.PlayerAnimationOptimization value) where TView : AnimatedVisualPlayer { view.UI.AnimationOptimization = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AnimatedVisualPlayer.AutoPlay"/></summary>
        public static TView AutoPlay<TView>(this TView view, bool value) where TView : AnimatedVisualPlayer { view.UI.AutoPlay = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AnimatedVisualPlayer.FallbackContent"/></summary>
        public static TView FallbackContent<TView>(this TView view, Xaml.DataTemplate value) where TView : AnimatedVisualPlayer { view.UI.FallbackContent = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AnimatedVisualPlayer.PlaybackRate"/></summary>
        public static TView PlaybackRate<TView>(this TView view, double value) where TView : AnimatedVisualPlayer { view.UI.PlaybackRate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AnimatedVisualPlayer.Stretch"/></summary>
        public static TView Stretch<TView>(this TView view, Xaml.Media.Stretch value) where TView : AnimatedVisualPlayer { view.UI.Stretch = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedVisualPlayer.AnimationOptimization"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.PlayerAnimationOptimization> AnimationOptimization<TTarget>(this TTarget target) where TTarget : AnimatedVisualPlayer
        => DependencyProperty<TTarget, Xaml.Controls.PlayerAnimationOptimization>.Get(target, Xaml.Controls.AnimatedVisualPlayer.AnimationOptimizationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedVisualPlayer.AutoPlay"/></summary>
        public static DependencyProperty<TTarget, bool> AutoPlay<TTarget>(this TTarget target) where TTarget : AnimatedVisualPlayer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AnimatedVisualPlayer.AutoPlayProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedVisualPlayer.Diagnostics"/></summary>
        public static DependencyProperty<TTarget, object> Diagnostics<TTarget>(this TTarget target) where TTarget : AnimatedVisualPlayer
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.AnimatedVisualPlayer.DiagnosticsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedVisualPlayer.Duration"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.TimeSpan> Duration<TTarget>(this TTarget target) where TTarget : AnimatedVisualPlayer
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.TimeSpan>.Get(target, Xaml.Controls.AnimatedVisualPlayer.DurationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedVisualPlayer.FallbackContent"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> FallbackContent<TTarget>(this TTarget target) where TTarget : AnimatedVisualPlayer
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.AnimatedVisualPlayer.FallbackContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedVisualPlayer.IsAnimatedVisualLoaded"/></summary>
        public static DependencyProperty<TTarget, bool> IsAnimatedVisualLoaded<TTarget>(this TTarget target) where TTarget : AnimatedVisualPlayer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AnimatedVisualPlayer.IsAnimatedVisualLoadedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedVisualPlayer.IsPlaying"/></summary>
        public static DependencyProperty<TTarget, bool> IsPlaying<TTarget>(this TTarget target) where TTarget : AnimatedVisualPlayer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AnimatedVisualPlayer.IsPlayingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedVisualPlayer.PlaybackRate"/></summary>
        public static DependencyProperty<TTarget, double> PlaybackRate<TTarget>(this TTarget target) where TTarget : AnimatedVisualPlayer
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.AnimatedVisualPlayer.PlaybackRateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedVisualPlayer.Source"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IAnimatedVisualSource> Source<TTarget>(this TTarget target) where TTarget : AnimatedVisualPlayer
        => DependencyProperty<TTarget, Xaml.Controls.IAnimatedVisualSource>.Get(target, Xaml.Controls.AnimatedVisualPlayer.SourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnimatedVisualPlayer.Stretch"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Stretch> Stretch<TTarget>(this TTarget target) where TTarget : AnimatedVisualPlayer
        => DependencyProperty<TTarget, Xaml.Media.Stretch>.Get(target, Xaml.Controls.AnimatedVisualPlayer.StretchProperty);
    }
}

namespace CSharpMarkup.WinUI // AnnotatedScrollBar
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.AnnotatedScrollBar"/></summary>
        public static AnnotatedScrollBar AnnotatedScrollBar(Xaml.IElementFactory DetailLabelTemplate = default, IList<Xaml.Controls.AnnotatedScrollBarLabel> Labels = default, Xaml.IElementFactory LabelTemplate = default, double? SmallChange = default)
        {
            var ui = new Xaml.Controls.AnnotatedScrollBar();
            if (DetailLabelTemplate is not null) ui.DetailLabelTemplate = DetailLabelTemplate;
            if (Labels is not null) ui.Labels = Labels;
            if (LabelTemplate is not null) ui.LabelTemplate = LabelTemplate;
            if (SmallChange is not null) ui.SmallChange = SmallChange.Value;
            return CSharpMarkup.WinUI.AnnotatedScrollBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AnnotatedScrollBar"/></summary>
        public static AnnotatedScrollBar AnnotatedScrollBar()
        {
            var ui = new Xaml.Controls.AnnotatedScrollBar();
            return CSharpMarkup.WinUI.AnnotatedScrollBar.StartChain(ui);
        }
    }

    public partial class AnnotatedScrollBar : Control, IUI<Xaml.Controls.AnnotatedScrollBar>
    {
        static AnnotatedScrollBar instance;

        internal static AnnotatedScrollBar StartChain(Xaml.Controls.AnnotatedScrollBar ui)
        {
            if (instance == null) instance = new AnnotatedScrollBar();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.AnnotatedScrollBar ui;

        public new Xaml.Controls.AnnotatedScrollBar UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(AnnotatedScrollBar view) => view?.UI;

        public static implicit operator Xaml.Controls.AnnotatedScrollBar(AnnotatedScrollBar view) => view?.UI;

        public static implicit operator AnnotatedScrollBar(Xaml.Controls.AnnotatedScrollBar ui) => AnnotatedScrollBar.StartChain(ui);

        public AnnotatedScrollBar Invoke(Action<Xaml.Controls.AnnotatedScrollBar> action) { action?.Invoke(UI); return this; }

        protected AnnotatedScrollBar() { }
    }

    public static partial class AnnotatedScrollBarExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.AnnotatedScrollBar.DetailLabelTemplate"/></summary>
        public static TView DetailLabelTemplate<TView>(this TView view, Xaml.IElementFactory value) where TView : AnnotatedScrollBar { view.UI.DetailLabelTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AnnotatedScrollBar.Labels"/></summary>
        public static TView Labels<TView>(this TView view, IList<Xaml.Controls.AnnotatedScrollBarLabel> value) where TView : AnnotatedScrollBar { view.UI.Labels = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AnnotatedScrollBar.LabelTemplate"/></summary>
        public static TView LabelTemplate<TView>(this TView view, Xaml.IElementFactory value) where TView : AnnotatedScrollBar { view.UI.LabelTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AnnotatedScrollBar.SmallChange"/></summary>
        public static TView SmallChange<TView>(this TView view, double value) where TView : AnnotatedScrollBar { view.UI.SmallChange = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnnotatedScrollBar.DetailLabelTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.IElementFactory> DetailLabelTemplate<TTarget>(this TTarget target) where TTarget : AnnotatedScrollBar
        => DependencyProperty<TTarget, Xaml.IElementFactory>.Get(target, Xaml.Controls.AnnotatedScrollBar.DetailLabelTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnnotatedScrollBar.Labels"/></summary>
        public static DependencyProperty<TTarget, IList<Xaml.Controls.AnnotatedScrollBarLabel>> Labels<TTarget>(this TTarget target) where TTarget : AnnotatedScrollBar
        => DependencyProperty<TTarget, IList<Xaml.Controls.AnnotatedScrollBarLabel>>.Get(target, Xaml.Controls.AnnotatedScrollBar.LabelsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnnotatedScrollBar.LabelTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.IElementFactory> LabelTemplate<TTarget>(this TTarget target) where TTarget : AnnotatedScrollBar
        => DependencyProperty<TTarget, Xaml.IElementFactory>.Get(target, Xaml.Controls.AnnotatedScrollBar.LabelTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AnnotatedScrollBar.SmallChange"/></summary>
        public static DependencyProperty<TTarget, double> SmallChange<TTarget>(this TTarget target) where TTarget : AnnotatedScrollBar
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.AnnotatedScrollBar.SmallChangeProperty);
    }
}

namespace CSharpMarkup.WinUI // AppBar
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.AppBar"/></summary>
        public static AppBar AppBar(UIObject Content)
        {
            var ui = new Xaml.Controls.AppBar();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.AppBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AppBar"/></summary>
        public static AppBar AppBar(Xaml.Controls.AppBarClosedDisplayMode? ClosedDisplayMode = default, bool? IsOpen = default, bool? IsSticky = default, Xaml.Controls.LightDismissOverlayMode? LightDismissOverlayMode = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.AppBar();
            if (ClosedDisplayMode is not null) ui.ClosedDisplayMode = ClosedDisplayMode.Value;
            if (IsOpen is not null) ui.IsOpen = IsOpen.Value;
            if (IsSticky is not null) ui.IsSticky = IsSticky.Value;
            if (LightDismissOverlayMode is not null) ui.LightDismissOverlayMode = LightDismissOverlayMode.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.AppBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AppBar"/></summary>
        public static AppBar AppBar()
        {
            var ui = new Xaml.Controls.AppBar();
            return CSharpMarkup.WinUI.AppBar.StartChain(ui);
        }
    }

    public partial class AppBar : ContentControl, IUI<Xaml.Controls.AppBar>
    {
        static AppBar instance;

        internal static AppBar StartChain(Xaml.Controls.AppBar ui)
        {
            if (instance == null) instance = new AppBar();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.AppBar ui;

        public new Xaml.Controls.AppBar UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(AppBar view) => view?.UI;

        public static implicit operator Xaml.Controls.AppBar(AppBar view) => view?.UI;

        public static implicit operator AppBar(Xaml.Controls.AppBar ui) => AppBar.StartChain(ui);

        public AppBar Invoke(Action<Xaml.Controls.AppBar> action) { action?.Invoke(UI); return this; }

        protected AppBar() { }
    }

    public static partial class AppBarExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.AppBar.ClosedDisplayMode"/></summary>
        public static TView ClosedDisplayMode<TView>(this TView view, Xaml.Controls.AppBarClosedDisplayMode value) where TView : AppBar { view.UI.ClosedDisplayMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBar.IsOpen"/></summary>
        public static TView IsOpen<TView>(this TView view, bool value) where TView : AppBar { view.UI.IsOpen = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBar.IsSticky"/></summary>
        public static TView IsSticky<TView>(this TView view, bool value) where TView : AppBar { view.UI.IsSticky = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBar.LightDismissOverlayMode"/></summary>
        public static TView LightDismissOverlayMode<TView>(this TView view, Xaml.Controls.LightDismissOverlayMode value) where TView : AppBar { view.UI.LightDismissOverlayMode = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBar.ClosedDisplayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.AppBarClosedDisplayMode> ClosedDisplayMode<TTarget>(this TTarget target) where TTarget : AppBar
        => DependencyProperty<TTarget, Xaml.Controls.AppBarClosedDisplayMode>.Get(target, Xaml.Controls.AppBar.ClosedDisplayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBar.IsOpen"/></summary>
        public static DependencyProperty<TTarget, bool> IsOpen<TTarget>(this TTarget target) where TTarget : AppBar
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AppBar.IsOpenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBar.IsSticky"/></summary>
        public static DependencyProperty<TTarget, bool> IsSticky<TTarget>(this TTarget target) where TTarget : AppBar
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AppBar.IsStickyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBar.LightDismissOverlayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> LightDismissOverlayMode<TTarget>(this TTarget target) where TTarget : AppBar
        => DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode>.Get(target, Xaml.Controls.AppBar.LightDismissOverlayModeProperty);
    }
}

namespace CSharpMarkup.WinUI // AppBarButton
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.AppBarButton"/></summary>
        public static AppBarButton AppBarButton(UIObject Content)
        {
            var ui = new Xaml.Controls.AppBarButton();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.AppBarButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AppBarButton"/></summary>
        public static AppBarButton AppBarButton(int? DynamicOverflowOrder = default, Xaml.Controls.IconElement Icon = default, bool? IsCompact = default, string KeyboardAcceleratorTextOverride = default, string Label = default, Xaml.Controls.CommandBarLabelPosition? LabelPosition = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.AppBarButton();
            if (DynamicOverflowOrder is not null) ui.DynamicOverflowOrder = DynamicOverflowOrder.Value;
            if (Icon is not null) ui.Icon = Icon;
            if (IsCompact is not null) ui.IsCompact = IsCompact.Value;
            if (KeyboardAcceleratorTextOverride is not null) ui.KeyboardAcceleratorTextOverride = KeyboardAcceleratorTextOverride;
            if (Label is not null) ui.Label = Label;
            if (LabelPosition is not null) ui.LabelPosition = LabelPosition.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.AppBarButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AppBarButton"/></summary>
        public static AppBarButton AppBarButton()
        {
            var ui = new Xaml.Controls.AppBarButton();
            return CSharpMarkup.WinUI.AppBarButton.StartChain(ui);
        }
    }

    public partial class AppBarButton : Button, IUI<Xaml.Controls.AppBarButton>
    {
        static AppBarButton instance;

        internal static AppBarButton StartChain(Xaml.Controls.AppBarButton ui)
        {
            if (instance == null) instance = new AppBarButton();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.AppBarButton ui;

        public new Xaml.Controls.AppBarButton UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(AppBarButton view) => view?.UI;

        public static implicit operator Xaml.Controls.AppBarButton(AppBarButton view) => view?.UI;

        public static implicit operator AppBarButton(Xaml.Controls.AppBarButton ui) => AppBarButton.StartChain(ui);

        public AppBarButton Invoke(Action<Xaml.Controls.AppBarButton> action) { action?.Invoke(UI); return this; }

        protected AppBarButton() { }
    }

    public static partial class AppBarButtonExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.AppBarButton.DynamicOverflowOrder"/></summary>
        public static TView DynamicOverflowOrder<TView>(this TView view, int value) where TView : AppBarButton { view.UI.DynamicOverflowOrder = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBarButton.Icon"/></summary>
        public static TView Icon<TView>(this TView view, Xaml.Controls.IconElement value) where TView : AppBarButton { view.UI.Icon = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBarButton.IsCompact"/></summary>
        public static TView IsCompact<TView>(this TView view, bool value) where TView : AppBarButton { view.UI.IsCompact = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBarButton.KeyboardAcceleratorTextOverride"/></summary>
        public static TView KeyboardAcceleratorTextOverride<TView>(this TView view, string value) where TView : AppBarButton { view.UI.KeyboardAcceleratorTextOverride = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBarButton.Label"/></summary>
        public static TView Label<TView>(this TView view, string value) where TView : AppBarButton { view.UI.Label = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBarButton.LabelPosition"/></summary>
        public static TView LabelPosition<TView>(this TView view, Xaml.Controls.CommandBarLabelPosition value) where TView : AppBarButton { view.UI.LabelPosition = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarButton.DynamicOverflowOrder"/></summary>
        public static DependencyProperty<TTarget, int> DynamicOverflowOrder<TTarget>(this TTarget target) where TTarget : AppBarButton
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.AppBarButton.DynamicOverflowOrderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarButton.Icon"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconElement> Icon<TTarget>(this TTarget target) where TTarget : AppBarButton
        => DependencyProperty<TTarget, Xaml.Controls.IconElement>.Get(target, Xaml.Controls.AppBarButton.IconProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarButton.IsCompact"/></summary>
        public static DependencyProperty<TTarget, bool> IsCompact<TTarget>(this TTarget target) where TTarget : AppBarButton
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AppBarButton.IsCompactProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarButton.IsInOverflow"/></summary>
        public static DependencyProperty<TTarget, bool> IsInOverflow<TTarget>(this TTarget target) where TTarget : AppBarButton
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AppBarButton.IsInOverflowProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarButton.KeyboardAcceleratorTextOverride"/></summary>
        public static DependencyProperty<TTarget, string> KeyboardAcceleratorTextOverride<TTarget>(this TTarget target) where TTarget : AppBarButton
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.AppBarButton.KeyboardAcceleratorTextOverrideProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarButton.LabelPosition"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.CommandBarLabelPosition> LabelPosition<TTarget>(this TTarget target) where TTarget : AppBarButton
        => DependencyProperty<TTarget, Xaml.Controls.CommandBarLabelPosition>.Get(target, Xaml.Controls.AppBarButton.LabelPositionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarButton.Label"/></summary>
        public static DependencyProperty<TTarget, string> Label<TTarget>(this TTarget target) where TTarget : AppBarButton
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.AppBarButton.LabelProperty);
    }
}

namespace CSharpMarkup.WinUI // AppBarElementContainer
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.AppBarElementContainer"/></summary>
        public static AppBarElementContainer AppBarElementContainer(UIObject Content)
        {
            var ui = new Xaml.Controls.AppBarElementContainer();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.AppBarElementContainer.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AppBarElementContainer"/></summary>
        public static AppBarElementContainer AppBarElementContainer(int? DynamicOverflowOrder = default, bool? IsCompact = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.AppBarElementContainer();
            if (DynamicOverflowOrder is not null) ui.DynamicOverflowOrder = DynamicOverflowOrder.Value;
            if (IsCompact is not null) ui.IsCompact = IsCompact.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.AppBarElementContainer.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AppBarElementContainer"/></summary>
        public static AppBarElementContainer AppBarElementContainer()
        {
            var ui = new Xaml.Controls.AppBarElementContainer();
            return CSharpMarkup.WinUI.AppBarElementContainer.StartChain(ui);
        }
    }

    public partial class AppBarElementContainer : ContentControl, IUI<Xaml.Controls.AppBarElementContainer>
    {
        static AppBarElementContainer instance;

        internal static AppBarElementContainer StartChain(Xaml.Controls.AppBarElementContainer ui)
        {
            if (instance == null) instance = new AppBarElementContainer();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.AppBarElementContainer ui;

        public new Xaml.Controls.AppBarElementContainer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(AppBarElementContainer view) => view?.UI;

        public static implicit operator Xaml.Controls.AppBarElementContainer(AppBarElementContainer view) => view?.UI;

        public static implicit operator AppBarElementContainer(Xaml.Controls.AppBarElementContainer ui) => AppBarElementContainer.StartChain(ui);

        public AppBarElementContainer Invoke(Action<Xaml.Controls.AppBarElementContainer> action) { action?.Invoke(UI); return this; }

        protected AppBarElementContainer() { }
    }

    public static partial class AppBarElementContainerExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.AppBarElementContainer.DynamicOverflowOrder"/></summary>
        public static TView DynamicOverflowOrder<TView>(this TView view, int value) where TView : AppBarElementContainer { view.UI.DynamicOverflowOrder = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBarElementContainer.IsCompact"/></summary>
        public static TView IsCompact<TView>(this TView view, bool value) where TView : AppBarElementContainer { view.UI.IsCompact = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarElementContainer.DynamicOverflowOrder"/></summary>
        public static DependencyProperty<TTarget, int> DynamicOverflowOrder<TTarget>(this TTarget target) where TTarget : AppBarElementContainer
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.AppBarElementContainer.DynamicOverflowOrderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarElementContainer.IsCompact"/></summary>
        public static DependencyProperty<TTarget, bool> IsCompact<TTarget>(this TTarget target) where TTarget : AppBarElementContainer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AppBarElementContainer.IsCompactProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarElementContainer.IsInOverflow"/></summary>
        public static DependencyProperty<TTarget, bool> IsInOverflow<TTarget>(this TTarget target) where TTarget : AppBarElementContainer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AppBarElementContainer.IsInOverflowProperty);
    }
}

namespace CSharpMarkup.WinUI // AppBarSeparator
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.AppBarSeparator"/></summary>
        public static AppBarSeparator AppBarSeparator(int? DynamicOverflowOrder = default, bool? IsCompact = default)
        {
            var ui = new Xaml.Controls.AppBarSeparator();
            if (DynamicOverflowOrder is not null) ui.DynamicOverflowOrder = DynamicOverflowOrder.Value;
            if (IsCompact is not null) ui.IsCompact = IsCompact.Value;
            return CSharpMarkup.WinUI.AppBarSeparator.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AppBarSeparator"/></summary>
        public static AppBarSeparator AppBarSeparator()
        {
            var ui = new Xaml.Controls.AppBarSeparator();
            return CSharpMarkup.WinUI.AppBarSeparator.StartChain(ui);
        }
    }

    public partial class AppBarSeparator : Control, IUI<Xaml.Controls.AppBarSeparator>
    {
        static AppBarSeparator instance;

        internal static AppBarSeparator StartChain(Xaml.Controls.AppBarSeparator ui)
        {
            if (instance == null) instance = new AppBarSeparator();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.AppBarSeparator ui;

        public new Xaml.Controls.AppBarSeparator UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(AppBarSeparator view) => view?.UI;

        public static implicit operator Xaml.Controls.AppBarSeparator(AppBarSeparator view) => view?.UI;

        public static implicit operator AppBarSeparator(Xaml.Controls.AppBarSeparator ui) => AppBarSeparator.StartChain(ui);

        public AppBarSeparator Invoke(Action<Xaml.Controls.AppBarSeparator> action) { action?.Invoke(UI); return this; }

        protected AppBarSeparator() { }
    }

    public static partial class AppBarSeparatorExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.AppBarSeparator.DynamicOverflowOrder"/></summary>
        public static TView DynamicOverflowOrder<TView>(this TView view, int value) where TView : AppBarSeparator { view.UI.DynamicOverflowOrder = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBarSeparator.IsCompact"/></summary>
        public static TView IsCompact<TView>(this TView view, bool value) where TView : AppBarSeparator { view.UI.IsCompact = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarSeparator.DynamicOverflowOrder"/></summary>
        public static DependencyProperty<TTarget, int> DynamicOverflowOrder<TTarget>(this TTarget target) where TTarget : AppBarSeparator
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.AppBarSeparator.DynamicOverflowOrderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarSeparator.IsCompact"/></summary>
        public static DependencyProperty<TTarget, bool> IsCompact<TTarget>(this TTarget target) where TTarget : AppBarSeparator
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AppBarSeparator.IsCompactProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarSeparator.IsInOverflow"/></summary>
        public static DependencyProperty<TTarget, bool> IsInOverflow<TTarget>(this TTarget target) where TTarget : AppBarSeparator
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AppBarSeparator.IsInOverflowProperty);
    }
}

namespace CSharpMarkup.WinUI // AppBarToggleButton
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.AppBarToggleButton"/></summary>
        public static AppBarToggleButton AppBarToggleButton(UIObject Content)
        {
            var ui = new Xaml.Controls.AppBarToggleButton();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.AppBarToggleButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AppBarToggleButton"/></summary>
        public static AppBarToggleButton AppBarToggleButton(int? DynamicOverflowOrder = default, Xaml.Controls.IconElement Icon = default, bool? IsCompact = default, string KeyboardAcceleratorTextOverride = default, string Label = default, Xaml.Controls.CommandBarLabelPosition? LabelPosition = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.AppBarToggleButton();
            if (DynamicOverflowOrder is not null) ui.DynamicOverflowOrder = DynamicOverflowOrder.Value;
            if (Icon is not null) ui.Icon = Icon;
            if (IsCompact is not null) ui.IsCompact = IsCompact.Value;
            if (KeyboardAcceleratorTextOverride is not null) ui.KeyboardAcceleratorTextOverride = KeyboardAcceleratorTextOverride;
            if (Label is not null) ui.Label = Label;
            if (LabelPosition is not null) ui.LabelPosition = LabelPosition.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.AppBarToggleButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AppBarToggleButton"/></summary>
        public static AppBarToggleButton AppBarToggleButton()
        {
            var ui = new Xaml.Controls.AppBarToggleButton();
            return CSharpMarkup.WinUI.AppBarToggleButton.StartChain(ui);
        }
    }

    public partial class AppBarToggleButton : ToggleButton, IUI<Xaml.Controls.AppBarToggleButton>
    {
        static AppBarToggleButton instance;

        internal static AppBarToggleButton StartChain(Xaml.Controls.AppBarToggleButton ui)
        {
            if (instance == null) instance = new AppBarToggleButton();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.AppBarToggleButton ui;

        public new Xaml.Controls.AppBarToggleButton UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(AppBarToggleButton view) => view?.UI;

        public static implicit operator Xaml.Controls.AppBarToggleButton(AppBarToggleButton view) => view?.UI;

        public static implicit operator AppBarToggleButton(Xaml.Controls.AppBarToggleButton ui) => AppBarToggleButton.StartChain(ui);

        public AppBarToggleButton Invoke(Action<Xaml.Controls.AppBarToggleButton> action) { action?.Invoke(UI); return this; }

        protected AppBarToggleButton() { }
    }

    public static partial class AppBarToggleButtonExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.AppBarToggleButton.DynamicOverflowOrder"/></summary>
        public static TView DynamicOverflowOrder<TView>(this TView view, int value) where TView : AppBarToggleButton { view.UI.DynamicOverflowOrder = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBarToggleButton.Icon"/></summary>
        public static TView Icon<TView>(this TView view, Xaml.Controls.IconElement value) where TView : AppBarToggleButton { view.UI.Icon = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBarToggleButton.IsCompact"/></summary>
        public static TView IsCompact<TView>(this TView view, bool value) where TView : AppBarToggleButton { view.UI.IsCompact = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBarToggleButton.KeyboardAcceleratorTextOverride"/></summary>
        public static TView KeyboardAcceleratorTextOverride<TView>(this TView view, string value) where TView : AppBarToggleButton { view.UI.KeyboardAcceleratorTextOverride = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBarToggleButton.Label"/></summary>
        public static TView Label<TView>(this TView view, string value) where TView : AppBarToggleButton { view.UI.Label = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AppBarToggleButton.LabelPosition"/></summary>
        public static TView LabelPosition<TView>(this TView view, Xaml.Controls.CommandBarLabelPosition value) where TView : AppBarToggleButton { view.UI.LabelPosition = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarToggleButton.DynamicOverflowOrder"/></summary>
        public static DependencyProperty<TTarget, int> DynamicOverflowOrder<TTarget>(this TTarget target) where TTarget : AppBarToggleButton
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.AppBarToggleButton.DynamicOverflowOrderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarToggleButton.Icon"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconElement> Icon<TTarget>(this TTarget target) where TTarget : AppBarToggleButton
        => DependencyProperty<TTarget, Xaml.Controls.IconElement>.Get(target, Xaml.Controls.AppBarToggleButton.IconProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarToggleButton.IsCompact"/></summary>
        public static DependencyProperty<TTarget, bool> IsCompact<TTarget>(this TTarget target) where TTarget : AppBarToggleButton
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AppBarToggleButton.IsCompactProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarToggleButton.IsInOverflow"/></summary>
        public static DependencyProperty<TTarget, bool> IsInOverflow<TTarget>(this TTarget target) where TTarget : AppBarToggleButton
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AppBarToggleButton.IsInOverflowProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarToggleButton.KeyboardAcceleratorTextOverride"/></summary>
        public static DependencyProperty<TTarget, string> KeyboardAcceleratorTextOverride<TTarget>(this TTarget target) where TTarget : AppBarToggleButton
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.AppBarToggleButton.KeyboardAcceleratorTextOverrideProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarToggleButton.LabelPosition"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.CommandBarLabelPosition> LabelPosition<TTarget>(this TTarget target) where TTarget : AppBarToggleButton
        => DependencyProperty<TTarget, Xaml.Controls.CommandBarLabelPosition>.Get(target, Xaml.Controls.AppBarToggleButton.LabelPositionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AppBarToggleButton.Label"/></summary>
        public static DependencyProperty<TTarget, string> Label<TTarget>(this TTarget target) where TTarget : AppBarToggleButton
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.AppBarToggleButton.LabelProperty);
    }
}

namespace CSharpMarkup.WinUI // AutoSuggestBox
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.AutoSuggestBox"/></summary>
        /// <remarks>Remark: AutoSuggestBox().Bind() binds to <see cref="Xaml.Controls.AutoSuggestBox.TextProperty"/></remarks>
        public static AutoSuggestBox AutoSuggestBox(params UIObject[] Items)
        {
            var ui = new Xaml.Controls.AutoSuggestBox();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<UIObject>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j].UI);
                else
                    ui.Items.Add(child.UI);
            }
            return CSharpMarkup.WinUI.AutoSuggestBox.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AutoSuggestBox"/></summary>
        /// <remarks>Remark: AutoSuggestBox().Bind() binds to <see cref="Xaml.Controls.AutoSuggestBox.TextProperty"/></remarks>
        public static AutoSuggestBox AutoSuggestBox()
        {
            var ui = new Xaml.Controls.AutoSuggestBox();
            return CSharpMarkup.WinUI.AutoSuggestBox.StartChain(ui);
        }
    }

    public partial class AutoSuggestBox : ItemsControl, IUI<Xaml.Controls.AutoSuggestBox>, IDefaultBindProperty
    {
        static AutoSuggestBox instance;

        internal static AutoSuggestBox StartChain(Xaml.Controls.AutoSuggestBox ui)
        {
            if (instance == null) instance = new AutoSuggestBox();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.AutoSuggestBox ui;

        public new Xaml.Controls.AutoSuggestBox UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.AutoSuggestBox.TextProperty"/></summary>
        public Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.AutoSuggestBox.TextProperty;

        public static implicit operator Xaml.UIElement(AutoSuggestBox view) => view?.UI;

        public static implicit operator Xaml.Controls.AutoSuggestBox(AutoSuggestBox view) => view?.UI;

        public static implicit operator AutoSuggestBox(Xaml.Controls.AutoSuggestBox ui) => AutoSuggestBox.StartChain(ui);

        public AutoSuggestBox Invoke(Action<Xaml.Controls.AutoSuggestBox> action) { action?.Invoke(UI); return this; }

        protected AutoSuggestBox() { }
    }

    public static partial class AutoSuggestBoxExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.AutoSuggestBox.AutoMaximizeSuggestionArea"/></summary>
        public static TView AutoMaximizeSuggestionArea<TView>(this TView view, bool value) where TView : AutoSuggestBox { view.UI.AutoMaximizeSuggestionArea = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AutoSuggestBox.Description"/></summary>
        public static TView Description<TView>(this TView view, object value) where TView : AutoSuggestBox { view.UI.Description = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AutoSuggestBox.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : AutoSuggestBox { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AutoSuggestBox.IsSuggestionListOpen"/></summary>
        public static TView IsSuggestionListOpen<TView>(this TView view, bool value) where TView : AutoSuggestBox { view.UI.IsSuggestionListOpen = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AutoSuggestBox.LightDismissOverlayMode"/></summary>
        public static TView LightDismissOverlayMode<TView>(this TView view, Xaml.Controls.LightDismissOverlayMode value) where TView : AutoSuggestBox { view.UI.LightDismissOverlayMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AutoSuggestBox.MaxSuggestionListHeight"/></summary>
        public static TView MaxSuggestionListHeight<TView>(this TView view, double value) where TView : AutoSuggestBox { view.UI.MaxSuggestionListHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AutoSuggestBox.PlaceholderText"/></summary>
        public static TView PlaceholderText<TView>(this TView view, string value) where TView : AutoSuggestBox { view.UI.PlaceholderText = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AutoSuggestBox.QueryIcon"/></summary>
        public static TView QueryIcon<TView>(this TView view, Xaml.Controls.IconElement value) where TView : AutoSuggestBox { view.UI.QueryIcon = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AutoSuggestBox.Text"/></summary>
        public static TView Text<TView>(this TView view, string value) where TView : AutoSuggestBox { view.UI.Text = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AutoSuggestBox.TextBoxStyle"/></summary>
        public static TView TextBoxStyle<TView>(this TView view, Xaml.Style value) where TView : AutoSuggestBox { view.UI.TextBoxStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AutoSuggestBox.TextMemberPath"/></summary>
        public static TView TextMemberPath<TView>(this TView view, string value) where TView : AutoSuggestBox { view.UI.TextMemberPath = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.AutoSuggestBox.UpdateTextOnSelect"/></summary>
        public static TView UpdateTextOnSelect<TView>(this TView view, bool value) where TView : AutoSuggestBox { view.UI.UpdateTextOnSelect = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AutoSuggestBox.AutoMaximizeSuggestionArea"/></summary>
        public static DependencyProperty<TTarget, bool> AutoMaximizeSuggestionArea<TTarget>(this TTarget target) where TTarget : AutoSuggestBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AutoSuggestBox.AutoMaximizeSuggestionAreaProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AutoSuggestBox.Description"/></summary>
        public static DependencyProperty<TTarget, object> Description<TTarget>(this TTarget target) where TTarget : AutoSuggestBox
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.AutoSuggestBox.DescriptionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AutoSuggestBox.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : AutoSuggestBox
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.AutoSuggestBox.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AutoSuggestBox.IsSuggestionListOpen"/></summary>
        public static DependencyProperty<TTarget, bool> IsSuggestionListOpen<TTarget>(this TTarget target) where TTarget : AutoSuggestBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AutoSuggestBox.IsSuggestionListOpenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AutoSuggestBox.LightDismissOverlayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> LightDismissOverlayMode<TTarget>(this TTarget target) where TTarget : AutoSuggestBox
        => DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode>.Get(target, Xaml.Controls.AutoSuggestBox.LightDismissOverlayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AutoSuggestBox.MaxSuggestionListHeight"/></summary>
        public static DependencyProperty<TTarget, double> MaxSuggestionListHeight<TTarget>(this TTarget target) where TTarget : AutoSuggestBox
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.AutoSuggestBox.MaxSuggestionListHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AutoSuggestBox.PlaceholderText"/></summary>
        public static DependencyProperty<TTarget, string> PlaceholderText<TTarget>(this TTarget target) where TTarget : AutoSuggestBox
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.AutoSuggestBox.PlaceholderTextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AutoSuggestBox.QueryIcon"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconElement> QueryIcon<TTarget>(this TTarget target) where TTarget : AutoSuggestBox
        => DependencyProperty<TTarget, Xaml.Controls.IconElement>.Get(target, Xaml.Controls.AutoSuggestBox.QueryIconProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AutoSuggestBox.TextBoxStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> TextBoxStyle<TTarget>(this TTarget target) where TTarget : AutoSuggestBox
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.AutoSuggestBox.TextBoxStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AutoSuggestBox.TextMemberPath"/></summary>
        public static DependencyProperty<TTarget, string> TextMemberPath<TTarget>(this TTarget target) where TTarget : AutoSuggestBox
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.AutoSuggestBox.TextMemberPathProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AutoSuggestBox.Text"/></summary>
        public static DependencyProperty<TTarget, string> Text<TTarget>(this TTarget target) where TTarget : AutoSuggestBox
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.AutoSuggestBox.TextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AutoSuggestBox.UpdateTextOnSelect"/></summary>
        public static DependencyProperty<TTarget, bool> UpdateTextOnSelect<TTarget>(this TTarget target) where TTarget : AutoSuggestBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.AutoSuggestBox.UpdateTextOnSelectProperty);
    }
}

namespace CSharpMarkup.WinUI // AutoSuggestBoxQuerySubmittedEventArgs
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs"/></summary>
        public static AutoSuggestBoxQuerySubmittedEventArgs AutoSuggestBoxQuerySubmittedEventArgs()
        {
            var ui = new Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs();
            return CSharpMarkup.WinUI.AutoSuggestBoxQuerySubmittedEventArgs.StartChain(ui);
        }
    }

    public partial class AutoSuggestBoxQuerySubmittedEventArgs : DependencyObject, IUI<Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs>
    {
        static AutoSuggestBoxQuerySubmittedEventArgs instance;

        internal static AutoSuggestBoxQuerySubmittedEventArgs StartChain(Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs ui)
        {
            if (instance == null) instance = new AutoSuggestBoxQuerySubmittedEventArgs();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs ui;

        public new Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs(AutoSuggestBoxQuerySubmittedEventArgs view) => view?.UI;

        public static implicit operator AutoSuggestBoxQuerySubmittedEventArgs(Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs ui) => AutoSuggestBoxQuerySubmittedEventArgs.StartChain(ui);

        public AutoSuggestBoxQuerySubmittedEventArgs Invoke(Action<Xaml.Controls.AutoSuggestBoxQuerySubmittedEventArgs> action) { action?.Invoke(UI); return this; }

        protected AutoSuggestBoxQuerySubmittedEventArgs() { }
    }
}

namespace CSharpMarkup.WinUI // AutoSuggestBoxSuggestionChosenEventArgs
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs"/></summary>
        public static AutoSuggestBoxSuggestionChosenEventArgs AutoSuggestBoxSuggestionChosenEventArgs()
        {
            var ui = new Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs();
            return CSharpMarkup.WinUI.AutoSuggestBoxSuggestionChosenEventArgs.StartChain(ui);
        }
    }

    public partial class AutoSuggestBoxSuggestionChosenEventArgs : DependencyObject, IUI<Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs>
    {
        static AutoSuggestBoxSuggestionChosenEventArgs instance;

        internal static AutoSuggestBoxSuggestionChosenEventArgs StartChain(Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs ui)
        {
            if (instance == null) instance = new AutoSuggestBoxSuggestionChosenEventArgs();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs ui;

        public new Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs(AutoSuggestBoxSuggestionChosenEventArgs view) => view?.UI;

        public static implicit operator AutoSuggestBoxSuggestionChosenEventArgs(Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs ui) => AutoSuggestBoxSuggestionChosenEventArgs.StartChain(ui);

        public AutoSuggestBoxSuggestionChosenEventArgs Invoke(Action<Xaml.Controls.AutoSuggestBoxSuggestionChosenEventArgs> action) { action?.Invoke(UI); return this; }

        protected AutoSuggestBoxSuggestionChosenEventArgs() { }
    }
}

namespace CSharpMarkup.WinUI // AutoSuggestBoxTextChangedEventArgs
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.AutoSuggestBoxTextChangedEventArgs"/></summary>
        public static AutoSuggestBoxTextChangedEventArgs AutoSuggestBoxTextChangedEventArgs(Xaml.Controls.AutoSuggestionBoxTextChangeReason? Reason = default)
        {
            var ui = new Xaml.Controls.AutoSuggestBoxTextChangedEventArgs();
            if (Reason is not null) ui.Reason = Reason.Value;
            return CSharpMarkup.WinUI.AutoSuggestBoxTextChangedEventArgs.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.AutoSuggestBoxTextChangedEventArgs"/></summary>
        public static AutoSuggestBoxTextChangedEventArgs AutoSuggestBoxTextChangedEventArgs()
        {
            var ui = new Xaml.Controls.AutoSuggestBoxTextChangedEventArgs();
            return CSharpMarkup.WinUI.AutoSuggestBoxTextChangedEventArgs.StartChain(ui);
        }
    }

    public partial class AutoSuggestBoxTextChangedEventArgs : DependencyObject, IUI<Xaml.Controls.AutoSuggestBoxTextChangedEventArgs>
    {
        static AutoSuggestBoxTextChangedEventArgs instance;

        internal static AutoSuggestBoxTextChangedEventArgs StartChain(Xaml.Controls.AutoSuggestBoxTextChangedEventArgs ui)
        {
            if (instance == null) instance = new AutoSuggestBoxTextChangedEventArgs();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.AutoSuggestBoxTextChangedEventArgs ui;

        public new Xaml.Controls.AutoSuggestBoxTextChangedEventArgs UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.AutoSuggestBoxTextChangedEventArgs(AutoSuggestBoxTextChangedEventArgs view) => view?.UI;

        public static implicit operator AutoSuggestBoxTextChangedEventArgs(Xaml.Controls.AutoSuggestBoxTextChangedEventArgs ui) => AutoSuggestBoxTextChangedEventArgs.StartChain(ui);

        public AutoSuggestBoxTextChangedEventArgs Invoke(Action<Xaml.Controls.AutoSuggestBoxTextChangedEventArgs> action) { action?.Invoke(UI); return this; }

        protected AutoSuggestBoxTextChangedEventArgs() { }
    }

    public static partial class AutoSuggestBoxTextChangedEventArgsExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.AutoSuggestBoxTextChangedEventArgs.Reason"/></summary>
        public static TView Reason<TView>(this TView view, Xaml.Controls.AutoSuggestionBoxTextChangeReason value) where TView : AutoSuggestBoxTextChangedEventArgs { view.UI.Reason = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.AutoSuggestBoxTextChangedEventArgs.Reason"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.AutoSuggestionBoxTextChangeReason> Reason<TTarget>(this TTarget target) where TTarget : AutoSuggestBoxTextChangedEventArgs
        => DependencyProperty<TTarget, Xaml.Controls.AutoSuggestionBoxTextChangeReason>.Get(target, Xaml.Controls.AutoSuggestBoxTextChangedEventArgs.ReasonProperty);
    }
}

namespace CSharpMarkup.WinUI // BitmapIcon
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.BitmapIcon"/></summary>
        /// <remarks>Remark: BitmapIcon().Bind() binds to <see cref="Xaml.Controls.BitmapIcon.UriSourceProperty"/></remarks>
        public static BitmapIcon BitmapIcon(bool? ShowAsMonochrome = default, Uri UriSource = default)
        {
            var ui = new Xaml.Controls.BitmapIcon();
            if (ShowAsMonochrome is not null) ui.ShowAsMonochrome = ShowAsMonochrome.Value;
            if (UriSource is not null) ui.UriSource = UriSource;
            return CSharpMarkup.WinUI.BitmapIcon.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.BitmapIcon"/></summary>
        /// <remarks>Remark: BitmapIcon().Bind() binds to <see cref="Xaml.Controls.BitmapIcon.UriSourceProperty"/></remarks>
        public static BitmapIcon BitmapIcon()
        {
            var ui = new Xaml.Controls.BitmapIcon();
            return CSharpMarkup.WinUI.BitmapIcon.StartChain(ui);
        }
    }

    public partial class BitmapIcon : IconElement, IUI<Xaml.Controls.BitmapIcon>, IDefaultBindProperty
    {
        static BitmapIcon instance;

        internal static BitmapIcon StartChain(Xaml.Controls.BitmapIcon ui)
        {
            if (instance == null) instance = new BitmapIcon();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.BitmapIcon ui;

        public new Xaml.Controls.BitmapIcon UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.BitmapIcon.UriSourceProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.BitmapIcon.UriSourceProperty;

        public static implicit operator Xaml.UIElement(BitmapIcon view) => view?.UI;

        public static implicit operator Xaml.Controls.BitmapIcon(BitmapIcon view) => view?.UI;

        public static implicit operator BitmapIcon(Xaml.Controls.BitmapIcon ui) => BitmapIcon.StartChain(ui);

        public BitmapIcon Invoke(Action<Xaml.Controls.BitmapIcon> action) { action?.Invoke(UI); return this; }

        protected BitmapIcon() { }
    }

    public static partial class BitmapIconExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.BitmapIcon.ShowAsMonochrome"/></summary>
        public static TView ShowAsMonochrome<TView>(this TView view, bool value) where TView : BitmapIcon { view.UI.ShowAsMonochrome = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.BitmapIcon.UriSource"/></summary>
        public static TView UriSource<TView>(this TView view, Uri value) where TView : BitmapIcon { view.UI.UriSource = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.BitmapIcon.ShowAsMonochrome"/></summary>
        public static DependencyProperty<TTarget, bool> ShowAsMonochrome<TTarget>(this TTarget target) where TTarget : BitmapIcon
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.BitmapIcon.ShowAsMonochromeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.BitmapIcon.UriSource"/></summary>
        public static DependencyProperty<TTarget, Uri> UriSource<TTarget>(this TTarget target) where TTarget : BitmapIcon
        => DependencyProperty<TTarget, Uri>.Get(target, Xaml.Controls.BitmapIcon.UriSourceProperty);
    }
}

namespace CSharpMarkup.WinUI // BitmapIconSource
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.BitmapIconSource"/></summary>
        /// <remarks>Remark: BitmapIconSource().Bind() binds to <see cref="Xaml.Controls.BitmapIconSource.UriSourceProperty"/></remarks>
        public static BitmapIconSource BitmapIconSource(bool? ShowAsMonochrome = default, Uri UriSource = default)
        {
            var ui = new Xaml.Controls.BitmapIconSource();
            if (ShowAsMonochrome is not null) ui.ShowAsMonochrome = ShowAsMonochrome.Value;
            if (UriSource is not null) ui.UriSource = UriSource;
            return CSharpMarkup.WinUI.BitmapIconSource.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.BitmapIconSource"/></summary>
        /// <remarks>Remark: BitmapIconSource().Bind() binds to <see cref="Xaml.Controls.BitmapIconSource.UriSourceProperty"/></remarks>
        public static BitmapIconSource BitmapIconSource()
        {
            var ui = new Xaml.Controls.BitmapIconSource();
            return CSharpMarkup.WinUI.BitmapIconSource.StartChain(ui);
        }
    }

    public partial class BitmapIconSource : IconSource, IUI<Xaml.Controls.BitmapIconSource>, IDefaultBindProperty
    {
        static BitmapIconSource instance;

        internal static BitmapIconSource StartChain(Xaml.Controls.BitmapIconSource ui)
        {
            if (instance == null) instance = new BitmapIconSource();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.BitmapIconSource ui;

        public new Xaml.Controls.BitmapIconSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.BitmapIconSource.UriSourceProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.BitmapIconSource.UriSourceProperty;

        public static implicit operator Xaml.Controls.BitmapIconSource(BitmapIconSource view) => view?.UI;

        public static implicit operator BitmapIconSource(Xaml.Controls.BitmapIconSource ui) => BitmapIconSource.StartChain(ui);

        public BitmapIconSource Invoke(Action<Xaml.Controls.BitmapIconSource> action) { action?.Invoke(UI); return this; }

        protected BitmapIconSource() { }
    }

    public static partial class BitmapIconSourceExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.BitmapIconSource.ShowAsMonochrome"/></summary>
        public static TView ShowAsMonochrome<TView>(this TView view, bool value) where TView : BitmapIconSource { view.UI.ShowAsMonochrome = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.BitmapIconSource.UriSource"/></summary>
        public static TView UriSource<TView>(this TView view, Uri value) where TView : BitmapIconSource { view.UI.UriSource = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.BitmapIconSource.ShowAsMonochrome"/></summary>
        public static DependencyProperty<TTarget, bool> ShowAsMonochrome<TTarget>(this TTarget target) where TTarget : BitmapIconSource
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.BitmapIconSource.ShowAsMonochromeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.BitmapIconSource.UriSource"/></summary>
        public static DependencyProperty<TTarget, Uri> UriSource<TTarget>(this TTarget target) where TTarget : BitmapIconSource
        => DependencyProperty<TTarget, Uri>.Get(target, Xaml.Controls.BitmapIconSource.UriSourceProperty);
    }
}

namespace CSharpMarkup.WinUI // Border
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Border"/></summary>
        public static Border Border(Xaml.UIElement Child)
        {
            var ui = new Xaml.Controls.Border();
            if (Child is not null) ui.Child = Child;
            return CSharpMarkup.WinUI.Border.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Border"/></summary>
        public static Border Border(Xaml.Media.Brush Background = default, Xaml.Controls.BackgroundSizing? BackgroundSizing = default, Xaml.BrushTransition BackgroundTransition = default, Xaml.Media.Brush BorderBrush = default, Xaml.Thickness? BorderThickness = default, Xaml.Media.Animation.TransitionCollection ChildTransitions = default, CSharpMarkup.WinUI.to.CornerRadius? CornerRadius = default, Xaml.Thickness? Padding = default, Xaml.UIElement Child = default)
        {
            var ui = new Xaml.Controls.Border();
            if (Background is not null) ui.Background = Background;
            if (BackgroundSizing is not null) ui.BackgroundSizing = BackgroundSizing.Value;
            if (BackgroundTransition is not null) ui.BackgroundTransition = BackgroundTransition;
            if (BorderBrush is not null) ui.BorderBrush = BorderBrush;
            if (BorderThickness is not null) ui.BorderThickness = BorderThickness.Value;
            if (ChildTransitions is not null) ui.ChildTransitions = ChildTransitions;
            if (CornerRadius is not null) ui.CornerRadius = CornerRadius.Value;
            if (Padding is not null) ui.Padding = Padding.Value;
            if (Child is not null) ui.Child = Child;
            return CSharpMarkup.WinUI.Border.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Border"/></summary>
        public static Border Border()
        {
            var ui = new Xaml.Controls.Border();
            return CSharpMarkup.WinUI.Border.StartChain(ui);
        }
    }

    public partial class Border : FrameworkElement, IUI<Xaml.Controls.Border>
    {
        static Border instance;

        internal static Border StartChain(Xaml.Controls.Border ui)
        {
            if (instance == null) instance = new Border();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Border ui;

        public new Xaml.Controls.Border UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Border view) => view?.UI;

        public static implicit operator Xaml.Controls.Border(Border view) => view?.UI;

        public static implicit operator Border(Xaml.Controls.Border ui) => Border.StartChain(ui);

        public Border Invoke(Action<Xaml.Controls.Border> action) { action?.Invoke(UI); return this; }

        protected Border() { }
    }

    public static partial class BorderExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Border.Background"/></summary>
        public static TView Background<TView>(this TView view, Xaml.Media.Brush value) where TView : Border { view.UI.Background = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.Background"/></summary>
        public static TView Background<TView>(this TView view, Windows.UI.Color value) where TView : Border { view.UI.Background = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.Background"/></summary>
        public static TView Background<TView>(this TView view, string color) where TView : Border { view.UI.Background = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.BackgroundSizing"/></summary>
        public static TView BackgroundSizing<TView>(this TView view, Xaml.Controls.BackgroundSizing value) where TView : Border { view.UI.BackgroundSizing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.BackgroundTransition"/></summary>
        public static TView BackgroundTransition<TView>(this TView view, Xaml.BrushTransition value) where TView : Border { view.UI.BackgroundTransition = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : Border { view.UI.BorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : Border { view.UI.BorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, string color) where TView : Border { view.UI.BorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, Xaml.Thickness value) where TView : Border { view.UI.BorderThickness = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double uniform) where TView : Border { view.UI.BorderThickness = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double horizontal, double vertical) where TView : Border { view.UI.BorderThickness = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double left, double top, double right, double bottom) where TView : Border { view.UI.BorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.BorderThickness"/></summary>
        public static TView BorderThicknesses<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : Border { view.UI.BorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.ChildTransitions"/></summary>
        public static TView ChildTransitions<TView>(this TView view, Xaml.Media.Animation.TransitionCollection value) where TView : Border { view.UI.ChildTransitions = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.CornerRadius"/></summary>
        public static TView CornerRadius<TView>(this TView view, CSharpMarkup.WinUI.to.CornerRadius value) where TView : Border { view.UI.CornerRadius = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.Padding"/></summary>
        public static TView Padding<TView>(this TView view, Xaml.Thickness value) where TView : Border { view.UI.Padding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double uniform) where TView : Border { view.UI.Padding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double horizontal, double vertical) where TView : Border { view.UI.Padding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double left, double top, double right, double bottom) where TView : Border { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Border.Padding"/></summary>
        public static TView Paddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : Border { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Border.Background"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Background<TTarget>(this TTarget target) where TTarget : Border
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Border.BackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Border.BackgroundSizing"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> BackgroundSizing<TTarget>(this TTarget target) where TTarget : Border
        => DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing>.Get(target, Xaml.Controls.Border.BackgroundSizingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Border.BorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> BorderBrush<TTarget>(this TTarget target) where TTarget : Border
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Border.BorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Border.BorderThickness"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> BorderThickness<TTarget>(this TTarget target) where TTarget : Border
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Border.BorderThicknessProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Border.ChildTransitions"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection> ChildTransitions<TTarget>(this TTarget target) where TTarget : Border
        => DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection>.Get(target, Xaml.Controls.Border.ChildTransitionsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Border.CornerRadius"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius> CornerRadius<TTarget>(this TTarget target) where TTarget : Border
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius>.Get(target, Xaml.Controls.Border.CornerRadiusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Border.Padding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> Padding<TTarget>(this TTarget target) where TTarget : Border
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Border.PaddingProperty);
    }
}

namespace CSharpMarkup.WinUI // BreadcrumbBar
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.BreadcrumbBar"/></summary>
        public static BreadcrumbBar BreadcrumbBar(object ItemsSource = default, object ItemTemplate = default)
        {
            var ui = new Xaml.Controls.BreadcrumbBar();
            if (ItemsSource is not null) ui.ItemsSource = ItemsSource;
            if (ItemTemplate is not null) ui.ItemTemplate = ItemTemplate;
            return CSharpMarkup.WinUI.BreadcrumbBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.BreadcrumbBar"/></summary>
        public static BreadcrumbBar BreadcrumbBar()
        {
            var ui = new Xaml.Controls.BreadcrumbBar();
            return CSharpMarkup.WinUI.BreadcrumbBar.StartChain(ui);
        }
    }

    public partial class BreadcrumbBar : Control, IUI<Xaml.Controls.BreadcrumbBar>
    {
        static BreadcrumbBar instance;

        internal static BreadcrumbBar StartChain(Xaml.Controls.BreadcrumbBar ui)
        {
            if (instance == null) instance = new BreadcrumbBar();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.BreadcrumbBar ui;

        public new Xaml.Controls.BreadcrumbBar UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(BreadcrumbBar view) => view?.UI;

        public static implicit operator Xaml.Controls.BreadcrumbBar(BreadcrumbBar view) => view?.UI;

        public static implicit operator BreadcrumbBar(Xaml.Controls.BreadcrumbBar ui) => BreadcrumbBar.StartChain(ui);

        public BreadcrumbBar Invoke(Action<Xaml.Controls.BreadcrumbBar> action) { action?.Invoke(UI); return this; }

        protected BreadcrumbBar() { }
    }

    public static partial class BreadcrumbBarExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.BreadcrumbBar.ItemsSource"/></summary>
        public static TView ItemsSource<TView>(this TView view, object value) where TView : BreadcrumbBar { view.UI.ItemsSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.BreadcrumbBar.ItemTemplate"/></summary>
        public static TView ItemTemplate<TView>(this TView view, object value) where TView : BreadcrumbBar { view.UI.ItemTemplate = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.BreadcrumbBar.ItemsSource"/></summary>
        public static DependencyProperty<TTarget, object> ItemsSource<TTarget>(this TTarget target) where TTarget : BreadcrumbBar
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.BreadcrumbBar.ItemsSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.BreadcrumbBar.ItemTemplate"/></summary>
        public static DependencyProperty<TTarget, object> ItemTemplate<TTarget>(this TTarget target) where TTarget : BreadcrumbBar
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.BreadcrumbBar.ItemTemplateProperty);
    }
}

namespace CSharpMarkup.WinUI // BreadcrumbBarItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.BreadcrumbBarItem"/></summary>
        public static BreadcrumbBarItem BreadcrumbBarItem(UIObject Content)
        {
            var ui = new Xaml.Controls.BreadcrumbBarItem();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.BreadcrumbBarItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.BreadcrumbBarItem"/></summary>
        public static BreadcrumbBarItem BreadcrumbBarItem()
        {
            var ui = new Xaml.Controls.BreadcrumbBarItem();
            return CSharpMarkup.WinUI.BreadcrumbBarItem.StartChain(ui);
        }
    }

    public partial class BreadcrumbBarItem : ContentControl, IUI<Xaml.Controls.BreadcrumbBarItem>
    {
        static BreadcrumbBarItem instance;

        internal static BreadcrumbBarItem StartChain(Xaml.Controls.BreadcrumbBarItem ui)
        {
            if (instance == null) instance = new BreadcrumbBarItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.BreadcrumbBarItem ui;

        public new Xaml.Controls.BreadcrumbBarItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(BreadcrumbBarItem view) => view?.UI;

        public static implicit operator Xaml.Controls.BreadcrumbBarItem(BreadcrumbBarItem view) => view?.UI;

        public static implicit operator BreadcrumbBarItem(Xaml.Controls.BreadcrumbBarItem ui) => BreadcrumbBarItem.StartChain(ui);

        public BreadcrumbBarItem Invoke(Action<Xaml.Controls.BreadcrumbBarItem> action) { action?.Invoke(UI); return this; }

        protected BreadcrumbBarItem() { }
    }
}

namespace CSharpMarkup.WinUI // Button
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Button"/></summary>
        public static Button Button(UIObject Content)
        {
            var ui = new Xaml.Controls.Button();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.Button.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Button"/></summary>
        public static Button Button(Xaml.Controls.Primitives.FlyoutBase Flyout = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.Button();
            if (Flyout is not null) ui.Flyout = Flyout;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.Button.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Button"/></summary>
        public static Button Button()
        {
            var ui = new Xaml.Controls.Button();
            return CSharpMarkup.WinUI.Button.StartChain(ui);
        }
    }

    public partial class Button : ButtonBase, IUI<Xaml.Controls.Button>
    {
        static Button instance;

        internal static Button StartChain(Xaml.Controls.Button ui)
        {
            if (instance == null) instance = new Button();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Button ui;

        public new Xaml.Controls.Button UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Button view) => view?.UI;

        public static implicit operator Xaml.Controls.Button(Button view) => view?.UI;

        public static implicit operator Button(Xaml.Controls.Button ui) => Button.StartChain(ui);

        public Button Invoke(Action<Xaml.Controls.Button> action) { action?.Invoke(UI); return this; }

        protected Button() { }
    }

    public static partial class ButtonExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Button.Flyout"/></summary>
        public static TView Flyout<TView>(this TView view, Xaml.Controls.Primitives.FlyoutBase value) where TView : Button { view.UI.Flyout = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Button.Flyout"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase> Flyout<TTarget>(this TTarget target) where TTarget : Button
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase>.Get(target, Xaml.Controls.Button.FlyoutProperty);
    }
}

namespace CSharpMarkup.WinUI // CalendarDatePicker
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.CalendarDatePicker"/></summary>
        /// <remarks>Remark: CalendarDatePicker().Bind() binds to <see cref="Xaml.Controls.CalendarDatePicker.DateProperty"/></remarks>
        public static CalendarDatePicker CalendarDatePicker(string CalendarIdentifier = default, Xaml.Style CalendarViewStyle = default, DateTimeOffset? Date = default, string DateFormat = default, string DayOfWeekFormat = default, object Description = default, Xaml.Controls.CalendarViewDisplayMode? DisplayMode = default, Windows.Globalization.DayOfWeek? FirstDayOfWeek = default, object Header = default, Xaml.DataTemplate HeaderTemplate = default, bool? IsCalendarOpen = default, bool? IsGroupLabelVisible = default, bool? IsOutOfScopeEnabled = default, bool? IsTodayHighlighted = default, Xaml.Controls.LightDismissOverlayMode? LightDismissOverlayMode = default, DateTimeOffset? MaxDate = default, DateTimeOffset? MinDate = default, string PlaceholderText = default)
        {
            var ui = new Xaml.Controls.CalendarDatePicker();
            if (CalendarIdentifier is not null) ui.CalendarIdentifier = CalendarIdentifier;
            if (CalendarViewStyle is not null) ui.CalendarViewStyle = CalendarViewStyle;
            if (Date is not null) ui.Date = Date.Value;
            if (DateFormat is not null) ui.DateFormat = DateFormat;
            if (DayOfWeekFormat is not null) ui.DayOfWeekFormat = DayOfWeekFormat;
            if (Description is not null) ui.Description = Description;
            if (DisplayMode is not null) ui.DisplayMode = DisplayMode.Value;
            if (FirstDayOfWeek is not null) ui.FirstDayOfWeek = FirstDayOfWeek.Value;
            if (Header is not null) ui.Header = Header;
            if (HeaderTemplate is not null) ui.HeaderTemplate = HeaderTemplate;
            if (IsCalendarOpen is not null) ui.IsCalendarOpen = IsCalendarOpen.Value;
            if (IsGroupLabelVisible is not null) ui.IsGroupLabelVisible = IsGroupLabelVisible.Value;
            if (IsOutOfScopeEnabled is not null) ui.IsOutOfScopeEnabled = IsOutOfScopeEnabled.Value;
            if (IsTodayHighlighted is not null) ui.IsTodayHighlighted = IsTodayHighlighted.Value;
            if (LightDismissOverlayMode is not null) ui.LightDismissOverlayMode = LightDismissOverlayMode.Value;
            if (MaxDate is not null) ui.MaxDate = MaxDate.Value;
            if (MinDate is not null) ui.MinDate = MinDate.Value;
            if (PlaceholderText is not null) ui.PlaceholderText = PlaceholderText;
            return CSharpMarkup.WinUI.CalendarDatePicker.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.CalendarDatePicker"/></summary>
        /// <remarks>Remark: CalendarDatePicker().Bind() binds to <see cref="Xaml.Controls.CalendarDatePicker.DateProperty"/></remarks>
        public static CalendarDatePicker CalendarDatePicker()
        {
            var ui = new Xaml.Controls.CalendarDatePicker();
            return CSharpMarkup.WinUI.CalendarDatePicker.StartChain(ui);
        }
    }

    public partial class CalendarDatePicker : Control, IUI<Xaml.Controls.CalendarDatePicker>, IDefaultBindProperty
    {
        static CalendarDatePicker instance;

        internal static CalendarDatePicker StartChain(Xaml.Controls.CalendarDatePicker ui)
        {
            if (instance == null) instance = new CalendarDatePicker();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.CalendarDatePicker ui;

        public new Xaml.Controls.CalendarDatePicker UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.CalendarDatePicker.DateProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.CalendarDatePicker.DateProperty;

        public static implicit operator Xaml.UIElement(CalendarDatePicker view) => view?.UI;

        public static implicit operator Xaml.Controls.CalendarDatePicker(CalendarDatePicker view) => view?.UI;

        public static implicit operator CalendarDatePicker(Xaml.Controls.CalendarDatePicker ui) => CalendarDatePicker.StartChain(ui);

        public CalendarDatePicker Invoke(Action<Xaml.Controls.CalendarDatePicker> action) { action?.Invoke(UI); return this; }

        protected CalendarDatePicker() { }
    }

    public static partial class CalendarDatePickerExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.CalendarIdentifier"/></summary>
        public static TView CalendarIdentifier<TView>(this TView view, string value) where TView : CalendarDatePicker { view.UI.CalendarIdentifier = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.CalendarViewStyle"/></summary>
        public static TView CalendarViewStyle<TView>(this TView view, Xaml.Style value) where TView : CalendarDatePicker { view.UI.CalendarViewStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.Date"/></summary>
        public static TView Date<TView>(this TView view, DateTimeOffset? value) where TView : CalendarDatePicker { view.UI.Date = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.DateFormat"/></summary>
        public static TView DateFormat<TView>(this TView view, string value) where TView : CalendarDatePicker { view.UI.DateFormat = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.DayOfWeekFormat"/></summary>
        public static TView DayOfWeekFormat<TView>(this TView view, string value) where TView : CalendarDatePicker { view.UI.DayOfWeekFormat = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.Description"/></summary>
        public static TView Description<TView>(this TView view, object value) where TView : CalendarDatePicker { view.UI.Description = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.DisplayMode"/></summary>
        public static TView DisplayMode<TView>(this TView view, Xaml.Controls.CalendarViewDisplayMode value) where TView : CalendarDatePicker { view.UI.DisplayMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.FirstDayOfWeek"/></summary>
        public static TView FirstDayOfWeek<TView>(this TView view, Windows.Globalization.DayOfWeek value) where TView : CalendarDatePicker { view.UI.FirstDayOfWeek = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : CalendarDatePicker { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : CalendarDatePicker { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.IsCalendarOpen"/></summary>
        public static TView IsCalendarOpen<TView>(this TView view, bool value) where TView : CalendarDatePicker { view.UI.IsCalendarOpen = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.IsGroupLabelVisible"/></summary>
        public static TView IsGroupLabelVisible<TView>(this TView view, bool value) where TView : CalendarDatePicker { view.UI.IsGroupLabelVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.IsOutOfScopeEnabled"/></summary>
        public static TView IsOutOfScopeEnabled<TView>(this TView view, bool value) where TView : CalendarDatePicker { view.UI.IsOutOfScopeEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.IsTodayHighlighted"/></summary>
        public static TView IsTodayHighlighted<TView>(this TView view, bool value) where TView : CalendarDatePicker { view.UI.IsTodayHighlighted = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.LightDismissOverlayMode"/></summary>
        public static TView LightDismissOverlayMode<TView>(this TView view, Xaml.Controls.LightDismissOverlayMode value) where TView : CalendarDatePicker { view.UI.LightDismissOverlayMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.MaxDate"/></summary>
        public static TView MaxDate<TView>(this TView view, DateTimeOffset value) where TView : CalendarDatePicker { view.UI.MaxDate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.MinDate"/></summary>
        public static TView MinDate<TView>(this TView view, DateTimeOffset value) where TView : CalendarDatePicker { view.UI.MinDate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarDatePicker.PlaceholderText"/></summary>
        public static TView PlaceholderText<TView>(this TView view, string value) where TView : CalendarDatePicker { view.UI.PlaceholderText = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.CalendarIdentifier"/></summary>
        public static DependencyProperty<TTarget, string> CalendarIdentifier<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.CalendarDatePicker.CalendarIdentifierProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.CalendarViewStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> CalendarViewStyle<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.CalendarDatePicker.CalendarViewStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.DateFormat"/></summary>
        public static DependencyProperty<TTarget, string> DateFormat<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.CalendarDatePicker.DateFormatProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.Date"/></summary>
        public static DependencyProperty<TTarget, DateTimeOffset?> Date<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, DateTimeOffset?>.Get(target, Xaml.Controls.CalendarDatePicker.DateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.DayOfWeekFormat"/></summary>
        public static DependencyProperty<TTarget, string> DayOfWeekFormat<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.CalendarDatePicker.DayOfWeekFormatProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.Description"/></summary>
        public static DependencyProperty<TTarget, object> Description<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.CalendarDatePicker.DescriptionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.DisplayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.CalendarViewDisplayMode> DisplayMode<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, Xaml.Controls.CalendarViewDisplayMode>.Get(target, Xaml.Controls.CalendarDatePicker.DisplayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.FirstDayOfWeek"/></summary>
        public static DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> FirstDayOfWeek<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, Windows.Globalization.DayOfWeek>.Get(target, Xaml.Controls.CalendarDatePicker.FirstDayOfWeekProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.CalendarDatePicker.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.CalendarDatePicker.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.IsCalendarOpen"/></summary>
        public static DependencyProperty<TTarget, bool> IsCalendarOpen<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.CalendarDatePicker.IsCalendarOpenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.IsGroupLabelVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsGroupLabelVisible<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.CalendarDatePicker.IsGroupLabelVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.IsOutOfScopeEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsOutOfScopeEnabled<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.CalendarDatePicker.IsOutOfScopeEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.IsTodayHighlighted"/></summary>
        public static DependencyProperty<TTarget, bool> IsTodayHighlighted<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.CalendarDatePicker.IsTodayHighlightedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.LightDismissOverlayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> LightDismissOverlayMode<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode>.Get(target, Xaml.Controls.CalendarDatePicker.LightDismissOverlayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.MaxDate"/></summary>
        public static DependencyProperty<TTarget, DateTimeOffset> MaxDate<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, DateTimeOffset>.Get(target, Xaml.Controls.CalendarDatePicker.MaxDateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.MinDate"/></summary>
        public static DependencyProperty<TTarget, DateTimeOffset> MinDate<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, DateTimeOffset>.Get(target, Xaml.Controls.CalendarDatePicker.MinDateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarDatePicker.PlaceholderText"/></summary>
        public static DependencyProperty<TTarget, string> PlaceholderText<TTarget>(this TTarget target) where TTarget : CalendarDatePicker
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.CalendarDatePicker.PlaceholderTextProperty);
    }
}

namespace CSharpMarkup.WinUI // CalendarView
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.CalendarView"/></summary>
        public static CalendarView CalendarView(Xaml.Media.Brush BlackoutBackground = default, Xaml.Media.Brush BlackoutForeground = default, Xaml.Media.Brush BlackoutStrikethroughBrush = default, string CalendarIdentifier = default, Xaml.Media.Brush CalendarItemBackground = default, Xaml.Media.Brush CalendarItemBorderBrush = default, Xaml.Thickness? CalendarItemBorderThickness = default, CSharpMarkup.WinUI.to.CornerRadius? CalendarItemCornerRadius = default, Xaml.Media.Brush CalendarItemDisabledBackground = default, Xaml.Media.Brush CalendarItemForeground = default, Xaml.Media.Brush CalendarItemHoverBackground = default, Xaml.Media.Brush CalendarItemPressedBackground = default, Xaml.Style CalendarViewDayItemStyle = default, Xaml.Media.FontFamily DayItemFontFamily = default, double? DayItemFontSize = default, Windows.UI.Text.FontStyle? DayItemFontStyle = default, Windows.UI.Text.FontWeight? DayItemFontWeight = default, Xaml.Thickness? DayItemMargin = default, string DayOfWeekFormat = default, Xaml.Media.Brush DisabledForeground = default, Xaml.Controls.CalendarViewDisplayMode? DisplayMode = default, Windows.Globalization.DayOfWeek? FirstDayOfWeek = default, Xaml.Media.FontFamily FirstOfMonthLabelFontFamily = default, double? FirstOfMonthLabelFontSize = default, Windows.UI.Text.FontStyle? FirstOfMonthLabelFontStyle = default, Windows.UI.Text.FontWeight? FirstOfMonthLabelFontWeight = default, Xaml.Thickness? FirstOfMonthLabelMargin = default, Xaml.Media.FontFamily FirstOfYearDecadeLabelFontFamily = default, double? FirstOfYearDecadeLabelFontSize = default, Windows.UI.Text.FontStyle? FirstOfYearDecadeLabelFontStyle = default, Windows.UI.Text.FontWeight? FirstOfYearDecadeLabelFontWeight = default, Xaml.Thickness? FirstOfYearDecadeLabelMargin = default, Xaml.Media.Brush FocusBorderBrush = default, Xaml.HorizontalAlignment? HorizontalDayItemAlignment = default, Xaml.HorizontalAlignment? HorizontalFirstOfMonthLabelAlignment = default, Xaml.Media.Brush HoverBorderBrush = default, bool? IsGroupLabelVisible = default, bool? IsOutOfScopeEnabled = default, bool? IsTodayHighlighted = default, DateTimeOffset? MaxDate = default, DateTimeOffset? MinDate = default, Xaml.Media.FontFamily MonthYearItemFontFamily = default, double? MonthYearItemFontSize = default, Windows.UI.Text.FontStyle? MonthYearItemFontStyle = default, Windows.UI.Text.FontWeight? MonthYearItemFontWeight = default, Xaml.Thickness? MonthYearItemMargin = default, int? NumberOfWeeksInView = default, Xaml.Media.Brush OutOfScopeBackground = default, Xaml.Media.Brush OutOfScopeForeground = default, Xaml.Media.Brush OutOfScopeHoverForeground = default, Xaml.Media.Brush OutOfScopePressedForeground = default, Xaml.Media.Brush PressedBorderBrush = default, Xaml.Media.Brush PressedForeground = default, Xaml.Media.Brush SelectedBorderBrush = default, Xaml.Media.Brush SelectedDisabledBorderBrush = default, Xaml.Media.Brush SelectedDisabledForeground = default, Xaml.Media.Brush SelectedForeground = default, Xaml.Media.Brush SelectedHoverBorderBrush = default, Xaml.Media.Brush SelectedHoverForeground = default, Xaml.Media.Brush SelectedPressedBorderBrush = default, Xaml.Media.Brush SelectedPressedForeground = default, Xaml.Controls.CalendarViewSelectionMode? SelectionMode = default, Xaml.Media.Brush TodayBackground = default, Xaml.Media.Brush TodayBlackoutBackground = default, Xaml.Media.Brush TodayBlackoutForeground = default, Xaml.Media.Brush TodayDisabledBackground = default, Windows.UI.Text.FontWeight? TodayFontWeight = default, Xaml.Media.Brush TodayForeground = default, Xaml.Media.Brush TodayHoverBackground = default, Xaml.Media.Brush TodayPressedBackground = default, Xaml.Media.Brush TodaySelectedInnerBorderBrush = default, Xaml.VerticalAlignment? VerticalDayItemAlignment = default, Xaml.VerticalAlignment? VerticalFirstOfMonthLabelAlignment = default)
        {
            var ui = new Xaml.Controls.CalendarView();
            if (BlackoutBackground is not null) ui.BlackoutBackground = BlackoutBackground;
            if (BlackoutForeground is not null) ui.BlackoutForeground = BlackoutForeground;
            if (BlackoutStrikethroughBrush is not null) ui.BlackoutStrikethroughBrush = BlackoutStrikethroughBrush;
            if (CalendarIdentifier is not null) ui.CalendarIdentifier = CalendarIdentifier;
            if (CalendarItemBackground is not null) ui.CalendarItemBackground = CalendarItemBackground;
            if (CalendarItemBorderBrush is not null) ui.CalendarItemBorderBrush = CalendarItemBorderBrush;
            if (CalendarItemBorderThickness is not null) ui.CalendarItemBorderThickness = CalendarItemBorderThickness.Value;
            if (CalendarItemCornerRadius is not null) ui.CalendarItemCornerRadius = CalendarItemCornerRadius.Value;
            if (CalendarItemDisabledBackground is not null) ui.CalendarItemDisabledBackground = CalendarItemDisabledBackground;
            if (CalendarItemForeground is not null) ui.CalendarItemForeground = CalendarItemForeground;
            if (CalendarItemHoverBackground is not null) ui.CalendarItemHoverBackground = CalendarItemHoverBackground;
            if (CalendarItemPressedBackground is not null) ui.CalendarItemPressedBackground = CalendarItemPressedBackground;
            if (CalendarViewDayItemStyle is not null) ui.CalendarViewDayItemStyle = CalendarViewDayItemStyle;
            if (DayItemFontFamily is not null) ui.DayItemFontFamily = DayItemFontFamily;
            if (DayItemFontSize is not null) ui.DayItemFontSize = DayItemFontSize.Value;
            if (DayItemFontStyle is not null) ui.DayItemFontStyle = DayItemFontStyle.Value;
            if (DayItemFontWeight is not null) ui.DayItemFontWeight = DayItemFontWeight.Value;
            if (DayItemMargin is not null) ui.DayItemMargin = DayItemMargin.Value;
            if (DayOfWeekFormat is not null) ui.DayOfWeekFormat = DayOfWeekFormat;
            if (DisabledForeground is not null) ui.DisabledForeground = DisabledForeground;
            if (DisplayMode is not null) ui.DisplayMode = DisplayMode.Value;
            if (FirstDayOfWeek is not null) ui.FirstDayOfWeek = FirstDayOfWeek.Value;
            if (FirstOfMonthLabelFontFamily is not null) ui.FirstOfMonthLabelFontFamily = FirstOfMonthLabelFontFamily;
            if (FirstOfMonthLabelFontSize is not null) ui.FirstOfMonthLabelFontSize = FirstOfMonthLabelFontSize.Value;
            if (FirstOfMonthLabelFontStyle is not null) ui.FirstOfMonthLabelFontStyle = FirstOfMonthLabelFontStyle.Value;
            if (FirstOfMonthLabelFontWeight is not null) ui.FirstOfMonthLabelFontWeight = FirstOfMonthLabelFontWeight.Value;
            if (FirstOfMonthLabelMargin is not null) ui.FirstOfMonthLabelMargin = FirstOfMonthLabelMargin.Value;
            if (FirstOfYearDecadeLabelFontFamily is not null) ui.FirstOfYearDecadeLabelFontFamily = FirstOfYearDecadeLabelFontFamily;
            if (FirstOfYearDecadeLabelFontSize is not null) ui.FirstOfYearDecadeLabelFontSize = FirstOfYearDecadeLabelFontSize.Value;
            if (FirstOfYearDecadeLabelFontStyle is not null) ui.FirstOfYearDecadeLabelFontStyle = FirstOfYearDecadeLabelFontStyle.Value;
            if (FirstOfYearDecadeLabelFontWeight is not null) ui.FirstOfYearDecadeLabelFontWeight = FirstOfYearDecadeLabelFontWeight.Value;
            if (FirstOfYearDecadeLabelMargin is not null) ui.FirstOfYearDecadeLabelMargin = FirstOfYearDecadeLabelMargin.Value;
            if (FocusBorderBrush is not null) ui.FocusBorderBrush = FocusBorderBrush;
            if (HorizontalDayItemAlignment is not null) ui.HorizontalDayItemAlignment = HorizontalDayItemAlignment.Value;
            if (HorizontalFirstOfMonthLabelAlignment is not null) ui.HorizontalFirstOfMonthLabelAlignment = HorizontalFirstOfMonthLabelAlignment.Value;
            if (HoverBorderBrush is not null) ui.HoverBorderBrush = HoverBorderBrush;
            if (IsGroupLabelVisible is not null) ui.IsGroupLabelVisible = IsGroupLabelVisible.Value;
            if (IsOutOfScopeEnabled is not null) ui.IsOutOfScopeEnabled = IsOutOfScopeEnabled.Value;
            if (IsTodayHighlighted is not null) ui.IsTodayHighlighted = IsTodayHighlighted.Value;
            if (MaxDate is not null) ui.MaxDate = MaxDate.Value;
            if (MinDate is not null) ui.MinDate = MinDate.Value;
            if (MonthYearItemFontFamily is not null) ui.MonthYearItemFontFamily = MonthYearItemFontFamily;
            if (MonthYearItemFontSize is not null) ui.MonthYearItemFontSize = MonthYearItemFontSize.Value;
            if (MonthYearItemFontStyle is not null) ui.MonthYearItemFontStyle = MonthYearItemFontStyle.Value;
            if (MonthYearItemFontWeight is not null) ui.MonthYearItemFontWeight = MonthYearItemFontWeight.Value;
            if (MonthYearItemMargin is not null) ui.MonthYearItemMargin = MonthYearItemMargin.Value;
            if (NumberOfWeeksInView is not null) ui.NumberOfWeeksInView = NumberOfWeeksInView.Value;
            if (OutOfScopeBackground is not null) ui.OutOfScopeBackground = OutOfScopeBackground;
            if (OutOfScopeForeground is not null) ui.OutOfScopeForeground = OutOfScopeForeground;
            if (OutOfScopeHoverForeground is not null) ui.OutOfScopeHoverForeground = OutOfScopeHoverForeground;
            if (OutOfScopePressedForeground is not null) ui.OutOfScopePressedForeground = OutOfScopePressedForeground;
            if (PressedBorderBrush is not null) ui.PressedBorderBrush = PressedBorderBrush;
            if (PressedForeground is not null) ui.PressedForeground = PressedForeground;
            if (SelectedBorderBrush is not null) ui.SelectedBorderBrush = SelectedBorderBrush;
            if (SelectedDisabledBorderBrush is not null) ui.SelectedDisabledBorderBrush = SelectedDisabledBorderBrush;
            if (SelectedDisabledForeground is not null) ui.SelectedDisabledForeground = SelectedDisabledForeground;
            if (SelectedForeground is not null) ui.SelectedForeground = SelectedForeground;
            if (SelectedHoverBorderBrush is not null) ui.SelectedHoverBorderBrush = SelectedHoverBorderBrush;
            if (SelectedHoverForeground is not null) ui.SelectedHoverForeground = SelectedHoverForeground;
            if (SelectedPressedBorderBrush is not null) ui.SelectedPressedBorderBrush = SelectedPressedBorderBrush;
            if (SelectedPressedForeground is not null) ui.SelectedPressedForeground = SelectedPressedForeground;
            if (SelectionMode is not null) ui.SelectionMode = SelectionMode.Value;
            if (TodayBackground is not null) ui.TodayBackground = TodayBackground;
            if (TodayBlackoutBackground is not null) ui.TodayBlackoutBackground = TodayBlackoutBackground;
            if (TodayBlackoutForeground is not null) ui.TodayBlackoutForeground = TodayBlackoutForeground;
            if (TodayDisabledBackground is not null) ui.TodayDisabledBackground = TodayDisabledBackground;
            if (TodayFontWeight is not null) ui.TodayFontWeight = TodayFontWeight.Value;
            if (TodayForeground is not null) ui.TodayForeground = TodayForeground;
            if (TodayHoverBackground is not null) ui.TodayHoverBackground = TodayHoverBackground;
            if (TodayPressedBackground is not null) ui.TodayPressedBackground = TodayPressedBackground;
            if (TodaySelectedInnerBorderBrush is not null) ui.TodaySelectedInnerBorderBrush = TodaySelectedInnerBorderBrush;
            if (VerticalDayItemAlignment is not null) ui.VerticalDayItemAlignment = VerticalDayItemAlignment.Value;
            if (VerticalFirstOfMonthLabelAlignment is not null) ui.VerticalFirstOfMonthLabelAlignment = VerticalFirstOfMonthLabelAlignment.Value;
            return CSharpMarkup.WinUI.CalendarView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.CalendarView"/></summary>
        public static CalendarView CalendarView()
        {
            var ui = new Xaml.Controls.CalendarView();
            return CSharpMarkup.WinUI.CalendarView.StartChain(ui);
        }
    }

    public partial class CalendarView : Control, IUI<Xaml.Controls.CalendarView>
    {
        static CalendarView instance;

        internal static CalendarView StartChain(Xaml.Controls.CalendarView ui)
        {
            if (instance == null) instance = new CalendarView();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.CalendarView ui;

        public new Xaml.Controls.CalendarView UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(CalendarView view) => view?.UI;

        public static implicit operator Xaml.Controls.CalendarView(CalendarView view) => view?.UI;

        public static implicit operator CalendarView(Xaml.Controls.CalendarView ui) => CalendarView.StartChain(ui);

        public CalendarView Invoke(Action<Xaml.Controls.CalendarView> action) { action?.Invoke(UI); return this; }

        protected CalendarView() { }
    }

    public static partial class CalendarViewExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.CalendarView.BlackoutBackground"/></summary>
        public static TView BlackoutBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.BlackoutBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.BlackoutBackground"/></summary>
        public static TView BlackoutBackground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.BlackoutBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.BlackoutBackground"/></summary>
        public static TView BlackoutBackground<TView>(this TView view, string color) where TView : CalendarView { view.UI.BlackoutBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.BlackoutForeground"/></summary>
        public static TView BlackoutForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.BlackoutForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.BlackoutForeground"/></summary>
        public static TView BlackoutForeground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.BlackoutForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.BlackoutForeground"/></summary>
        public static TView BlackoutForeground<TView>(this TView view, string color) where TView : CalendarView { view.UI.BlackoutForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.BlackoutStrikethroughBrush"/></summary>
        public static TView BlackoutStrikethroughBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.BlackoutStrikethroughBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.BlackoutStrikethroughBrush"/></summary>
        public static TView BlackoutStrikethroughBrush<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.BlackoutStrikethroughBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.BlackoutStrikethroughBrush"/></summary>
        public static TView BlackoutStrikethroughBrush<TView>(this TView view, string color) where TView : CalendarView { view.UI.BlackoutStrikethroughBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarIdentifier"/></summary>
        public static TView CalendarIdentifier<TView>(this TView view, string value) where TView : CalendarView { view.UI.CalendarIdentifier = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemBackground"/></summary>
        public static TView CalendarItemBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.CalendarItemBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemBackground"/></summary>
        public static TView CalendarItemBackground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.CalendarItemBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemBackground"/></summary>
        public static TView CalendarItemBackground<TView>(this TView view, string color) where TView : CalendarView { view.UI.CalendarItemBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemBorderBrush"/></summary>
        public static TView CalendarItemBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.CalendarItemBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemBorderBrush"/></summary>
        public static TView CalendarItemBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.CalendarItemBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemBorderBrush"/></summary>
        public static TView CalendarItemBorderBrush<TView>(this TView view, string color) where TView : CalendarView { view.UI.CalendarItemBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemBorderThickness"/></summary>
        public static TView CalendarItemBorderThickness<TView>(this TView view, Xaml.Thickness value) where TView : CalendarView { view.UI.CalendarItemBorderThickness = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemBorderThickness"/></summary>
        public static TView CalendarItemBorderThickness<TView>(this TView view, double uniform) where TView : CalendarView { view.UI.CalendarItemBorderThickness = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemBorderThickness"/></summary>
        public static TView CalendarItemBorderThickness<TView>(this TView view, double horizontal, double vertical) where TView : CalendarView { view.UI.CalendarItemBorderThickness = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemBorderThickness"/></summary>
        public static TView CalendarItemBorderThickness<TView>(this TView view, double left, double top, double right, double bottom) where TView : CalendarView { view.UI.CalendarItemBorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemBorderThickness"/></summary>
        public static TView CalendarItemBorderThicknesses<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : CalendarView { view.UI.CalendarItemBorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemCornerRadius"/></summary>
        public static TView CalendarItemCornerRadius<TView>(this TView view, CSharpMarkup.WinUI.to.CornerRadius value) where TView : CalendarView { view.UI.CalendarItemCornerRadius = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemDisabledBackground"/></summary>
        public static TView CalendarItemDisabledBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.CalendarItemDisabledBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemDisabledBackground"/></summary>
        public static TView CalendarItemDisabledBackground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.CalendarItemDisabledBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemDisabledBackground"/></summary>
        public static TView CalendarItemDisabledBackground<TView>(this TView view, string color) where TView : CalendarView { view.UI.CalendarItemDisabledBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemForeground"/></summary>
        public static TView CalendarItemForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.CalendarItemForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemForeground"/></summary>
        public static TView CalendarItemForeground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.CalendarItemForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemForeground"/></summary>
        public static TView CalendarItemForeground<TView>(this TView view, string color) where TView : CalendarView { view.UI.CalendarItemForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemHoverBackground"/></summary>
        public static TView CalendarItemHoverBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.CalendarItemHoverBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemHoverBackground"/></summary>
        public static TView CalendarItemHoverBackground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.CalendarItemHoverBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemHoverBackground"/></summary>
        public static TView CalendarItemHoverBackground<TView>(this TView view, string color) where TView : CalendarView { view.UI.CalendarItemHoverBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemPressedBackground"/></summary>
        public static TView CalendarItemPressedBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.CalendarItemPressedBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemPressedBackground"/></summary>
        public static TView CalendarItemPressedBackground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.CalendarItemPressedBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarItemPressedBackground"/></summary>
        public static TView CalendarItemPressedBackground<TView>(this TView view, string color) where TView : CalendarView { view.UI.CalendarItemPressedBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.CalendarViewDayItemStyle"/></summary>
        public static TView CalendarViewDayItemStyle<TView>(this TView view, Xaml.Style value) where TView : CalendarView { view.UI.CalendarViewDayItemStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.DayItemFontFamily"/></summary>
        public static TView DayItemFontFamily<TView>(this TView view, Xaml.Media.FontFamily value) where TView : CalendarView { view.UI.DayItemFontFamily = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.DayItemFontSize"/></summary>
        public static TView DayItemFontSize<TView>(this TView view, double value) where TView : CalendarView { view.UI.DayItemFontSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.DayItemFontStyle"/></summary>
        public static TView DayItemFontStyle<TView>(this TView view, Windows.UI.Text.FontStyle value) where TView : CalendarView { view.UI.DayItemFontStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.DayItemFontWeight"/></summary>
        public static TView DayItemFontWeight<TView>(this TView view, Windows.UI.Text.FontWeight value) where TView : CalendarView { view.UI.DayItemFontWeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.DayItemMargin"/></summary>
        public static TView DayItemMargin<TView>(this TView view, Xaml.Thickness value) where TView : CalendarView { view.UI.DayItemMargin = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.DayItemMargin"/></summary>
        public static TView DayItemMargin<TView>(this TView view, double uniform) where TView : CalendarView { view.UI.DayItemMargin = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.DayItemMargin"/></summary>
        public static TView DayItemMargin<TView>(this TView view, double horizontal, double vertical) where TView : CalendarView { view.UI.DayItemMargin = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.DayItemMargin"/></summary>
        public static TView DayItemMargin<TView>(this TView view, double left, double top, double right, double bottom) where TView : CalendarView { view.UI.DayItemMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.DayItemMargin"/></summary>
        public static TView DayItemMargins<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : CalendarView { view.UI.DayItemMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.DayOfWeekFormat"/></summary>
        public static TView DayOfWeekFormat<TView>(this TView view, string value) where TView : CalendarView { view.UI.DayOfWeekFormat = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.DisabledForeground"/></summary>
        public static TView DisabledForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.DisabledForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.DisabledForeground"/></summary>
        public static TView DisabledForeground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.DisabledForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.DisabledForeground"/></summary>
        public static TView DisabledForeground<TView>(this TView view, string color) where TView : CalendarView { view.UI.DisabledForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.DisplayMode"/></summary>
        public static TView DisplayMode<TView>(this TView view, Xaml.Controls.CalendarViewDisplayMode value) where TView : CalendarView { view.UI.DisplayMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstDayOfWeek"/></summary>
        public static TView FirstDayOfWeek<TView>(this TView view, Windows.Globalization.DayOfWeek value) where TView : CalendarView { view.UI.FirstDayOfWeek = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfMonthLabelFontFamily"/></summary>
        public static TView FirstOfMonthLabelFontFamily<TView>(this TView view, Xaml.Media.FontFamily value) where TView : CalendarView { view.UI.FirstOfMonthLabelFontFamily = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfMonthLabelFontSize"/></summary>
        public static TView FirstOfMonthLabelFontSize<TView>(this TView view, double value) where TView : CalendarView { view.UI.FirstOfMonthLabelFontSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfMonthLabelFontStyle"/></summary>
        public static TView FirstOfMonthLabelFontStyle<TView>(this TView view, Windows.UI.Text.FontStyle value) where TView : CalendarView { view.UI.FirstOfMonthLabelFontStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfMonthLabelFontWeight"/></summary>
        public static TView FirstOfMonthLabelFontWeight<TView>(this TView view, Windows.UI.Text.FontWeight value) where TView : CalendarView { view.UI.FirstOfMonthLabelFontWeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfMonthLabelMargin"/></summary>
        public static TView FirstOfMonthLabelMargin<TView>(this TView view, Xaml.Thickness value) where TView : CalendarView { view.UI.FirstOfMonthLabelMargin = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfMonthLabelMargin"/></summary>
        public static TView FirstOfMonthLabelMargin<TView>(this TView view, double uniform) where TView : CalendarView { view.UI.FirstOfMonthLabelMargin = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfMonthLabelMargin"/></summary>
        public static TView FirstOfMonthLabelMargin<TView>(this TView view, double horizontal, double vertical) where TView : CalendarView { view.UI.FirstOfMonthLabelMargin = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfMonthLabelMargin"/></summary>
        public static TView FirstOfMonthLabelMargin<TView>(this TView view, double left, double top, double right, double bottom) where TView : CalendarView { view.UI.FirstOfMonthLabelMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfMonthLabelMargin"/></summary>
        public static TView FirstOfMonthLabelMargins<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : CalendarView { view.UI.FirstOfMonthLabelMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfYearDecadeLabelFontFamily"/></summary>
        public static TView FirstOfYearDecadeLabelFontFamily<TView>(this TView view, Xaml.Media.FontFamily value) where TView : CalendarView { view.UI.FirstOfYearDecadeLabelFontFamily = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfYearDecadeLabelFontSize"/></summary>
        public static TView FirstOfYearDecadeLabelFontSize<TView>(this TView view, double value) where TView : CalendarView { view.UI.FirstOfYearDecadeLabelFontSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfYearDecadeLabelFontStyle"/></summary>
        public static TView FirstOfYearDecadeLabelFontStyle<TView>(this TView view, Windows.UI.Text.FontStyle value) where TView : CalendarView { view.UI.FirstOfYearDecadeLabelFontStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfYearDecadeLabelFontWeight"/></summary>
        public static TView FirstOfYearDecadeLabelFontWeight<TView>(this TView view, Windows.UI.Text.FontWeight value) where TView : CalendarView { view.UI.FirstOfYearDecadeLabelFontWeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfYearDecadeLabelMargin"/></summary>
        public static TView FirstOfYearDecadeLabelMargin<TView>(this TView view, Xaml.Thickness value) where TView : CalendarView { view.UI.FirstOfYearDecadeLabelMargin = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfYearDecadeLabelMargin"/></summary>
        public static TView FirstOfYearDecadeLabelMargin<TView>(this TView view, double uniform) where TView : CalendarView { view.UI.FirstOfYearDecadeLabelMargin = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfYearDecadeLabelMargin"/></summary>
        public static TView FirstOfYearDecadeLabelMargin<TView>(this TView view, double horizontal, double vertical) where TView : CalendarView { view.UI.FirstOfYearDecadeLabelMargin = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfYearDecadeLabelMargin"/></summary>
        public static TView FirstOfYearDecadeLabelMargin<TView>(this TView view, double left, double top, double right, double bottom) where TView : CalendarView { view.UI.FirstOfYearDecadeLabelMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FirstOfYearDecadeLabelMargin"/></summary>
        public static TView FirstOfYearDecadeLabelMargins<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : CalendarView { view.UI.FirstOfYearDecadeLabelMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FocusBorderBrush"/></summary>
        public static TView FocusBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.FocusBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FocusBorderBrush"/></summary>
        public static TView FocusBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.FocusBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.FocusBorderBrush"/></summary>
        public static TView FocusBorderBrush<TView>(this TView view, string color) where TView : CalendarView { view.UI.FocusBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.HorizontalDayItemAlignment"/></summary>
        public static TView HorizontalDayItemAlignment<TView>(this TView view, Xaml.HorizontalAlignment value) where TView : CalendarView { view.UI.HorizontalDayItemAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.HorizontalFirstOfMonthLabelAlignment"/></summary>
        public static TView HorizontalFirstOfMonthLabelAlignment<TView>(this TView view, Xaml.HorizontalAlignment value) where TView : CalendarView { view.UI.HorizontalFirstOfMonthLabelAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.HoverBorderBrush"/></summary>
        public static TView HoverBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.HoverBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.HoverBorderBrush"/></summary>
        public static TView HoverBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.HoverBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.HoverBorderBrush"/></summary>
        public static TView HoverBorderBrush<TView>(this TView view, string color) where TView : CalendarView { view.UI.HoverBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.IsGroupLabelVisible"/></summary>
        public static TView IsGroupLabelVisible<TView>(this TView view, bool value) where TView : CalendarView { view.UI.IsGroupLabelVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.IsOutOfScopeEnabled"/></summary>
        public static TView IsOutOfScopeEnabled<TView>(this TView view, bool value) where TView : CalendarView { view.UI.IsOutOfScopeEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.IsTodayHighlighted"/></summary>
        public static TView IsTodayHighlighted<TView>(this TView view, bool value) where TView : CalendarView { view.UI.IsTodayHighlighted = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.MaxDate"/></summary>
        public static TView MaxDate<TView>(this TView view, DateTimeOffset value) where TView : CalendarView { view.UI.MaxDate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.MinDate"/></summary>
        public static TView MinDate<TView>(this TView view, DateTimeOffset value) where TView : CalendarView { view.UI.MinDate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.MonthYearItemFontFamily"/></summary>
        public static TView MonthYearItemFontFamily<TView>(this TView view, Xaml.Media.FontFamily value) where TView : CalendarView { view.UI.MonthYearItemFontFamily = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.MonthYearItemFontSize"/></summary>
        public static TView MonthYearItemFontSize<TView>(this TView view, double value) where TView : CalendarView { view.UI.MonthYearItemFontSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.MonthYearItemFontStyle"/></summary>
        public static TView MonthYearItemFontStyle<TView>(this TView view, Windows.UI.Text.FontStyle value) where TView : CalendarView { view.UI.MonthYearItemFontStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.MonthYearItemFontWeight"/></summary>
        public static TView MonthYearItemFontWeight<TView>(this TView view, Windows.UI.Text.FontWeight value) where TView : CalendarView { view.UI.MonthYearItemFontWeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.MonthYearItemMargin"/></summary>
        public static TView MonthYearItemMargin<TView>(this TView view, Xaml.Thickness value) where TView : CalendarView { view.UI.MonthYearItemMargin = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.MonthYearItemMargin"/></summary>
        public static TView MonthYearItemMargin<TView>(this TView view, double uniform) where TView : CalendarView { view.UI.MonthYearItemMargin = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.MonthYearItemMargin"/></summary>
        public static TView MonthYearItemMargin<TView>(this TView view, double horizontal, double vertical) where TView : CalendarView { view.UI.MonthYearItemMargin = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.MonthYearItemMargin"/></summary>
        public static TView MonthYearItemMargin<TView>(this TView view, double left, double top, double right, double bottom) where TView : CalendarView { view.UI.MonthYearItemMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.MonthYearItemMargin"/></summary>
        public static TView MonthYearItemMargins<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : CalendarView { view.UI.MonthYearItemMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.NumberOfWeeksInView"/></summary>
        public static TView NumberOfWeeksInView<TView>(this TView view, int value) where TView : CalendarView { view.UI.NumberOfWeeksInView = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.OutOfScopeBackground"/></summary>
        public static TView OutOfScopeBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.OutOfScopeBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.OutOfScopeBackground"/></summary>
        public static TView OutOfScopeBackground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.OutOfScopeBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.OutOfScopeBackground"/></summary>
        public static TView OutOfScopeBackground<TView>(this TView view, string color) where TView : CalendarView { view.UI.OutOfScopeBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.OutOfScopeForeground"/></summary>
        public static TView OutOfScopeForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.OutOfScopeForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.OutOfScopeForeground"/></summary>
        public static TView OutOfScopeForeground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.OutOfScopeForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.OutOfScopeForeground"/></summary>
        public static TView OutOfScopeForeground<TView>(this TView view, string color) where TView : CalendarView { view.UI.OutOfScopeForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.OutOfScopeHoverForeground"/></summary>
        public static TView OutOfScopeHoverForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.OutOfScopeHoverForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.OutOfScopeHoverForeground"/></summary>
        public static TView OutOfScopeHoverForeground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.OutOfScopeHoverForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.OutOfScopeHoverForeground"/></summary>
        public static TView OutOfScopeHoverForeground<TView>(this TView view, string color) where TView : CalendarView { view.UI.OutOfScopeHoverForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.OutOfScopePressedForeground"/></summary>
        public static TView OutOfScopePressedForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.OutOfScopePressedForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.OutOfScopePressedForeground"/></summary>
        public static TView OutOfScopePressedForeground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.OutOfScopePressedForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.OutOfScopePressedForeground"/></summary>
        public static TView OutOfScopePressedForeground<TView>(this TView view, string color) where TView : CalendarView { view.UI.OutOfScopePressedForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.PressedBorderBrush"/></summary>
        public static TView PressedBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.PressedBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.PressedBorderBrush"/></summary>
        public static TView PressedBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.PressedBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.PressedBorderBrush"/></summary>
        public static TView PressedBorderBrush<TView>(this TView view, string color) where TView : CalendarView { view.UI.PressedBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.PressedForeground"/></summary>
        public static TView PressedForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.PressedForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.PressedForeground"/></summary>
        public static TView PressedForeground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.PressedForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.PressedForeground"/></summary>
        public static TView PressedForeground<TView>(this TView view, string color) where TView : CalendarView { view.UI.PressedForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedBorderBrush"/></summary>
        public static TView SelectedBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.SelectedBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedBorderBrush"/></summary>
        public static TView SelectedBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.SelectedBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedBorderBrush"/></summary>
        public static TView SelectedBorderBrush<TView>(this TView view, string color) where TView : CalendarView { view.UI.SelectedBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedDisabledBorderBrush"/></summary>
        public static TView SelectedDisabledBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.SelectedDisabledBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedDisabledBorderBrush"/></summary>
        public static TView SelectedDisabledBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.SelectedDisabledBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedDisabledBorderBrush"/></summary>
        public static TView SelectedDisabledBorderBrush<TView>(this TView view, string color) where TView : CalendarView { view.UI.SelectedDisabledBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedDisabledForeground"/></summary>
        public static TView SelectedDisabledForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.SelectedDisabledForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedDisabledForeground"/></summary>
        public static TView SelectedDisabledForeground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.SelectedDisabledForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedDisabledForeground"/></summary>
        public static TView SelectedDisabledForeground<TView>(this TView view, string color) where TView : CalendarView { view.UI.SelectedDisabledForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedForeground"/></summary>
        public static TView SelectedForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.SelectedForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedForeground"/></summary>
        public static TView SelectedForeground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.SelectedForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedForeground"/></summary>
        public static TView SelectedForeground<TView>(this TView view, string color) where TView : CalendarView { view.UI.SelectedForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedHoverBorderBrush"/></summary>
        public static TView SelectedHoverBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.SelectedHoverBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedHoverBorderBrush"/></summary>
        public static TView SelectedHoverBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.SelectedHoverBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedHoverBorderBrush"/></summary>
        public static TView SelectedHoverBorderBrush<TView>(this TView view, string color) where TView : CalendarView { view.UI.SelectedHoverBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedHoverForeground"/></summary>
        public static TView SelectedHoverForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.SelectedHoverForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedHoverForeground"/></summary>
        public static TView SelectedHoverForeground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.SelectedHoverForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedHoverForeground"/></summary>
        public static TView SelectedHoverForeground<TView>(this TView view, string color) where TView : CalendarView { view.UI.SelectedHoverForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedPressedBorderBrush"/></summary>
        public static TView SelectedPressedBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.SelectedPressedBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedPressedBorderBrush"/></summary>
        public static TView SelectedPressedBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.SelectedPressedBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedPressedBorderBrush"/></summary>
        public static TView SelectedPressedBorderBrush<TView>(this TView view, string color) where TView : CalendarView { view.UI.SelectedPressedBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedPressedForeground"/></summary>
        public static TView SelectedPressedForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.SelectedPressedForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedPressedForeground"/></summary>
        public static TView SelectedPressedForeground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.SelectedPressedForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectedPressedForeground"/></summary>
        public static TView SelectedPressedForeground<TView>(this TView view, string color) where TView : CalendarView { view.UI.SelectedPressedForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.SelectionMode"/></summary>
        public static TView SelectionMode<TView>(this TView view, Xaml.Controls.CalendarViewSelectionMode value) where TView : CalendarView { view.UI.SelectionMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayBackground"/></summary>
        public static TView TodayBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.TodayBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayBackground"/></summary>
        public static TView TodayBackground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.TodayBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayBackground"/></summary>
        public static TView TodayBackground<TView>(this TView view, string color) where TView : CalendarView { view.UI.TodayBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayBlackoutBackground"/></summary>
        public static TView TodayBlackoutBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.TodayBlackoutBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayBlackoutBackground"/></summary>
        public static TView TodayBlackoutBackground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.TodayBlackoutBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayBlackoutBackground"/></summary>
        public static TView TodayBlackoutBackground<TView>(this TView view, string color) where TView : CalendarView { view.UI.TodayBlackoutBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayBlackoutForeground"/></summary>
        public static TView TodayBlackoutForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.TodayBlackoutForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayBlackoutForeground"/></summary>
        public static TView TodayBlackoutForeground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.TodayBlackoutForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayBlackoutForeground"/></summary>
        public static TView TodayBlackoutForeground<TView>(this TView view, string color) where TView : CalendarView { view.UI.TodayBlackoutForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayDisabledBackground"/></summary>
        public static TView TodayDisabledBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.TodayDisabledBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayDisabledBackground"/></summary>
        public static TView TodayDisabledBackground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.TodayDisabledBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayDisabledBackground"/></summary>
        public static TView TodayDisabledBackground<TView>(this TView view, string color) where TView : CalendarView { view.UI.TodayDisabledBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayFontWeight"/></summary>
        public static TView TodayFontWeight<TView>(this TView view, Windows.UI.Text.FontWeight value) where TView : CalendarView { view.UI.TodayFontWeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayForeground"/></summary>
        public static TView TodayForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.TodayForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayForeground"/></summary>
        public static TView TodayForeground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.TodayForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayForeground"/></summary>
        public static TView TodayForeground<TView>(this TView view, string color) where TView : CalendarView { view.UI.TodayForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayHoverBackground"/></summary>
        public static TView TodayHoverBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.TodayHoverBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayHoverBackground"/></summary>
        public static TView TodayHoverBackground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.TodayHoverBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayHoverBackground"/></summary>
        public static TView TodayHoverBackground<TView>(this TView view, string color) where TView : CalendarView { view.UI.TodayHoverBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayPressedBackground"/></summary>
        public static TView TodayPressedBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.TodayPressedBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayPressedBackground"/></summary>
        public static TView TodayPressedBackground<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.TodayPressedBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodayPressedBackground"/></summary>
        public static TView TodayPressedBackground<TView>(this TView view, string color) where TView : CalendarView { view.UI.TodayPressedBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodaySelectedInnerBorderBrush"/></summary>
        public static TView TodaySelectedInnerBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : CalendarView { view.UI.TodaySelectedInnerBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodaySelectedInnerBorderBrush"/></summary>
        public static TView TodaySelectedInnerBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : CalendarView { view.UI.TodaySelectedInnerBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.TodaySelectedInnerBorderBrush"/></summary>
        public static TView TodaySelectedInnerBorderBrush<TView>(this TView view, string color) where TView : CalendarView { view.UI.TodaySelectedInnerBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.VerticalDayItemAlignment"/></summary>
        public static TView VerticalDayItemAlignment<TView>(this TView view, Xaml.VerticalAlignment value) where TView : CalendarView { view.UI.VerticalDayItemAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CalendarView.VerticalFirstOfMonthLabelAlignment"/></summary>
        public static TView VerticalFirstOfMonthLabelAlignment<TView>(this TView view, Xaml.VerticalAlignment value) where TView : CalendarView { view.UI.VerticalFirstOfMonthLabelAlignment = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.BlackoutBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> BlackoutBackground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.BlackoutBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.BlackoutForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> BlackoutForeground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.BlackoutForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.BlackoutStrikethroughBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> BlackoutStrikethroughBrush<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.BlackoutStrikethroughBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.CalendarIdentifier"/></summary>
        public static DependencyProperty<TTarget, string> CalendarIdentifier<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.CalendarView.CalendarIdentifierProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.CalendarItemBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CalendarItemBackground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.CalendarItemBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.CalendarItemBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CalendarItemBorderBrush<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.CalendarItemBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.CalendarItemBorderThickness"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> CalendarItemBorderThickness<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.CalendarView.CalendarItemBorderThicknessProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.CalendarItemCornerRadius"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius> CalendarItemCornerRadius<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius>.Get(target, Xaml.Controls.CalendarView.CalendarItemCornerRadiusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.CalendarItemDisabledBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CalendarItemDisabledBackground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.CalendarItemDisabledBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.CalendarItemForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CalendarItemForeground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.CalendarItemForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.CalendarItemHoverBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CalendarItemHoverBackground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.CalendarItemHoverBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.CalendarItemPressedBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CalendarItemPressedBackground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.CalendarItemPressedBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.CalendarViewDayItemStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> CalendarViewDayItemStyle<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.CalendarView.CalendarViewDayItemStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.DayItemFontFamily"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FontFamily> DayItemFontFamily<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.FontFamily>.Get(target, Xaml.Controls.CalendarView.DayItemFontFamilyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.DayItemFontSize"/></summary>
        public static DependencyProperty<TTarget, double> DayItemFontSize<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.CalendarView.DayItemFontSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.DayItemFontStyle"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStyle> DayItemFontStyle<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Windows.UI.Text.FontStyle>.Get(target, Xaml.Controls.CalendarView.DayItemFontStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.DayItemFontWeight"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontWeight> DayItemFontWeight<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Windows.UI.Text.FontWeight>.Get(target, Xaml.Controls.CalendarView.DayItemFontWeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.DayItemMargin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> DayItemMargin<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.CalendarView.DayItemMarginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.DayOfWeekFormat"/></summary>
        public static DependencyProperty<TTarget, string> DayOfWeekFormat<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.CalendarView.DayOfWeekFormatProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.DisabledForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> DisabledForeground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.DisabledForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.DisplayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.CalendarViewDisplayMode> DisplayMode<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Controls.CalendarViewDisplayMode>.Get(target, Xaml.Controls.CalendarView.DisplayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.FirstDayOfWeek"/></summary>
        public static DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> FirstDayOfWeek<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Windows.Globalization.DayOfWeek>.Get(target, Xaml.Controls.CalendarView.FirstDayOfWeekProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.FirstOfMonthLabelFontFamily"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FontFamily> FirstOfMonthLabelFontFamily<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.FontFamily>.Get(target, Xaml.Controls.CalendarView.FirstOfMonthLabelFontFamilyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.FirstOfMonthLabelFontSize"/></summary>
        public static DependencyProperty<TTarget, double> FirstOfMonthLabelFontSize<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.CalendarView.FirstOfMonthLabelFontSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.FirstOfMonthLabelFontStyle"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStyle> FirstOfMonthLabelFontStyle<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Windows.UI.Text.FontStyle>.Get(target, Xaml.Controls.CalendarView.FirstOfMonthLabelFontStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.FirstOfMonthLabelFontWeight"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontWeight> FirstOfMonthLabelFontWeight<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Windows.UI.Text.FontWeight>.Get(target, Xaml.Controls.CalendarView.FirstOfMonthLabelFontWeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.FirstOfMonthLabelMargin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> FirstOfMonthLabelMargin<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.CalendarView.FirstOfMonthLabelMarginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.FirstOfYearDecadeLabelFontFamily"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FontFamily> FirstOfYearDecadeLabelFontFamily<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.FontFamily>.Get(target, Xaml.Controls.CalendarView.FirstOfYearDecadeLabelFontFamilyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.FirstOfYearDecadeLabelFontSize"/></summary>
        public static DependencyProperty<TTarget, double> FirstOfYearDecadeLabelFontSize<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.CalendarView.FirstOfYearDecadeLabelFontSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.FirstOfYearDecadeLabelFontStyle"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStyle> FirstOfYearDecadeLabelFontStyle<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Windows.UI.Text.FontStyle>.Get(target, Xaml.Controls.CalendarView.FirstOfYearDecadeLabelFontStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.FirstOfYearDecadeLabelFontWeight"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontWeight> FirstOfYearDecadeLabelFontWeight<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Windows.UI.Text.FontWeight>.Get(target, Xaml.Controls.CalendarView.FirstOfYearDecadeLabelFontWeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.FirstOfYearDecadeLabelMargin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> FirstOfYearDecadeLabelMargin<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.CalendarView.FirstOfYearDecadeLabelMarginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.FocusBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> FocusBorderBrush<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.FocusBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.HorizontalDayItemAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.HorizontalAlignment> HorizontalDayItemAlignment<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.HorizontalAlignment>.Get(target, Xaml.Controls.CalendarView.HorizontalDayItemAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.HorizontalFirstOfMonthLabelAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.HorizontalAlignment> HorizontalFirstOfMonthLabelAlignment<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.HorizontalAlignment>.Get(target, Xaml.Controls.CalendarView.HorizontalFirstOfMonthLabelAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.HoverBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> HoverBorderBrush<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.HoverBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.IsGroupLabelVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsGroupLabelVisible<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.CalendarView.IsGroupLabelVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.IsOutOfScopeEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsOutOfScopeEnabled<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.CalendarView.IsOutOfScopeEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.IsTodayHighlighted"/></summary>
        public static DependencyProperty<TTarget, bool> IsTodayHighlighted<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.CalendarView.IsTodayHighlightedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.MaxDate"/></summary>
        public static DependencyProperty<TTarget, DateTimeOffset> MaxDate<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, DateTimeOffset>.Get(target, Xaml.Controls.CalendarView.MaxDateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.MinDate"/></summary>
        public static DependencyProperty<TTarget, DateTimeOffset> MinDate<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, DateTimeOffset>.Get(target, Xaml.Controls.CalendarView.MinDateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.MonthYearItemFontFamily"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FontFamily> MonthYearItemFontFamily<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.FontFamily>.Get(target, Xaml.Controls.CalendarView.MonthYearItemFontFamilyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.MonthYearItemFontSize"/></summary>
        public static DependencyProperty<TTarget, double> MonthYearItemFontSize<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.CalendarView.MonthYearItemFontSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.MonthYearItemFontStyle"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStyle> MonthYearItemFontStyle<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Windows.UI.Text.FontStyle>.Get(target, Xaml.Controls.CalendarView.MonthYearItemFontStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.MonthYearItemFontWeight"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontWeight> MonthYearItemFontWeight<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Windows.UI.Text.FontWeight>.Get(target, Xaml.Controls.CalendarView.MonthYearItemFontWeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.MonthYearItemMargin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> MonthYearItemMargin<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.CalendarView.MonthYearItemMarginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.NumberOfWeeksInView"/></summary>
        public static DependencyProperty<TTarget, int> NumberOfWeeksInView<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.CalendarView.NumberOfWeeksInViewProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.OutOfScopeBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> OutOfScopeBackground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.OutOfScopeBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.OutOfScopeForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> OutOfScopeForeground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.OutOfScopeForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.OutOfScopeHoverForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> OutOfScopeHoverForeground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.OutOfScopeHoverForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.OutOfScopePressedForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> OutOfScopePressedForeground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.OutOfScopePressedForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.PressedBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> PressedBorderBrush<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.PressedBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.PressedForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> PressedForeground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.PressedForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.SelectedBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedBorderBrush<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.SelectedBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.SelectedDates"/></summary>
        public static DependencyProperty<TTarget, IList<DateTimeOffset>> SelectedDates<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, IList<DateTimeOffset>>.Get(target, Xaml.Controls.CalendarView.SelectedDatesProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.SelectedDisabledBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedDisabledBorderBrush<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.SelectedDisabledBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.SelectedDisabledForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedDisabledForeground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.SelectedDisabledForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.SelectedForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedForeground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.SelectedForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.SelectedHoverBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedHoverBorderBrush<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.SelectedHoverBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.SelectedHoverForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedHoverForeground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.SelectedHoverForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.SelectedPressedBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedPressedBorderBrush<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.SelectedPressedBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.SelectedPressedForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedPressedForeground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.SelectedPressedForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.SelectionMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.CalendarViewSelectionMode> SelectionMode<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Controls.CalendarViewSelectionMode>.Get(target, Xaml.Controls.CalendarView.SelectionModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.TemplateSettings"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.CalendarViewTemplateSettings> TemplateSettings<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.CalendarViewTemplateSettings>.Get(target, Xaml.Controls.CalendarView.TemplateSettingsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.TodayBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> TodayBackground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.TodayBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.TodayBlackoutBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> TodayBlackoutBackground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.TodayBlackoutBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.TodayBlackoutForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> TodayBlackoutForeground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.TodayBlackoutForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.TodayDisabledBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> TodayDisabledBackground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.TodayDisabledBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.TodayFontWeight"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontWeight> TodayFontWeight<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Windows.UI.Text.FontWeight>.Get(target, Xaml.Controls.CalendarView.TodayFontWeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.TodayForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> TodayForeground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.TodayForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.TodayHoverBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> TodayHoverBackground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.TodayHoverBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.TodayPressedBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> TodayPressedBackground<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.TodayPressedBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.TodaySelectedInnerBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> TodaySelectedInnerBorderBrush<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.CalendarView.TodaySelectedInnerBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.VerticalDayItemAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.VerticalAlignment> VerticalDayItemAlignment<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.VerticalAlignment>.Get(target, Xaml.Controls.CalendarView.VerticalDayItemAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarView.VerticalFirstOfMonthLabelAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.VerticalAlignment> VerticalFirstOfMonthLabelAlignment<TTarget>(this TTarget target) where TTarget : CalendarView
        => DependencyProperty<TTarget, Xaml.VerticalAlignment>.Get(target, Xaml.Controls.CalendarView.VerticalFirstOfMonthLabelAlignmentProperty);
    }
}

namespace CSharpMarkup.WinUI // CalendarViewDayItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.CalendarViewDayItem"/></summary>
        /// <remarks>Remark: CalendarViewDayItem().Bind() binds to <see cref="Xaml.Controls.CalendarViewDayItem.DateProperty"/></remarks>
        public static CalendarViewDayItem CalendarViewDayItem(bool? IsBlackout = default)
        {
            var ui = new Xaml.Controls.CalendarViewDayItem();
            if (IsBlackout is not null) ui.IsBlackout = IsBlackout.Value;
            return CSharpMarkup.WinUI.CalendarViewDayItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.CalendarViewDayItem"/></summary>
        /// <remarks>Remark: CalendarViewDayItem().Bind() binds to <see cref="Xaml.Controls.CalendarViewDayItem.DateProperty"/></remarks>
        public static CalendarViewDayItem CalendarViewDayItem()
        {
            var ui = new Xaml.Controls.CalendarViewDayItem();
            return CSharpMarkup.WinUI.CalendarViewDayItem.StartChain(ui);
        }
    }

    public partial class CalendarViewDayItem : Control, IUI<Xaml.Controls.CalendarViewDayItem>, IDefaultBindProperty
    {
        static CalendarViewDayItem instance;

        internal static CalendarViewDayItem StartChain(Xaml.Controls.CalendarViewDayItem ui)
        {
            if (instance == null) instance = new CalendarViewDayItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.CalendarViewDayItem ui;

        public new Xaml.Controls.CalendarViewDayItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.CalendarViewDayItem.DateProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.CalendarViewDayItem.DateProperty;

        public static implicit operator Xaml.UIElement(CalendarViewDayItem view) => view?.UI;

        public static implicit operator Xaml.Controls.CalendarViewDayItem(CalendarViewDayItem view) => view?.UI;

        public static implicit operator CalendarViewDayItem(Xaml.Controls.CalendarViewDayItem ui) => CalendarViewDayItem.StartChain(ui);

        public CalendarViewDayItem Invoke(Action<Xaml.Controls.CalendarViewDayItem> action) { action?.Invoke(UI); return this; }

        protected CalendarViewDayItem() { }
    }

    public static partial class CalendarViewDayItemExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.CalendarViewDayItem.IsBlackout"/></summary>
        public static TView IsBlackout<TView>(this TView view, bool value) where TView : CalendarViewDayItem { view.UI.IsBlackout = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarViewDayItem.Date"/></summary>
        public static DependencyProperty<TTarget, DateTimeOffset> Date<TTarget>(this TTarget target) where TTarget : CalendarViewDayItem
        => DependencyProperty<TTarget, DateTimeOffset>.Get(target, Xaml.Controls.CalendarViewDayItem.DateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CalendarViewDayItem.IsBlackout"/></summary>
        public static DependencyProperty<TTarget, bool> IsBlackout<TTarget>(this TTarget target) where TTarget : CalendarViewDayItem
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.CalendarViewDayItem.IsBlackoutProperty);
    }
}

namespace CSharpMarkup.WinUI // Canvas
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Canvas"/></summary>
        public static Canvas Canvas(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.Canvas();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.Canvas.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Canvas"/></summary>
        public static Canvas Canvas()
        {
            var ui = new Xaml.Controls.Canvas();
            return CSharpMarkup.WinUI.Canvas.StartChain(ui);
        }
    }

    public partial class Canvas : Panel, IUI<Xaml.Controls.Canvas>
    {
        static Canvas instance;

        internal static Canvas StartChain(Xaml.Controls.Canvas ui)
        {
            if (instance == null) instance = new Canvas();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Canvas ui;

        public new Xaml.Controls.Canvas UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Canvas view) => view?.UI;

        public static implicit operator Xaml.Controls.Canvas(Canvas view) => view?.UI;

        public static implicit operator Canvas(Xaml.Controls.Canvas ui) => Canvas.StartChain(ui);

        public Canvas Invoke(Action<Xaml.Controls.Canvas> action) { action?.Invoke(UI); return this; }

        protected Canvas() { }
    }

    public static partial class CanvasExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Canvas.Left"/></summary>
        public static TTarget Canvas_Left<TTarget>(this TTarget target, double value) where TTarget : UIElement
        { Xaml.Controls.Canvas.SetLeft(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Canvas.Left"/></summary>
        public static DependencyProperty<TTarget, double> Canvas_Left<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Canvas.LeftProperty);

        /// <summary>Set <see cref="Xaml.Controls.Canvas.Top"/></summary>
        public static TTarget Canvas_Top<TTarget>(this TTarget target, double value) where TTarget : UIElement
        { Xaml.Controls.Canvas.SetTop(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Canvas.Top"/></summary>
        public static DependencyProperty<TTarget, double> Canvas_Top<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Canvas.TopProperty);

        /// <summary>Set <see cref="Xaml.Controls.Canvas.ZIndex"/></summary>
        public static TTarget Canvas_ZIndex<TTarget>(this TTarget target, int value) where TTarget : UIElement
        { Xaml.Controls.Canvas.SetZIndex(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Canvas.ZIndex"/></summary>
        public static DependencyProperty<TTarget, int> Canvas_ZIndex<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Canvas.ZIndexProperty);

        /// <summary>Set <see cref="Xaml.Controls.Canvas"/> attached properties</summary>
        public static TTarget Canvas<TTarget>(this TTarget target

            , double? Left = default

            , double? Top = default

            , int? ZIndex = default

        ) where TTarget : UIElement
        {
            if (Left is not null) Xaml.Controls.Canvas.SetLeft(target.UI, Left.Value);

            if (Top is not null) Xaml.Controls.Canvas.SetTop(target.UI, Top.Value);

            if (ZIndex is not null) Xaml.Controls.Canvas.SetZIndex(target.UI, ZIndex.Value);

            return target;
        }
    }
}

namespace CSharpMarkup.WinUI // CheckBox
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.CheckBox"/></summary>
        public static CheckBox CheckBox(UIObject Content)
        {
            var ui = new Xaml.Controls.CheckBox();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.CheckBox.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.CheckBox"/></summary>
        public static CheckBox CheckBox()
        {
            var ui = new Xaml.Controls.CheckBox();
            return CSharpMarkup.WinUI.CheckBox.StartChain(ui);
        }
    }

    public partial class CheckBox : ToggleButton, IUI<Xaml.Controls.CheckBox>
    {
        static CheckBox instance;

        internal static CheckBox StartChain(Xaml.Controls.CheckBox ui)
        {
            if (instance == null) instance = new CheckBox();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.CheckBox ui;

        public new Xaml.Controls.CheckBox UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(CheckBox view) => view?.UI;

        public static implicit operator Xaml.Controls.CheckBox(CheckBox view) => view?.UI;

        public static implicit operator CheckBox(Xaml.Controls.CheckBox ui) => CheckBox.StartChain(ui);

        public CheckBox Invoke(Action<Xaml.Controls.CheckBox> action) { action?.Invoke(UI); return this; }

        protected CheckBox() { }
    }
}

namespace CSharpMarkup.WinUI // ColorPicker
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ColorPicker"/></summary>
        /// <remarks>Remark: ColorPicker().Bind() binds to <see cref="Xaml.Controls.ColorPicker.ColorProperty"/></remarks>
        public static ColorPicker ColorPicker(Windows.UI.Color? Color = default, Xaml.Controls.ColorSpectrumComponents? ColorSpectrumComponents = default, Xaml.Controls.ColorSpectrumShape? ColorSpectrumShape = default, bool? IsAlphaEnabled = default, bool? IsAlphaSliderVisible = default, bool? IsAlphaTextInputVisible = default, bool? IsColorChannelTextInputVisible = default, bool? IsColorPreviewVisible = default, bool? IsColorSliderVisible = default, bool? IsColorSpectrumVisible = default, bool? IsHexInputVisible = default, bool? IsMoreButtonVisible = default, int? MaxHue = default, int? MaxSaturation = default, int? MaxValue = default, int? MinHue = default, int? MinSaturation = default, int? MinValue = default, Xaml.Controls.Orientation? Orientation = default, Windows.UI.Color? PreviousColor = default)
        {
            var ui = new Xaml.Controls.ColorPicker();
            if (Color is not null) ui.Color = Color.Value;
            if (ColorSpectrumComponents is not null) ui.ColorSpectrumComponents = ColorSpectrumComponents.Value;
            if (ColorSpectrumShape is not null) ui.ColorSpectrumShape = ColorSpectrumShape.Value;
            if (IsAlphaEnabled is not null) ui.IsAlphaEnabled = IsAlphaEnabled.Value;
            if (IsAlphaSliderVisible is not null) ui.IsAlphaSliderVisible = IsAlphaSliderVisible.Value;
            if (IsAlphaTextInputVisible is not null) ui.IsAlphaTextInputVisible = IsAlphaTextInputVisible.Value;
            if (IsColorChannelTextInputVisible is not null) ui.IsColorChannelTextInputVisible = IsColorChannelTextInputVisible.Value;
            if (IsColorPreviewVisible is not null) ui.IsColorPreviewVisible = IsColorPreviewVisible.Value;
            if (IsColorSliderVisible is not null) ui.IsColorSliderVisible = IsColorSliderVisible.Value;
            if (IsColorSpectrumVisible is not null) ui.IsColorSpectrumVisible = IsColorSpectrumVisible.Value;
            if (IsHexInputVisible is not null) ui.IsHexInputVisible = IsHexInputVisible.Value;
            if (IsMoreButtonVisible is not null) ui.IsMoreButtonVisible = IsMoreButtonVisible.Value;
            if (MaxHue is not null) ui.MaxHue = MaxHue.Value;
            if (MaxSaturation is not null) ui.MaxSaturation = MaxSaturation.Value;
            if (MaxValue is not null) ui.MaxValue = MaxValue.Value;
            if (MinHue is not null) ui.MinHue = MinHue.Value;
            if (MinSaturation is not null) ui.MinSaturation = MinSaturation.Value;
            if (MinValue is not null) ui.MinValue = MinValue.Value;
            if (Orientation is not null) ui.Orientation = Orientation.Value;
            if (PreviousColor is not null) ui.PreviousColor = PreviousColor.Value;
            return CSharpMarkup.WinUI.ColorPicker.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ColorPicker"/></summary>
        /// <remarks>Remark: ColorPicker().Bind() binds to <see cref="Xaml.Controls.ColorPicker.ColorProperty"/></remarks>
        public static ColorPicker ColorPicker()
        {
            var ui = new Xaml.Controls.ColorPicker();
            return CSharpMarkup.WinUI.ColorPicker.StartChain(ui);
        }
    }

    public partial class ColorPicker : Control, IUI<Xaml.Controls.ColorPicker>, IDefaultBindProperty
    {
        static ColorPicker instance;

        internal static ColorPicker StartChain(Xaml.Controls.ColorPicker ui)
        {
            if (instance == null) instance = new ColorPicker();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ColorPicker ui;

        public new Xaml.Controls.ColorPicker UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.ColorPicker.ColorProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.ColorPicker.ColorProperty;

        public static implicit operator Xaml.UIElement(ColorPicker view) => view?.UI;

        public static implicit operator Xaml.Controls.ColorPicker(ColorPicker view) => view?.UI;

        public static implicit operator ColorPicker(Xaml.Controls.ColorPicker ui) => ColorPicker.StartChain(ui);

        public ColorPicker Invoke(Action<Xaml.Controls.ColorPicker> action) { action?.Invoke(UI); return this; }

        protected ColorPicker() { }
    }

    public static partial class ColorPickerExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.Color"/></summary>
        public static TView Color<TView>(this TView view, Windows.UI.Color value) where TView : ColorPicker { view.UI.Color = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.ColorSpectrumComponents"/></summary>
        public static TView ColorSpectrumComponents<TView>(this TView view, Xaml.Controls.ColorSpectrumComponents value) where TView : ColorPicker { view.UI.ColorSpectrumComponents = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.ColorSpectrumShape"/></summary>
        public static TView ColorSpectrumShape<TView>(this TView view, Xaml.Controls.ColorSpectrumShape value) where TView : ColorPicker { view.UI.ColorSpectrumShape = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.IsAlphaEnabled"/></summary>
        public static TView IsAlphaEnabled<TView>(this TView view, bool value) where TView : ColorPicker { view.UI.IsAlphaEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.IsAlphaSliderVisible"/></summary>
        public static TView IsAlphaSliderVisible<TView>(this TView view, bool value) where TView : ColorPicker { view.UI.IsAlphaSliderVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.IsAlphaTextInputVisible"/></summary>
        public static TView IsAlphaTextInputVisible<TView>(this TView view, bool value) where TView : ColorPicker { view.UI.IsAlphaTextInputVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.IsColorChannelTextInputVisible"/></summary>
        public static TView IsColorChannelTextInputVisible<TView>(this TView view, bool value) where TView : ColorPicker { view.UI.IsColorChannelTextInputVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.IsColorPreviewVisible"/></summary>
        public static TView IsColorPreviewVisible<TView>(this TView view, bool value) where TView : ColorPicker { view.UI.IsColorPreviewVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.IsColorSliderVisible"/></summary>
        public static TView IsColorSliderVisible<TView>(this TView view, bool value) where TView : ColorPicker { view.UI.IsColorSliderVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.IsColorSpectrumVisible"/></summary>
        public static TView IsColorSpectrumVisible<TView>(this TView view, bool value) where TView : ColorPicker { view.UI.IsColorSpectrumVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.IsHexInputVisible"/></summary>
        public static TView IsHexInputVisible<TView>(this TView view, bool value) where TView : ColorPicker { view.UI.IsHexInputVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.IsMoreButtonVisible"/></summary>
        public static TView IsMoreButtonVisible<TView>(this TView view, bool value) where TView : ColorPicker { view.UI.IsMoreButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.MaxHue"/></summary>
        public static TView MaxHue<TView>(this TView view, int value) where TView : ColorPicker { view.UI.MaxHue = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.MaxSaturation"/></summary>
        public static TView MaxSaturation<TView>(this TView view, int value) where TView : ColorPicker { view.UI.MaxSaturation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.MaxValue"/></summary>
        public static TView MaxValue<TView>(this TView view, int value) where TView : ColorPicker { view.UI.MaxValue = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.MinHue"/></summary>
        public static TView MinHue<TView>(this TView view, int value) where TView : ColorPicker { view.UI.MinHue = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.MinSaturation"/></summary>
        public static TView MinSaturation<TView>(this TView view, int value) where TView : ColorPicker { view.UI.MinSaturation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.MinValue"/></summary>
        public static TView MinValue<TView>(this TView view, int value) where TView : ColorPicker { view.UI.MinValue = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.Orientation value) where TView : ColorPicker { view.UI.Orientation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColorPicker.PreviousColor"/></summary>
        public static TView PreviousColor<TView>(this TView view, Windows.UI.Color? value) where TView : ColorPicker { view.UI.PreviousColor = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.Color"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Color> Color<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, Windows.UI.Color>.Get(target, Xaml.Controls.ColorPicker.ColorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.ColorSpectrumComponents"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents> ColorSpectrumComponents<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents>.Get(target, Xaml.Controls.ColorPicker.ColorSpectrumComponentsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.ColorSpectrumShape"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumShape> ColorSpectrumShape<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumShape>.Get(target, Xaml.Controls.ColorPicker.ColorSpectrumShapeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.IsAlphaEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsAlphaEnabled<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ColorPicker.IsAlphaEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.IsAlphaSliderVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsAlphaSliderVisible<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ColorPicker.IsAlphaSliderVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.IsAlphaTextInputVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsAlphaTextInputVisible<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ColorPicker.IsAlphaTextInputVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.IsColorChannelTextInputVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsColorChannelTextInputVisible<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ColorPicker.IsColorChannelTextInputVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.IsColorPreviewVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsColorPreviewVisible<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ColorPicker.IsColorPreviewVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.IsColorSliderVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsColorSliderVisible<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ColorPicker.IsColorSliderVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.IsColorSpectrumVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsColorSpectrumVisible<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ColorPicker.IsColorSpectrumVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.IsHexInputVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsHexInputVisible<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ColorPicker.IsHexInputVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.IsMoreButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsMoreButtonVisible<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ColorPicker.IsMoreButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.MaxHue"/></summary>
        public static DependencyProperty<TTarget, int> MaxHue<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.ColorPicker.MaxHueProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.MaxSaturation"/></summary>
        public static DependencyProperty<TTarget, int> MaxSaturation<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.ColorPicker.MaxSaturationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.MaxValue"/></summary>
        public static DependencyProperty<TTarget, int> MaxValue<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.ColorPicker.MaxValueProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.MinHue"/></summary>
        public static DependencyProperty<TTarget, int> MinHue<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.ColorPicker.MinHueProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.MinSaturation"/></summary>
        public static DependencyProperty<TTarget, int> MinSaturation<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.ColorPicker.MinSaturationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.MinValue"/></summary>
        public static DependencyProperty<TTarget, int> MinValue<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.ColorPicker.MinValueProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Orientation> Orientation<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, Xaml.Controls.Orientation>.Get(target, Xaml.Controls.ColorPicker.OrientationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColorPicker.PreviousColor"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Color?> PreviousColor<TTarget>(this TTarget target) where TTarget : ColorPicker
        => DependencyProperty<TTarget, Windows.UI.Color?>.Get(target, Xaml.Controls.ColorPicker.PreviousColorProperty);
    }
}

namespace CSharpMarkup.WinUI // ColumnDefinition
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ColumnDefinition"/></summary>
        /// <remarks>Remark: ColumnDefinition().Bind() binds to <see cref="Xaml.Controls.ColumnDefinition.WidthProperty"/></remarks>
        public static ColumnDefinition ColumnDefinition(Xaml.GridLength Width)
        {
            var ui = new Xaml.Controls.ColumnDefinition();
            ui.Width = Width;
            return CSharpMarkup.WinUI.ColumnDefinition.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ColumnDefinition"/></summary>
        /// <remarks>Remark: ColumnDefinition().Bind() binds to <see cref="Xaml.Controls.ColumnDefinition.WidthProperty"/></remarks>
        public static ColumnDefinition ColumnDefinition(double? MaxWidth = default, double? MinWidth = default, Xaml.GridLength? Width = default)
        {
            var ui = new Xaml.Controls.ColumnDefinition();
            if (MaxWidth is not null) ui.MaxWidth = MaxWidth.Value;
            if (MinWidth is not null) ui.MinWidth = MinWidth.Value;
            if (Width is not null) ui.Width = Width.Value;
            return CSharpMarkup.WinUI.ColumnDefinition.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ColumnDefinition"/></summary>
        /// <remarks>Remark: ColumnDefinition().Bind() binds to <see cref="Xaml.Controls.ColumnDefinition.WidthProperty"/></remarks>
        public static ColumnDefinition ColumnDefinition()
        {
            var ui = new Xaml.Controls.ColumnDefinition();
            return CSharpMarkup.WinUI.ColumnDefinition.StartChain(ui);
        }
    }

    public partial class ColumnDefinition : DependencyObject, IUI<Xaml.Controls.ColumnDefinition>, IDefaultBindProperty
    {
        static ColumnDefinition instance;

        internal static ColumnDefinition StartChain(Xaml.Controls.ColumnDefinition ui)
        {
            if (instance == null) instance = new ColumnDefinition();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ColumnDefinition ui;

        public new Xaml.Controls.ColumnDefinition UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.ColumnDefinition.WidthProperty"/></summary>
        public Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.ColumnDefinition.WidthProperty;

        public static implicit operator Xaml.Controls.ColumnDefinition(ColumnDefinition view) => view?.UI;

        public static implicit operator ColumnDefinition(Xaml.Controls.ColumnDefinition ui) => ColumnDefinition.StartChain(ui);

        public ColumnDefinition Invoke(Action<Xaml.Controls.ColumnDefinition> action) { action?.Invoke(UI); return this; }

        protected ColumnDefinition() { }
    }

    public static partial class ColumnDefinitionExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ColumnDefinition.MaxWidth"/></summary>
        public static TView MaxWidth<TView>(this TView view, double value) where TView : ColumnDefinition { view.UI.MaxWidth = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ColumnDefinition.MinWidth"/></summary>
        public static TView MinWidth<TView>(this TView view, double value) where TView : ColumnDefinition { view.UI.MinWidth = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColumnDefinition.MaxWidth"/></summary>
        public static DependencyProperty<TTarget, double> MaxWidth<TTarget>(this TTarget target) where TTarget : ColumnDefinition
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ColumnDefinition.MaxWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColumnDefinition.MinWidth"/></summary>
        public static DependencyProperty<TTarget, double> MinWidth<TTarget>(this TTarget target) where TTarget : ColumnDefinition
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ColumnDefinition.MinWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ColumnDefinition.Width"/></summary>
        public static DependencyProperty<TTarget, Xaml.GridLength> Width<TTarget>(this TTarget target) where TTarget : ColumnDefinition
        => DependencyProperty<TTarget, Xaml.GridLength>.Get(target, Xaml.Controls.ColumnDefinition.WidthProperty);
    }
}

namespace CSharpMarkup.WinUI // ComboBox
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ComboBox"/></summary>
        public static ComboBox ComboBox(params UIObject[] Items)
        {
            var ui = new Xaml.Controls.ComboBox();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<UIObject>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j].UI);
                else
                    ui.Items.Add(child.UI);
            }
            return CSharpMarkup.WinUI.ComboBox.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ComboBox"/></summary>
        public static ComboBox ComboBox()
        {
            var ui = new Xaml.Controls.ComboBox();
            return CSharpMarkup.WinUI.ComboBox.StartChain(ui);
        }
    }

    public partial class ComboBox : Selector, IUI<Xaml.Controls.ComboBox>
    {
        static ComboBox instance;

        internal static ComboBox StartChain(Xaml.Controls.ComboBox ui)
        {
            if (instance == null) instance = new ComboBox();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ComboBox ui;

        public new Xaml.Controls.ComboBox UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ComboBox view) => view?.UI;

        public static implicit operator Xaml.Controls.ComboBox(ComboBox view) => view?.UI;

        public static implicit operator ComboBox(Xaml.Controls.ComboBox ui) => ComboBox.StartChain(ui);

        public ComboBox Invoke(Action<Xaml.Controls.ComboBox> action) { action?.Invoke(UI); return this; }

        protected ComboBox() { }
    }

    public static partial class ComboBoxExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ComboBox.Description"/></summary>
        public static TView Description<TView>(this TView view, object value) where TView : ComboBox { view.UI.Description = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ComboBox.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : ComboBox { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ComboBox.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : ComboBox { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ComboBox.IsDropDownOpen"/></summary>
        public static TView IsDropDownOpen<TView>(this TView view, bool value) where TView : ComboBox { view.UI.IsDropDownOpen = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ComboBox.IsEditable"/></summary>
        public static TView IsEditable<TView>(this TView view, bool value) where TView : ComboBox { view.UI.IsEditable = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ComboBox.IsTextSearchEnabled"/></summary>
        public static TView IsTextSearchEnabled<TView>(this TView view, bool value) where TView : ComboBox { view.UI.IsTextSearchEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ComboBox.LightDismissOverlayMode"/></summary>
        public static TView LightDismissOverlayMode<TView>(this TView view, Xaml.Controls.LightDismissOverlayMode value) where TView : ComboBox { view.UI.LightDismissOverlayMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ComboBox.MaxDropDownHeight"/></summary>
        public static TView MaxDropDownHeight<TView>(this TView view, double value) where TView : ComboBox { view.UI.MaxDropDownHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ComboBox.PlaceholderForeground"/></summary>
        public static TView PlaceholderForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : ComboBox { view.UI.PlaceholderForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ComboBox.PlaceholderForeground"/></summary>
        public static TView PlaceholderForeground<TView>(this TView view, Windows.UI.Color value) where TView : ComboBox { view.UI.PlaceholderForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ComboBox.PlaceholderForeground"/></summary>
        public static TView PlaceholderForeground<TView>(this TView view, string color) where TView : ComboBox { view.UI.PlaceholderForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ComboBox.PlaceholderText"/></summary>
        public static TView PlaceholderText<TView>(this TView view, string value) where TView : ComboBox { view.UI.PlaceholderText = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ComboBox.SelectionChangedTrigger"/></summary>
        public static TView SelectionChangedTrigger<TView>(this TView view, Xaml.Controls.ComboBoxSelectionChangedTrigger value) where TView : ComboBox { view.UI.SelectionChangedTrigger = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ComboBox.Text"/></summary>
        public static TView Text<TView>(this TView view, string value) where TView : ComboBox { view.UI.Text = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ComboBox.TextBoxStyle"/></summary>
        public static TView TextBoxStyle<TView>(this TView view, Xaml.Style value) where TView : ComboBox { view.UI.TextBoxStyle = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ComboBox.Description"/></summary>
        public static DependencyProperty<TTarget, object> Description<TTarget>(this TTarget target) where TTarget : ComboBox
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ComboBox.DescriptionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ComboBox.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : ComboBox
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ComboBox.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ComboBox.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : ComboBox
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.ComboBox.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ComboBox.IsDropDownOpen"/></summary>
        public static DependencyProperty<TTarget, bool> IsDropDownOpen<TTarget>(this TTarget target) where TTarget : ComboBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ComboBox.IsDropDownOpenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ComboBox.IsEditable"/></summary>
        public static DependencyProperty<TTarget, bool> IsEditable<TTarget>(this TTarget target) where TTarget : ComboBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ComboBox.IsEditableProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ComboBox.IsTextSearchEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextSearchEnabled<TTarget>(this TTarget target) where TTarget : ComboBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ComboBox.IsTextSearchEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ComboBox.LightDismissOverlayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> LightDismissOverlayMode<TTarget>(this TTarget target) where TTarget : ComboBox
        => DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode>.Get(target, Xaml.Controls.ComboBox.LightDismissOverlayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ComboBox.MaxDropDownHeight"/></summary>
        public static DependencyProperty<TTarget, double> MaxDropDownHeight<TTarget>(this TTarget target) where TTarget : ComboBox
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ComboBox.MaxDropDownHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ComboBox.PlaceholderForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> PlaceholderForeground<TTarget>(this TTarget target) where TTarget : ComboBox
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.ComboBox.PlaceholderForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ComboBox.PlaceholderText"/></summary>
        public static DependencyProperty<TTarget, string> PlaceholderText<TTarget>(this TTarget target) where TTarget : ComboBox
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.ComboBox.PlaceholderTextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ComboBox.SelectionChangedTrigger"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ComboBoxSelectionChangedTrigger> SelectionChangedTrigger<TTarget>(this TTarget target) where TTarget : ComboBox
        => DependencyProperty<TTarget, Xaml.Controls.ComboBoxSelectionChangedTrigger>.Get(target, Xaml.Controls.ComboBox.SelectionChangedTriggerProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ComboBox.TextBoxStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> TextBoxStyle<TTarget>(this TTarget target) where TTarget : ComboBox
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.ComboBox.TextBoxStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ComboBox.Text"/></summary>
        public static DependencyProperty<TTarget, string> Text<TTarget>(this TTarget target) where TTarget : ComboBox
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.ComboBox.TextProperty);
    }
}

namespace CSharpMarkup.WinUI // ComboBoxItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ComboBoxItem"/></summary>
        public static ComboBoxItem ComboBoxItem(UIObject Content)
        {
            var ui = new Xaml.Controls.ComboBoxItem();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ComboBoxItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ComboBoxItem"/></summary>
        public static ComboBoxItem ComboBoxItem()
        {
            var ui = new Xaml.Controls.ComboBoxItem();
            return CSharpMarkup.WinUI.ComboBoxItem.StartChain(ui);
        }
    }

    public partial class ComboBoxItem : SelectorItem, IUI<Xaml.Controls.ComboBoxItem>
    {
        static ComboBoxItem instance;

        internal static ComboBoxItem StartChain(Xaml.Controls.ComboBoxItem ui)
        {
            if (instance == null) instance = new ComboBoxItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ComboBoxItem ui;

        public new Xaml.Controls.ComboBoxItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ComboBoxItem view) => view?.UI;

        public static implicit operator Xaml.Controls.ComboBoxItem(ComboBoxItem view) => view?.UI;

        public static implicit operator ComboBoxItem(Xaml.Controls.ComboBoxItem ui) => ComboBoxItem.StartChain(ui);

        public ComboBoxItem Invoke(Action<Xaml.Controls.ComboBoxItem> action) { action?.Invoke(UI); return this; }

        protected ComboBoxItem() { }
    }
}

namespace CSharpMarkup.WinUI // CommandBar
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.CommandBar"/></summary>
        public static CommandBar CommandBar(params CommandBarElement[] PrimaryCommands)
        {
            var ui = new Xaml.Controls.CommandBar();
            for (int i = 0; i < PrimaryCommands.Length; i++)
            {
                var child = PrimaryCommands[i];
                if (child == null) continue;

                var subChildren = Spreader<CommandBarElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.PrimaryCommands.Add(subChildren[j].UI);
                else
                    ui.PrimaryCommands.Add(child.UI);
            }
            return CSharpMarkup.WinUI.CommandBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.CommandBar"/></summary>
        public static CommandBar CommandBar()
        {
            var ui = new Xaml.Controls.CommandBar();
            return CSharpMarkup.WinUI.CommandBar.StartChain(ui);
        }
    }

    public partial class CommandBar : AppBar, IUI<Xaml.Controls.CommandBar>
    {
        static CommandBar instance;

        internal static CommandBar StartChain(Xaml.Controls.CommandBar ui)
        {
            if (instance == null) instance = new CommandBar();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.CommandBar ui;

        public new Xaml.Controls.CommandBar UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(CommandBar view) => view?.UI;

        public static implicit operator Xaml.Controls.CommandBar(CommandBar view) => view?.UI;

        public static implicit operator CommandBar(Xaml.Controls.CommandBar ui) => CommandBar.StartChain(ui);

        public CommandBar Invoke(Action<Xaml.Controls.CommandBar> action) { action?.Invoke(UI); return this; }

        protected CommandBar() { }
    }

    public static partial class CommandBarExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.CommandBar.CommandBarOverflowPresenterStyle"/></summary>
        public static TView CommandBarOverflowPresenterStyle<TView>(this TView view, Xaml.Style value) where TView : CommandBar { view.UI.CommandBarOverflowPresenterStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CommandBar.DefaultLabelPosition"/></summary>
        public static TView DefaultLabelPosition<TView>(this TView view, Xaml.Controls.CommandBarDefaultLabelPosition value) where TView : CommandBar { view.UI.DefaultLabelPosition = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CommandBar.IsDynamicOverflowEnabled"/></summary>
        public static TView IsDynamicOverflowEnabled<TView>(this TView view, bool value) where TView : CommandBar { view.UI.IsDynamicOverflowEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.CommandBar.OverflowButtonVisibility"/></summary>
        public static TView OverflowButtonVisibility<TView>(this TView view, Xaml.Controls.CommandBarOverflowButtonVisibility value) where TView : CommandBar { view.UI.OverflowButtonVisibility = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CommandBar.CommandBarOverflowPresenterStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> CommandBarOverflowPresenterStyle<TTarget>(this TTarget target) where TTarget : CommandBar
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.CommandBar.CommandBarOverflowPresenterStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CommandBar.DefaultLabelPosition"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.CommandBarDefaultLabelPosition> DefaultLabelPosition<TTarget>(this TTarget target) where TTarget : CommandBar
        => DependencyProperty<TTarget, Xaml.Controls.CommandBarDefaultLabelPosition>.Get(target, Xaml.Controls.CommandBar.DefaultLabelPositionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CommandBar.IsDynamicOverflowEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsDynamicOverflowEnabled<TTarget>(this TTarget target) where TTarget : CommandBar
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.CommandBar.IsDynamicOverflowEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CommandBar.OverflowButtonVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.CommandBarOverflowButtonVisibility> OverflowButtonVisibility<TTarget>(this TTarget target) where TTarget : CommandBar
        => DependencyProperty<TTarget, Xaml.Controls.CommandBarOverflowButtonVisibility>.Get(target, Xaml.Controls.CommandBar.OverflowButtonVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CommandBar.PrimaryCommands"/></summary>
        public static DependencyProperty<TTarget, Windows.Foundation.Collections.IObservableVector<Xaml.Controls.ICommandBarElement>> PrimaryCommands<TTarget>(this TTarget target) where TTarget : CommandBar
        => DependencyProperty<TTarget, Windows.Foundation.Collections.IObservableVector<Xaml.Controls.ICommandBarElement>>.Get(target, Xaml.Controls.CommandBar.PrimaryCommandsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.CommandBar.SecondaryCommands"/></summary>
        public static DependencyProperty<TTarget, Windows.Foundation.Collections.IObservableVector<Xaml.Controls.ICommandBarElement>> SecondaryCommands<TTarget>(this TTarget target) where TTarget : CommandBar
        => DependencyProperty<TTarget, Windows.Foundation.Collections.IObservableVector<Xaml.Controls.ICommandBarElement>>.Get(target, Xaml.Controls.CommandBar.SecondaryCommandsProperty);
    }
}

namespace CSharpMarkup.WinUI // CommandBarFlyout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.CommandBarFlyout"/></summary>
        public static CommandBarFlyout CommandBarFlyout(params CommandBarElement[] PrimaryCommands)
        {
            var ui = new Xaml.Controls.CommandBarFlyout();
            for (int i = 0; i < PrimaryCommands.Length; i++)
            {
                var child = PrimaryCommands[i];
                if (child == null) continue;

                var subChildren = Spreader<CommandBarElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.PrimaryCommands.Add(subChildren[j].UI);
                else
                    ui.PrimaryCommands.Add(child.UI);
            }
            return CSharpMarkup.WinUI.CommandBarFlyout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.CommandBarFlyout"/></summary>
        public static CommandBarFlyout CommandBarFlyout()
        {
            var ui = new Xaml.Controls.CommandBarFlyout();
            return CSharpMarkup.WinUI.CommandBarFlyout.StartChain(ui);
        }
    }

    public partial class CommandBarFlyout : FlyoutBase, IUI<Xaml.Controls.CommandBarFlyout>
    {
        static CommandBarFlyout instance;

        internal static CommandBarFlyout StartChain(Xaml.Controls.CommandBarFlyout ui)
        {
            if (instance == null) instance = new CommandBarFlyout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.CommandBarFlyout ui;

        public new Xaml.Controls.CommandBarFlyout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.CommandBarFlyout(CommandBarFlyout view) => view?.UI;

        public static implicit operator CommandBarFlyout(Xaml.Controls.CommandBarFlyout ui) => CommandBarFlyout.StartChain(ui);

        public CommandBarFlyout Invoke(Action<Xaml.Controls.CommandBarFlyout> action) { action?.Invoke(UI); return this; }

        protected CommandBarFlyout() { }
    }

    public static partial class CommandBarFlyoutExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.CommandBarFlyout.AlwaysExpanded"/></summary>
        public static TView AlwaysExpanded<TView>(this TView view, bool value) where TView : CommandBarFlyout { view.UI.AlwaysExpanded = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // CommandBarOverflowPresenter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.CommandBarOverflowPresenter"/></summary>
        public static CommandBarOverflowPresenter CommandBarOverflowPresenter(params UIObject[] Items)
        {
            var ui = new Xaml.Controls.CommandBarOverflowPresenter();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<UIObject>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j].UI);
                else
                    ui.Items.Add(child.UI);
            }
            return CSharpMarkup.WinUI.CommandBarOverflowPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.CommandBarOverflowPresenter"/></summary>
        public static CommandBarOverflowPresenter CommandBarOverflowPresenter()
        {
            var ui = new Xaml.Controls.CommandBarOverflowPresenter();
            return CSharpMarkup.WinUI.CommandBarOverflowPresenter.StartChain(ui);
        }
    }

    public partial class CommandBarOverflowPresenter : ItemsControl, IUI<Xaml.Controls.CommandBarOverflowPresenter>
    {
        static CommandBarOverflowPresenter instance;

        internal static CommandBarOverflowPresenter StartChain(Xaml.Controls.CommandBarOverflowPresenter ui)
        {
            if (instance == null) instance = new CommandBarOverflowPresenter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.CommandBarOverflowPresenter ui;

        public new Xaml.Controls.CommandBarOverflowPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(CommandBarOverflowPresenter view) => view?.UI;

        public static implicit operator Xaml.Controls.CommandBarOverflowPresenter(CommandBarOverflowPresenter view) => view?.UI;

        public static implicit operator CommandBarOverflowPresenter(Xaml.Controls.CommandBarOverflowPresenter ui) => CommandBarOverflowPresenter.StartChain(ui);

        public CommandBarOverflowPresenter Invoke(Action<Xaml.Controls.CommandBarOverflowPresenter> action) { action?.Invoke(UI); return this; }

        protected CommandBarOverflowPresenter() { }
    }
}

namespace CSharpMarkup.WinUI // ContentControl
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ContentControl"/></summary>
        /// <remarks>Remark: ContentControl().Bind() binds to <see cref="Xaml.Controls.ContentControl.ContentProperty"/></remarks>
        public static ContentControl ContentControl(UIObject Content)
        {
            var ui = new Xaml.Controls.ContentControl();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ContentControl.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ContentControl"/></summary>
        /// <remarks>Remark: ContentControl().Bind() binds to <see cref="Xaml.Controls.ContentControl.ContentProperty"/></remarks>
        public static ContentControl ContentControl(Xaml.DataTemplate ContentTemplate = default, Xaml.Controls.DataTemplateSelector ContentTemplateSelector = default, Xaml.Media.Animation.TransitionCollection ContentTransitions = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.ContentControl();
            if (ContentTemplate is not null) ui.ContentTemplate = ContentTemplate;
            if (ContentTemplateSelector is not null) ui.ContentTemplateSelector = ContentTemplateSelector;
            if (ContentTransitions is not null) ui.ContentTransitions = ContentTransitions;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ContentControl.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ContentControl"/></summary>
        /// <remarks>Remark: ContentControl().Bind() binds to <see cref="Xaml.Controls.ContentControl.ContentProperty"/></remarks>
        public static ContentControl ContentControl()
        {
            var ui = new Xaml.Controls.ContentControl();
            return CSharpMarkup.WinUI.ContentControl.StartChain(ui);
        }
    }

    public partial class ContentControl : Control, IUI<Xaml.Controls.ContentControl>, IDefaultBindProperty
    {
        static ContentControl instance;

        internal static ContentControl StartChain(Xaml.Controls.ContentControl ui)
        {
            if (instance == null) instance = new ContentControl();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ContentControl ui;

        public new Xaml.Controls.ContentControl UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.ContentControl.ContentProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.ContentControl.ContentProperty;

        public static implicit operator Xaml.UIElement(ContentControl view) => view?.UI;

        public static implicit operator Xaml.Controls.ContentControl(ContentControl view) => view?.UI;

        public static implicit operator ContentControl(Xaml.Controls.ContentControl ui) => ContentControl.StartChain(ui);

        public ContentControl Invoke(Action<Xaml.Controls.ContentControl> action) { action?.Invoke(UI); return this; }

        protected ContentControl() { }
    }

    public static partial class ContentControlExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ContentControl.ContentTemplate"/></summary>
        public static TView ContentTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : ContentControl { view.UI.ContentTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentControl.ContentTemplateSelector"/></summary>
        public static TView ContentTemplateSelector<TView>(this TView view, Xaml.Controls.DataTemplateSelector value) where TView : ContentControl { view.UI.ContentTemplateSelector = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentControl.ContentTransitions"/></summary>
        public static TView ContentTransitions<TView>(this TView view, Xaml.Media.Animation.TransitionCollection value) where TView : ContentControl { view.UI.ContentTransitions = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentControl.Content"/></summary>
        public static DependencyProperty<TTarget, object> Content<TTarget>(this TTarget target) where TTarget : ContentControl
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ContentControl.ContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentControl.ContentTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> ContentTemplate<TTarget>(this TTarget target) where TTarget : ContentControl
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.ContentControl.ContentTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentControl.ContentTemplateSelector"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.DataTemplateSelector> ContentTemplateSelector<TTarget>(this TTarget target) where TTarget : ContentControl
        => DependencyProperty<TTarget, Xaml.Controls.DataTemplateSelector>.Get(target, Xaml.Controls.ContentControl.ContentTemplateSelectorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentControl.ContentTransitions"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection> ContentTransitions<TTarget>(this TTarget target) where TTarget : ContentControl
        => DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection>.Get(target, Xaml.Controls.ContentControl.ContentTransitionsProperty);
    }
}

namespace CSharpMarkup.WinUI // ContentDialog
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ContentDialog"/></summary>
        public static ContentDialog ContentDialog(UIObject Content)
        {
            var ui = new Xaml.Controls.ContentDialog();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ContentDialog.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ContentDialog"/></summary>
        public static ContentDialog ContentDialog(ICommand CloseButtonCommand = default, object CloseButtonCommandParameter = default, Xaml.Style CloseButtonStyle = default, string CloseButtonText = default, Xaml.Controls.ContentDialogButton? DefaultButton = default, bool? FullSizeDesired = default, bool? IsPrimaryButtonEnabled = default, bool? IsSecondaryButtonEnabled = default, ICommand PrimaryButtonCommand = default, object PrimaryButtonCommandParameter = default, Xaml.Style PrimaryButtonStyle = default, string PrimaryButtonText = default, ICommand SecondaryButtonCommand = default, object SecondaryButtonCommandParameter = default, Xaml.Style SecondaryButtonStyle = default, string SecondaryButtonText = default, object Title = default, Xaml.DataTemplate TitleTemplate = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.ContentDialog();
            if (CloseButtonCommand is not null) ui.CloseButtonCommand = CloseButtonCommand;
            if (CloseButtonCommandParameter is not null) ui.CloseButtonCommandParameter = CloseButtonCommandParameter;
            if (CloseButtonStyle is not null) ui.CloseButtonStyle = CloseButtonStyle;
            if (CloseButtonText is not null) ui.CloseButtonText = CloseButtonText;
            if (DefaultButton is not null) ui.DefaultButton = DefaultButton.Value;
            if (FullSizeDesired is not null) ui.FullSizeDesired = FullSizeDesired.Value;
            if (IsPrimaryButtonEnabled is not null) ui.IsPrimaryButtonEnabled = IsPrimaryButtonEnabled.Value;
            if (IsSecondaryButtonEnabled is not null) ui.IsSecondaryButtonEnabled = IsSecondaryButtonEnabled.Value;
            if (PrimaryButtonCommand is not null) ui.PrimaryButtonCommand = PrimaryButtonCommand;
            if (PrimaryButtonCommandParameter is not null) ui.PrimaryButtonCommandParameter = PrimaryButtonCommandParameter;
            if (PrimaryButtonStyle is not null) ui.PrimaryButtonStyle = PrimaryButtonStyle;
            if (PrimaryButtonText is not null) ui.PrimaryButtonText = PrimaryButtonText;
            if (SecondaryButtonCommand is not null) ui.SecondaryButtonCommand = SecondaryButtonCommand;
            if (SecondaryButtonCommandParameter is not null) ui.SecondaryButtonCommandParameter = SecondaryButtonCommandParameter;
            if (SecondaryButtonStyle is not null) ui.SecondaryButtonStyle = SecondaryButtonStyle;
            if (SecondaryButtonText is not null) ui.SecondaryButtonText = SecondaryButtonText;
            if (Title is not null) ui.Title = Title;
            if (TitleTemplate is not null) ui.TitleTemplate = TitleTemplate;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ContentDialog.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ContentDialog"/></summary>
        public static ContentDialog ContentDialog()
        {
            var ui = new Xaml.Controls.ContentDialog();
            return CSharpMarkup.WinUI.ContentDialog.StartChain(ui);
        }
    }

    public partial class ContentDialog : ContentControl, IUI<Xaml.Controls.ContentDialog>
    {
        static ContentDialog instance;

        internal static ContentDialog StartChain(Xaml.Controls.ContentDialog ui)
        {
            if (instance == null) instance = new ContentDialog();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ContentDialog ui;

        public new Xaml.Controls.ContentDialog UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ContentDialog view) => view?.UI;

        public static implicit operator Xaml.Controls.ContentDialog(ContentDialog view) => view?.UI;

        public static implicit operator ContentDialog(Xaml.Controls.ContentDialog ui) => ContentDialog.StartChain(ui);

        public ContentDialog Invoke(Action<Xaml.Controls.ContentDialog> action) { action?.Invoke(UI); return this; }

        protected ContentDialog() { }
    }

    public static partial class ContentDialogExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.CloseButtonCommand"/></summary>
        public static TView CloseButtonCommand<TView>(this TView view, ICommand value) where TView : ContentDialog { view.UI.CloseButtonCommand = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.CloseButtonCommandParameter"/></summary>
        public static TView CloseButtonCommandParameter<TView>(this TView view, object value) where TView : ContentDialog { view.UI.CloseButtonCommandParameter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.CloseButtonStyle"/></summary>
        public static TView CloseButtonStyle<TView>(this TView view, Xaml.Style value) where TView : ContentDialog { view.UI.CloseButtonStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.CloseButtonText"/></summary>
        public static TView CloseButtonText<TView>(this TView view, string value) where TView : ContentDialog { view.UI.CloseButtonText = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.DefaultButton"/></summary>
        public static TView DefaultButton<TView>(this TView view, Xaml.Controls.ContentDialogButton value) where TView : ContentDialog { view.UI.DefaultButton = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.FullSizeDesired"/></summary>
        public static TView FullSizeDesired<TView>(this TView view, bool value) where TView : ContentDialog { view.UI.FullSizeDesired = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.IsPrimaryButtonEnabled"/></summary>
        public static TView IsPrimaryButtonEnabled<TView>(this TView view, bool value) where TView : ContentDialog { view.UI.IsPrimaryButtonEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.IsSecondaryButtonEnabled"/></summary>
        public static TView IsSecondaryButtonEnabled<TView>(this TView view, bool value) where TView : ContentDialog { view.UI.IsSecondaryButtonEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.PrimaryButtonCommand"/></summary>
        public static TView PrimaryButtonCommand<TView>(this TView view, ICommand value) where TView : ContentDialog { view.UI.PrimaryButtonCommand = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.PrimaryButtonCommandParameter"/></summary>
        public static TView PrimaryButtonCommandParameter<TView>(this TView view, object value) where TView : ContentDialog { view.UI.PrimaryButtonCommandParameter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.PrimaryButtonStyle"/></summary>
        public static TView PrimaryButtonStyle<TView>(this TView view, Xaml.Style value) where TView : ContentDialog { view.UI.PrimaryButtonStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.PrimaryButtonText"/></summary>
        public static TView PrimaryButtonText<TView>(this TView view, string value) where TView : ContentDialog { view.UI.PrimaryButtonText = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.SecondaryButtonCommand"/></summary>
        public static TView SecondaryButtonCommand<TView>(this TView view, ICommand value) where TView : ContentDialog { view.UI.SecondaryButtonCommand = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.SecondaryButtonCommandParameter"/></summary>
        public static TView SecondaryButtonCommandParameter<TView>(this TView view, object value) where TView : ContentDialog { view.UI.SecondaryButtonCommandParameter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.SecondaryButtonStyle"/></summary>
        public static TView SecondaryButtonStyle<TView>(this TView view, Xaml.Style value) where TView : ContentDialog { view.UI.SecondaryButtonStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.SecondaryButtonText"/></summary>
        public static TView SecondaryButtonText<TView>(this TView view, string value) where TView : ContentDialog { view.UI.SecondaryButtonText = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.Title"/></summary>
        public static TView Title<TView>(this TView view, object value) where TView : ContentDialog { view.UI.Title = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentDialog.TitleTemplate"/></summary>
        public static TView TitleTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : ContentDialog { view.UI.TitleTemplate = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.CloseButtonCommandParameter"/></summary>
        public static DependencyProperty<TTarget, object> CloseButtonCommandParameter<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ContentDialog.CloseButtonCommandParameterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.CloseButtonCommand"/></summary>
        public static DependencyProperty<TTarget, ICommand> CloseButtonCommand<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, ICommand>.Get(target, Xaml.Controls.ContentDialog.CloseButtonCommandProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.CloseButtonStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> CloseButtonStyle<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.ContentDialog.CloseButtonStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.CloseButtonText"/></summary>
        public static DependencyProperty<TTarget, string> CloseButtonText<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.ContentDialog.CloseButtonTextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.DefaultButton"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ContentDialogButton> DefaultButton<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, Xaml.Controls.ContentDialogButton>.Get(target, Xaml.Controls.ContentDialog.DefaultButtonProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.FullSizeDesired"/></summary>
        public static DependencyProperty<TTarget, bool> FullSizeDesired<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ContentDialog.FullSizeDesiredProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.IsPrimaryButtonEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsPrimaryButtonEnabled<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ContentDialog.IsPrimaryButtonEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.IsSecondaryButtonEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsSecondaryButtonEnabled<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ContentDialog.IsSecondaryButtonEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.PrimaryButtonCommandParameter"/></summary>
        public static DependencyProperty<TTarget, object> PrimaryButtonCommandParameter<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ContentDialog.PrimaryButtonCommandParameterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.PrimaryButtonCommand"/></summary>
        public static DependencyProperty<TTarget, ICommand> PrimaryButtonCommand<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, ICommand>.Get(target, Xaml.Controls.ContentDialog.PrimaryButtonCommandProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.PrimaryButtonStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> PrimaryButtonStyle<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.ContentDialog.PrimaryButtonStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.PrimaryButtonText"/></summary>
        public static DependencyProperty<TTarget, string> PrimaryButtonText<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.ContentDialog.PrimaryButtonTextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.SecondaryButtonCommandParameter"/></summary>
        public static DependencyProperty<TTarget, object> SecondaryButtonCommandParameter<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ContentDialog.SecondaryButtonCommandParameterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.SecondaryButtonCommand"/></summary>
        public static DependencyProperty<TTarget, ICommand> SecondaryButtonCommand<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, ICommand>.Get(target, Xaml.Controls.ContentDialog.SecondaryButtonCommandProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.SecondaryButtonStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> SecondaryButtonStyle<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.ContentDialog.SecondaryButtonStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.SecondaryButtonText"/></summary>
        public static DependencyProperty<TTarget, string> SecondaryButtonText<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.ContentDialog.SecondaryButtonTextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.Title"/></summary>
        public static DependencyProperty<TTarget, object> Title<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ContentDialog.TitleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentDialog.TitleTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> TitleTemplate<TTarget>(this TTarget target) where TTarget : ContentDialog
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.ContentDialog.TitleTemplateProperty);
    }
}

namespace CSharpMarkup.WinUI // ContentPresenter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ContentPresenter"/></summary>
        /// <remarks>Remark: ContentPresenter().Bind() binds to <see cref="Xaml.Controls.ContentPresenter.ContentProperty"/></remarks>
        public static ContentPresenter ContentPresenter(UIObject Content)
        {
            var ui = new Xaml.Controls.ContentPresenter();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ContentPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ContentPresenter"/></summary>
        /// <remarks>Remark: ContentPresenter().Bind() binds to <see cref="Xaml.Controls.ContentPresenter.ContentProperty"/></remarks>
        public static ContentPresenter ContentPresenter(Xaml.Media.Brush Background = default, Xaml.Controls.BackgroundSizing? BackgroundSizing = default, Xaml.BrushTransition BackgroundTransition = default, Xaml.Media.Brush BorderBrush = default, Xaml.Thickness? BorderThickness = default, int? CharacterSpacing = default, Xaml.DataTemplate ContentTemplate = default, Xaml.Controls.DataTemplateSelector ContentTemplateSelector = default, Xaml.Media.Animation.TransitionCollection ContentTransitions = default, CSharpMarkup.WinUI.to.CornerRadius? CornerRadius = default, Xaml.Media.FontFamily FontFamily = default, double? FontSize = default, Windows.UI.Text.FontStretch? FontStretch = default, Windows.UI.Text.FontStyle? FontStyle = default, Windows.UI.Text.FontWeight? FontWeight = default, Xaml.Media.Brush Foreground = default, Xaml.HorizontalAlignment? HorizontalContentAlignment = default, bool? IsTextScaleFactorEnabled = default, double? LineHeight = default, Xaml.LineStackingStrategy? LineStackingStrategy = default, int? MaxLines = default, Xaml.OpticalMarginAlignment? OpticalMarginAlignment = default, Xaml.Thickness? Padding = default, Xaml.TextLineBounds? TextLineBounds = default, Xaml.TextWrapping? TextWrapping = default, Xaml.VerticalAlignment? VerticalContentAlignment = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.ContentPresenter();
            if (Background is not null) ui.Background = Background;
            if (BackgroundSizing is not null) ui.BackgroundSizing = BackgroundSizing.Value;
            if (BackgroundTransition is not null) ui.BackgroundTransition = BackgroundTransition;
            if (BorderBrush is not null) ui.BorderBrush = BorderBrush;
            if (BorderThickness is not null) ui.BorderThickness = BorderThickness.Value;
            if (CharacterSpacing is not null) ui.CharacterSpacing = CharacterSpacing.Value;
            if (ContentTemplate is not null) ui.ContentTemplate = ContentTemplate;
            if (ContentTemplateSelector is not null) ui.ContentTemplateSelector = ContentTemplateSelector;
            if (ContentTransitions is not null) ui.ContentTransitions = ContentTransitions;
            if (CornerRadius is not null) ui.CornerRadius = CornerRadius.Value;
            if (FontFamily is not null) ui.FontFamily = FontFamily;
            if (FontSize is not null) ui.FontSize = FontSize.Value;
            if (FontStretch is not null) ui.FontStretch = FontStretch.Value;
            if (FontStyle is not null) ui.FontStyle = FontStyle.Value;
            if (FontWeight is not null) ui.FontWeight = FontWeight.Value;
            if (Foreground is not null) ui.Foreground = Foreground;
            if (HorizontalContentAlignment is not null) ui.HorizontalContentAlignment = HorizontalContentAlignment.Value;
            if (IsTextScaleFactorEnabled is not null) ui.IsTextScaleFactorEnabled = IsTextScaleFactorEnabled.Value;
            if (LineHeight is not null) ui.LineHeight = LineHeight.Value;
            if (LineStackingStrategy is not null) ui.LineStackingStrategy = LineStackingStrategy.Value;
            if (MaxLines is not null) ui.MaxLines = MaxLines.Value;
            if (OpticalMarginAlignment is not null) ui.OpticalMarginAlignment = OpticalMarginAlignment.Value;
            if (Padding is not null) ui.Padding = Padding.Value;
            if (TextLineBounds is not null) ui.TextLineBounds = TextLineBounds.Value;
            if (TextWrapping is not null) ui.TextWrapping = TextWrapping.Value;
            if (VerticalContentAlignment is not null) ui.VerticalContentAlignment = VerticalContentAlignment.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ContentPresenter.StartChain(ui);
        }
    }

    public partial class ContentPresenter : FrameworkElement, IUI<Xaml.Controls.ContentPresenter>, IDefaultBindProperty
    {
        static ContentPresenter instance;

        internal static ContentPresenter StartChain(Xaml.Controls.ContentPresenter ui)
        {
            if (instance == null) instance = new ContentPresenter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ContentPresenter ui;

        public new Xaml.Controls.ContentPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.ContentPresenter.ContentProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.ContentPresenter.ContentProperty;

        public static implicit operator Xaml.UIElement(ContentPresenter view) => view?.UI;

        public static implicit operator Xaml.Controls.ContentPresenter(ContentPresenter view) => view?.UI;

        public static implicit operator ContentPresenter(Xaml.Controls.ContentPresenter ui) => ContentPresenter.StartChain(ui);

        public ContentPresenter Invoke(Action<Xaml.Controls.ContentPresenter> action) { action?.Invoke(UI); return this; }

        protected ContentPresenter() { }
    }

    public static partial class ContentPresenterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.Background"/></summary>
        public static TView Background<TView>(this TView view, Xaml.Media.Brush value) where TView : ContentPresenter { view.UI.Background = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.Background"/></summary>
        public static TView Background<TView>(this TView view, Windows.UI.Color value) where TView : ContentPresenter { view.UI.Background = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.Background"/></summary>
        public static TView Background<TView>(this TView view, string color) where TView : ContentPresenter { view.UI.Background = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.BackgroundSizing"/></summary>
        public static TView BackgroundSizing<TView>(this TView view, Xaml.Controls.BackgroundSizing value) where TView : ContentPresenter { view.UI.BackgroundSizing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.BackgroundTransition"/></summary>
        public static TView BackgroundTransition<TView>(this TView view, Xaml.BrushTransition value) where TView : ContentPresenter { view.UI.BackgroundTransition = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ContentPresenter { view.UI.BorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : ContentPresenter { view.UI.BorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, string color) where TView : ContentPresenter { view.UI.BorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, Xaml.Thickness value) where TView : ContentPresenter { view.UI.BorderThickness = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double uniform) where TView : ContentPresenter { view.UI.BorderThickness = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double horizontal, double vertical) where TView : ContentPresenter { view.UI.BorderThickness = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double left, double top, double right, double bottom) where TView : ContentPresenter { view.UI.BorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.BorderThickness"/></summary>
        public static TView BorderThicknesses<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : ContentPresenter { view.UI.BorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.CharacterSpacing"/></summary>
        public static TView CharacterSpacing<TView>(this TView view, int value) where TView : ContentPresenter { view.UI.CharacterSpacing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.ContentTemplate"/></summary>
        public static TView ContentTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : ContentPresenter { view.UI.ContentTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.ContentTemplateSelector"/></summary>
        public static TView ContentTemplateSelector<TView>(this TView view, Xaml.Controls.DataTemplateSelector value) where TView : ContentPresenter { view.UI.ContentTemplateSelector = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.ContentTransitions"/></summary>
        public static TView ContentTransitions<TView>(this TView view, Xaml.Media.Animation.TransitionCollection value) where TView : ContentPresenter { view.UI.ContentTransitions = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.CornerRadius"/></summary>
        public static TView CornerRadius<TView>(this TView view, CSharpMarkup.WinUI.to.CornerRadius value) where TView : ContentPresenter { view.UI.CornerRadius = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.FontFamily"/></summary>
        public static TView FontFamily<TView>(this TView view, Xaml.Media.FontFamily value) where TView : ContentPresenter { view.UI.FontFamily = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.FontSize"/></summary>
        public static TView FontSize<TView>(this TView view, double value) where TView : ContentPresenter { view.UI.FontSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.FontStretch"/></summary>
        public static TView FontStretch<TView>(this TView view, Windows.UI.Text.FontStretch value) where TView : ContentPresenter { view.UI.FontStretch = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.FontStyle"/></summary>
        public static TView FontStyle<TView>(this TView view, Windows.UI.Text.FontStyle value) where TView : ContentPresenter { view.UI.FontStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.FontWeight"/></summary>
        public static TView FontWeight<TView>(this TView view, Windows.UI.Text.FontWeight value) where TView : ContentPresenter { view.UI.FontWeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Xaml.Media.Brush value) where TView : ContentPresenter { view.UI.Foreground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Windows.UI.Color value) where TView : ContentPresenter { view.UI.Foreground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, string color) where TView : ContentPresenter { view.UI.Foreground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.HorizontalContentAlignment"/></summary>
        public static TView HorizontalContentAlignment<TView>(this TView view, Xaml.HorizontalAlignment value) where TView : ContentPresenter { view.UI.HorizontalContentAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.IsTextScaleFactorEnabled"/></summary>
        public static TView IsTextScaleFactorEnabled<TView>(this TView view, bool value) where TView : ContentPresenter { view.UI.IsTextScaleFactorEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.LineHeight"/></summary>
        public static TView LineHeight<TView>(this TView view, double value) where TView : ContentPresenter { view.UI.LineHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.LineStackingStrategy"/></summary>
        public static TView LineStackingStrategy<TView>(this TView view, Xaml.LineStackingStrategy value) where TView : ContentPresenter { view.UI.LineStackingStrategy = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.MaxLines"/></summary>
        public static TView MaxLines<TView>(this TView view, int value) where TView : ContentPresenter { view.UI.MaxLines = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.OpticalMarginAlignment"/></summary>
        public static TView OpticalMarginAlignment<TView>(this TView view, Xaml.OpticalMarginAlignment value) where TView : ContentPresenter { view.UI.OpticalMarginAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.Padding"/></summary>
        public static TView Padding<TView>(this TView view, Xaml.Thickness value) where TView : ContentPresenter { view.UI.Padding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double uniform) where TView : ContentPresenter { view.UI.Padding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double horizontal, double vertical) where TView : ContentPresenter { view.UI.Padding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double left, double top, double right, double bottom) where TView : ContentPresenter { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.Padding"/></summary>
        public static TView Paddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : ContentPresenter { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.TextLineBounds"/></summary>
        public static TView TextLineBounds<TView>(this TView view, Xaml.TextLineBounds value) where TView : ContentPresenter { view.UI.TextLineBounds = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.TextWrapping"/></summary>
        public static TView TextWrapping<TView>(this TView view, Xaml.TextWrapping value) where TView : ContentPresenter { view.UI.TextWrapping = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ContentPresenter.VerticalContentAlignment"/></summary>
        public static TView VerticalContentAlignment<TView>(this TView view, Xaml.VerticalAlignment value) where TView : ContentPresenter { view.UI.VerticalContentAlignment = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.Background"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Background<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.ContentPresenter.BackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.BackgroundSizing"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> BackgroundSizing<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing>.Get(target, Xaml.Controls.ContentPresenter.BackgroundSizingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.BorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> BorderBrush<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.ContentPresenter.BorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.BorderThickness"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> BorderThickness<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.ContentPresenter.BorderThicknessProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.CharacterSpacing"/></summary>
        public static DependencyProperty<TTarget, int> CharacterSpacing<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.ContentPresenter.CharacterSpacingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.Content"/></summary>
        public static DependencyProperty<TTarget, object> Content<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ContentPresenter.ContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.ContentTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> ContentTemplate<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.ContentPresenter.ContentTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.ContentTemplateSelector"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.DataTemplateSelector> ContentTemplateSelector<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.Controls.DataTemplateSelector>.Get(target, Xaml.Controls.ContentPresenter.ContentTemplateSelectorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.ContentTransitions"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection> ContentTransitions<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection>.Get(target, Xaml.Controls.ContentPresenter.ContentTransitionsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.CornerRadius"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius> CornerRadius<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius>.Get(target, Xaml.Controls.ContentPresenter.CornerRadiusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.FontFamily"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FontFamily> FontFamily<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.Media.FontFamily>.Get(target, Xaml.Controls.ContentPresenter.FontFamilyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.FontSize"/></summary>
        public static DependencyProperty<TTarget, double> FontSize<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ContentPresenter.FontSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.FontStretch"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStretch> FontStretch<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Windows.UI.Text.FontStretch>.Get(target, Xaml.Controls.ContentPresenter.FontStretchProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.FontStyle"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStyle> FontStyle<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Windows.UI.Text.FontStyle>.Get(target, Xaml.Controls.ContentPresenter.FontStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.FontWeight"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontWeight> FontWeight<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Windows.UI.Text.FontWeight>.Get(target, Xaml.Controls.ContentPresenter.FontWeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.Foreground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Foreground<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.ContentPresenter.ForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.HorizontalContentAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.HorizontalAlignment> HorizontalContentAlignment<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.HorizontalAlignment>.Get(target, Xaml.Controls.ContentPresenter.HorizontalContentAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.IsTextScaleFactorEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextScaleFactorEnabled<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ContentPresenter.IsTextScaleFactorEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.LineHeight"/></summary>
        public static DependencyProperty<TTarget, double> LineHeight<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ContentPresenter.LineHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.LineStackingStrategy"/></summary>
        public static DependencyProperty<TTarget, Xaml.LineStackingStrategy> LineStackingStrategy<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.LineStackingStrategy>.Get(target, Xaml.Controls.ContentPresenter.LineStackingStrategyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.MaxLines"/></summary>
        public static DependencyProperty<TTarget, int> MaxLines<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.ContentPresenter.MaxLinesProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.OpticalMarginAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.OpticalMarginAlignment> OpticalMarginAlignment<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.OpticalMarginAlignment>.Get(target, Xaml.Controls.ContentPresenter.OpticalMarginAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.Padding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> Padding<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.ContentPresenter.PaddingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.TextLineBounds"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextLineBounds> TextLineBounds<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.TextLineBounds>.Get(target, Xaml.Controls.ContentPresenter.TextLineBoundsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.TextWrapping"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextWrapping> TextWrapping<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.TextWrapping>.Get(target, Xaml.Controls.ContentPresenter.TextWrappingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ContentPresenter.VerticalContentAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.VerticalAlignment> VerticalContentAlignment<TTarget>(this TTarget target) where TTarget : ContentPresenter
        => DependencyProperty<TTarget, Xaml.VerticalAlignment>.Get(target, Xaml.Controls.ContentPresenter.VerticalContentAlignmentProperty);
    }
}

namespace CSharpMarkup.WinUI // Control
{
    public partial class Control : FrameworkElement, IUI<Xaml.Controls.Control>
    {
        Xaml.Controls.Control ui;

        public new Xaml.Controls.Control UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Control Invoke(Action<Xaml.Controls.Control> action) { action?.Invoke(UI); return this; }

        protected Control() { }
    }

    public static partial class ControlExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Control.Background"/></summary>
        public static TView Background<TView>(this TView view, Xaml.Media.Brush value) where TView : Control { view.UI.Background = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.Background"/></summary>
        public static TView Background<TView>(this TView view, Windows.UI.Color value) where TView : Control { view.UI.Background = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.Background"/></summary>
        public static TView Background<TView>(this TView view, string color) where TView : Control { view.UI.Background = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.BackgroundSizing"/></summary>
        public static TView BackgroundSizing<TView>(this TView view, Xaml.Controls.BackgroundSizing value) where TView : Control { view.UI.BackgroundSizing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : Control { view.UI.BorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : Control { view.UI.BorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, string color) where TView : Control { view.UI.BorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, Xaml.Thickness value) where TView : Control { view.UI.BorderThickness = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double uniform) where TView : Control { view.UI.BorderThickness = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double horizontal, double vertical) where TView : Control { view.UI.BorderThickness = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double left, double top, double right, double bottom) where TView : Control { view.UI.BorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.BorderThickness"/></summary>
        public static TView BorderThicknesses<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : Control { view.UI.BorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.CharacterSpacing"/></summary>
        public static TView CharacterSpacing<TView>(this TView view, int value) where TView : Control { view.UI.CharacterSpacing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.CornerRadius"/></summary>
        public static TView CornerRadius<TView>(this TView view, CSharpMarkup.WinUI.to.CornerRadius value) where TView : Control { view.UI.CornerRadius = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.DefaultStyleResourceUri"/></summary>
        public static TView DefaultStyleResourceUri<TView>(this TView view, Uri value) where TView : Control { view.UI.DefaultStyleResourceUri = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.ElementSoundMode"/></summary>
        public static TView ElementSoundMode<TView>(this TView view, Xaml.ElementSoundMode value) where TView : Control { view.UI.ElementSoundMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.FontFamily"/></summary>
        public static TView FontFamily<TView>(this TView view, Xaml.Media.FontFamily value) where TView : Control { view.UI.FontFamily = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.FontSize"/></summary>
        public static TView FontSize<TView>(this TView view, double value) where TView : Control { view.UI.FontSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.FontStretch"/></summary>
        public static TView FontStretch<TView>(this TView view, Windows.UI.Text.FontStretch value) where TView : Control { view.UI.FontStretch = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.FontStyle"/></summary>
        public static TView FontStyle<TView>(this TView view, Windows.UI.Text.FontStyle value) where TView : Control { view.UI.FontStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.FontWeight"/></summary>
        public static TView FontWeight<TView>(this TView view, Windows.UI.Text.FontWeight value) where TView : Control { view.UI.FontWeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Xaml.Media.Brush value) where TView : Control { view.UI.Foreground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Windows.UI.Color value) where TView : Control { view.UI.Foreground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, string color) where TView : Control { view.UI.Foreground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.HorizontalContentAlignment"/></summary>
        public static TView HorizontalContentAlignment<TView>(this TView view, Xaml.HorizontalAlignment value) where TView : Control { view.UI.HorizontalContentAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.IsEnabled"/></summary>
        public static TView IsEnabled<TView>(this TView view, bool value) where TView : Control { view.UI.IsEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.IsFocusEngaged"/></summary>
        public static TView IsFocusEngaged<TView>(this TView view, bool value) where TView : Control { view.UI.IsFocusEngaged = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.IsFocusEngagementEnabled"/></summary>
        public static TView IsFocusEngagementEnabled<TView>(this TView view, bool value) where TView : Control { view.UI.IsFocusEngagementEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.IsTextScaleFactorEnabled"/></summary>
        public static TView IsTextScaleFactorEnabled<TView>(this TView view, bool value) where TView : Control { view.UI.IsTextScaleFactorEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.Padding"/></summary>
        public static TView Padding<TView>(this TView view, Xaml.Thickness value) where TView : Control { view.UI.Padding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double uniform) where TView : Control { view.UI.Padding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double horizontal, double vertical) where TView : Control { view.UI.Padding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double left, double top, double right, double bottom) where TView : Control { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.Padding"/></summary>
        public static TView Paddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : Control { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.RequiresPointer"/></summary>
        public static TView RequiresPointer<TView>(this TView view, Xaml.Controls.RequiresPointer value) where TView : Control { view.UI.RequiresPointer = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.TabNavigation"/></summary>
        public static TView TabNavigation<TView>(this TView view, Xaml.Input.KeyboardNavigationMode value) where TView : Control { view.UI.TabNavigation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.Template"/></summary>
        public static TView Template<TView>(this TView view, Xaml.Controls.ControlTemplate value) where TView : Control { view.UI.Template = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Control.VerticalContentAlignment"/></summary>
        public static TView VerticalContentAlignment<TView>(this TView view, Xaml.VerticalAlignment value) where TView : Control { view.UI.VerticalContentAlignment = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.Background"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Background<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Control.BackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.BackgroundSizing"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> BackgroundSizing<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing>.Get(target, Xaml.Controls.Control.BackgroundSizingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.BorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> BorderBrush<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Control.BorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.BorderThickness"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> BorderThickness<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Control.BorderThicknessProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.CharacterSpacing"/></summary>
        public static DependencyProperty<TTarget, int> CharacterSpacing<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Control.CharacterSpacingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.CornerRadius"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius> CornerRadius<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius>.Get(target, Xaml.Controls.Control.CornerRadiusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.DefaultStyleResourceUri"/></summary>
        public static DependencyProperty<TTarget, Uri> DefaultStyleResourceUri<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Uri>.Get(target, Xaml.Controls.Control.DefaultStyleResourceUriProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.ElementSoundMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.ElementSoundMode> ElementSoundMode<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Xaml.ElementSoundMode>.Get(target, Xaml.Controls.Control.ElementSoundModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.FontFamily"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FontFamily> FontFamily<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Xaml.Media.FontFamily>.Get(target, Xaml.Controls.Control.FontFamilyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.FontSize"/></summary>
        public static DependencyProperty<TTarget, double> FontSize<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Control.FontSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.FontStretch"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStretch> FontStretch<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Windows.UI.Text.FontStretch>.Get(target, Xaml.Controls.Control.FontStretchProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.FontStyle"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStyle> FontStyle<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Windows.UI.Text.FontStyle>.Get(target, Xaml.Controls.Control.FontStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.FontWeight"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontWeight> FontWeight<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Windows.UI.Text.FontWeight>.Get(target, Xaml.Controls.Control.FontWeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.Foreground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Foreground<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Control.ForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.HorizontalContentAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.HorizontalAlignment> HorizontalContentAlignment<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Xaml.HorizontalAlignment>.Get(target, Xaml.Controls.Control.HorizontalContentAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.IsEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsEnabled<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Control.IsEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.IsFocusEngaged"/></summary>
        public static DependencyProperty<TTarget, bool> IsFocusEngaged<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Control.IsFocusEngagedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.IsFocusEngagementEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsFocusEngagementEnabled<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Control.IsFocusEngagementEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.IsTextScaleFactorEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextScaleFactorEnabled<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Control.IsTextScaleFactorEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.Padding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> Padding<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Control.PaddingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.RequiresPointer"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.RequiresPointer> RequiresPointer<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Xaml.Controls.RequiresPointer>.Get(target, Xaml.Controls.Control.RequiresPointerProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.TabNavigation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.KeyboardNavigationMode> TabNavigation<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Xaml.Input.KeyboardNavigationMode>.Get(target, Xaml.Controls.Control.TabNavigationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.Template"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ControlTemplate> Template<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Xaml.Controls.ControlTemplate>.Get(target, Xaml.Controls.Control.TemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.VerticalContentAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.VerticalAlignment> VerticalContentAlignment<TTarget>(this TTarget target) where TTarget : Control
        => DependencyProperty<TTarget, Xaml.VerticalAlignment>.Get(target, Xaml.Controls.Control.VerticalContentAlignmentProperty);

        /// <summary>Set <see cref="Xaml.Controls.Control.IsTemplateFocusTarget"/></summary>
        public static TTarget Control_IsTemplateFocusTarget<TTarget>(this TTarget target, bool value) where TTarget : FrameworkElement
        { Xaml.Controls.Control.SetIsTemplateFocusTarget(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.IsTemplateFocusTarget"/></summary>
        public static DependencyProperty<TTarget, bool> Control_IsTemplateFocusTarget<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Control.IsTemplateFocusTargetProperty);

        /// <summary>Set <see cref="Xaml.Controls.Control"/> attached properties</summary>
        public static TTarget Control<TTarget>(this TTarget target

            , bool? IsTemplateFocusTarget = default

            , bool? IsTemplateKeyTipTarget = default

        ) where TTarget : FrameworkElement
        {
            if (IsTemplateFocusTarget is not null) Xaml.Controls.Control.SetIsTemplateFocusTarget(target.UI, IsTemplateFocusTarget.Value);

            if (IsTemplateKeyTipTarget is not null) Xaml.Controls.Control.SetIsTemplateKeyTipTarget(target.UI, IsTemplateKeyTipTarget.Value);

            return target;
        }

        /// <summary>Set <see cref="Xaml.Controls.Control.IsTemplateKeyTipTarget"/></summary>
        public static TTarget Control_IsTemplateKeyTipTarget<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Controls.Control.SetIsTemplateKeyTipTarget(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Control.IsTemplateKeyTipTarget"/></summary>
        public static DependencyProperty<TTarget, bool> Control_IsTemplateKeyTipTarget<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Control.IsTemplateKeyTipTargetProperty);
    }
}

namespace CSharpMarkup.WinUI // ControlTemplate
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ControlTemplate"/></summary>
        public static ControlTemplate ControlTemplate(Type TargetType = default)
        {
            var ui = new Xaml.Controls.ControlTemplate();
            if (TargetType is not null) ui.TargetType = TargetType;
            return CSharpMarkup.WinUI.ControlTemplate.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ControlTemplate"/></summary>
        public static ControlTemplate ControlTemplate()
        {
            var ui = new Xaml.Controls.ControlTemplate();
            return CSharpMarkup.WinUI.ControlTemplate.StartChain(ui);
        }
    }

    public partial class ControlTemplate : FrameworkTemplate, IUI<Xaml.Controls.ControlTemplate>
    {
        static ControlTemplate instance;

        internal static ControlTemplate StartChain(Xaml.Controls.ControlTemplate ui)
        {
            if (instance == null) instance = new ControlTemplate();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ControlTemplate ui;

        public new Xaml.Controls.ControlTemplate UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.ControlTemplate(ControlTemplate view) => view?.UI;

        public static implicit operator ControlTemplate(Xaml.Controls.ControlTemplate ui) => ControlTemplate.StartChain(ui);

        public ControlTemplate Invoke(Action<Xaml.Controls.ControlTemplate> action) { action?.Invoke(UI); return this; }

        protected ControlTemplate() { }
    }

    public static partial class ControlTemplateExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ControlTemplate.TargetType"/></summary>
        public static TView TargetType<TView>(this TView view, Type value) where TView : ControlTemplate { view.UI.TargetType = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // DatePickedEventArgs
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.DatePickedEventArgs"/></summary>
        public static DatePickedEventArgs DatePickedEventArgs()
        {
            var ui = new Xaml.Controls.DatePickedEventArgs();
            return CSharpMarkup.WinUI.DatePickedEventArgs.StartChain(ui);
        }
    }

    public partial class DatePickedEventArgs : DependencyObject, IUI<Xaml.Controls.DatePickedEventArgs>
    {
        static DatePickedEventArgs instance;

        internal static DatePickedEventArgs StartChain(Xaml.Controls.DatePickedEventArgs ui)
        {
            if (instance == null) instance = new DatePickedEventArgs();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.DatePickedEventArgs ui;

        public new Xaml.Controls.DatePickedEventArgs UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.DatePickedEventArgs(DatePickedEventArgs view) => view?.UI;

        public static implicit operator DatePickedEventArgs(Xaml.Controls.DatePickedEventArgs ui) => DatePickedEventArgs.StartChain(ui);

        public DatePickedEventArgs Invoke(Action<Xaml.Controls.DatePickedEventArgs> action) { action?.Invoke(UI); return this; }

        protected DatePickedEventArgs() { }
    }
}

namespace CSharpMarkup.WinUI // DatePicker
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.DatePicker"/></summary>
        /// <remarks>Remark: DatePicker().Bind() binds to <see cref="Xaml.Controls.DatePicker.DateProperty"/></remarks>
        public static DatePicker DatePicker(UIObject Header)
        {
            var ui = new Xaml.Controls.DatePicker();
            if (Header is not null) ui.Header = Header.UI;
            return CSharpMarkup.WinUI.DatePicker.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.DatePicker"/></summary>
        /// <remarks>Remark: DatePicker().Bind() binds to <see cref="Xaml.Controls.DatePicker.DateProperty"/></remarks>
        public static DatePicker DatePicker(string CalendarIdentifier = default, DateTimeOffset? Date = default, string DayFormat = default, bool? DayVisible = default, Xaml.DataTemplate HeaderTemplate = default, Xaml.Controls.LightDismissOverlayMode? LightDismissOverlayMode = default, DateTimeOffset? MaxYear = default, DateTimeOffset? MinYear = default, string MonthFormat = default, bool? MonthVisible = default, Xaml.Controls.Orientation? Orientation = default, DateTimeOffset? SelectedDate = default, string YearFormat = default, bool? YearVisible = default, UIObject Header = default)
        {
            var ui = new Xaml.Controls.DatePicker();
            if (CalendarIdentifier is not null) ui.CalendarIdentifier = CalendarIdentifier;
            if (Date is not null) ui.Date = Date.Value;
            if (DayFormat is not null) ui.DayFormat = DayFormat;
            if (DayVisible is not null) ui.DayVisible = DayVisible.Value;
            if (HeaderTemplate is not null) ui.HeaderTemplate = HeaderTemplate;
            if (LightDismissOverlayMode is not null) ui.LightDismissOverlayMode = LightDismissOverlayMode.Value;
            if (MaxYear is not null) ui.MaxYear = MaxYear.Value;
            if (MinYear is not null) ui.MinYear = MinYear.Value;
            if (MonthFormat is not null) ui.MonthFormat = MonthFormat;
            if (MonthVisible is not null) ui.MonthVisible = MonthVisible.Value;
            if (Orientation is not null) ui.Orientation = Orientation.Value;
            if (SelectedDate is not null) ui.SelectedDate = SelectedDate.Value;
            if (YearFormat is not null) ui.YearFormat = YearFormat;
            if (YearVisible is not null) ui.YearVisible = YearVisible.Value;
            if (Header is not null) ui.Header = Header.UI;
            return CSharpMarkup.WinUI.DatePicker.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.DatePicker"/></summary>
        /// <remarks>Remark: DatePicker().Bind() binds to <see cref="Xaml.Controls.DatePicker.DateProperty"/></remarks>
        public static DatePicker DatePicker()
        {
            var ui = new Xaml.Controls.DatePicker();
            return CSharpMarkup.WinUI.DatePicker.StartChain(ui);
        }
    }

    public partial class DatePicker : Control, IUI<Xaml.Controls.DatePicker>, IDefaultBindProperty
    {
        static DatePicker instance;

        internal static DatePicker StartChain(Xaml.Controls.DatePicker ui)
        {
            if (instance == null) instance = new DatePicker();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.DatePicker ui;

        public new Xaml.Controls.DatePicker UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.DatePicker.DateProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.DatePicker.DateProperty;

        public static implicit operator Xaml.UIElement(DatePicker view) => view?.UI;

        public static implicit operator Xaml.Controls.DatePicker(DatePicker view) => view?.UI;

        public static implicit operator DatePicker(Xaml.Controls.DatePicker ui) => DatePicker.StartChain(ui);

        public DatePicker Invoke(Action<Xaml.Controls.DatePicker> action) { action?.Invoke(UI); return this; }

        protected DatePicker() { }
    }

    public static partial class DatePickerExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.DatePicker.CalendarIdentifier"/></summary>
        public static TView CalendarIdentifier<TView>(this TView view, string value) where TView : DatePicker { view.UI.CalendarIdentifier = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePicker.Date"/></summary>
        public static TView Date<TView>(this TView view, DateTimeOffset value) where TView : DatePicker { view.UI.Date = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePicker.DayFormat"/></summary>
        public static TView DayFormat<TView>(this TView view, string value) where TView : DatePicker { view.UI.DayFormat = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePicker.DayVisible"/></summary>
        public static TView DayVisible<TView>(this TView view, bool value) where TView : DatePicker { view.UI.DayVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePicker.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : DatePicker { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePicker.LightDismissOverlayMode"/></summary>
        public static TView LightDismissOverlayMode<TView>(this TView view, Xaml.Controls.LightDismissOverlayMode value) where TView : DatePicker { view.UI.LightDismissOverlayMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePicker.MaxYear"/></summary>
        public static TView MaxYear<TView>(this TView view, DateTimeOffset value) where TView : DatePicker { view.UI.MaxYear = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePicker.MinYear"/></summary>
        public static TView MinYear<TView>(this TView view, DateTimeOffset value) where TView : DatePicker { view.UI.MinYear = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePicker.MonthFormat"/></summary>
        public static TView MonthFormat<TView>(this TView view, string value) where TView : DatePicker { view.UI.MonthFormat = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePicker.MonthVisible"/></summary>
        public static TView MonthVisible<TView>(this TView view, bool value) where TView : DatePicker { view.UI.MonthVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePicker.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.Orientation value) where TView : DatePicker { view.UI.Orientation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePicker.SelectedDate"/></summary>
        public static TView SelectedDate<TView>(this TView view, DateTimeOffset? value) where TView : DatePicker { view.UI.SelectedDate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePicker.YearFormat"/></summary>
        public static TView YearFormat<TView>(this TView view, string value) where TView : DatePicker { view.UI.YearFormat = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePicker.YearVisible"/></summary>
        public static TView YearVisible<TView>(this TView view, bool value) where TView : DatePicker { view.UI.YearVisible = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.CalendarIdentifier"/></summary>
        public static DependencyProperty<TTarget, string> CalendarIdentifier<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.DatePicker.CalendarIdentifierProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.Date"/></summary>
        public static DependencyProperty<TTarget, DateTimeOffset> Date<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, DateTimeOffset>.Get(target, Xaml.Controls.DatePicker.DateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.DayFormat"/></summary>
        public static DependencyProperty<TTarget, string> DayFormat<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.DatePicker.DayFormatProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.DayVisible"/></summary>
        public static DependencyProperty<TTarget, bool> DayVisible<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.DatePicker.DayVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.DatePicker.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.DatePicker.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.LightDismissOverlayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> LightDismissOverlayMode<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode>.Get(target, Xaml.Controls.DatePicker.LightDismissOverlayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.MaxYear"/></summary>
        public static DependencyProperty<TTarget, DateTimeOffset> MaxYear<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, DateTimeOffset>.Get(target, Xaml.Controls.DatePicker.MaxYearProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.MinYear"/></summary>
        public static DependencyProperty<TTarget, DateTimeOffset> MinYear<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, DateTimeOffset>.Get(target, Xaml.Controls.DatePicker.MinYearProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.MonthFormat"/></summary>
        public static DependencyProperty<TTarget, string> MonthFormat<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.DatePicker.MonthFormatProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.MonthVisible"/></summary>
        public static DependencyProperty<TTarget, bool> MonthVisible<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.DatePicker.MonthVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Orientation> Orientation<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, Xaml.Controls.Orientation>.Get(target, Xaml.Controls.DatePicker.OrientationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.SelectedDate"/></summary>
        public static DependencyProperty<TTarget, DateTimeOffset?> SelectedDate<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, DateTimeOffset?>.Get(target, Xaml.Controls.DatePicker.SelectedDateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.YearFormat"/></summary>
        public static DependencyProperty<TTarget, string> YearFormat<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.DatePicker.YearFormatProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePicker.YearVisible"/></summary>
        public static DependencyProperty<TTarget, bool> YearVisible<TTarget>(this TTarget target) where TTarget : DatePicker
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.DatePicker.YearVisibleProperty);
    }
}

namespace CSharpMarkup.WinUI // DatePickerFlyout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.DatePickerFlyout"/></summary>
        /// <remarks>Remark: DatePickerFlyout().Bind() binds to <see cref="Xaml.Controls.DatePickerFlyout.DateProperty"/></remarks>
        public static DatePickerFlyout DatePickerFlyout(string CalendarIdentifier = default, DateTimeOffset? Date = default, string DayFormat = default, bool? DayVisible = default, DateTimeOffset? MaxYear = default, DateTimeOffset? MinYear = default, string MonthFormat = default, bool? MonthVisible = default, string YearFormat = default, bool? YearVisible = default)
        {
            var ui = new Xaml.Controls.DatePickerFlyout();
            if (CalendarIdentifier is not null) ui.CalendarIdentifier = CalendarIdentifier;
            if (Date is not null) ui.Date = Date.Value;
            if (DayFormat is not null) ui.DayFormat = DayFormat;
            if (DayVisible is not null) ui.DayVisible = DayVisible.Value;
            if (MaxYear is not null) ui.MaxYear = MaxYear.Value;
            if (MinYear is not null) ui.MinYear = MinYear.Value;
            if (MonthFormat is not null) ui.MonthFormat = MonthFormat;
            if (MonthVisible is not null) ui.MonthVisible = MonthVisible.Value;
            if (YearFormat is not null) ui.YearFormat = YearFormat;
            if (YearVisible is not null) ui.YearVisible = YearVisible.Value;
            return CSharpMarkup.WinUI.DatePickerFlyout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.DatePickerFlyout"/></summary>
        /// <remarks>Remark: DatePickerFlyout().Bind() binds to <see cref="Xaml.Controls.DatePickerFlyout.DateProperty"/></remarks>
        public static DatePickerFlyout DatePickerFlyout()
        {
            var ui = new Xaml.Controls.DatePickerFlyout();
            return CSharpMarkup.WinUI.DatePickerFlyout.StartChain(ui);
        }
    }

    public partial class DatePickerFlyout : PickerFlyoutBase, IUI<Xaml.Controls.DatePickerFlyout>, IDefaultBindProperty
    {
        static DatePickerFlyout instance;

        internal static DatePickerFlyout StartChain(Xaml.Controls.DatePickerFlyout ui)
        {
            if (instance == null) instance = new DatePickerFlyout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.DatePickerFlyout ui;

        public new Xaml.Controls.DatePickerFlyout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.DatePickerFlyout.DateProperty"/></summary>
        public Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.DatePickerFlyout.DateProperty;

        public static implicit operator Xaml.Controls.DatePickerFlyout(DatePickerFlyout view) => view?.UI;

        public static implicit operator DatePickerFlyout(Xaml.Controls.DatePickerFlyout ui) => DatePickerFlyout.StartChain(ui);

        public DatePickerFlyout Invoke(Action<Xaml.Controls.DatePickerFlyout> action) { action?.Invoke(UI); return this; }

        protected DatePickerFlyout() { }
    }

    public static partial class DatePickerFlyoutExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.DatePickerFlyout.CalendarIdentifier"/></summary>
        public static TView CalendarIdentifier<TView>(this TView view, string value) where TView : DatePickerFlyout { view.UI.CalendarIdentifier = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePickerFlyout.Date"/></summary>
        public static TView Date<TView>(this TView view, DateTimeOffset value) where TView : DatePickerFlyout { view.UI.Date = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePickerFlyout.DayFormat"/></summary>
        public static TView DayFormat<TView>(this TView view, string value) where TView : DatePickerFlyout { view.UI.DayFormat = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePickerFlyout.DayVisible"/></summary>
        public static TView DayVisible<TView>(this TView view, bool value) where TView : DatePickerFlyout { view.UI.DayVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePickerFlyout.MaxYear"/></summary>
        public static TView MaxYear<TView>(this TView view, DateTimeOffset value) where TView : DatePickerFlyout { view.UI.MaxYear = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePickerFlyout.MinYear"/></summary>
        public static TView MinYear<TView>(this TView view, DateTimeOffset value) where TView : DatePickerFlyout { view.UI.MinYear = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePickerFlyout.MonthFormat"/></summary>
        public static TView MonthFormat<TView>(this TView view, string value) where TView : DatePickerFlyout { view.UI.MonthFormat = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePickerFlyout.MonthVisible"/></summary>
        public static TView MonthVisible<TView>(this TView view, bool value) where TView : DatePickerFlyout { view.UI.MonthVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePickerFlyout.YearFormat"/></summary>
        public static TView YearFormat<TView>(this TView view, string value) where TView : DatePickerFlyout { view.UI.YearFormat = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePickerFlyout.YearVisible"/></summary>
        public static TView YearVisible<TView>(this TView view, bool value) where TView : DatePickerFlyout { view.UI.YearVisible = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePickerFlyout.CalendarIdentifier"/></summary>
        public static DependencyProperty<TTarget, string> CalendarIdentifier<TTarget>(this TTarget target) where TTarget : DatePickerFlyout
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.DatePickerFlyout.CalendarIdentifierProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePickerFlyout.Date"/></summary>
        public static DependencyProperty<TTarget, DateTimeOffset> Date<TTarget>(this TTarget target) where TTarget : DatePickerFlyout
        => DependencyProperty<TTarget, DateTimeOffset>.Get(target, Xaml.Controls.DatePickerFlyout.DateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePickerFlyout.DayFormat"/></summary>
        public static DependencyProperty<TTarget, string> DayFormat<TTarget>(this TTarget target) where TTarget : DatePickerFlyout
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.DatePickerFlyout.DayFormatProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePickerFlyout.DayVisible"/></summary>
        public static DependencyProperty<TTarget, bool> DayVisible<TTarget>(this TTarget target) where TTarget : DatePickerFlyout
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.DatePickerFlyout.DayVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePickerFlyout.MaxYear"/></summary>
        public static DependencyProperty<TTarget, DateTimeOffset> MaxYear<TTarget>(this TTarget target) where TTarget : DatePickerFlyout
        => DependencyProperty<TTarget, DateTimeOffset>.Get(target, Xaml.Controls.DatePickerFlyout.MaxYearProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePickerFlyout.MinYear"/></summary>
        public static DependencyProperty<TTarget, DateTimeOffset> MinYear<TTarget>(this TTarget target) where TTarget : DatePickerFlyout
        => DependencyProperty<TTarget, DateTimeOffset>.Get(target, Xaml.Controls.DatePickerFlyout.MinYearProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePickerFlyout.MonthFormat"/></summary>
        public static DependencyProperty<TTarget, string> MonthFormat<TTarget>(this TTarget target) where TTarget : DatePickerFlyout
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.DatePickerFlyout.MonthFormatProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePickerFlyout.MonthVisible"/></summary>
        public static DependencyProperty<TTarget, bool> MonthVisible<TTarget>(this TTarget target) where TTarget : DatePickerFlyout
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.DatePickerFlyout.MonthVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePickerFlyout.YearFormat"/></summary>
        public static DependencyProperty<TTarget, string> YearFormat<TTarget>(this TTarget target) where TTarget : DatePickerFlyout
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.DatePickerFlyout.YearFormatProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePickerFlyout.YearVisible"/></summary>
        public static DependencyProperty<TTarget, bool> YearVisible<TTarget>(this TTarget target) where TTarget : DatePickerFlyout
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.DatePickerFlyout.YearVisibleProperty);
    }
}

namespace CSharpMarkup.WinUI // DatePickerFlyoutItem
{
    public partial class DatePickerFlyoutItem : DependencyObject, IUI<Xaml.Controls.DatePickerFlyoutItem>
    {
        Xaml.Controls.DatePickerFlyoutItem ui;

        public new Xaml.Controls.DatePickerFlyoutItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public DatePickerFlyoutItem Invoke(Action<Xaml.Controls.DatePickerFlyoutItem> action) { action?.Invoke(UI); return this; }

        protected DatePickerFlyoutItem() { }
    }

    public static partial class DatePickerFlyoutItemExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.DatePickerFlyoutItem.PrimaryText"/></summary>
        public static TView PrimaryText<TView>(this TView view, string value) where TView : DatePickerFlyoutItem { view.UI.PrimaryText = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.DatePickerFlyoutItem.SecondaryText"/></summary>
        public static TView SecondaryText<TView>(this TView view, string value) where TView : DatePickerFlyoutItem { view.UI.SecondaryText = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePickerFlyoutItem.PrimaryText"/></summary>
        public static DependencyProperty<TTarget, string> PrimaryText<TTarget>(this TTarget target) where TTarget : DatePickerFlyoutItem
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.DatePickerFlyoutItem.PrimaryTextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePickerFlyoutItem.SecondaryText"/></summary>
        public static DependencyProperty<TTarget, string> SecondaryText<TTarget>(this TTarget target) where TTarget : DatePickerFlyoutItem
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.DatePickerFlyoutItem.SecondaryTextProperty);
    }
}

namespace CSharpMarkup.WinUI // DatePickerFlyoutPresenter
{
    public partial class DatePickerFlyoutPresenter : Control, IUI<Xaml.Controls.DatePickerFlyoutPresenter>
    {
        Xaml.Controls.DatePickerFlyoutPresenter ui;

        public new Xaml.Controls.DatePickerFlyoutPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public DatePickerFlyoutPresenter Invoke(Action<Xaml.Controls.DatePickerFlyoutPresenter> action) { action?.Invoke(UI); return this; }

        protected DatePickerFlyoutPresenter() { }
    }

    public static partial class DatePickerFlyoutPresenterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.DatePickerFlyoutPresenter.IsDefaultShadowEnabled"/></summary>
        public static TView IsDefaultShadowEnabled<TView>(this TView view, bool value) where TView : DatePickerFlyoutPresenter { view.UI.IsDefaultShadowEnabled = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.DatePickerFlyoutPresenter.IsDefaultShadowEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsDefaultShadowEnabled<TTarget>(this TTarget target) where TTarget : DatePickerFlyoutPresenter
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.DatePickerFlyoutPresenter.IsDefaultShadowEnabledProperty);
    }
}

namespace CSharpMarkup.WinUI // DropDownButton
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.DropDownButton"/></summary>
        public static DropDownButton DropDownButton(UIObject Content)
        {
            var ui = new Xaml.Controls.DropDownButton();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.DropDownButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.DropDownButton"/></summary>
        public static DropDownButton DropDownButton()
        {
            var ui = new Xaml.Controls.DropDownButton();
            return CSharpMarkup.WinUI.DropDownButton.StartChain(ui);
        }
    }

    public partial class DropDownButton : Button, IUI<Xaml.Controls.DropDownButton>
    {
        static DropDownButton instance;

        internal static DropDownButton StartChain(Xaml.Controls.DropDownButton ui)
        {
            if (instance == null) instance = new DropDownButton();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.DropDownButton ui;

        public new Xaml.Controls.DropDownButton UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(DropDownButton view) => view?.UI;

        public static implicit operator Xaml.Controls.DropDownButton(DropDownButton view) => view?.UI;

        public static implicit operator DropDownButton(Xaml.Controls.DropDownButton ui) => DropDownButton.StartChain(ui);

        public DropDownButton Invoke(Action<Xaml.Controls.DropDownButton> action) { action?.Invoke(UI); return this; }

        protected DropDownButton() { }
    }
}

namespace CSharpMarkup.WinUI // Expander
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Expander"/></summary>
        public static Expander Expander(UIObject Content)
        {
            var ui = new Xaml.Controls.Expander();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.Expander.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Expander"/></summary>
        public static Expander Expander(Xaml.Controls.ExpandDirection? ExpandDirection = default, object Header = default, Xaml.DataTemplate HeaderTemplate = default, Xaml.Controls.DataTemplateSelector HeaderTemplateSelector = default, bool? IsExpanded = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.Expander();
            if (ExpandDirection is not null) ui.ExpandDirection = ExpandDirection.Value;
            if (Header is not null) ui.Header = Header;
            if (HeaderTemplate is not null) ui.HeaderTemplate = HeaderTemplate;
            if (HeaderTemplateSelector is not null) ui.HeaderTemplateSelector = HeaderTemplateSelector;
            if (IsExpanded is not null) ui.IsExpanded = IsExpanded.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.Expander.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Expander"/></summary>
        public static Expander Expander()
        {
            var ui = new Xaml.Controls.Expander();
            return CSharpMarkup.WinUI.Expander.StartChain(ui);
        }
    }

    public partial class Expander : ContentControl, IUI<Xaml.Controls.Expander>
    {
        static Expander instance;

        internal static Expander StartChain(Xaml.Controls.Expander ui)
        {
            if (instance == null) instance = new Expander();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Expander ui;

        public new Xaml.Controls.Expander UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Expander view) => view?.UI;

        public static implicit operator Xaml.Controls.Expander(Expander view) => view?.UI;

        public static implicit operator Expander(Xaml.Controls.Expander ui) => Expander.StartChain(ui);

        public Expander Invoke(Action<Xaml.Controls.Expander> action) { action?.Invoke(UI); return this; }

        protected Expander() { }
    }

    public static partial class ExpanderExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Expander.ExpandDirection"/></summary>
        public static TView ExpandDirection<TView>(this TView view, Xaml.Controls.ExpandDirection value) where TView : Expander { view.UI.ExpandDirection = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Expander.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : Expander { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Expander.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : Expander { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Expander.HeaderTemplateSelector"/></summary>
        public static TView HeaderTemplateSelector<TView>(this TView view, Xaml.Controls.DataTemplateSelector value) where TView : Expander { view.UI.HeaderTemplateSelector = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Expander.IsExpanded"/></summary>
        public static TView IsExpanded<TView>(this TView view, bool value) where TView : Expander { view.UI.IsExpanded = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Expander.ExpandDirection"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ExpandDirection> ExpandDirection<TTarget>(this TTarget target) where TTarget : Expander
        => DependencyProperty<TTarget, Xaml.Controls.ExpandDirection>.Get(target, Xaml.Controls.Expander.ExpandDirectionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Expander.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : Expander
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.Expander.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Expander.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : Expander
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.Expander.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Expander.HeaderTemplateSelector"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.DataTemplateSelector> HeaderTemplateSelector<TTarget>(this TTarget target) where TTarget : Expander
        => DependencyProperty<TTarget, Xaml.Controls.DataTemplateSelector>.Get(target, Xaml.Controls.Expander.HeaderTemplateSelectorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Expander.IsExpanded"/></summary>
        public static DependencyProperty<TTarget, bool> IsExpanded<TTarget>(this TTarget target) where TTarget : Expander
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Expander.IsExpandedProperty);
    }
}

namespace CSharpMarkup.WinUI // ExpanderTemplateSettings
{
    public partial class ExpanderTemplateSettings : DependencyObject, IUI<Xaml.Controls.ExpanderTemplateSettings>
    {
        Xaml.Controls.ExpanderTemplateSettings ui;

        public new Xaml.Controls.ExpanderTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ExpanderTemplateSettings Invoke(Action<Xaml.Controls.ExpanderTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected ExpanderTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // FlipView
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.FlipView"/></summary>
        public static FlipView FlipView(params UIObject[] Items)
        {
            var ui = new Xaml.Controls.FlipView();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<UIObject>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j].UI);
                else
                    ui.Items.Add(child.UI);
            }
            return CSharpMarkup.WinUI.FlipView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.FlipView"/></summary>
        public static FlipView FlipView()
        {
            var ui = new Xaml.Controls.FlipView();
            return CSharpMarkup.WinUI.FlipView.StartChain(ui);
        }
    }

    public partial class FlipView : Selector, IUI<Xaml.Controls.FlipView>
    {
        static FlipView instance;

        internal static FlipView StartChain(Xaml.Controls.FlipView ui)
        {
            if (instance == null) instance = new FlipView();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.FlipView ui;

        public new Xaml.Controls.FlipView UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(FlipView view) => view?.UI;

        public static implicit operator Xaml.Controls.FlipView(FlipView view) => view?.UI;

        public static implicit operator FlipView(Xaml.Controls.FlipView ui) => FlipView.StartChain(ui);

        public FlipView Invoke(Action<Xaml.Controls.FlipView> action) { action?.Invoke(UI); return this; }

        protected FlipView() { }
    }

    public static partial class FlipViewExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.FlipView.UseTouchAnimationsForAllNavigation"/></summary>
        public static TView UseTouchAnimationsForAllNavigation<TView>(this TView view, bool value) where TView : FlipView { view.UI.UseTouchAnimationsForAllNavigation = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FlipView.UseTouchAnimationsForAllNavigation"/></summary>
        public static DependencyProperty<TTarget, bool> UseTouchAnimationsForAllNavigation<TTarget>(this TTarget target) where TTarget : FlipView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.FlipView.UseTouchAnimationsForAllNavigationProperty);
    }
}

namespace CSharpMarkup.WinUI // FlipViewItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.FlipViewItem"/></summary>
        public static FlipViewItem FlipViewItem(UIObject Content)
        {
            var ui = new Xaml.Controls.FlipViewItem();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.FlipViewItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.FlipViewItem"/></summary>
        public static FlipViewItem FlipViewItem()
        {
            var ui = new Xaml.Controls.FlipViewItem();
            return CSharpMarkup.WinUI.FlipViewItem.StartChain(ui);
        }
    }

    public partial class FlipViewItem : SelectorItem, IUI<Xaml.Controls.FlipViewItem>
    {
        static FlipViewItem instance;

        internal static FlipViewItem StartChain(Xaml.Controls.FlipViewItem ui)
        {
            if (instance == null) instance = new FlipViewItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.FlipViewItem ui;

        public new Xaml.Controls.FlipViewItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(FlipViewItem view) => view?.UI;

        public static implicit operator Xaml.Controls.FlipViewItem(FlipViewItem view) => view?.UI;

        public static implicit operator FlipViewItem(Xaml.Controls.FlipViewItem ui) => FlipViewItem.StartChain(ui);

        public FlipViewItem Invoke(Action<Xaml.Controls.FlipViewItem> action) { action?.Invoke(UI); return this; }

        protected FlipViewItem() { }
    }
}

namespace CSharpMarkup.WinUI // Flyout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Flyout"/></summary>
        public static Flyout Flyout(Xaml.UIElement Content)
        {
            var ui = new Xaml.Controls.Flyout();
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.Flyout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Flyout"/></summary>
        public static Flyout Flyout(Xaml.Style FlyoutPresenterStyle = default, Xaml.UIElement Content = default)
        {
            var ui = new Xaml.Controls.Flyout();
            if (FlyoutPresenterStyle is not null) ui.FlyoutPresenterStyle = FlyoutPresenterStyle;
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.Flyout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Flyout"/></summary>
        public static Flyout Flyout()
        {
            var ui = new Xaml.Controls.Flyout();
            return CSharpMarkup.WinUI.Flyout.StartChain(ui);
        }
    }

    public partial class Flyout : FlyoutBase, IUI<Xaml.Controls.Flyout>
    {
        static Flyout instance;

        internal static Flyout StartChain(Xaml.Controls.Flyout ui)
        {
            if (instance == null) instance = new Flyout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Flyout ui;

        public new Xaml.Controls.Flyout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.Flyout(Flyout view) => view?.UI;

        public static implicit operator Flyout(Xaml.Controls.Flyout ui) => Flyout.StartChain(ui);

        public Flyout Invoke(Action<Xaml.Controls.Flyout> action) { action?.Invoke(UI); return this; }

        protected Flyout() { }
    }

    public static partial class FlyoutExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Flyout.FlyoutPresenterStyle"/></summary>
        public static TView FlyoutPresenterStyle<TView>(this TView view, Xaml.Style value) where TView : Flyout { view.UI.FlyoutPresenterStyle = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Flyout.Content"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Content<TTarget>(this TTarget target) where TTarget : Flyout
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.Flyout.ContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Flyout.FlyoutPresenterStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> FlyoutPresenterStyle<TTarget>(this TTarget target) where TTarget : Flyout
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.Flyout.FlyoutPresenterStyleProperty);
    }
}

namespace CSharpMarkup.WinUI // FlyoutPresenter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.FlyoutPresenter"/></summary>
        public static FlyoutPresenter FlyoutPresenter(UIObject Content)
        {
            var ui = new Xaml.Controls.FlyoutPresenter();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.FlyoutPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.FlyoutPresenter"/></summary>
        public static FlyoutPresenter FlyoutPresenter(bool? IsDefaultShadowEnabled = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.FlyoutPresenter();
            if (IsDefaultShadowEnabled is not null) ui.IsDefaultShadowEnabled = IsDefaultShadowEnabled.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.FlyoutPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.FlyoutPresenter"/></summary>
        public static FlyoutPresenter FlyoutPresenter()
        {
            var ui = new Xaml.Controls.FlyoutPresenter();
            return CSharpMarkup.WinUI.FlyoutPresenter.StartChain(ui);
        }
    }

    public partial class FlyoutPresenter : ContentControl, IUI<Xaml.Controls.FlyoutPresenter>
    {
        static FlyoutPresenter instance;

        internal static FlyoutPresenter StartChain(Xaml.Controls.FlyoutPresenter ui)
        {
            if (instance == null) instance = new FlyoutPresenter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.FlyoutPresenter ui;

        public new Xaml.Controls.FlyoutPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(FlyoutPresenter view) => view?.UI;

        public static implicit operator Xaml.Controls.FlyoutPresenter(FlyoutPresenter view) => view?.UI;

        public static implicit operator FlyoutPresenter(Xaml.Controls.FlyoutPresenter ui) => FlyoutPresenter.StartChain(ui);

        public FlyoutPresenter Invoke(Action<Xaml.Controls.FlyoutPresenter> action) { action?.Invoke(UI); return this; }

        protected FlyoutPresenter() { }
    }

    public static partial class FlyoutPresenterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.FlyoutPresenter.IsDefaultShadowEnabled"/></summary>
        public static TView IsDefaultShadowEnabled<TView>(this TView view, bool value) where TView : FlyoutPresenter { view.UI.IsDefaultShadowEnabled = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FlyoutPresenter.IsDefaultShadowEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsDefaultShadowEnabled<TTarget>(this TTarget target) where TTarget : FlyoutPresenter
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.FlyoutPresenter.IsDefaultShadowEnabledProperty);
    }
}

namespace CSharpMarkup.WinUI // FontIcon
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.FontIcon"/></summary>
        /// <remarks>Remark: FontIcon().Bind() binds to <see cref="Xaml.Controls.FontIcon.GlyphProperty"/></remarks>
        public static FontIcon FontIcon(Xaml.Media.FontFamily FontFamily = default, double? FontSize = default, Windows.UI.Text.FontStyle? FontStyle = default, Windows.UI.Text.FontWeight? FontWeight = default, string Glyph = default, bool? IsTextScaleFactorEnabled = default, bool? MirroredWhenRightToLeft = default)
        {
            var ui = new Xaml.Controls.FontIcon();
            if (FontFamily is not null) ui.FontFamily = FontFamily;
            if (FontSize is not null) ui.FontSize = FontSize.Value;
            if (FontStyle is not null) ui.FontStyle = FontStyle.Value;
            if (FontWeight is not null) ui.FontWeight = FontWeight.Value;
            if (Glyph is not null) ui.Glyph = Glyph;
            if (IsTextScaleFactorEnabled is not null) ui.IsTextScaleFactorEnabled = IsTextScaleFactorEnabled.Value;
            if (MirroredWhenRightToLeft is not null) ui.MirroredWhenRightToLeft = MirroredWhenRightToLeft.Value;
            return CSharpMarkup.WinUI.FontIcon.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.FontIcon"/></summary>
        /// <remarks>Remark: FontIcon().Bind() binds to <see cref="Xaml.Controls.FontIcon.GlyphProperty"/></remarks>
        public static FontIcon FontIcon()
        {
            var ui = new Xaml.Controls.FontIcon();
            return CSharpMarkup.WinUI.FontIcon.StartChain(ui);
        }
    }

    public partial class FontIcon : IconElement, IUI<Xaml.Controls.FontIcon>, IDefaultBindProperty
    {
        static FontIcon instance;

        internal static FontIcon StartChain(Xaml.Controls.FontIcon ui)
        {
            if (instance == null) instance = new FontIcon();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.FontIcon ui;

        public new Xaml.Controls.FontIcon UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.FontIcon.GlyphProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.FontIcon.GlyphProperty;

        public static implicit operator Xaml.UIElement(FontIcon view) => view?.UI;

        public static implicit operator Xaml.Controls.FontIcon(FontIcon view) => view?.UI;

        public static implicit operator FontIcon(Xaml.Controls.FontIcon ui) => FontIcon.StartChain(ui);

        public FontIcon Invoke(Action<Xaml.Controls.FontIcon> action) { action?.Invoke(UI); return this; }

        protected FontIcon() { }
    }

    public static partial class FontIconExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.FontIcon.FontFamily"/></summary>
        public static TView FontFamily<TView>(this TView view, Xaml.Media.FontFamily value) where TView : FontIcon { view.UI.FontFamily = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.FontIcon.FontSize"/></summary>
        public static TView FontSize<TView>(this TView view, double value) where TView : FontIcon { view.UI.FontSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.FontIcon.FontStyle"/></summary>
        public static TView FontStyle<TView>(this TView view, Windows.UI.Text.FontStyle value) where TView : FontIcon { view.UI.FontStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.FontIcon.FontWeight"/></summary>
        public static TView FontWeight<TView>(this TView view, Windows.UI.Text.FontWeight value) where TView : FontIcon { view.UI.FontWeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.FontIcon.Glyph"/></summary>
        public static TView Glyph<TView>(this TView view, string value) where TView : FontIcon { view.UI.Glyph = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.FontIcon.IsTextScaleFactorEnabled"/></summary>
        public static TView IsTextScaleFactorEnabled<TView>(this TView view, bool value) where TView : FontIcon { view.UI.IsTextScaleFactorEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.FontIcon.MirroredWhenRightToLeft"/></summary>
        public static TView MirroredWhenRightToLeft<TView>(this TView view, bool value) where TView : FontIcon { view.UI.MirroredWhenRightToLeft = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FontIcon.FontFamily"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FontFamily> FontFamily<TTarget>(this TTarget target) where TTarget : FontIcon
        => DependencyProperty<TTarget, Xaml.Media.FontFamily>.Get(target, Xaml.Controls.FontIcon.FontFamilyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FontIcon.FontSize"/></summary>
        public static DependencyProperty<TTarget, double> FontSize<TTarget>(this TTarget target) where TTarget : FontIcon
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.FontIcon.FontSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FontIcon.FontStyle"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStyle> FontStyle<TTarget>(this TTarget target) where TTarget : FontIcon
        => DependencyProperty<TTarget, Windows.UI.Text.FontStyle>.Get(target, Xaml.Controls.FontIcon.FontStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FontIcon.FontWeight"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontWeight> FontWeight<TTarget>(this TTarget target) where TTarget : FontIcon
        => DependencyProperty<TTarget, Windows.UI.Text.FontWeight>.Get(target, Xaml.Controls.FontIcon.FontWeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FontIcon.Glyph"/></summary>
        public static DependencyProperty<TTarget, string> Glyph<TTarget>(this TTarget target) where TTarget : FontIcon
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.FontIcon.GlyphProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FontIcon.IsTextScaleFactorEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextScaleFactorEnabled<TTarget>(this TTarget target) where TTarget : FontIcon
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.FontIcon.IsTextScaleFactorEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FontIcon.MirroredWhenRightToLeft"/></summary>
        public static DependencyProperty<TTarget, bool> MirroredWhenRightToLeft<TTarget>(this TTarget target) where TTarget : FontIcon
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.FontIcon.MirroredWhenRightToLeftProperty);
    }
}

namespace CSharpMarkup.WinUI // FontIconSource
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.FontIconSource"/></summary>
        /// <remarks>Remark: FontIconSource().Bind() binds to <see cref="Xaml.Controls.FontIconSource.GlyphProperty"/></remarks>
        public static FontIconSource FontIconSource(Xaml.Media.FontFamily FontFamily = default, double? FontSize = default, Windows.UI.Text.FontStyle? FontStyle = default, Windows.UI.Text.FontWeight? FontWeight = default, string Glyph = default, bool? IsTextScaleFactorEnabled = default, bool? MirroredWhenRightToLeft = default)
        {
            var ui = new Xaml.Controls.FontIconSource();
            if (FontFamily is not null) ui.FontFamily = FontFamily;
            if (FontSize is not null) ui.FontSize = FontSize.Value;
            if (FontStyle is not null) ui.FontStyle = FontStyle.Value;
            if (FontWeight is not null) ui.FontWeight = FontWeight.Value;
            if (Glyph is not null) ui.Glyph = Glyph;
            if (IsTextScaleFactorEnabled is not null) ui.IsTextScaleFactorEnabled = IsTextScaleFactorEnabled.Value;
            if (MirroredWhenRightToLeft is not null) ui.MirroredWhenRightToLeft = MirroredWhenRightToLeft.Value;
            return CSharpMarkup.WinUI.FontIconSource.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.FontIconSource"/></summary>
        /// <remarks>Remark: FontIconSource().Bind() binds to <see cref="Xaml.Controls.FontIconSource.GlyphProperty"/></remarks>
        public static FontIconSource FontIconSource()
        {
            var ui = new Xaml.Controls.FontIconSource();
            return CSharpMarkup.WinUI.FontIconSource.StartChain(ui);
        }
    }

    public partial class FontIconSource : IconSource, IUI<Xaml.Controls.FontIconSource>, IDefaultBindProperty
    {
        static FontIconSource instance;

        internal static FontIconSource StartChain(Xaml.Controls.FontIconSource ui)
        {
            if (instance == null) instance = new FontIconSource();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.FontIconSource ui;

        public new Xaml.Controls.FontIconSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.FontIconSource.GlyphProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.FontIconSource.GlyphProperty;

        public static implicit operator Xaml.Controls.FontIconSource(FontIconSource view) => view?.UI;

        public static implicit operator FontIconSource(Xaml.Controls.FontIconSource ui) => FontIconSource.StartChain(ui);

        public FontIconSource Invoke(Action<Xaml.Controls.FontIconSource> action) { action?.Invoke(UI); return this; }

        protected FontIconSource() { }
    }

    public static partial class FontIconSourceExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.FontIconSource.FontFamily"/></summary>
        public static TView FontFamily<TView>(this TView view, Xaml.Media.FontFamily value) where TView : FontIconSource { view.UI.FontFamily = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.FontIconSource.FontSize"/></summary>
        public static TView FontSize<TView>(this TView view, double value) where TView : FontIconSource { view.UI.FontSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.FontIconSource.FontStyle"/></summary>
        public static TView FontStyle<TView>(this TView view, Windows.UI.Text.FontStyle value) where TView : FontIconSource { view.UI.FontStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.FontIconSource.FontWeight"/></summary>
        public static TView FontWeight<TView>(this TView view, Windows.UI.Text.FontWeight value) where TView : FontIconSource { view.UI.FontWeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.FontIconSource.Glyph"/></summary>
        public static TView Glyph<TView>(this TView view, string value) where TView : FontIconSource { view.UI.Glyph = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.FontIconSource.IsTextScaleFactorEnabled"/></summary>
        public static TView IsTextScaleFactorEnabled<TView>(this TView view, bool value) where TView : FontIconSource { view.UI.IsTextScaleFactorEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.FontIconSource.MirroredWhenRightToLeft"/></summary>
        public static TView MirroredWhenRightToLeft<TView>(this TView view, bool value) where TView : FontIconSource { view.UI.MirroredWhenRightToLeft = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FontIconSource.FontFamily"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FontFamily> FontFamily<TTarget>(this TTarget target) where TTarget : FontIconSource
        => DependencyProperty<TTarget, Xaml.Media.FontFamily>.Get(target, Xaml.Controls.FontIconSource.FontFamilyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FontIconSource.FontSize"/></summary>
        public static DependencyProperty<TTarget, double> FontSize<TTarget>(this TTarget target) where TTarget : FontIconSource
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.FontIconSource.FontSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FontIconSource.FontStyle"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStyle> FontStyle<TTarget>(this TTarget target) where TTarget : FontIconSource
        => DependencyProperty<TTarget, Windows.UI.Text.FontStyle>.Get(target, Xaml.Controls.FontIconSource.FontStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FontIconSource.FontWeight"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontWeight> FontWeight<TTarget>(this TTarget target) where TTarget : FontIconSource
        => DependencyProperty<TTarget, Windows.UI.Text.FontWeight>.Get(target, Xaml.Controls.FontIconSource.FontWeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FontIconSource.Glyph"/></summary>
        public static DependencyProperty<TTarget, string> Glyph<TTarget>(this TTarget target) where TTarget : FontIconSource
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.FontIconSource.GlyphProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FontIconSource.IsTextScaleFactorEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextScaleFactorEnabled<TTarget>(this TTarget target) where TTarget : FontIconSource
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.FontIconSource.IsTextScaleFactorEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.FontIconSource.MirroredWhenRightToLeft"/></summary>
        public static DependencyProperty<TTarget, bool> MirroredWhenRightToLeft<TTarget>(this TTarget target) where TTarget : FontIconSource
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.FontIconSource.MirroredWhenRightToLeftProperty);
    }
}

namespace CSharpMarkup.WinUI // Frame
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Frame"/></summary>
        public static Frame Frame(UIObject Content)
        {
            var ui = new Xaml.Controls.Frame();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.Frame.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Frame"/></summary>
        public static Frame Frame(int? CacheSize = default, bool? IsNavigationStackEnabled = default, Type SourcePageType = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.Frame();
            if (CacheSize is not null) ui.CacheSize = CacheSize.Value;
            if (IsNavigationStackEnabled is not null) ui.IsNavigationStackEnabled = IsNavigationStackEnabled.Value;
            if (SourcePageType is not null) ui.SourcePageType = SourcePageType;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.Frame.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Frame"/></summary>
        public static Frame Frame()
        {
            var ui = new Xaml.Controls.Frame();
            return CSharpMarkup.WinUI.Frame.StartChain(ui);
        }
    }

    public partial class Frame : ContentControl, IUI<Xaml.Controls.Frame>
    {
        static Frame instance;

        internal static Frame StartChain(Xaml.Controls.Frame ui)
        {
            if (instance == null) instance = new Frame();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Frame ui;

        public new Xaml.Controls.Frame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Frame view) => view?.UI;

        public static implicit operator Xaml.Controls.Frame(Frame view) => view?.UI;

        public static implicit operator Frame(Xaml.Controls.Frame ui) => Frame.StartChain(ui);

        public Frame Invoke(Action<Xaml.Controls.Frame> action) { action?.Invoke(UI); return this; }

        protected Frame() { }
    }

    public static partial class FrameExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Frame.CacheSize"/></summary>
        public static TView CacheSize<TView>(this TView view, int value) where TView : Frame { view.UI.CacheSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Frame.IsNavigationStackEnabled"/></summary>
        public static TView IsNavigationStackEnabled<TView>(this TView view, bool value) where TView : Frame { view.UI.IsNavigationStackEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Frame.SourcePageType"/></summary>
        public static TView SourcePageType<TView>(this TView view, Type value) where TView : Frame { view.UI.SourcePageType = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Frame.BackStackDepth"/></summary>
        public static DependencyProperty<TTarget, int> BackStackDepth<TTarget>(this TTarget target) where TTarget : Frame
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Frame.BackStackDepthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Frame.BackStack"/></summary>
        public static DependencyProperty<TTarget, IList<Xaml.Navigation.PageStackEntry>> BackStack<TTarget>(this TTarget target) where TTarget : Frame
        => DependencyProperty<TTarget, IList<Xaml.Navigation.PageStackEntry>>.Get(target, Xaml.Controls.Frame.BackStackProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Frame.CacheSize"/></summary>
        public static DependencyProperty<TTarget, int> CacheSize<TTarget>(this TTarget target) where TTarget : Frame
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Frame.CacheSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Frame.CanGoBack"/></summary>
        public static DependencyProperty<TTarget, bool> CanGoBack<TTarget>(this TTarget target) where TTarget : Frame
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Frame.CanGoBackProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Frame.CanGoForward"/></summary>
        public static DependencyProperty<TTarget, bool> CanGoForward<TTarget>(this TTarget target) where TTarget : Frame
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Frame.CanGoForwardProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Frame.CurrentSourcePageType"/></summary>
        public static DependencyProperty<TTarget, Type> CurrentSourcePageType<TTarget>(this TTarget target) where TTarget : Frame
        => DependencyProperty<TTarget, Type>.Get(target, Xaml.Controls.Frame.CurrentSourcePageTypeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Frame.ForwardStack"/></summary>
        public static DependencyProperty<TTarget, IList<Xaml.Navigation.PageStackEntry>> ForwardStack<TTarget>(this TTarget target) where TTarget : Frame
        => DependencyProperty<TTarget, IList<Xaml.Navigation.PageStackEntry>>.Get(target, Xaml.Controls.Frame.ForwardStackProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Frame.IsNavigationStackEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsNavigationStackEnabled<TTarget>(this TTarget target) where TTarget : Frame
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Frame.IsNavigationStackEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Frame.SourcePageType"/></summary>
        public static DependencyProperty<TTarget, Type> SourcePageType<TTarget>(this TTarget target) where TTarget : Frame
        => DependencyProperty<TTarget, Type>.Get(target, Xaml.Controls.Frame.SourcePageTypeProperty);
    }
}

namespace CSharpMarkup.WinUI // Grid
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Grid"/></summary>
        public static Grid Grid(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.Grid();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.Grid.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Grid"/></summary>
        public static Grid Grid()
        {
            var ui = new Xaml.Controls.Grid();
            return CSharpMarkup.WinUI.Grid.StartChain(ui);
        }
    }

    public partial class Grid : Panel, IUI<Xaml.Controls.Grid>
    {
        static Grid instance;

        internal static Grid StartChain(Xaml.Controls.Grid ui)
        {
            if (instance == null) instance = new Grid();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Grid ui;

        public new Xaml.Controls.Grid UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Grid view) => view?.UI;

        public static implicit operator Xaml.Controls.Grid(Grid view) => view?.UI;

        public static implicit operator Grid(Xaml.Controls.Grid ui) => Grid.StartChain(ui);

        public Grid Invoke(Action<Xaml.Controls.Grid> action) { action?.Invoke(UI); return this; }

        protected Grid() { }
    }

    public static partial class GridExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Grid.BackgroundSizing"/></summary>
        public static TView BackgroundSizing<TView>(this TView view, Xaml.Controls.BackgroundSizing value) where TView : Grid { view.UI.BackgroundSizing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : Grid { view.UI.BorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : Grid { view.UI.BorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, string color) where TView : Grid { view.UI.BorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, Xaml.Thickness value) where TView : Grid { view.UI.BorderThickness = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double uniform) where TView : Grid { view.UI.BorderThickness = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double horizontal, double vertical) where TView : Grid { view.UI.BorderThickness = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double left, double top, double right, double bottom) where TView : Grid { view.UI.BorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.BorderThickness"/></summary>
        public static TView BorderThicknesses<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : Grid { view.UI.BorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.ColumnSpacing"/></summary>
        public static TView ColumnSpacing<TView>(this TView view, double value) where TView : Grid { view.UI.ColumnSpacing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.CornerRadius"/></summary>
        public static TView CornerRadius<TView>(this TView view, CSharpMarkup.WinUI.to.CornerRadius value) where TView : Grid { view.UI.CornerRadius = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.Padding"/></summary>
        public static TView Padding<TView>(this TView view, Xaml.Thickness value) where TView : Grid { view.UI.Padding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double uniform) where TView : Grid { view.UI.Padding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double horizontal, double vertical) where TView : Grid { view.UI.Padding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double left, double top, double right, double bottom) where TView : Grid { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.Padding"/></summary>
        public static TView Paddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : Grid { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Grid.RowSpacing"/></summary>
        public static TView RowSpacing<TView>(this TView view, double value) where TView : Grid { view.UI.RowSpacing = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Grid.BackgroundSizing"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> BackgroundSizing<TTarget>(this TTarget target) where TTarget : Grid
        => DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing>.Get(target, Xaml.Controls.Grid.BackgroundSizingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Grid.BorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> BorderBrush<TTarget>(this TTarget target) where TTarget : Grid
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Grid.BorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Grid.BorderThickness"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> BorderThickness<TTarget>(this TTarget target) where TTarget : Grid
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Grid.BorderThicknessProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Grid.ColumnSpacing"/></summary>
        public static DependencyProperty<TTarget, double> ColumnSpacing<TTarget>(this TTarget target) where TTarget : Grid
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Grid.ColumnSpacingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Grid.CornerRadius"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius> CornerRadius<TTarget>(this TTarget target) where TTarget : Grid
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius>.Get(target, Xaml.Controls.Grid.CornerRadiusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Grid.Padding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> Padding<TTarget>(this TTarget target) where TTarget : Grid
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Grid.PaddingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Grid.RowSpacing"/></summary>
        public static DependencyProperty<TTarget, double> RowSpacing<TTarget>(this TTarget target) where TTarget : Grid
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Grid.RowSpacingProperty);

        /// <summary>Set <see cref="Xaml.Controls.Grid.Column"/></summary>
        public static TTarget Grid_Column<TTarget>(this TTarget target, int value) where TTarget : FrameworkElement
        { Xaml.Controls.Grid.SetColumn(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Grid.Column"/></summary>
        public static DependencyProperty<TTarget, int> Grid_Column<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Grid.ColumnProperty);

        /// <summary>Set <see cref="Xaml.Controls.Grid.ColumnSpan"/></summary>
        public static TTarget Grid_ColumnSpan<TTarget>(this TTarget target, int value) where TTarget : FrameworkElement
        { Xaml.Controls.Grid.SetColumnSpan(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Grid.ColumnSpan"/></summary>
        public static DependencyProperty<TTarget, int> Grid_ColumnSpan<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Grid.ColumnSpanProperty);

        /// <summary>Set <see cref="Xaml.Controls.Grid.Row"/></summary>
        public static TTarget Grid_Row<TTarget>(this TTarget target, int value) where TTarget : FrameworkElement
        { Xaml.Controls.Grid.SetRow(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Grid.Row"/></summary>
        public static DependencyProperty<TTarget, int> Grid_Row<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Grid.RowProperty);

        /// <summary>Set <see cref="Xaml.Controls.Grid.RowSpan"/></summary>
        public static TTarget Grid_RowSpan<TTarget>(this TTarget target, int value) where TTarget : FrameworkElement
        { Xaml.Controls.Grid.SetRowSpan(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Grid.RowSpan"/></summary>
        public static DependencyProperty<TTarget, int> Grid_RowSpan<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Grid.RowSpanProperty);

        /// <summary>Set <see cref="Xaml.Controls.Grid"/> attached properties</summary>
        public static TTarget Grid<TTarget>(this TTarget target

            , int? Column = default

            , int? ColumnSpan = default

            , int? Row = default

            , int? RowSpan = default

        ) where TTarget : FrameworkElement
        {
            if (Column is not null) Xaml.Controls.Grid.SetColumn(target.UI, Column.Value);

            if (ColumnSpan is not null) Xaml.Controls.Grid.SetColumnSpan(target.UI, ColumnSpan.Value);

            if (Row is not null) Xaml.Controls.Grid.SetRow(target.UI, Row.Value);

            if (RowSpan is not null) Xaml.Controls.Grid.SetRowSpan(target.UI, RowSpan.Value);

            return target;
        }
    }
}

namespace CSharpMarkup.WinUI // GridView
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.GridView"/></summary>
        public static GridView GridView(params UIObject[] Items)
        {
            var ui = new Xaml.Controls.GridView();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<UIObject>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j].UI);
                else
                    ui.Items.Add(child.UI);
            }
            return CSharpMarkup.WinUI.GridView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.GridView"/></summary>
        public static GridView GridView()
        {
            var ui = new Xaml.Controls.GridView();
            return CSharpMarkup.WinUI.GridView.StartChain(ui);
        }
    }

    public partial class GridView : ListViewBase, IUI<Xaml.Controls.GridView>
    {
        static GridView instance;

        internal static GridView StartChain(Xaml.Controls.GridView ui)
        {
            if (instance == null) instance = new GridView();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.GridView ui;

        public new Xaml.Controls.GridView UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(GridView view) => view?.UI;

        public static implicit operator Xaml.Controls.GridView(GridView view) => view?.UI;

        public static implicit operator GridView(Xaml.Controls.GridView ui) => GridView.StartChain(ui);

        public GridView Invoke(Action<Xaml.Controls.GridView> action) { action?.Invoke(UI); return this; }

        protected GridView() { }
    }
}

namespace CSharpMarkup.WinUI // GridViewHeaderItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.GridViewHeaderItem"/></summary>
        public static GridViewHeaderItem GridViewHeaderItem(UIObject Content)
        {
            var ui = new Xaml.Controls.GridViewHeaderItem();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.GridViewHeaderItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.GridViewHeaderItem"/></summary>
        public static GridViewHeaderItem GridViewHeaderItem()
        {
            var ui = new Xaml.Controls.GridViewHeaderItem();
            return CSharpMarkup.WinUI.GridViewHeaderItem.StartChain(ui);
        }
    }

    public partial class GridViewHeaderItem : ListViewBaseHeaderItem, IUI<Xaml.Controls.GridViewHeaderItem>
    {
        static GridViewHeaderItem instance;

        internal static GridViewHeaderItem StartChain(Xaml.Controls.GridViewHeaderItem ui)
        {
            if (instance == null) instance = new GridViewHeaderItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.GridViewHeaderItem ui;

        public new Xaml.Controls.GridViewHeaderItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(GridViewHeaderItem view) => view?.UI;

        public static implicit operator Xaml.Controls.GridViewHeaderItem(GridViewHeaderItem view) => view?.UI;

        public static implicit operator GridViewHeaderItem(Xaml.Controls.GridViewHeaderItem ui) => GridViewHeaderItem.StartChain(ui);

        public GridViewHeaderItem Invoke(Action<Xaml.Controls.GridViewHeaderItem> action) { action?.Invoke(UI); return this; }

        protected GridViewHeaderItem() { }
    }
}

namespace CSharpMarkup.WinUI // GridViewItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.GridViewItem"/></summary>
        public static GridViewItem GridViewItem(UIObject Content)
        {
            var ui = new Xaml.Controls.GridViewItem();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.GridViewItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.GridViewItem"/></summary>
        public static GridViewItem GridViewItem()
        {
            var ui = new Xaml.Controls.GridViewItem();
            return CSharpMarkup.WinUI.GridViewItem.StartChain(ui);
        }
    }

    public partial class GridViewItem : SelectorItem, IUI<Xaml.Controls.GridViewItem>
    {
        static GridViewItem instance;

        internal static GridViewItem StartChain(Xaml.Controls.GridViewItem ui)
        {
            if (instance == null) instance = new GridViewItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.GridViewItem ui;

        public new Xaml.Controls.GridViewItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(GridViewItem view) => view?.UI;

        public static implicit operator Xaml.Controls.GridViewItem(GridViewItem view) => view?.UI;

        public static implicit operator GridViewItem(Xaml.Controls.GridViewItem ui) => GridViewItem.StartChain(ui);

        public GridViewItem Invoke(Action<Xaml.Controls.GridViewItem> action) { action?.Invoke(UI); return this; }

        protected GridViewItem() { }
    }
}

namespace CSharpMarkup.WinUI // GroupItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.GroupItem"/></summary>
        public static GroupItem GroupItem(UIObject Content)
        {
            var ui = new Xaml.Controls.GroupItem();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.GroupItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.GroupItem"/></summary>
        public static GroupItem GroupItem()
        {
            var ui = new Xaml.Controls.GroupItem();
            return CSharpMarkup.WinUI.GroupItem.StartChain(ui);
        }
    }

    public partial class GroupItem : ContentControl, IUI<Xaml.Controls.GroupItem>
    {
        static GroupItem instance;

        internal static GroupItem StartChain(Xaml.Controls.GroupItem ui)
        {
            if (instance == null) instance = new GroupItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.GroupItem ui;

        public new Xaml.Controls.GroupItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(GroupItem view) => view?.UI;

        public static implicit operator Xaml.Controls.GroupItem(GroupItem view) => view?.UI;

        public static implicit operator GroupItem(Xaml.Controls.GroupItem ui) => GroupItem.StartChain(ui);

        public GroupItem Invoke(Action<Xaml.Controls.GroupItem> action) { action?.Invoke(UI); return this; }

        protected GroupItem() { }
    }
}

namespace CSharpMarkup.WinUI // Hub
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Hub"/></summary>
        public static Hub Hub(params Xaml.Controls.HubSection[] Sections)
        {
            var ui = new Xaml.Controls.Hub();
            for (int i = 0; i < Sections.Length; i++)
            {
                var child = Sections[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Controls.HubSection>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Sections.Add(subChildren[j]);
                else
                    ui.Sections.Add(child);
            }
            return CSharpMarkup.WinUI.Hub.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Hub"/></summary>
        public static Hub Hub()
        {
            var ui = new Xaml.Controls.Hub();
            return CSharpMarkup.WinUI.Hub.StartChain(ui);
        }
    }

    public partial class Hub : Control, IUI<Xaml.Controls.Hub>
    {
        static Hub instance;

        internal static Hub StartChain(Xaml.Controls.Hub ui)
        {
            if (instance == null) instance = new Hub();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Hub ui;

        public new Xaml.Controls.Hub UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Hub view) => view?.UI;

        public static implicit operator Xaml.Controls.Hub(Hub view) => view?.UI;

        public static implicit operator Hub(Xaml.Controls.Hub ui) => Hub.StartChain(ui);

        public Hub Invoke(Action<Xaml.Controls.Hub> action) { action?.Invoke(UI); return this; }

        protected Hub() { }
    }

    public static partial class HubExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Hub.DefaultSectionIndex"/></summary>
        public static TView DefaultSectionIndex<TView>(this TView view, int value) where TView : Hub { view.UI.DefaultSectionIndex = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Hub.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : Hub { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Hub.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : Hub { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Hub.IsActiveView"/></summary>
        public static TView IsActiveView<TView>(this TView view, bool value) where TView : Hub { view.UI.IsActiveView = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Hub.IsZoomedInView"/></summary>
        public static TView IsZoomedInView<TView>(this TView view, bool value) where TView : Hub { view.UI.IsZoomedInView = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Hub.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.Orientation value) where TView : Hub { view.UI.Orientation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Hub.SemanticZoomOwner"/></summary>
        public static TView SemanticZoomOwner<TView>(this TView view, Xaml.Controls.SemanticZoom value) where TView : Hub { view.UI.SemanticZoomOwner = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Hub.DefaultSectionIndex"/></summary>
        public static DependencyProperty<TTarget, int> DefaultSectionIndex<TTarget>(this TTarget target) where TTarget : Hub
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Hub.DefaultSectionIndexProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Hub.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : Hub
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.Hub.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Hub.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : Hub
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.Hub.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Hub.IsActiveView"/></summary>
        public static DependencyProperty<TTarget, bool> IsActiveView<TTarget>(this TTarget target) where TTarget : Hub
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Hub.IsActiveViewProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Hub.IsZoomedInView"/></summary>
        public static DependencyProperty<TTarget, bool> IsZoomedInView<TTarget>(this TTarget target) where TTarget : Hub
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Hub.IsZoomedInViewProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Hub.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Orientation> Orientation<TTarget>(this TTarget target) where TTarget : Hub
        => DependencyProperty<TTarget, Xaml.Controls.Orientation>.Get(target, Xaml.Controls.Hub.OrientationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Hub.SemanticZoomOwner"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SemanticZoom> SemanticZoomOwner<TTarget>(this TTarget target) where TTarget : Hub
        => DependencyProperty<TTarget, Xaml.Controls.SemanticZoom>.Get(target, Xaml.Controls.Hub.SemanticZoomOwnerProperty);
    }
}

namespace CSharpMarkup.WinUI // HubSection
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.HubSection"/></summary>
        public static HubSection HubSection(Xaml.DataTemplate ContentTemplate)
        {
            var ui = new Xaml.Controls.HubSection();
            if (ContentTemplate is not null) ui.ContentTemplate = ContentTemplate;
            return CSharpMarkup.WinUI.HubSection.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.HubSection"/></summary>
        public static HubSection HubSection(object Header = default, Xaml.DataTemplate HeaderTemplate = default, bool? IsHeaderInteractive = default, Xaml.DataTemplate ContentTemplate = default)
        {
            var ui = new Xaml.Controls.HubSection();
            if (Header is not null) ui.Header = Header;
            if (HeaderTemplate is not null) ui.HeaderTemplate = HeaderTemplate;
            if (IsHeaderInteractive is not null) ui.IsHeaderInteractive = IsHeaderInteractive.Value;
            if (ContentTemplate is not null) ui.ContentTemplate = ContentTemplate;
            return CSharpMarkup.WinUI.HubSection.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.HubSection"/></summary>
        public static HubSection HubSection()
        {
            var ui = new Xaml.Controls.HubSection();
            return CSharpMarkup.WinUI.HubSection.StartChain(ui);
        }
    }

    public partial class HubSection : Control, IUI<Xaml.Controls.HubSection>
    {
        static HubSection instance;

        internal static HubSection StartChain(Xaml.Controls.HubSection ui)
        {
            if (instance == null) instance = new HubSection();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.HubSection ui;

        public new Xaml.Controls.HubSection UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(HubSection view) => view?.UI;

        public static implicit operator Xaml.Controls.HubSection(HubSection view) => view?.UI;

        public static implicit operator HubSection(Xaml.Controls.HubSection ui) => HubSection.StartChain(ui);

        public HubSection Invoke(Action<Xaml.Controls.HubSection> action) { action?.Invoke(UI); return this; }

        protected HubSection() { }
    }

    public static partial class HubSectionExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.HubSection.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : HubSection { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.HubSection.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : HubSection { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.HubSection.IsHeaderInteractive"/></summary>
        public static TView IsHeaderInteractive<TView>(this TView view, bool value) where TView : HubSection { view.UI.IsHeaderInteractive = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.HubSection.ContentTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> ContentTemplate<TTarget>(this TTarget target) where TTarget : HubSection
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.HubSection.ContentTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.HubSection.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : HubSection
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.HubSection.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.HubSection.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : HubSection
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.HubSection.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.HubSection.IsHeaderInteractive"/></summary>
        public static DependencyProperty<TTarget, bool> IsHeaderInteractive<TTarget>(this TTarget target) where TTarget : HubSection
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.HubSection.IsHeaderInteractiveProperty);
    }
}

namespace CSharpMarkup.WinUI // HyperlinkButton
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.HyperlinkButton"/></summary>
        public static HyperlinkButton HyperlinkButton(UIObject Content)
        {
            var ui = new Xaml.Controls.HyperlinkButton();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.HyperlinkButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.HyperlinkButton"/></summary>
        public static HyperlinkButton HyperlinkButton(Uri NavigateUri = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.HyperlinkButton();
            if (NavigateUri is not null) ui.NavigateUri = NavigateUri;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.HyperlinkButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.HyperlinkButton"/></summary>
        public static HyperlinkButton HyperlinkButton()
        {
            var ui = new Xaml.Controls.HyperlinkButton();
            return CSharpMarkup.WinUI.HyperlinkButton.StartChain(ui);
        }
    }

    public partial class HyperlinkButton : ButtonBase, IUI<Xaml.Controls.HyperlinkButton>
    {
        static HyperlinkButton instance;

        internal static HyperlinkButton StartChain(Xaml.Controls.HyperlinkButton ui)
        {
            if (instance == null) instance = new HyperlinkButton();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.HyperlinkButton ui;

        public new Xaml.Controls.HyperlinkButton UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(HyperlinkButton view) => view?.UI;

        public static implicit operator Xaml.Controls.HyperlinkButton(HyperlinkButton view) => view?.UI;

        public static implicit operator HyperlinkButton(Xaml.Controls.HyperlinkButton ui) => HyperlinkButton.StartChain(ui);

        public HyperlinkButton Invoke(Action<Xaml.Controls.HyperlinkButton> action) { action?.Invoke(UI); return this; }

        protected HyperlinkButton() { }
    }

    public static partial class HyperlinkButtonExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.HyperlinkButton.NavigateUri"/></summary>
        public static TView NavigateUri<TView>(this TView view, Uri value) where TView : HyperlinkButton { view.UI.NavigateUri = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.HyperlinkButton.NavigateUri"/></summary>
        public static DependencyProperty<TTarget, Uri> NavigateUri<TTarget>(this TTarget target) where TTarget : HyperlinkButton
        => DependencyProperty<TTarget, Uri>.Get(target, Xaml.Controls.HyperlinkButton.NavigateUriProperty);
    }
}

namespace CSharpMarkup.WinUI // IconElement
{
    public partial class IconElement : FrameworkElement, IUI<Xaml.Controls.IconElement>
    {
        Xaml.Controls.IconElement ui;

        public new Xaml.Controls.IconElement UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public IconElement Invoke(Action<Xaml.Controls.IconElement> action) { action?.Invoke(UI); return this; }

        protected IconElement() { }
    }

    public static partial class IconElementExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.IconElement.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Xaml.Media.Brush value) where TView : IconElement { view.UI.Foreground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.IconElement.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Windows.UI.Color value) where TView : IconElement { view.UI.Foreground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.IconElement.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, string color) where TView : IconElement { view.UI.Foreground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.IconElement.Foreground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Foreground<TTarget>(this TTarget target) where TTarget : IconElement
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.IconElement.ForegroundProperty);
    }
}

namespace CSharpMarkup.WinUI // IconSource
{
    public partial class IconSource : DependencyObject, IUI<Xaml.Controls.IconSource>
    {
        Xaml.Controls.IconSource ui;

        public new Xaml.Controls.IconSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public IconSource Invoke(Action<Xaml.Controls.IconSource> action) { action?.Invoke(UI); return this; }

        protected IconSource() { }
    }

    public static partial class IconSourceExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.IconSource.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Xaml.Media.Brush value) where TView : IconSource { view.UI.Foreground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.IconSource.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Windows.UI.Color value) where TView : IconSource { view.UI.Foreground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.IconSource.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, string color) where TView : IconSource { view.UI.Foreground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.IconSource.Foreground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Foreground<TTarget>(this TTarget target) where TTarget : IconSource
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.IconSource.ForegroundProperty);
    }
}

namespace CSharpMarkup.WinUI // IconSourceElement
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.IconSourceElement"/></summary>
        public static IconSourceElement IconSourceElement(Xaml.Controls.IconSource IconSource)
        {
            var ui = new Xaml.Controls.IconSourceElement();
            if (IconSource is not null) ui.IconSource = IconSource;
            return CSharpMarkup.WinUI.IconSourceElement.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.IconSourceElement"/></summary>
        public static IconSourceElement IconSourceElement()
        {
            var ui = new Xaml.Controls.IconSourceElement();
            return CSharpMarkup.WinUI.IconSourceElement.StartChain(ui);
        }
    }

    public partial class IconSourceElement : IconElement, IUI<Xaml.Controls.IconSourceElement>
    {
        static IconSourceElement instance;

        internal static IconSourceElement StartChain(Xaml.Controls.IconSourceElement ui)
        {
            if (instance == null) instance = new IconSourceElement();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.IconSourceElement ui;

        public new Xaml.Controls.IconSourceElement UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(IconSourceElement view) => view?.UI;

        public static implicit operator Xaml.Controls.IconSourceElement(IconSourceElement view) => view?.UI;

        public static implicit operator IconSourceElement(Xaml.Controls.IconSourceElement ui) => IconSourceElement.StartChain(ui);

        public IconSourceElement Invoke(Action<Xaml.Controls.IconSourceElement> action) { action?.Invoke(UI); return this; }

        protected IconSourceElement() { }
    }

    public static partial class IconSourceElementExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.IconSourceElement.IconSource"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconSource> IconSource<TTarget>(this TTarget target) where TTarget : IconSourceElement
        => DependencyProperty<TTarget, Xaml.Controls.IconSource>.Get(target, Xaml.Controls.IconSourceElement.IconSourceProperty);
    }
}

namespace CSharpMarkup.WinUI // Image
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Image"/></summary>
        /// <remarks>Remark: Image().Bind() binds to <see cref="Xaml.Controls.Image.SourceProperty"/></remarks>
        public static Image Image(Xaml.Thickness? NineGrid = default, Xaml.Media.ImageSource Source = default, Xaml.Media.Stretch? Stretch = default)
        {
            var ui = new Xaml.Controls.Image();
            if (NineGrid is not null) ui.NineGrid = NineGrid.Value;
            if (Source is not null) ui.Source = Source;
            if (Stretch is not null) ui.Stretch = Stretch.Value;
            return CSharpMarkup.WinUI.Image.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Image"/></summary>
        /// <remarks>Remark: Image().Bind() binds to <see cref="Xaml.Controls.Image.SourceProperty"/></remarks>
        public static Image Image()
        {
            var ui = new Xaml.Controls.Image();
            return CSharpMarkup.WinUI.Image.StartChain(ui);
        }
    }

    public partial class Image : FrameworkElement, IUI<Xaml.Controls.Image>, IDefaultBindProperty
    {
        static Image instance;

        internal static Image StartChain(Xaml.Controls.Image ui)
        {
            if (instance == null) instance = new Image();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Image ui;

        public new Xaml.Controls.Image UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.Image.SourceProperty"/></summary>
        public Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.Image.SourceProperty;

        public static implicit operator Xaml.UIElement(Image view) => view?.UI;

        public static implicit operator Xaml.Controls.Image(Image view) => view?.UI;

        public static implicit operator Image(Xaml.Controls.Image ui) => Image.StartChain(ui);

        public Image Invoke(Action<Xaml.Controls.Image> action) { action?.Invoke(UI); return this; }

        protected Image() { }
    }

    public static partial class ImageExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Image.NineGrid"/></summary>
        public static TView NineGrid<TView>(this TView view, Xaml.Thickness value) where TView : Image { view.UI.NineGrid = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Image.NineGrid"/></summary>
        public static TView NineGrid<TView>(this TView view, double uniform) where TView : Image { view.UI.NineGrid = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Image.NineGrid"/></summary>
        public static TView NineGrid<TView>(this TView view, double horizontal, double vertical) where TView : Image { view.UI.NineGrid = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Image.NineGrid"/></summary>
        public static TView NineGrid<TView>(this TView view, double left, double top, double right, double bottom) where TView : Image { view.UI.NineGrid = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Image.NineGrid"/></summary>
        public static TView NineGrids<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : Image { view.UI.NineGrid = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Image.Source"/></summary>
        public static TView Source<TView>(this TView view, Xaml.Media.ImageSource value) where TView : Image { view.UI.Source = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Image.Stretch"/></summary>
        public static TView Stretch<TView>(this TView view, Xaml.Media.Stretch value) where TView : Image { view.UI.Stretch = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Image.NineGrid"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> NineGrid<TTarget>(this TTarget target) where TTarget : Image
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Image.NineGridProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Image.Source"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ImageSource> Source<TTarget>(this TTarget target) where TTarget : Image
        => DependencyProperty<TTarget, Xaml.Media.ImageSource>.Get(target, Xaml.Controls.Image.SourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Image.Stretch"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Stretch> Stretch<TTarget>(this TTarget target) where TTarget : Image
        => DependencyProperty<TTarget, Xaml.Media.Stretch>.Get(target, Xaml.Controls.Image.StretchProperty);
    }
}

namespace CSharpMarkup.WinUI // ImageIcon
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ImageIcon"/></summary>
        public static ImageIcon ImageIcon(Xaml.Media.ImageSource Source = default)
        {
            var ui = new Xaml.Controls.ImageIcon();
            if (Source is not null) ui.Source = Source;
            return CSharpMarkup.WinUI.ImageIcon.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ImageIcon"/></summary>
        public static ImageIcon ImageIcon()
        {
            var ui = new Xaml.Controls.ImageIcon();
            return CSharpMarkup.WinUI.ImageIcon.StartChain(ui);
        }
    }

    public partial class ImageIcon : IconElement, IUI<Xaml.Controls.ImageIcon>
    {
        static ImageIcon instance;

        internal static ImageIcon StartChain(Xaml.Controls.ImageIcon ui)
        {
            if (instance == null) instance = new ImageIcon();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ImageIcon ui;

        public new Xaml.Controls.ImageIcon UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ImageIcon view) => view?.UI;

        public static implicit operator Xaml.Controls.ImageIcon(ImageIcon view) => view?.UI;

        public static implicit operator ImageIcon(Xaml.Controls.ImageIcon ui) => ImageIcon.StartChain(ui);

        public ImageIcon Invoke(Action<Xaml.Controls.ImageIcon> action) { action?.Invoke(UI); return this; }

        protected ImageIcon() { }
    }

    public static partial class ImageIconExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ImageIcon.Source"/></summary>
        public static TView Source<TView>(this TView view, Xaml.Media.ImageSource value) where TView : ImageIcon { view.UI.Source = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ImageIcon.Source"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ImageSource> Source<TTarget>(this TTarget target) where TTarget : ImageIcon
        => DependencyProperty<TTarget, Xaml.Media.ImageSource>.Get(target, Xaml.Controls.ImageIcon.SourceProperty);
    }
}

namespace CSharpMarkup.WinUI // ImageIconSource
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ImageIconSource"/></summary>
        public static ImageIconSource ImageIconSource(Xaml.Media.ImageSource ImageSource = default)
        {
            var ui = new Xaml.Controls.ImageIconSource();
            if (ImageSource is not null) ui.ImageSource = ImageSource;
            return CSharpMarkup.WinUI.ImageIconSource.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ImageIconSource"/></summary>
        public static ImageIconSource ImageIconSource()
        {
            var ui = new Xaml.Controls.ImageIconSource();
            return CSharpMarkup.WinUI.ImageIconSource.StartChain(ui);
        }
    }

    public partial class ImageIconSource : IconSource, IUI<Xaml.Controls.ImageIconSource>
    {
        static ImageIconSource instance;

        internal static ImageIconSource StartChain(Xaml.Controls.ImageIconSource ui)
        {
            if (instance == null) instance = new ImageIconSource();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ImageIconSource ui;

        public new Xaml.Controls.ImageIconSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.ImageIconSource(ImageIconSource view) => view?.UI;

        public static implicit operator ImageIconSource(Xaml.Controls.ImageIconSource ui) => ImageIconSource.StartChain(ui);

        public ImageIconSource Invoke(Action<Xaml.Controls.ImageIconSource> action) { action?.Invoke(UI); return this; }

        protected ImageIconSource() { }
    }

    public static partial class ImageIconSourceExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ImageIconSource.ImageSource"/></summary>
        public static TView ImageSource<TView>(this TView view, Xaml.Media.ImageSource value) where TView : ImageIconSource { view.UI.ImageSource = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ImageIconSource.ImageSource"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ImageSource> ImageSource<TTarget>(this TTarget target) where TTarget : ImageIconSource
        => DependencyProperty<TTarget, Xaml.Media.ImageSource>.Get(target, Xaml.Controls.ImageIconSource.ImageSourceProperty);
    }
}

namespace CSharpMarkup.WinUI // InfoBadge
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.InfoBadge"/></summary>
        public static InfoBadge InfoBadge(Xaml.Controls.IconSource IconSource = default, int? Value = default)
        {
            var ui = new Xaml.Controls.InfoBadge();
            if (IconSource is not null) ui.IconSource = IconSource;
            if (Value is not null) ui.Value = Value.Value;
            return CSharpMarkup.WinUI.InfoBadge.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.InfoBadge"/></summary>
        public static InfoBadge InfoBadge()
        {
            var ui = new Xaml.Controls.InfoBadge();
            return CSharpMarkup.WinUI.InfoBadge.StartChain(ui);
        }
    }

    public partial class InfoBadge : Control, IUI<Xaml.Controls.InfoBadge>
    {
        static InfoBadge instance;

        internal static InfoBadge StartChain(Xaml.Controls.InfoBadge ui)
        {
            if (instance == null) instance = new InfoBadge();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.InfoBadge ui;

        public new Xaml.Controls.InfoBadge UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(InfoBadge view) => view?.UI;

        public static implicit operator Xaml.Controls.InfoBadge(InfoBadge view) => view?.UI;

        public static implicit operator InfoBadge(Xaml.Controls.InfoBadge ui) => InfoBadge.StartChain(ui);

        public InfoBadge Invoke(Action<Xaml.Controls.InfoBadge> action) { action?.Invoke(UI); return this; }

        protected InfoBadge() { }
    }

    public static partial class InfoBadgeExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.InfoBadge.IconSource"/></summary>
        public static TView IconSource<TView>(this TView view, Xaml.Controls.IconSource value) where TView : InfoBadge { view.UI.IconSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.InfoBadge.Value"/></summary>
        public static TView Value<TView>(this TView view, int value) where TView : InfoBadge { view.UI.Value = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBadge.IconSource"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconSource> IconSource<TTarget>(this TTarget target) where TTarget : InfoBadge
        => DependencyProperty<TTarget, Xaml.Controls.IconSource>.Get(target, Xaml.Controls.InfoBadge.IconSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBadge.TemplateSettings"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.InfoBadgeTemplateSettings> TemplateSettings<TTarget>(this TTarget target) where TTarget : InfoBadge
        => DependencyProperty<TTarget, Xaml.Controls.InfoBadgeTemplateSettings>.Get(target, Xaml.Controls.InfoBadge.TemplateSettingsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBadge.Value"/></summary>
        public static DependencyProperty<TTarget, int> Value<TTarget>(this TTarget target) where TTarget : InfoBadge
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.InfoBadge.ValueProperty);
    }
}

namespace CSharpMarkup.WinUI // InfoBadgeTemplateSettings
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.InfoBadgeTemplateSettings"/></summary>
        public static InfoBadgeTemplateSettings InfoBadgeTemplateSettings(Xaml.Controls.IconElement IconElement = default, CSharpMarkup.WinUI.to.CornerRadius? InfoBadgeCornerRadius = default)
        {
            var ui = new Xaml.Controls.InfoBadgeTemplateSettings();
            if (IconElement is not null) ui.IconElement = IconElement;
            if (InfoBadgeCornerRadius is not null) ui.InfoBadgeCornerRadius = InfoBadgeCornerRadius.Value;
            return CSharpMarkup.WinUI.InfoBadgeTemplateSettings.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.InfoBadgeTemplateSettings"/></summary>
        public static InfoBadgeTemplateSettings InfoBadgeTemplateSettings()
        {
            var ui = new Xaml.Controls.InfoBadgeTemplateSettings();
            return CSharpMarkup.WinUI.InfoBadgeTemplateSettings.StartChain(ui);
        }
    }

    public partial class InfoBadgeTemplateSettings : DependencyObject, IUI<Xaml.Controls.InfoBadgeTemplateSettings>
    {
        static InfoBadgeTemplateSettings instance;

        internal static InfoBadgeTemplateSettings StartChain(Xaml.Controls.InfoBadgeTemplateSettings ui)
        {
            if (instance == null) instance = new InfoBadgeTemplateSettings();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.InfoBadgeTemplateSettings ui;

        public new Xaml.Controls.InfoBadgeTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.InfoBadgeTemplateSettings(InfoBadgeTemplateSettings view) => view?.UI;

        public static implicit operator InfoBadgeTemplateSettings(Xaml.Controls.InfoBadgeTemplateSettings ui) => InfoBadgeTemplateSettings.StartChain(ui);

        public InfoBadgeTemplateSettings Invoke(Action<Xaml.Controls.InfoBadgeTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected InfoBadgeTemplateSettings() { }
    }

    public static partial class InfoBadgeTemplateSettingsExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.InfoBadgeTemplateSettings.IconElement"/></summary>
        public static TView IconElement<TView>(this TView view, Xaml.Controls.IconElement value) where TView : InfoBadgeTemplateSettings { view.UI.IconElement = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.InfoBadgeTemplateSettings.InfoBadgeCornerRadius"/></summary>
        public static TView InfoBadgeCornerRadius<TView>(this TView view, CSharpMarkup.WinUI.to.CornerRadius value) where TView : InfoBadgeTemplateSettings { view.UI.InfoBadgeCornerRadius = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBadgeTemplateSettings.IconElement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconElement> IconElement<TTarget>(this TTarget target) where TTarget : InfoBadgeTemplateSettings
        => DependencyProperty<TTarget, Xaml.Controls.IconElement>.Get(target, Xaml.Controls.InfoBadgeTemplateSettings.IconElementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBadgeTemplateSettings.InfoBadgeCornerRadius"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius> InfoBadgeCornerRadius<TTarget>(this TTarget target) where TTarget : InfoBadgeTemplateSettings
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius>.Get(target, Xaml.Controls.InfoBadgeTemplateSettings.InfoBadgeCornerRadiusProperty);
    }
}

namespace CSharpMarkup.WinUI // InfoBar
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.InfoBar"/></summary>
        public static InfoBar InfoBar(UIObject Content)
        {
            var ui = new Xaml.Controls.InfoBar();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.InfoBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.InfoBar"/></summary>
        public static InfoBar InfoBar(Xaml.Controls.Primitives.ButtonBase ActionButton = default, ICommand CloseButtonCommand = default, object CloseButtonCommandParameter = default, Xaml.Style CloseButtonStyle = default, Xaml.DataTemplate ContentTemplate = default, Xaml.Controls.IconSource IconSource = default, bool? IsClosable = default, bool? IsIconVisible = default, bool? IsOpen = default, string Message = default, Xaml.Controls.InfoBarSeverity? Severity = default, string Title = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.InfoBar();
            if (ActionButton is not null) ui.ActionButton = ActionButton;
            if (CloseButtonCommand is not null) ui.CloseButtonCommand = CloseButtonCommand;
            if (CloseButtonCommandParameter is not null) ui.CloseButtonCommandParameter = CloseButtonCommandParameter;
            if (CloseButtonStyle is not null) ui.CloseButtonStyle = CloseButtonStyle;
            if (ContentTemplate is not null) ui.ContentTemplate = ContentTemplate;
            if (IconSource is not null) ui.IconSource = IconSource;
            if (IsClosable is not null) ui.IsClosable = IsClosable.Value;
            if (IsIconVisible is not null) ui.IsIconVisible = IsIconVisible.Value;
            if (IsOpen is not null) ui.IsOpen = IsOpen.Value;
            if (Message is not null) ui.Message = Message;
            if (Severity is not null) ui.Severity = Severity.Value;
            if (Title is not null) ui.Title = Title;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.InfoBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.InfoBar"/></summary>
        public static InfoBar InfoBar()
        {
            var ui = new Xaml.Controls.InfoBar();
            return CSharpMarkup.WinUI.InfoBar.StartChain(ui);
        }
    }

    public partial class InfoBar : Control, IUI<Xaml.Controls.InfoBar>
    {
        static InfoBar instance;

        internal static InfoBar StartChain(Xaml.Controls.InfoBar ui)
        {
            if (instance == null) instance = new InfoBar();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.InfoBar ui;

        public new Xaml.Controls.InfoBar UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(InfoBar view) => view?.UI;

        public static implicit operator Xaml.Controls.InfoBar(InfoBar view) => view?.UI;

        public static implicit operator InfoBar(Xaml.Controls.InfoBar ui) => InfoBar.StartChain(ui);

        public InfoBar Invoke(Action<Xaml.Controls.InfoBar> action) { action?.Invoke(UI); return this; }

        protected InfoBar() { }
    }

    public static partial class InfoBarExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.InfoBar.ActionButton"/></summary>
        public static TView ActionButton<TView>(this TView view, Xaml.Controls.Primitives.ButtonBase value) where TView : InfoBar { view.UI.ActionButton = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.InfoBar.CloseButtonCommand"/></summary>
        public static TView CloseButtonCommand<TView>(this TView view, ICommand value) where TView : InfoBar { view.UI.CloseButtonCommand = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.InfoBar.CloseButtonCommandParameter"/></summary>
        public static TView CloseButtonCommandParameter<TView>(this TView view, object value) where TView : InfoBar { view.UI.CloseButtonCommandParameter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.InfoBar.CloseButtonStyle"/></summary>
        public static TView CloseButtonStyle<TView>(this TView view, Xaml.Style value) where TView : InfoBar { view.UI.CloseButtonStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.InfoBar.ContentTemplate"/></summary>
        public static TView ContentTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : InfoBar { view.UI.ContentTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.InfoBar.IconSource"/></summary>
        public static TView IconSource<TView>(this TView view, Xaml.Controls.IconSource value) where TView : InfoBar { view.UI.IconSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.InfoBar.IsClosable"/></summary>
        public static TView IsClosable<TView>(this TView view, bool value) where TView : InfoBar { view.UI.IsClosable = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.InfoBar.IsIconVisible"/></summary>
        public static TView IsIconVisible<TView>(this TView view, bool value) where TView : InfoBar { view.UI.IsIconVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.InfoBar.IsOpen"/></summary>
        public static TView IsOpen<TView>(this TView view, bool value) where TView : InfoBar { view.UI.IsOpen = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.InfoBar.Message"/></summary>
        public static TView Message<TView>(this TView view, string value) where TView : InfoBar { view.UI.Message = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.InfoBar.Severity"/></summary>
        public static TView Severity<TView>(this TView view, Xaml.Controls.InfoBarSeverity value) where TView : InfoBar { view.UI.Severity = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.InfoBar.Title"/></summary>
        public static TView Title<TView>(this TView view, string value) where TView : InfoBar { view.UI.Title = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBar.ActionButton"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.ButtonBase> ActionButton<TTarget>(this TTarget target) where TTarget : InfoBar
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.ButtonBase>.Get(target, Xaml.Controls.InfoBar.ActionButtonProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBar.CloseButtonCommandParameter"/></summary>
        public static DependencyProperty<TTarget, object> CloseButtonCommandParameter<TTarget>(this TTarget target) where TTarget : InfoBar
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.InfoBar.CloseButtonCommandParameterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBar.CloseButtonCommand"/></summary>
        public static DependencyProperty<TTarget, ICommand> CloseButtonCommand<TTarget>(this TTarget target) where TTarget : InfoBar
        => DependencyProperty<TTarget, ICommand>.Get(target, Xaml.Controls.InfoBar.CloseButtonCommandProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBar.CloseButtonStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> CloseButtonStyle<TTarget>(this TTarget target) where TTarget : InfoBar
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.InfoBar.CloseButtonStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBar.Content"/></summary>
        public static DependencyProperty<TTarget, object> Content<TTarget>(this TTarget target) where TTarget : InfoBar
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.InfoBar.ContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBar.ContentTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> ContentTemplate<TTarget>(this TTarget target) where TTarget : InfoBar
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.InfoBar.ContentTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBar.IconSource"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconSource> IconSource<TTarget>(this TTarget target) where TTarget : InfoBar
        => DependencyProperty<TTarget, Xaml.Controls.IconSource>.Get(target, Xaml.Controls.InfoBar.IconSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBar.IsClosable"/></summary>
        public static DependencyProperty<TTarget, bool> IsClosable<TTarget>(this TTarget target) where TTarget : InfoBar
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.InfoBar.IsClosableProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBar.IsIconVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsIconVisible<TTarget>(this TTarget target) where TTarget : InfoBar
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.InfoBar.IsIconVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBar.IsOpen"/></summary>
        public static DependencyProperty<TTarget, bool> IsOpen<TTarget>(this TTarget target) where TTarget : InfoBar
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.InfoBar.IsOpenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBar.Message"/></summary>
        public static DependencyProperty<TTarget, string> Message<TTarget>(this TTarget target) where TTarget : InfoBar
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.InfoBar.MessageProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBar.Severity"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.InfoBarSeverity> Severity<TTarget>(this TTarget target) where TTarget : InfoBar
        => DependencyProperty<TTarget, Xaml.Controls.InfoBarSeverity>.Get(target, Xaml.Controls.InfoBar.SeverityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBar.TemplateSettings"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.InfoBarTemplateSettings> TemplateSettings<TTarget>(this TTarget target) where TTarget : InfoBar
        => DependencyProperty<TTarget, Xaml.Controls.InfoBarTemplateSettings>.Get(target, Xaml.Controls.InfoBar.TemplateSettingsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBar.Title"/></summary>
        public static DependencyProperty<TTarget, string> Title<TTarget>(this TTarget target) where TTarget : InfoBar
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.InfoBar.TitleProperty);
    }
}

namespace CSharpMarkup.WinUI // InfoBarTemplateSettings
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.InfoBarTemplateSettings"/></summary>
        public static InfoBarTemplateSettings InfoBarTemplateSettings(Xaml.Controls.IconElement IconElement = default)
        {
            var ui = new Xaml.Controls.InfoBarTemplateSettings();
            if (IconElement is not null) ui.IconElement = IconElement;
            return CSharpMarkup.WinUI.InfoBarTemplateSettings.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.InfoBarTemplateSettings"/></summary>
        public static InfoBarTemplateSettings InfoBarTemplateSettings()
        {
            var ui = new Xaml.Controls.InfoBarTemplateSettings();
            return CSharpMarkup.WinUI.InfoBarTemplateSettings.StartChain(ui);
        }
    }

    public partial class InfoBarTemplateSettings : DependencyObject, IUI<Xaml.Controls.InfoBarTemplateSettings>
    {
        static InfoBarTemplateSettings instance;

        internal static InfoBarTemplateSettings StartChain(Xaml.Controls.InfoBarTemplateSettings ui)
        {
            if (instance == null) instance = new InfoBarTemplateSettings();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.InfoBarTemplateSettings ui;

        public new Xaml.Controls.InfoBarTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.InfoBarTemplateSettings(InfoBarTemplateSettings view) => view?.UI;

        public static implicit operator InfoBarTemplateSettings(Xaml.Controls.InfoBarTemplateSettings ui) => InfoBarTemplateSettings.StartChain(ui);

        public InfoBarTemplateSettings Invoke(Action<Xaml.Controls.InfoBarTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected InfoBarTemplateSettings() { }
    }

    public static partial class InfoBarTemplateSettingsExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.InfoBarTemplateSettings.IconElement"/></summary>
        public static TView IconElement<TView>(this TView view, Xaml.Controls.IconElement value) where TView : InfoBarTemplateSettings { view.UI.IconElement = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.InfoBarTemplateSettings.IconElement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconElement> IconElement<TTarget>(this TTarget target) where TTarget : InfoBarTemplateSettings
        => DependencyProperty<TTarget, Xaml.Controls.IconElement>.Get(target, Xaml.Controls.InfoBarTemplateSettings.IconElementProperty);
    }
}

namespace CSharpMarkup.WinUI // ItemContainer
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ItemContainer"/></summary>
        public static ItemContainer ItemContainer(Xaml.UIElement Child)
        {
            var ui = new Xaml.Controls.ItemContainer();
            if (Child is not null) ui.Child = Child;
            return CSharpMarkup.WinUI.ItemContainer.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ItemContainer"/></summary>
        public static ItemContainer ItemContainer(bool? IsSelected = default, Xaml.UIElement Child = default)
        {
            var ui = new Xaml.Controls.ItemContainer();
            if (IsSelected is not null) ui.IsSelected = IsSelected.Value;
            if (Child is not null) ui.Child = Child;
            return CSharpMarkup.WinUI.ItemContainer.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ItemContainer"/></summary>
        public static ItemContainer ItemContainer()
        {
            var ui = new Xaml.Controls.ItemContainer();
            return CSharpMarkup.WinUI.ItemContainer.StartChain(ui);
        }
    }

    public partial class ItemContainer : Control, IUI<Xaml.Controls.ItemContainer>
    {
        static ItemContainer instance;

        internal static ItemContainer StartChain(Xaml.Controls.ItemContainer ui)
        {
            if (instance == null) instance = new ItemContainer();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ItemContainer ui;

        public new Xaml.Controls.ItemContainer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ItemContainer view) => view?.UI;

        public static implicit operator Xaml.Controls.ItemContainer(ItemContainer view) => view?.UI;

        public static implicit operator ItemContainer(Xaml.Controls.ItemContainer ui) => ItemContainer.StartChain(ui);

        public ItemContainer Invoke(Action<Xaml.Controls.ItemContainer> action) { action?.Invoke(UI); return this; }

        protected ItemContainer() { }
    }

    public static partial class ItemContainerExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ItemContainer.IsSelected"/></summary>
        public static TView IsSelected<TView>(this TView view, bool value) where TView : ItemContainer { view.UI.IsSelected = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemContainer.Child"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Child<TTarget>(this TTarget target) where TTarget : ItemContainer
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.ItemContainer.ChildProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemContainer.IsSelected"/></summary>
        public static DependencyProperty<TTarget, bool> IsSelected<TTarget>(this TTarget target) where TTarget : ItemContainer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ItemContainer.IsSelectedProperty);
    }
}

namespace CSharpMarkup.WinUI // ItemsControl
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ItemsControl"/></summary>
        /// <remarks>Remark: ItemsControl().Bind() binds to <see cref="Xaml.Controls.ItemsControl.ItemsSourceProperty"/></remarks>
        public static ItemsControl ItemsControl(params UIObject[] Items)
        {
            var ui = new Xaml.Controls.ItemsControl();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<UIObject>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j].UI);
                else
                    ui.Items.Add(child.UI);
            }
            return CSharpMarkup.WinUI.ItemsControl.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ItemsControl"/></summary>
        /// <remarks>Remark: ItemsControl().Bind() binds to <see cref="Xaml.Controls.ItemsControl.ItemsSourceProperty"/></remarks>
        public static ItemsControl ItemsControl()
        {
            var ui = new Xaml.Controls.ItemsControl();
            return CSharpMarkup.WinUI.ItemsControl.StartChain(ui);
        }
    }

    public partial class ItemsControl : Control, IUI<Xaml.Controls.ItemsControl>, IDefaultBindProperty
    {
        static ItemsControl instance;

        internal static ItemsControl StartChain(Xaml.Controls.ItemsControl ui)
        {
            if (instance == null) instance = new ItemsControl();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ItemsControl ui;

        public new Xaml.Controls.ItemsControl UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.ItemsControl.ItemsSourceProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.ItemsControl.ItemsSourceProperty;

        public static implicit operator Xaml.UIElement(ItemsControl view) => view?.UI;

        public static implicit operator Xaml.Controls.ItemsControl(ItemsControl view) => view?.UI;

        public static implicit operator ItemsControl(Xaml.Controls.ItemsControl ui) => ItemsControl.StartChain(ui);

        public ItemsControl Invoke(Action<Xaml.Controls.ItemsControl> action) { action?.Invoke(UI); return this; }

        protected ItemsControl() { }
    }

    public static partial class ItemsControlExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ItemsControl.DisplayMemberPath"/></summary>
        public static TView DisplayMemberPath<TView>(this TView view, string value) where TView : ItemsControl { view.UI.DisplayMemberPath = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsControl.GroupStyleSelector"/></summary>
        public static TView GroupStyleSelector<TView>(this TView view, Xaml.Controls.GroupStyleSelector value) where TView : ItemsControl { view.UI.GroupStyleSelector = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsControl.ItemContainerStyle"/></summary>
        public static TView ItemContainerStyle<TView>(this TView view, Xaml.Style value) where TView : ItemsControl { view.UI.ItemContainerStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsControl.ItemContainerStyleSelector"/></summary>
        public static TView ItemContainerStyleSelector<TView>(this TView view, Xaml.Controls.StyleSelector value) where TView : ItemsControl { view.UI.ItemContainerStyleSelector = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsControl.ItemContainerTransitions"/></summary>
        public static TView ItemContainerTransitions<TView>(this TView view, Xaml.Media.Animation.TransitionCollection value) where TView : ItemsControl { view.UI.ItemContainerTransitions = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsControl.ItemsPanel"/></summary>
        public static TView ItemsPanel<TView>(this TView view, Xaml.Controls.ItemsPanelTemplate value) where TView : ItemsControl { view.UI.ItemsPanel = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsControl.ItemsSource"/></summary>
        public static TView ItemsSource<TView>(this TView view, object value) where TView : ItemsControl { view.UI.ItemsSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsControl.ItemTemplate"/></summary>
        public static TView ItemTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : ItemsControl { view.UI.ItemTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsControl.ItemTemplateSelector"/></summary>
        public static TView ItemTemplateSelector<TView>(this TView view, Xaml.Controls.DataTemplateSelector value) where TView : ItemsControl { view.UI.ItemTemplateSelector = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsControl.DisplayMemberPath"/></summary>
        public static DependencyProperty<TTarget, string> DisplayMemberPath<TTarget>(this TTarget target) where TTarget : ItemsControl
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.ItemsControl.DisplayMemberPathProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsControl.GroupStyleSelector"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.GroupStyleSelector> GroupStyleSelector<TTarget>(this TTarget target) where TTarget : ItemsControl
        => DependencyProperty<TTarget, Xaml.Controls.GroupStyleSelector>.Get(target, Xaml.Controls.ItemsControl.GroupStyleSelectorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsControl.IsGrouping"/></summary>
        public static DependencyProperty<TTarget, bool> IsGrouping<TTarget>(this TTarget target) where TTarget : ItemsControl
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ItemsControl.IsGroupingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsControl.ItemContainerStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> ItemContainerStyle<TTarget>(this TTarget target) where TTarget : ItemsControl
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.ItemsControl.ItemContainerStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsControl.ItemContainerStyleSelector"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.StyleSelector> ItemContainerStyleSelector<TTarget>(this TTarget target) where TTarget : ItemsControl
        => DependencyProperty<TTarget, Xaml.Controls.StyleSelector>.Get(target, Xaml.Controls.ItemsControl.ItemContainerStyleSelectorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsControl.ItemContainerTransitions"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection> ItemContainerTransitions<TTarget>(this TTarget target) where TTarget : ItemsControl
        => DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection>.Get(target, Xaml.Controls.ItemsControl.ItemContainerTransitionsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsControl.ItemsPanel"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ItemsPanelTemplate> ItemsPanel<TTarget>(this TTarget target) where TTarget : ItemsControl
        => DependencyProperty<TTarget, Xaml.Controls.ItemsPanelTemplate>.Get(target, Xaml.Controls.ItemsControl.ItemsPanelProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsControl.ItemsSource"/></summary>
        public static DependencyProperty<TTarget, object> ItemsSource<TTarget>(this TTarget target) where TTarget : ItemsControl
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ItemsControl.ItemsSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsControl.ItemTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> ItemTemplate<TTarget>(this TTarget target) where TTarget : ItemsControl
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.ItemsControl.ItemTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsControl.ItemTemplateSelector"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.DataTemplateSelector> ItemTemplateSelector<TTarget>(this TTarget target) where TTarget : ItemsControl
        => DependencyProperty<TTarget, Xaml.Controls.DataTemplateSelector>.Get(target, Xaml.Controls.ItemsControl.ItemTemplateSelectorProperty);
    }
}

namespace CSharpMarkup.WinUI // ItemsPanelTemplate
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ItemsPanelTemplate"/></summary>
        public static ItemsPanelTemplate ItemsPanelTemplate()
        {
            var ui = new Xaml.Controls.ItemsPanelTemplate();
            return CSharpMarkup.WinUI.ItemsPanelTemplate.StartChain(ui);
        }
    }

    public partial class ItemsPanelTemplate : FrameworkTemplate, IUI<Xaml.Controls.ItemsPanelTemplate>
    {
        static ItemsPanelTemplate instance;

        internal static ItemsPanelTemplate StartChain(Xaml.Controls.ItemsPanelTemplate ui)
        {
            if (instance == null) instance = new ItemsPanelTemplate();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ItemsPanelTemplate ui;

        public new Xaml.Controls.ItemsPanelTemplate UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.ItemsPanelTemplate(ItemsPanelTemplate view) => view?.UI;

        public static implicit operator ItemsPanelTemplate(Xaml.Controls.ItemsPanelTemplate ui) => ItemsPanelTemplate.StartChain(ui);

        public ItemsPanelTemplate Invoke(Action<Xaml.Controls.ItemsPanelTemplate> action) { action?.Invoke(UI); return this; }

        protected ItemsPanelTemplate() { }
    }
}

namespace CSharpMarkup.WinUI // ItemsPickedEventArgs
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ItemsPickedEventArgs"/></summary>
        public static ItemsPickedEventArgs ItemsPickedEventArgs()
        {
            var ui = new Xaml.Controls.ItemsPickedEventArgs();
            return CSharpMarkup.WinUI.ItemsPickedEventArgs.StartChain(ui);
        }
    }

    public partial class ItemsPickedEventArgs : DependencyObject, IUI<Xaml.Controls.ItemsPickedEventArgs>
    {
        static ItemsPickedEventArgs instance;

        internal static ItemsPickedEventArgs StartChain(Xaml.Controls.ItemsPickedEventArgs ui)
        {
            if (instance == null) instance = new ItemsPickedEventArgs();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ItemsPickedEventArgs ui;

        public new Xaml.Controls.ItemsPickedEventArgs UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.ItemsPickedEventArgs(ItemsPickedEventArgs view) => view?.UI;

        public static implicit operator ItemsPickedEventArgs(Xaml.Controls.ItemsPickedEventArgs ui) => ItemsPickedEventArgs.StartChain(ui);

        public ItemsPickedEventArgs Invoke(Action<Xaml.Controls.ItemsPickedEventArgs> action) { action?.Invoke(UI); return this; }

        protected ItemsPickedEventArgs() { }
    }
}

namespace CSharpMarkup.WinUI // ItemsPresenter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ItemsPresenter"/></summary>
        public static ItemsPresenter ItemsPresenter(object Footer = default, Xaml.DataTemplate FooterTemplate = default, Xaml.Media.Animation.TransitionCollection FooterTransitions = default, object Header = default, Xaml.DataTemplate HeaderTemplate = default, Xaml.Media.Animation.TransitionCollection HeaderTransitions = default, Xaml.Thickness? Padding = default)
        {
            var ui = new Xaml.Controls.ItemsPresenter();
            if (Footer is not null) ui.Footer = Footer;
            if (FooterTemplate is not null) ui.FooterTemplate = FooterTemplate;
            if (FooterTransitions is not null) ui.FooterTransitions = FooterTransitions;
            if (Header is not null) ui.Header = Header;
            if (HeaderTemplate is not null) ui.HeaderTemplate = HeaderTemplate;
            if (HeaderTransitions is not null) ui.HeaderTransitions = HeaderTransitions;
            if (Padding is not null) ui.Padding = Padding.Value;
            return CSharpMarkup.WinUI.ItemsPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ItemsPresenter"/></summary>
        public static ItemsPresenter ItemsPresenter()
        {
            var ui = new Xaml.Controls.ItemsPresenter();
            return CSharpMarkup.WinUI.ItemsPresenter.StartChain(ui);
        }
    }

    public partial class ItemsPresenter : FrameworkElement, IUI<Xaml.Controls.ItemsPresenter>
    {
        static ItemsPresenter instance;

        internal static ItemsPresenter StartChain(Xaml.Controls.ItemsPresenter ui)
        {
            if (instance == null) instance = new ItemsPresenter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ItemsPresenter ui;

        public new Xaml.Controls.ItemsPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ItemsPresenter view) => view?.UI;

        public static implicit operator Xaml.Controls.ItemsPresenter(ItemsPresenter view) => view?.UI;

        public static implicit operator ItemsPresenter(Xaml.Controls.ItemsPresenter ui) => ItemsPresenter.StartChain(ui);

        public ItemsPresenter Invoke(Action<Xaml.Controls.ItemsPresenter> action) { action?.Invoke(UI); return this; }

        protected ItemsPresenter() { }
    }

    public static partial class ItemsPresenterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ItemsPresenter.Footer"/></summary>
        public static TView Footer<TView>(this TView view, object value) where TView : ItemsPresenter { view.UI.Footer = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsPresenter.FooterTemplate"/></summary>
        public static TView FooterTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : ItemsPresenter { view.UI.FooterTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsPresenter.FooterTransitions"/></summary>
        public static TView FooterTransitions<TView>(this TView view, Xaml.Media.Animation.TransitionCollection value) where TView : ItemsPresenter { view.UI.FooterTransitions = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsPresenter.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : ItemsPresenter { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsPresenter.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : ItemsPresenter { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsPresenter.HeaderTransitions"/></summary>
        public static TView HeaderTransitions<TView>(this TView view, Xaml.Media.Animation.TransitionCollection value) where TView : ItemsPresenter { view.UI.HeaderTransitions = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsPresenter.Padding"/></summary>
        public static TView Padding<TView>(this TView view, Xaml.Thickness value) where TView : ItemsPresenter { view.UI.Padding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsPresenter.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double uniform) where TView : ItemsPresenter { view.UI.Padding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsPresenter.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double horizontal, double vertical) where TView : ItemsPresenter { view.UI.Padding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsPresenter.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double left, double top, double right, double bottom) where TView : ItemsPresenter { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsPresenter.Padding"/></summary>
        public static TView Paddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : ItemsPresenter { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsPresenter.Footer"/></summary>
        public static DependencyProperty<TTarget, object> Footer<TTarget>(this TTarget target) where TTarget : ItemsPresenter
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ItemsPresenter.FooterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsPresenter.FooterTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> FooterTemplate<TTarget>(this TTarget target) where TTarget : ItemsPresenter
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.ItemsPresenter.FooterTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsPresenter.FooterTransitions"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection> FooterTransitions<TTarget>(this TTarget target) where TTarget : ItemsPresenter
        => DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection>.Get(target, Xaml.Controls.ItemsPresenter.FooterTransitionsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsPresenter.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : ItemsPresenter
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ItemsPresenter.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsPresenter.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : ItemsPresenter
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.ItemsPresenter.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsPresenter.HeaderTransitions"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection> HeaderTransitions<TTarget>(this TTarget target) where TTarget : ItemsPresenter
        => DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection>.Get(target, Xaml.Controls.ItemsPresenter.HeaderTransitionsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsPresenter.Padding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> Padding<TTarget>(this TTarget target) where TTarget : ItemsPresenter
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.ItemsPresenter.PaddingProperty);
    }
}

namespace CSharpMarkup.WinUI // ItemsRepeater
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ItemsRepeater"/></summary>
        public static ItemsRepeater ItemsRepeater(Xaml.Media.Brush Background = default, double? HorizontalCacheLength = default, object ItemsSource = default, Xaml.IElementFactory ItemTemplate = default, Xaml.Controls.ItemCollectionTransitionProvider ItemTransitionProvider = default, Xaml.Controls.Layout Layout = default, double? VerticalCacheLength = default)
        {
            var ui = new Xaml.Controls.ItemsRepeater();
            if (Background is not null) ui.Background = Background;
            if (HorizontalCacheLength is not null) ui.HorizontalCacheLength = HorizontalCacheLength.Value;
            if (ItemsSource is not null) ui.ItemsSource = ItemsSource;
            if (ItemTemplate is not null) ui.ItemTemplate = ItemTemplate;
            if (ItemTransitionProvider is not null) ui.ItemTransitionProvider = ItemTransitionProvider;
            if (Layout is not null) ui.Layout = Layout;
            if (VerticalCacheLength is not null) ui.VerticalCacheLength = VerticalCacheLength.Value;
            return CSharpMarkup.WinUI.ItemsRepeater.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ItemsRepeater"/></summary>
        public static ItemsRepeater ItemsRepeater()
        {
            var ui = new Xaml.Controls.ItemsRepeater();
            return CSharpMarkup.WinUI.ItemsRepeater.StartChain(ui);
        }
    }

    public partial class ItemsRepeater : FrameworkElement, IUI<Xaml.Controls.ItemsRepeater>
    {
        static ItemsRepeater instance;

        internal static ItemsRepeater StartChain(Xaml.Controls.ItemsRepeater ui)
        {
            if (instance == null) instance = new ItemsRepeater();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ItemsRepeater ui;

        public new Xaml.Controls.ItemsRepeater UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ItemsRepeater view) => view?.UI;

        public static implicit operator Xaml.Controls.ItemsRepeater(ItemsRepeater view) => view?.UI;

        public static implicit operator ItemsRepeater(Xaml.Controls.ItemsRepeater ui) => ItemsRepeater.StartChain(ui);

        public ItemsRepeater Invoke(Action<Xaml.Controls.ItemsRepeater> action) { action?.Invoke(UI); return this; }

        protected ItemsRepeater() { }
    }

    public static partial class ItemsRepeaterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ItemsRepeater.Background"/></summary>
        public static TView Background<TView>(this TView view, Xaml.Media.Brush value) where TView : ItemsRepeater { view.UI.Background = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsRepeater.Background"/></summary>
        public static TView Background<TView>(this TView view, Windows.UI.Color value) where TView : ItemsRepeater { view.UI.Background = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsRepeater.Background"/></summary>
        public static TView Background<TView>(this TView view, string color) where TView : ItemsRepeater { view.UI.Background = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsRepeater.HorizontalCacheLength"/></summary>
        public static TView HorizontalCacheLength<TView>(this TView view, double value) where TView : ItemsRepeater { view.UI.HorizontalCacheLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsRepeater.ItemsSource"/></summary>
        public static TView ItemsSource<TView>(this TView view, object value) where TView : ItemsRepeater { view.UI.ItemsSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsRepeater.ItemTemplate"/></summary>
        public static TView ItemTemplate<TView>(this TView view, Xaml.IElementFactory value) where TView : ItemsRepeater { view.UI.ItemTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsRepeater.ItemTransitionProvider"/></summary>
        public static TView ItemTransitionProvider<TView>(this TView view, Xaml.Controls.ItemCollectionTransitionProvider value) where TView : ItemsRepeater { view.UI.ItemTransitionProvider = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsRepeater.Layout"/></summary>
        public static TView Layout<TView>(this TView view, Xaml.Controls.Layout value) where TView : ItemsRepeater { view.UI.Layout = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsRepeater.VerticalCacheLength"/></summary>
        public static TView VerticalCacheLength<TView>(this TView view, double value) where TView : ItemsRepeater { view.UI.VerticalCacheLength = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsRepeater.Background"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Background<TTarget>(this TTarget target) where TTarget : ItemsRepeater
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.ItemsRepeater.BackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsRepeater.HorizontalCacheLength"/></summary>
        public static DependencyProperty<TTarget, double> HorizontalCacheLength<TTarget>(this TTarget target) where TTarget : ItemsRepeater
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ItemsRepeater.HorizontalCacheLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsRepeater.ItemsSource"/></summary>
        public static DependencyProperty<TTarget, object> ItemsSource<TTarget>(this TTarget target) where TTarget : ItemsRepeater
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ItemsRepeater.ItemsSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsRepeater.ItemTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.IElementFactory> ItemTemplate<TTarget>(this TTarget target) where TTarget : ItemsRepeater
        => DependencyProperty<TTarget, Xaml.IElementFactory>.Get(target, Xaml.Controls.ItemsRepeater.ItemTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsRepeater.ItemTransitionProvider"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ItemCollectionTransitionProvider> ItemTransitionProvider<TTarget>(this TTarget target) where TTarget : ItemsRepeater
        => DependencyProperty<TTarget, Xaml.Controls.ItemCollectionTransitionProvider>.Get(target, Xaml.Controls.ItemsRepeater.ItemTransitionProviderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsRepeater.Layout"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Layout> Layout<TTarget>(this TTarget target) where TTarget : ItemsRepeater
        => DependencyProperty<TTarget, Xaml.Controls.Layout>.Get(target, Xaml.Controls.ItemsRepeater.LayoutProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsRepeater.VerticalCacheLength"/></summary>
        public static DependencyProperty<TTarget, double> VerticalCacheLength<TTarget>(this TTarget target) where TTarget : ItemsRepeater
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ItemsRepeater.VerticalCacheLengthProperty);
    }
}

namespace CSharpMarkup.WinUI // ItemsRepeaterScrollHost
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ItemsRepeaterScrollHost"/></summary>
        public static ItemsRepeaterScrollHost ItemsRepeaterScrollHost(Xaml.Controls.ScrollViewer ScrollViewer)
        {
            var ui = new Xaml.Controls.ItemsRepeaterScrollHost();
            if (ScrollViewer is not null) ui.ScrollViewer = ScrollViewer;
            return CSharpMarkup.WinUI.ItemsRepeaterScrollHost.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ItemsRepeaterScrollHost"/></summary>
        public static ItemsRepeaterScrollHost ItemsRepeaterScrollHost(double? HorizontalAnchorRatio = default, double? VerticalAnchorRatio = default, Xaml.Controls.ScrollViewer ScrollViewer = default)
        {
            var ui = new Xaml.Controls.ItemsRepeaterScrollHost();
            if (HorizontalAnchorRatio is not null) ui.HorizontalAnchorRatio = HorizontalAnchorRatio.Value;
            if (VerticalAnchorRatio is not null) ui.VerticalAnchorRatio = VerticalAnchorRatio.Value;
            if (ScrollViewer is not null) ui.ScrollViewer = ScrollViewer;
            return CSharpMarkup.WinUI.ItemsRepeaterScrollHost.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ItemsRepeaterScrollHost"/></summary>
        public static ItemsRepeaterScrollHost ItemsRepeaterScrollHost()
        {
            var ui = new Xaml.Controls.ItemsRepeaterScrollHost();
            return CSharpMarkup.WinUI.ItemsRepeaterScrollHost.StartChain(ui);
        }
    }

    public partial class ItemsRepeaterScrollHost : FrameworkElement, IUI<Xaml.Controls.ItemsRepeaterScrollHost>
    {
        static ItemsRepeaterScrollHost instance;

        internal static ItemsRepeaterScrollHost StartChain(Xaml.Controls.ItemsRepeaterScrollHost ui)
        {
            if (instance == null) instance = new ItemsRepeaterScrollHost();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ItemsRepeaterScrollHost ui;

        public new Xaml.Controls.ItemsRepeaterScrollHost UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ItemsRepeaterScrollHost view) => view?.UI;

        public static implicit operator Xaml.Controls.ItemsRepeaterScrollHost(ItemsRepeaterScrollHost view) => view?.UI;

        public static implicit operator ItemsRepeaterScrollHost(Xaml.Controls.ItemsRepeaterScrollHost ui) => ItemsRepeaterScrollHost.StartChain(ui);

        public ItemsRepeaterScrollHost Invoke(Action<Xaml.Controls.ItemsRepeaterScrollHost> action) { action?.Invoke(UI); return this; }

        protected ItemsRepeaterScrollHost() { }
    }

    public static partial class ItemsRepeaterScrollHostExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ItemsRepeaterScrollHost.HorizontalAnchorRatio"/></summary>
        public static TView HorizontalAnchorRatio<TView>(this TView view, double value) where TView : ItemsRepeaterScrollHost { view.UI.HorizontalAnchorRatio = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsRepeaterScrollHost.VerticalAnchorRatio"/></summary>
        public static TView VerticalAnchorRatio<TView>(this TView view, double value) where TView : ItemsRepeaterScrollHost { view.UI.VerticalAnchorRatio = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // ItemsStackPanel
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ItemsStackPanel"/></summary>
        public static ItemsStackPanel ItemsStackPanel(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.ItemsStackPanel();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.ItemsStackPanel.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ItemsStackPanel"/></summary>
        public static ItemsStackPanel ItemsStackPanel()
        {
            var ui = new Xaml.Controls.ItemsStackPanel();
            return CSharpMarkup.WinUI.ItemsStackPanel.StartChain(ui);
        }
    }

    public partial class ItemsStackPanel : Panel, IUI<Xaml.Controls.ItemsStackPanel>
    {
        static ItemsStackPanel instance;

        internal static ItemsStackPanel StartChain(Xaml.Controls.ItemsStackPanel ui)
        {
            if (instance == null) instance = new ItemsStackPanel();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ItemsStackPanel ui;

        public new Xaml.Controls.ItemsStackPanel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ItemsStackPanel view) => view?.UI;

        public static implicit operator Xaml.Controls.ItemsStackPanel(ItemsStackPanel view) => view?.UI;

        public static implicit operator ItemsStackPanel(Xaml.Controls.ItemsStackPanel ui) => ItemsStackPanel.StartChain(ui);

        public ItemsStackPanel Invoke(Action<Xaml.Controls.ItemsStackPanel> action) { action?.Invoke(UI); return this; }

        protected ItemsStackPanel() { }
    }

    public static partial class ItemsStackPanelExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ItemsStackPanel.AreStickyGroupHeadersEnabled"/></summary>
        public static TView AreStickyGroupHeadersEnabled<TView>(this TView view, bool value) where TView : ItemsStackPanel { view.UI.AreStickyGroupHeadersEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsStackPanel.CacheLength"/></summary>
        public static TView CacheLength<TView>(this TView view, double value) where TView : ItemsStackPanel { view.UI.CacheLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsStackPanel.GroupHeaderPlacement"/></summary>
        public static TView GroupHeaderPlacement<TView>(this TView view, Xaml.Controls.Primitives.GroupHeaderPlacement value) where TView : ItemsStackPanel { view.UI.GroupHeaderPlacement = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsStackPanel.GroupPadding"/></summary>
        public static TView GroupPadding<TView>(this TView view, Xaml.Thickness value) where TView : ItemsStackPanel { view.UI.GroupPadding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsStackPanel.GroupPadding"/></summary>
        public static TView GroupPadding<TView>(this TView view, double uniform) where TView : ItemsStackPanel { view.UI.GroupPadding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsStackPanel.GroupPadding"/></summary>
        public static TView GroupPadding<TView>(this TView view, double horizontal, double vertical) where TView : ItemsStackPanel { view.UI.GroupPadding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsStackPanel.GroupPadding"/></summary>
        public static TView GroupPadding<TView>(this TView view, double left, double top, double right, double bottom) where TView : ItemsStackPanel { view.UI.GroupPadding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsStackPanel.GroupPadding"/></summary>
        public static TView GroupPaddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : ItemsStackPanel { view.UI.GroupPadding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsStackPanel.ItemsUpdatingScrollMode"/></summary>
        public static TView ItemsUpdatingScrollMode<TView>(this TView view, Xaml.Controls.ItemsUpdatingScrollMode value) where TView : ItemsStackPanel { view.UI.ItemsUpdatingScrollMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsStackPanel.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.Orientation value) where TView : ItemsStackPanel { view.UI.Orientation = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsStackPanel.AreStickyGroupHeadersEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> AreStickyGroupHeadersEnabled<TTarget>(this TTarget target) where TTarget : ItemsStackPanel
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ItemsStackPanel.AreStickyGroupHeadersEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsStackPanel.CacheLength"/></summary>
        public static DependencyProperty<TTarget, double> CacheLength<TTarget>(this TTarget target) where TTarget : ItemsStackPanel
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ItemsStackPanel.CacheLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsStackPanel.GroupHeaderPlacement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.GroupHeaderPlacement> GroupHeaderPlacement<TTarget>(this TTarget target) where TTarget : ItemsStackPanel
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.GroupHeaderPlacement>.Get(target, Xaml.Controls.ItemsStackPanel.GroupHeaderPlacementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsStackPanel.GroupPadding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> GroupPadding<TTarget>(this TTarget target) where TTarget : ItemsStackPanel
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.ItemsStackPanel.GroupPaddingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsStackPanel.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Orientation> Orientation<TTarget>(this TTarget target) where TTarget : ItemsStackPanel
        => DependencyProperty<TTarget, Xaml.Controls.Orientation>.Get(target, Xaml.Controls.ItemsStackPanel.OrientationProperty);
    }
}

namespace CSharpMarkup.WinUI // ItemsView
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ItemsView"/></summary>
        public static ItemsView ItemsView(bool? IsItemInvokedEnabled = default, object ItemsSource = default, Xaml.IElementFactory ItemTemplate = default, Xaml.Controls.ItemCollectionTransitionProvider ItemTransitionProvider = default, Xaml.Controls.Layout Layout = default, Xaml.Controls.ItemsViewSelectionMode? SelectionMode = default, Xaml.Controls.Primitives.IScrollController VerticalScrollController = default)
        {
            var ui = new Xaml.Controls.ItemsView();
            if (IsItemInvokedEnabled is not null) ui.IsItemInvokedEnabled = IsItemInvokedEnabled.Value;
            if (ItemsSource is not null) ui.ItemsSource = ItemsSource;
            if (ItemTemplate is not null) ui.ItemTemplate = ItemTemplate;
            if (ItemTransitionProvider is not null) ui.ItemTransitionProvider = ItemTransitionProvider;
            if (Layout is not null) ui.Layout = Layout;
            if (SelectionMode is not null) ui.SelectionMode = SelectionMode.Value;
            if (VerticalScrollController is not null) ui.VerticalScrollController = VerticalScrollController;
            return CSharpMarkup.WinUI.ItemsView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ItemsView"/></summary>
        public static ItemsView ItemsView()
        {
            var ui = new Xaml.Controls.ItemsView();
            return CSharpMarkup.WinUI.ItemsView.StartChain(ui);
        }
    }

    public partial class ItemsView : Control, IUI<Xaml.Controls.ItemsView>
    {
        static ItemsView instance;

        internal static ItemsView StartChain(Xaml.Controls.ItemsView ui)
        {
            if (instance == null) instance = new ItemsView();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ItemsView ui;

        public new Xaml.Controls.ItemsView UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ItemsView view) => view?.UI;

        public static implicit operator Xaml.Controls.ItemsView(ItemsView view) => view?.UI;

        public static implicit operator ItemsView(Xaml.Controls.ItemsView ui) => ItemsView.StartChain(ui);

        public ItemsView Invoke(Action<Xaml.Controls.ItemsView> action) { action?.Invoke(UI); return this; }

        protected ItemsView() { }
    }

    public static partial class ItemsViewExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ItemsView.IsItemInvokedEnabled"/></summary>
        public static TView IsItemInvokedEnabled<TView>(this TView view, bool value) where TView : ItemsView { view.UI.IsItemInvokedEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsView.ItemsSource"/></summary>
        public static TView ItemsSource<TView>(this TView view, object value) where TView : ItemsView { view.UI.ItemsSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsView.ItemTemplate"/></summary>
        public static TView ItemTemplate<TView>(this TView view, Xaml.IElementFactory value) where TView : ItemsView { view.UI.ItemTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsView.ItemTransitionProvider"/></summary>
        public static TView ItemTransitionProvider<TView>(this TView view, Xaml.Controls.ItemCollectionTransitionProvider value) where TView : ItemsView { view.UI.ItemTransitionProvider = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsView.Layout"/></summary>
        public static TView Layout<TView>(this TView view, Xaml.Controls.Layout value) where TView : ItemsView { view.UI.Layout = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsView.SelectionMode"/></summary>
        public static TView SelectionMode<TView>(this TView view, Xaml.Controls.ItemsViewSelectionMode value) where TView : ItemsView { view.UI.SelectionMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsView.VerticalScrollController"/></summary>
        public static TView VerticalScrollController<TView>(this TView view, Xaml.Controls.Primitives.IScrollController value) where TView : ItemsView { view.UI.VerticalScrollController = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsView.CurrentItemIndex"/></summary>
        public static DependencyProperty<TTarget, int> CurrentItemIndex<TTarget>(this TTarget target) where TTarget : ItemsView
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.ItemsView.CurrentItemIndexProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsView.IsItemInvokedEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsItemInvokedEnabled<TTarget>(this TTarget target) where TTarget : ItemsView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ItemsView.IsItemInvokedEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsView.ItemsSource"/></summary>
        public static DependencyProperty<TTarget, object> ItemsSource<TTarget>(this TTarget target) where TTarget : ItemsView
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ItemsView.ItemsSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsView.ItemTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.IElementFactory> ItemTemplate<TTarget>(this TTarget target) where TTarget : ItemsView
        => DependencyProperty<TTarget, Xaml.IElementFactory>.Get(target, Xaml.Controls.ItemsView.ItemTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsView.ItemTransitionProvider"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ItemCollectionTransitionProvider> ItemTransitionProvider<TTarget>(this TTarget target) where TTarget : ItemsView
        => DependencyProperty<TTarget, Xaml.Controls.ItemCollectionTransitionProvider>.Get(target, Xaml.Controls.ItemsView.ItemTransitionProviderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsView.Layout"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Layout> Layout<TTarget>(this TTarget target) where TTarget : ItemsView
        => DependencyProperty<TTarget, Xaml.Controls.Layout>.Get(target, Xaml.Controls.ItemsView.LayoutProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsView.ScrollView"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollView> ScrollView<TTarget>(this TTarget target) where TTarget : ItemsView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollView>.Get(target, Xaml.Controls.ItemsView.ScrollViewProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsView.SelectedItem"/></summary>
        public static DependencyProperty<TTarget, object> SelectedItem<TTarget>(this TTarget target) where TTarget : ItemsView
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ItemsView.SelectedItemProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsView.SelectionMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ItemsViewSelectionMode> SelectionMode<TTarget>(this TTarget target) where TTarget : ItemsView
        => DependencyProperty<TTarget, Xaml.Controls.ItemsViewSelectionMode>.Get(target, Xaml.Controls.ItemsView.SelectionModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsView.VerticalScrollController"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.IScrollController> VerticalScrollController<TTarget>(this TTarget target) where TTarget : ItemsView
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.IScrollController>.Get(target, Xaml.Controls.ItemsView.VerticalScrollControllerProperty);
    }
}

namespace CSharpMarkup.WinUI // ItemsWrapGrid
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ItemsWrapGrid"/></summary>
        public static ItemsWrapGrid ItemsWrapGrid(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.ItemsWrapGrid();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.ItemsWrapGrid.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ItemsWrapGrid"/></summary>
        public static ItemsWrapGrid ItemsWrapGrid()
        {
            var ui = new Xaml.Controls.ItemsWrapGrid();
            return CSharpMarkup.WinUI.ItemsWrapGrid.StartChain(ui);
        }
    }

    public partial class ItemsWrapGrid : Panel, IUI<Xaml.Controls.ItemsWrapGrid>
    {
        static ItemsWrapGrid instance;

        internal static ItemsWrapGrid StartChain(Xaml.Controls.ItemsWrapGrid ui)
        {
            if (instance == null) instance = new ItemsWrapGrid();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ItemsWrapGrid ui;

        public new Xaml.Controls.ItemsWrapGrid UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ItemsWrapGrid view) => view?.UI;

        public static implicit operator Xaml.Controls.ItemsWrapGrid(ItemsWrapGrid view) => view?.UI;

        public static implicit operator ItemsWrapGrid(Xaml.Controls.ItemsWrapGrid ui) => ItemsWrapGrid.StartChain(ui);

        public ItemsWrapGrid Invoke(Action<Xaml.Controls.ItemsWrapGrid> action) { action?.Invoke(UI); return this; }

        protected ItemsWrapGrid() { }
    }

    public static partial class ItemsWrapGridExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ItemsWrapGrid.AreStickyGroupHeadersEnabled"/></summary>
        public static TView AreStickyGroupHeadersEnabled<TView>(this TView view, bool value) where TView : ItemsWrapGrid { view.UI.AreStickyGroupHeadersEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsWrapGrid.CacheLength"/></summary>
        public static TView CacheLength<TView>(this TView view, double value) where TView : ItemsWrapGrid { view.UI.CacheLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsWrapGrid.GroupHeaderPlacement"/></summary>
        public static TView GroupHeaderPlacement<TView>(this TView view, Xaml.Controls.Primitives.GroupHeaderPlacement value) where TView : ItemsWrapGrid { view.UI.GroupHeaderPlacement = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsWrapGrid.GroupPadding"/></summary>
        public static TView GroupPadding<TView>(this TView view, Xaml.Thickness value) where TView : ItemsWrapGrid { view.UI.GroupPadding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsWrapGrid.GroupPadding"/></summary>
        public static TView GroupPadding<TView>(this TView view, double uniform) where TView : ItemsWrapGrid { view.UI.GroupPadding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsWrapGrid.GroupPadding"/></summary>
        public static TView GroupPadding<TView>(this TView view, double horizontal, double vertical) where TView : ItemsWrapGrid { view.UI.GroupPadding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsWrapGrid.GroupPadding"/></summary>
        public static TView GroupPadding<TView>(this TView view, double left, double top, double right, double bottom) where TView : ItemsWrapGrid { view.UI.GroupPadding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsWrapGrid.GroupPadding"/></summary>
        public static TView GroupPaddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : ItemsWrapGrid { view.UI.GroupPadding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsWrapGrid.ItemHeight"/></summary>
        public static TView ItemHeight<TView>(this TView view, double value) where TView : ItemsWrapGrid { view.UI.ItemHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsWrapGrid.ItemWidth"/></summary>
        public static TView ItemWidth<TView>(this TView view, double value) where TView : ItemsWrapGrid { view.UI.ItemWidth = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsWrapGrid.MaximumRowsOrColumns"/></summary>
        public static TView MaximumRowsOrColumns<TView>(this TView view, int value) where TView : ItemsWrapGrid { view.UI.MaximumRowsOrColumns = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ItemsWrapGrid.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.Orientation value) where TView : ItemsWrapGrid { view.UI.Orientation = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsWrapGrid.AreStickyGroupHeadersEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> AreStickyGroupHeadersEnabled<TTarget>(this TTarget target) where TTarget : ItemsWrapGrid
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ItemsWrapGrid.AreStickyGroupHeadersEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsWrapGrid.CacheLength"/></summary>
        public static DependencyProperty<TTarget, double> CacheLength<TTarget>(this TTarget target) where TTarget : ItemsWrapGrid
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ItemsWrapGrid.CacheLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsWrapGrid.GroupHeaderPlacement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.GroupHeaderPlacement> GroupHeaderPlacement<TTarget>(this TTarget target) where TTarget : ItemsWrapGrid
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.GroupHeaderPlacement>.Get(target, Xaml.Controls.ItemsWrapGrid.GroupHeaderPlacementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsWrapGrid.GroupPadding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> GroupPadding<TTarget>(this TTarget target) where TTarget : ItemsWrapGrid
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.ItemsWrapGrid.GroupPaddingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsWrapGrid.ItemHeight"/></summary>
        public static DependencyProperty<TTarget, double> ItemHeight<TTarget>(this TTarget target) where TTarget : ItemsWrapGrid
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ItemsWrapGrid.ItemHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsWrapGrid.ItemWidth"/></summary>
        public static DependencyProperty<TTarget, double> ItemWidth<TTarget>(this TTarget target) where TTarget : ItemsWrapGrid
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ItemsWrapGrid.ItemWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsWrapGrid.MaximumRowsOrColumns"/></summary>
        public static DependencyProperty<TTarget, int> MaximumRowsOrColumns<TTarget>(this TTarget target) where TTarget : ItemsWrapGrid
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.ItemsWrapGrid.MaximumRowsOrColumnsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ItemsWrapGrid.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Orientation> Orientation<TTarget>(this TTarget target) where TTarget : ItemsWrapGrid
        => DependencyProperty<TTarget, Xaml.Controls.Orientation>.Get(target, Xaml.Controls.ItemsWrapGrid.OrientationProperty);
    }
}

namespace CSharpMarkup.WinUI // Layout
{
    public partial class Layout : DependencyObject, IUI<Xaml.Controls.Layout>
    {
        Xaml.Controls.Layout ui;

        public new Xaml.Controls.Layout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Layout Invoke(Action<Xaml.Controls.Layout> action) { action?.Invoke(UI); return this; }

        protected Layout() { }
    }
}

namespace CSharpMarkup.WinUI // LayoutContext
{
    public partial class LayoutContext : DependencyObject, IUI<Xaml.Controls.LayoutContext>
    {
        Xaml.Controls.LayoutContext ui;

        public new Xaml.Controls.LayoutContext UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public LayoutContext Invoke(Action<Xaml.Controls.LayoutContext> action) { action?.Invoke(UI); return this; }

        protected LayoutContext() { }
    }

    public static partial class LayoutContextExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.LayoutContext.LayoutState"/></summary>
        public static TView LayoutState<TView>(this TView view, object value) where TView : LayoutContext { view.UI.LayoutState = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // LinedFlowLayout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.LinedFlowLayout"/></summary>
        public static LinedFlowLayout LinedFlowLayout(Xaml.Controls.LinedFlowLayoutItemsJustification? ItemsJustification = default, Xaml.Controls.LinedFlowLayoutItemsStretch? ItemsStretch = default, double? LineHeight = default, double? LineSpacing = default, double? MinItemSpacing = default)
        {
            var ui = new Xaml.Controls.LinedFlowLayout();
            if (ItemsJustification is not null) ui.ItemsJustification = ItemsJustification.Value;
            if (ItemsStretch is not null) ui.ItemsStretch = ItemsStretch.Value;
            if (LineHeight is not null) ui.LineHeight = LineHeight.Value;
            if (LineSpacing is not null) ui.LineSpacing = LineSpacing.Value;
            if (MinItemSpacing is not null) ui.MinItemSpacing = MinItemSpacing.Value;
            return CSharpMarkup.WinUI.LinedFlowLayout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.LinedFlowLayout"/></summary>
        public static LinedFlowLayout LinedFlowLayout()
        {
            var ui = new Xaml.Controls.LinedFlowLayout();
            return CSharpMarkup.WinUI.LinedFlowLayout.StartChain(ui);
        }
    }

    public partial class LinedFlowLayout : VirtualizingLayout, IUI<Xaml.Controls.LinedFlowLayout>
    {
        static LinedFlowLayout instance;

        internal static LinedFlowLayout StartChain(Xaml.Controls.LinedFlowLayout ui)
        {
            if (instance == null) instance = new LinedFlowLayout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.LinedFlowLayout ui;

        public new Xaml.Controls.LinedFlowLayout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.LinedFlowLayout(LinedFlowLayout view) => view?.UI;

        public static implicit operator LinedFlowLayout(Xaml.Controls.LinedFlowLayout ui) => LinedFlowLayout.StartChain(ui);

        public LinedFlowLayout Invoke(Action<Xaml.Controls.LinedFlowLayout> action) { action?.Invoke(UI); return this; }

        protected LinedFlowLayout() { }
    }

    public static partial class LinedFlowLayoutExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.LinedFlowLayout.ItemsJustification"/></summary>
        public static TView ItemsJustification<TView>(this TView view, Xaml.Controls.LinedFlowLayoutItemsJustification value) where TView : LinedFlowLayout { view.UI.ItemsJustification = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.LinedFlowLayout.ItemsStretch"/></summary>
        public static TView ItemsStretch<TView>(this TView view, Xaml.Controls.LinedFlowLayoutItemsStretch value) where TView : LinedFlowLayout { view.UI.ItemsStretch = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.LinedFlowLayout.LineHeight"/></summary>
        public static TView LineHeight<TView>(this TView view, double value) where TView : LinedFlowLayout { view.UI.LineHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.LinedFlowLayout.LineSpacing"/></summary>
        public static TView LineSpacing<TView>(this TView view, double value) where TView : LinedFlowLayout { view.UI.LineSpacing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.LinedFlowLayout.MinItemSpacing"/></summary>
        public static TView MinItemSpacing<TView>(this TView view, double value) where TView : LinedFlowLayout { view.UI.MinItemSpacing = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.LinedFlowLayout.ActualLineHeight"/></summary>
        public static DependencyProperty<TTarget, double> ActualLineHeight<TTarget>(this TTarget target) where TTarget : LinedFlowLayout
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.LinedFlowLayout.ActualLineHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.LinedFlowLayout.ItemsJustification"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.LinedFlowLayoutItemsJustification> ItemsJustification<TTarget>(this TTarget target) where TTarget : LinedFlowLayout
        => DependencyProperty<TTarget, Xaml.Controls.LinedFlowLayoutItemsJustification>.Get(target, Xaml.Controls.LinedFlowLayout.ItemsJustificationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.LinedFlowLayout.ItemsStretch"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.LinedFlowLayoutItemsStretch> ItemsStretch<TTarget>(this TTarget target) where TTarget : LinedFlowLayout
        => DependencyProperty<TTarget, Xaml.Controls.LinedFlowLayoutItemsStretch>.Get(target, Xaml.Controls.LinedFlowLayout.ItemsStretchProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.LinedFlowLayout.LineHeight"/></summary>
        public static DependencyProperty<TTarget, double> LineHeight<TTarget>(this TTarget target) where TTarget : LinedFlowLayout
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.LinedFlowLayout.LineHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.LinedFlowLayout.LineSpacing"/></summary>
        public static DependencyProperty<TTarget, double> LineSpacing<TTarget>(this TTarget target) where TTarget : LinedFlowLayout
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.LinedFlowLayout.LineSpacingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.LinedFlowLayout.MinItemSpacing"/></summary>
        public static DependencyProperty<TTarget, double> MinItemSpacing<TTarget>(this TTarget target) where TTarget : LinedFlowLayout
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.LinedFlowLayout.MinItemSpacingProperty);
    }
}

namespace CSharpMarkup.WinUI // ListBox
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ListBox"/></summary>
        public static ListBox ListBox(params UIObject[] Items)
        {
            var ui = new Xaml.Controls.ListBox();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<UIObject>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j].UI);
                else
                    ui.Items.Add(child.UI);
            }
            return CSharpMarkup.WinUI.ListBox.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ListBox"/></summary>
        public static ListBox ListBox()
        {
            var ui = new Xaml.Controls.ListBox();
            return CSharpMarkup.WinUI.ListBox.StartChain(ui);
        }
    }

    public partial class ListBox : Selector, IUI<Xaml.Controls.ListBox>
    {
        static ListBox instance;

        internal static ListBox StartChain(Xaml.Controls.ListBox ui)
        {
            if (instance == null) instance = new ListBox();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ListBox ui;

        public new Xaml.Controls.ListBox UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ListBox view) => view?.UI;

        public static implicit operator Xaml.Controls.ListBox(ListBox view) => view?.UI;

        public static implicit operator ListBox(Xaml.Controls.ListBox ui) => ListBox.StartChain(ui);

        public ListBox Invoke(Action<Xaml.Controls.ListBox> action) { action?.Invoke(UI); return this; }

        protected ListBox() { }
    }

    public static partial class ListBoxExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ListBox.SelectionMode"/></summary>
        public static TView SelectionMode<TView>(this TView view, Xaml.Controls.SelectionMode value) where TView : ListBox { view.UI.SelectionMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListBox.SingleSelectionFollowsFocus"/></summary>
        public static TView SingleSelectionFollowsFocus<TView>(this TView view, bool value) where TView : ListBox { view.UI.SingleSelectionFollowsFocus = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListBox.SelectionMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SelectionMode> SelectionMode<TTarget>(this TTarget target) where TTarget : ListBox
        => DependencyProperty<TTarget, Xaml.Controls.SelectionMode>.Get(target, Xaml.Controls.ListBox.SelectionModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListBox.SingleSelectionFollowsFocus"/></summary>
        public static DependencyProperty<TTarget, bool> SingleSelectionFollowsFocus<TTarget>(this TTarget target) where TTarget : ListBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ListBox.SingleSelectionFollowsFocusProperty);
    }
}

namespace CSharpMarkup.WinUI // ListBoxItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ListBoxItem"/></summary>
        public static ListBoxItem ListBoxItem(UIObject Content)
        {
            var ui = new Xaml.Controls.ListBoxItem();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ListBoxItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ListBoxItem"/></summary>
        public static ListBoxItem ListBoxItem()
        {
            var ui = new Xaml.Controls.ListBoxItem();
            return CSharpMarkup.WinUI.ListBoxItem.StartChain(ui);
        }
    }

    public partial class ListBoxItem : SelectorItem, IUI<Xaml.Controls.ListBoxItem>
    {
        static ListBoxItem instance;

        internal static ListBoxItem StartChain(Xaml.Controls.ListBoxItem ui)
        {
            if (instance == null) instance = new ListBoxItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ListBoxItem ui;

        public new Xaml.Controls.ListBoxItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ListBoxItem view) => view?.UI;

        public static implicit operator Xaml.Controls.ListBoxItem(ListBoxItem view) => view?.UI;

        public static implicit operator ListBoxItem(Xaml.Controls.ListBoxItem ui) => ListBoxItem.StartChain(ui);

        public ListBoxItem Invoke(Action<Xaml.Controls.ListBoxItem> action) { action?.Invoke(UI); return this; }

        protected ListBoxItem() { }
    }
}

namespace CSharpMarkup.WinUI // ListPickerFlyout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ListPickerFlyout"/></summary>
        /// <remarks>Remark: ListPickerFlyout().Bind() binds to <see cref="Xaml.Controls.ListPickerFlyout.ItemsSourceProperty"/></remarks>
        public static ListPickerFlyout ListPickerFlyout(string DisplayMemberPath = default, object ItemsSource = default, Xaml.DataTemplate ItemTemplate = default, int? SelectedIndex = default, object SelectedItem = default, object SelectedValue = default, string SelectedValuePath = default, Xaml.Controls.ListPickerFlyoutSelectionMode? SelectionMode = default)
        {
            var ui = new Xaml.Controls.ListPickerFlyout();
            if (DisplayMemberPath is not null) ui.DisplayMemberPath = DisplayMemberPath;
            if (ItemsSource is not null) ui.ItemsSource = ItemsSource;
            if (ItemTemplate is not null) ui.ItemTemplate = ItemTemplate;
            if (SelectedIndex is not null) ui.SelectedIndex = SelectedIndex.Value;
            if (SelectedItem is not null) ui.SelectedItem = SelectedItem;
            if (SelectedValue is not null) ui.SelectedValue = SelectedValue;
            if (SelectedValuePath is not null) ui.SelectedValuePath = SelectedValuePath;
            if (SelectionMode is not null) ui.SelectionMode = SelectionMode.Value;
            return CSharpMarkup.WinUI.ListPickerFlyout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ListPickerFlyout"/></summary>
        /// <remarks>Remark: ListPickerFlyout().Bind() binds to <see cref="Xaml.Controls.ListPickerFlyout.ItemsSourceProperty"/></remarks>
        public static ListPickerFlyout ListPickerFlyout()
        {
            var ui = new Xaml.Controls.ListPickerFlyout();
            return CSharpMarkup.WinUI.ListPickerFlyout.StartChain(ui);
        }
    }

    public partial class ListPickerFlyout : PickerFlyoutBase, IUI<Xaml.Controls.ListPickerFlyout>, IDefaultBindProperty
    {
        static ListPickerFlyout instance;

        internal static ListPickerFlyout StartChain(Xaml.Controls.ListPickerFlyout ui)
        {
            if (instance == null) instance = new ListPickerFlyout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ListPickerFlyout ui;

        public new Xaml.Controls.ListPickerFlyout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.ListPickerFlyout.ItemsSourceProperty"/></summary>
        public Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.ListPickerFlyout.ItemsSourceProperty;

        public static implicit operator Xaml.Controls.ListPickerFlyout(ListPickerFlyout view) => view?.UI;

        public static implicit operator ListPickerFlyout(Xaml.Controls.ListPickerFlyout ui) => ListPickerFlyout.StartChain(ui);

        public ListPickerFlyout Invoke(Action<Xaml.Controls.ListPickerFlyout> action) { action?.Invoke(UI); return this; }

        protected ListPickerFlyout() { }
    }

    public static partial class ListPickerFlyoutExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ListPickerFlyout.DisplayMemberPath"/></summary>
        public static TView DisplayMemberPath<TView>(this TView view, string value) where TView : ListPickerFlyout { view.UI.DisplayMemberPath = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListPickerFlyout.ItemsSource"/></summary>
        public static TView ItemsSource<TView>(this TView view, object value) where TView : ListPickerFlyout { view.UI.ItemsSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListPickerFlyout.ItemTemplate"/></summary>
        public static TView ItemTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : ListPickerFlyout { view.UI.ItemTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListPickerFlyout.SelectedIndex"/></summary>
        public static TView SelectedIndex<TView>(this TView view, int value) where TView : ListPickerFlyout { view.UI.SelectedIndex = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListPickerFlyout.SelectedItem"/></summary>
        public static TView SelectedItem<TView>(this TView view, object value) where TView : ListPickerFlyout { view.UI.SelectedItem = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListPickerFlyout.SelectedValue"/></summary>
        public static TView SelectedValue<TView>(this TView view, object value) where TView : ListPickerFlyout { view.UI.SelectedValue = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListPickerFlyout.SelectedValuePath"/></summary>
        public static TView SelectedValuePath<TView>(this TView view, string value) where TView : ListPickerFlyout { view.UI.SelectedValuePath = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListPickerFlyout.SelectionMode"/></summary>
        public static TView SelectionMode<TView>(this TView view, Xaml.Controls.ListPickerFlyoutSelectionMode value) where TView : ListPickerFlyout { view.UI.SelectionMode = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListPickerFlyout.DisplayMemberPath"/></summary>
        public static DependencyProperty<TTarget, string> DisplayMemberPath<TTarget>(this TTarget target) where TTarget : ListPickerFlyout
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.ListPickerFlyout.DisplayMemberPathProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListPickerFlyout.ItemsSource"/></summary>
        public static DependencyProperty<TTarget, object> ItemsSource<TTarget>(this TTarget target) where TTarget : ListPickerFlyout
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ListPickerFlyout.ItemsSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListPickerFlyout.ItemTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> ItemTemplate<TTarget>(this TTarget target) where TTarget : ListPickerFlyout
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.ListPickerFlyout.ItemTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListPickerFlyout.SelectedIndex"/></summary>
        public static DependencyProperty<TTarget, int> SelectedIndex<TTarget>(this TTarget target) where TTarget : ListPickerFlyout
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.ListPickerFlyout.SelectedIndexProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListPickerFlyout.SelectedItem"/></summary>
        public static DependencyProperty<TTarget, object> SelectedItem<TTarget>(this TTarget target) where TTarget : ListPickerFlyout
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ListPickerFlyout.SelectedItemProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListPickerFlyout.SelectedValuePath"/></summary>
        public static DependencyProperty<TTarget, string> SelectedValuePath<TTarget>(this TTarget target) where TTarget : ListPickerFlyout
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.ListPickerFlyout.SelectedValuePathProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListPickerFlyout.SelectedValue"/></summary>
        public static DependencyProperty<TTarget, object> SelectedValue<TTarget>(this TTarget target) where TTarget : ListPickerFlyout
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ListPickerFlyout.SelectedValueProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListPickerFlyout.SelectionMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ListPickerFlyoutSelectionMode> SelectionMode<TTarget>(this TTarget target) where TTarget : ListPickerFlyout
        => DependencyProperty<TTarget, Xaml.Controls.ListPickerFlyoutSelectionMode>.Get(target, Xaml.Controls.ListPickerFlyout.SelectionModeProperty);
    }
}

namespace CSharpMarkup.WinUI // ListPickerFlyoutPresenter
{
    public partial class ListPickerFlyoutPresenter : Control, IUI<Xaml.Controls.ListPickerFlyoutPresenter>
    {
        Xaml.Controls.ListPickerFlyoutPresenter ui;

        public new Xaml.Controls.ListPickerFlyoutPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ListPickerFlyoutPresenter Invoke(Action<Xaml.Controls.ListPickerFlyoutPresenter> action) { action?.Invoke(UI); return this; }

        protected ListPickerFlyoutPresenter() { }
    }
}

namespace CSharpMarkup.WinUI // ListView
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ListView"/></summary>
        public static ListView ListView(params UIObject[] Items)
        {
            var ui = new Xaml.Controls.ListView();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<UIObject>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j].UI);
                else
                    ui.Items.Add(child.UI);
            }
            return CSharpMarkup.WinUI.ListView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ListView"/></summary>
        public static ListView ListView()
        {
            var ui = new Xaml.Controls.ListView();
            return CSharpMarkup.WinUI.ListView.StartChain(ui);
        }
    }

    public partial class ListView : ListViewBase, IUI<Xaml.Controls.ListView>
    {
        static ListView instance;

        internal static ListView StartChain(Xaml.Controls.ListView ui)
        {
            if (instance == null) instance = new ListView();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ListView ui;

        public new Xaml.Controls.ListView UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ListView view) => view?.UI;

        public static implicit operator Xaml.Controls.ListView(ListView view) => view?.UI;

        public static implicit operator ListView(Xaml.Controls.ListView ui) => ListView.StartChain(ui);

        public ListView Invoke(Action<Xaml.Controls.ListView> action) { action?.Invoke(UI); return this; }

        protected ListView() { }
    }
}

namespace CSharpMarkup.WinUI // ListViewBase
{
    public partial class ListViewBase : Selector, IUI<Xaml.Controls.ListViewBase>
    {
        Xaml.Controls.ListViewBase ui;

        public new Xaml.Controls.ListViewBase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ListViewBase Invoke(Action<Xaml.Controls.ListViewBase> action) { action?.Invoke(UI); return this; }

        protected ListViewBase() { }
    }

    public static partial class ListViewBaseExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.CanDragItems"/></summary>
        public static TView CanDragItems<TView>(this TView view, bool value) where TView : ListViewBase { view.UI.CanDragItems = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.CanReorderItems"/></summary>
        public static TView CanReorderItems<TView>(this TView view, bool value) where TView : ListViewBase { view.UI.CanReorderItems = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.DataFetchSize"/></summary>
        public static TView DataFetchSize<TView>(this TView view, double value) where TView : ListViewBase { view.UI.DataFetchSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.Footer"/></summary>
        public static TView Footer<TView>(this TView view, object value) where TView : ListViewBase { view.UI.Footer = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.FooterTemplate"/></summary>
        public static TView FooterTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : ListViewBase { view.UI.FooterTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.FooterTransitions"/></summary>
        public static TView FooterTransitions<TView>(this TView view, Xaml.Media.Animation.TransitionCollection value) where TView : ListViewBase { view.UI.FooterTransitions = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : ListViewBase { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : ListViewBase { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.HeaderTransitions"/></summary>
        public static TView HeaderTransitions<TView>(this TView view, Xaml.Media.Animation.TransitionCollection value) where TView : ListViewBase { view.UI.HeaderTransitions = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.IncrementalLoadingThreshold"/></summary>
        public static TView IncrementalLoadingThreshold<TView>(this TView view, double value) where TView : ListViewBase { view.UI.IncrementalLoadingThreshold = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.IncrementalLoadingTrigger"/></summary>
        public static TView IncrementalLoadingTrigger<TView>(this TView view, Xaml.Controls.IncrementalLoadingTrigger value) where TView : ListViewBase { view.UI.IncrementalLoadingTrigger = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.IsActiveView"/></summary>
        public static TView IsActiveView<TView>(this TView view, bool value) where TView : ListViewBase { view.UI.IsActiveView = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.IsItemClickEnabled"/></summary>
        public static TView IsItemClickEnabled<TView>(this TView view, bool value) where TView : ListViewBase { view.UI.IsItemClickEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.IsMultiSelectCheckBoxEnabled"/></summary>
        public static TView IsMultiSelectCheckBoxEnabled<TView>(this TView view, bool value) where TView : ListViewBase { view.UI.IsMultiSelectCheckBoxEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.IsSwipeEnabled"/></summary>
        public static TView IsSwipeEnabled<TView>(this TView view, bool value) where TView : ListViewBase { view.UI.IsSwipeEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.IsZoomedInView"/></summary>
        public static TView IsZoomedInView<TView>(this TView view, bool value) where TView : ListViewBase { view.UI.IsZoomedInView = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.ReorderMode"/></summary>
        public static TView ReorderMode<TView>(this TView view, Xaml.Controls.ListViewReorderMode value) where TView : ListViewBase { view.UI.ReorderMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.SelectionMode"/></summary>
        public static TView SelectionMode<TView>(this TView view, Xaml.Controls.ListViewSelectionMode value) where TView : ListViewBase { view.UI.SelectionMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.SemanticZoomOwner"/></summary>
        public static TView SemanticZoomOwner<TView>(this TView view, Xaml.Controls.SemanticZoom value) where TView : ListViewBase { view.UI.SemanticZoomOwner = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.ShowsScrollingPlaceholders"/></summary>
        public static TView ShowsScrollingPlaceholders<TView>(this TView view, bool value) where TView : ListViewBase { view.UI.ShowsScrollingPlaceholders = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ListViewBase.SingleSelectionFollowsFocus"/></summary>
        public static TView SingleSelectionFollowsFocus<TView>(this TView view, bool value) where TView : ListViewBase { view.UI.SingleSelectionFollowsFocus = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.CanDragItems"/></summary>
        public static DependencyProperty<TTarget, bool> CanDragItems<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ListViewBase.CanDragItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.CanReorderItems"/></summary>
        public static DependencyProperty<TTarget, bool> CanReorderItems<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ListViewBase.CanReorderItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.DataFetchSize"/></summary>
        public static DependencyProperty<TTarget, double> DataFetchSize<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ListViewBase.DataFetchSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.Footer"/></summary>
        public static DependencyProperty<TTarget, object> Footer<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ListViewBase.FooterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.FooterTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> FooterTemplate<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.ListViewBase.FooterTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.FooterTransitions"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection> FooterTransitions<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection>.Get(target, Xaml.Controls.ListViewBase.FooterTransitionsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ListViewBase.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.ListViewBase.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.HeaderTransitions"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection> HeaderTransitions<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection>.Get(target, Xaml.Controls.ListViewBase.HeaderTransitionsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.IncrementalLoadingThreshold"/></summary>
        public static DependencyProperty<TTarget, double> IncrementalLoadingThreshold<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ListViewBase.IncrementalLoadingThresholdProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.IncrementalLoadingTrigger"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IncrementalLoadingTrigger> IncrementalLoadingTrigger<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, Xaml.Controls.IncrementalLoadingTrigger>.Get(target, Xaml.Controls.ListViewBase.IncrementalLoadingTriggerProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.IsActiveView"/></summary>
        public static DependencyProperty<TTarget, bool> IsActiveView<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ListViewBase.IsActiveViewProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.IsItemClickEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsItemClickEnabled<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ListViewBase.IsItemClickEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.IsMultiSelectCheckBoxEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsMultiSelectCheckBoxEnabled<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ListViewBase.IsMultiSelectCheckBoxEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.IsSwipeEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsSwipeEnabled<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ListViewBase.IsSwipeEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.IsZoomedInView"/></summary>
        public static DependencyProperty<TTarget, bool> IsZoomedInView<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ListViewBase.IsZoomedInViewProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.ReorderMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ListViewReorderMode> ReorderMode<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, Xaml.Controls.ListViewReorderMode>.Get(target, Xaml.Controls.ListViewBase.ReorderModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.SelectionMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ListViewSelectionMode> SelectionMode<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, Xaml.Controls.ListViewSelectionMode>.Get(target, Xaml.Controls.ListViewBase.SelectionModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.SemanticZoomOwner"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SemanticZoom> SemanticZoomOwner<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, Xaml.Controls.SemanticZoom>.Get(target, Xaml.Controls.ListViewBase.SemanticZoomOwnerProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.ShowsScrollingPlaceholders"/></summary>
        public static DependencyProperty<TTarget, bool> ShowsScrollingPlaceholders<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ListViewBase.ShowsScrollingPlaceholdersProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ListViewBase.SingleSelectionFollowsFocus"/></summary>
        public static DependencyProperty<TTarget, bool> SingleSelectionFollowsFocus<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ListViewBase.SingleSelectionFollowsFocusProperty);
    }
}

namespace CSharpMarkup.WinUI // ListViewBaseHeaderItem
{
    public partial class ListViewBaseHeaderItem : ContentControl, IUI<Xaml.Controls.ListViewBaseHeaderItem>
    {
        Xaml.Controls.ListViewBaseHeaderItem ui;

        public new Xaml.Controls.ListViewBaseHeaderItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ListViewBaseHeaderItem Invoke(Action<Xaml.Controls.ListViewBaseHeaderItem> action) { action?.Invoke(UI); return this; }

        protected ListViewBaseHeaderItem() { }
    }
}

namespace CSharpMarkup.WinUI // ListViewHeaderItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ListViewHeaderItem"/></summary>
        public static ListViewHeaderItem ListViewHeaderItem(UIObject Content)
        {
            var ui = new Xaml.Controls.ListViewHeaderItem();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ListViewHeaderItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ListViewHeaderItem"/></summary>
        public static ListViewHeaderItem ListViewHeaderItem()
        {
            var ui = new Xaml.Controls.ListViewHeaderItem();
            return CSharpMarkup.WinUI.ListViewHeaderItem.StartChain(ui);
        }
    }

    public partial class ListViewHeaderItem : ListViewBaseHeaderItem, IUI<Xaml.Controls.ListViewHeaderItem>
    {
        static ListViewHeaderItem instance;

        internal static ListViewHeaderItem StartChain(Xaml.Controls.ListViewHeaderItem ui)
        {
            if (instance == null) instance = new ListViewHeaderItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ListViewHeaderItem ui;

        public new Xaml.Controls.ListViewHeaderItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ListViewHeaderItem view) => view?.UI;

        public static implicit operator Xaml.Controls.ListViewHeaderItem(ListViewHeaderItem view) => view?.UI;

        public static implicit operator ListViewHeaderItem(Xaml.Controls.ListViewHeaderItem ui) => ListViewHeaderItem.StartChain(ui);

        public ListViewHeaderItem Invoke(Action<Xaml.Controls.ListViewHeaderItem> action) { action?.Invoke(UI); return this; }

        protected ListViewHeaderItem() { }
    }
}

namespace CSharpMarkup.WinUI // ListViewItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ListViewItem"/></summary>
        public static ListViewItem ListViewItem(UIObject Content)
        {
            var ui = new Xaml.Controls.ListViewItem();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ListViewItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ListViewItem"/></summary>
        public static ListViewItem ListViewItem()
        {
            var ui = new Xaml.Controls.ListViewItem();
            return CSharpMarkup.WinUI.ListViewItem.StartChain(ui);
        }
    }

    public partial class ListViewItem : SelectorItem, IUI<Xaml.Controls.ListViewItem>
    {
        static ListViewItem instance;

        internal static ListViewItem StartChain(Xaml.Controls.ListViewItem ui)
        {
            if (instance == null) instance = new ListViewItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ListViewItem ui;

        public new Xaml.Controls.ListViewItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ListViewItem view) => view?.UI;

        public static implicit operator Xaml.Controls.ListViewItem(ListViewItem view) => view?.UI;

        public static implicit operator ListViewItem(Xaml.Controls.ListViewItem ui) => ListViewItem.StartChain(ui);

        public ListViewItem Invoke(Action<Xaml.Controls.ListViewItem> action) { action?.Invoke(UI); return this; }

        protected ListViewItem() { }
    }
}

namespace CSharpMarkup.WinUI // MapControl
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.MapControl"/></summary>
        public static MapControl MapControl(Windows.Devices.Geolocation.Geopoint Center = default, bool? InteractiveControlsVisible = default, IList<Xaml.Controls.MapLayer> Layers = default, string MapServiceToken = default, double? ZoomLevel = default)
        {
            var ui = new Xaml.Controls.MapControl();
            if (Center is not null) ui.Center = Center;
            if (InteractiveControlsVisible is not null) ui.InteractiveControlsVisible = InteractiveControlsVisible.Value;
            if (Layers is not null) ui.Layers = Layers;
            if (MapServiceToken is not null) ui.MapServiceToken = MapServiceToken;
            if (ZoomLevel is not null) ui.ZoomLevel = ZoomLevel.Value;
            return CSharpMarkup.WinUI.MapControl.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.MapControl"/></summary>
        public static MapControl MapControl()
        {
            var ui = new Xaml.Controls.MapControl();
            return CSharpMarkup.WinUI.MapControl.StartChain(ui);
        }
    }

    public partial class MapControl : Control, IUI<Xaml.Controls.MapControl>
    {
        static MapControl instance;

        internal static MapControl StartChain(Xaml.Controls.MapControl ui)
        {
            if (instance == null) instance = new MapControl();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.MapControl ui;

        public new Xaml.Controls.MapControl UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(MapControl view) => view?.UI;

        public static implicit operator Xaml.Controls.MapControl(MapControl view) => view?.UI;

        public static implicit operator MapControl(Xaml.Controls.MapControl ui) => MapControl.StartChain(ui);

        public MapControl Invoke(Action<Xaml.Controls.MapControl> action) { action?.Invoke(UI); return this; }

        protected MapControl() { }
    }

    public static partial class MapControlExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.MapControl.Center"/></summary>
        public static TView Center<TView>(this TView view, Windows.Devices.Geolocation.Geopoint value) where TView : MapControl { view.UI.Center = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MapControl.InteractiveControlsVisible"/></summary>
        public static TView InteractiveControlsVisible<TView>(this TView view, bool value) where TView : MapControl { view.UI.InteractiveControlsVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MapControl.Layers"/></summary>
        public static TView Layers<TView>(this TView view, IList<Xaml.Controls.MapLayer> value) where TView : MapControl { view.UI.Layers = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MapControl.MapServiceToken"/></summary>
        public static TView MapServiceToken<TView>(this TView view, string value) where TView : MapControl { view.UI.MapServiceToken = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MapControl.ZoomLevel"/></summary>
        public static TView ZoomLevel<TView>(this TView view, double value) where TView : MapControl { view.UI.ZoomLevel = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MapControl.Center"/></summary>
        public static DependencyProperty<TTarget, Windows.Devices.Geolocation.Geopoint> Center<TTarget>(this TTarget target) where TTarget : MapControl
        => DependencyProperty<TTarget, Windows.Devices.Geolocation.Geopoint>.Get(target, Xaml.Controls.MapControl.CenterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MapControl.InteractiveControlsVisible"/></summary>
        public static DependencyProperty<TTarget, bool> InteractiveControlsVisible<TTarget>(this TTarget target) where TTarget : MapControl
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MapControl.InteractiveControlsVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MapControl.Layers"/></summary>
        public static DependencyProperty<TTarget, IList<Xaml.Controls.MapLayer>> Layers<TTarget>(this TTarget target) where TTarget : MapControl
        => DependencyProperty<TTarget, IList<Xaml.Controls.MapLayer>>.Get(target, Xaml.Controls.MapControl.LayersProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MapControl.MapServiceToken"/></summary>
        public static DependencyProperty<TTarget, string> MapServiceToken<TTarget>(this TTarget target) where TTarget : MapControl
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.MapControl.MapServiceTokenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MapControl.ZoomLevel"/></summary>
        public static DependencyProperty<TTarget, double> ZoomLevel<TTarget>(this TTarget target) where TTarget : MapControl
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.MapControl.ZoomLevelProperty);
    }
}

namespace CSharpMarkup.WinUI // MapElement
{
    public partial class MapElement : DependencyObject, IUI<Xaml.Controls.MapElement>
    {
        Xaml.Controls.MapElement ui;

        public new Xaml.Controls.MapElement UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public MapElement Invoke(Action<Xaml.Controls.MapElement> action) { action?.Invoke(UI); return this; }

        protected MapElement() { }
    }
}

namespace CSharpMarkup.WinUI // MapElementsLayer
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.MapElementsLayer"/></summary>
        public static MapElementsLayer MapElementsLayer(IList<Xaml.Controls.MapElement> MapElements = default)
        {
            var ui = new Xaml.Controls.MapElementsLayer();
            if (MapElements is not null) ui.MapElements = MapElements;
            return CSharpMarkup.WinUI.MapElementsLayer.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.MapElementsLayer"/></summary>
        public static MapElementsLayer MapElementsLayer()
        {
            var ui = new Xaml.Controls.MapElementsLayer();
            return CSharpMarkup.WinUI.MapElementsLayer.StartChain(ui);
        }
    }

    public partial class MapElementsLayer : MapLayer, IUI<Xaml.Controls.MapElementsLayer>
    {
        static MapElementsLayer instance;

        internal static MapElementsLayer StartChain(Xaml.Controls.MapElementsLayer ui)
        {
            if (instance == null) instance = new MapElementsLayer();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.MapElementsLayer ui;

        public new Xaml.Controls.MapElementsLayer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.MapElementsLayer(MapElementsLayer view) => view?.UI;

        public static implicit operator MapElementsLayer(Xaml.Controls.MapElementsLayer ui) => MapElementsLayer.StartChain(ui);

        public MapElementsLayer Invoke(Action<Xaml.Controls.MapElementsLayer> action) { action?.Invoke(UI); return this; }

        protected MapElementsLayer() { }
    }

    public static partial class MapElementsLayerExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.MapElementsLayer.MapElements"/></summary>
        public static TView MapElements<TView>(this TView view, IList<Xaml.Controls.MapElement> value) where TView : MapElementsLayer { view.UI.MapElements = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MapElementsLayer.MapElements"/></summary>
        public static DependencyProperty<TTarget, IList<Xaml.Controls.MapElement>> MapElements<TTarget>(this TTarget target) where TTarget : MapElementsLayer
        => DependencyProperty<TTarget, IList<Xaml.Controls.MapElement>>.Get(target, Xaml.Controls.MapElementsLayer.MapElementsProperty);
    }
}

namespace CSharpMarkup.WinUI // MapIcon
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.MapIcon"/></summary>
        public static MapIcon MapIcon(Windows.Devices.Geolocation.Geopoint Location = default)
        {
            var ui = new Xaml.Controls.MapIcon();
            if (Location is not null) ui.Location = Location;
            return CSharpMarkup.WinUI.MapIcon.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.MapIcon"/></summary>
        public static MapIcon MapIcon()
        {
            var ui = new Xaml.Controls.MapIcon();
            return CSharpMarkup.WinUI.MapIcon.StartChain(ui);
        }
    }

    public partial class MapIcon : MapElement, IUI<Xaml.Controls.MapIcon>
    {
        static MapIcon instance;

        internal static MapIcon StartChain(Xaml.Controls.MapIcon ui)
        {
            if (instance == null) instance = new MapIcon();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.MapIcon ui;

        public new Xaml.Controls.MapIcon UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.MapIcon(MapIcon view) => view?.UI;

        public static implicit operator MapIcon(Xaml.Controls.MapIcon ui) => MapIcon.StartChain(ui);

        public MapIcon Invoke(Action<Xaml.Controls.MapIcon> action) { action?.Invoke(UI); return this; }

        protected MapIcon() { }
    }

    public static partial class MapIconExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.MapIcon.Location"/></summary>
        public static TView Location<TView>(this TView view, Windows.Devices.Geolocation.Geopoint value) where TView : MapIcon { view.UI.Location = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MapIcon.Location"/></summary>
        public static DependencyProperty<TTarget, Windows.Devices.Geolocation.Geopoint> Location<TTarget>(this TTarget target) where TTarget : MapIcon
        => DependencyProperty<TTarget, Windows.Devices.Geolocation.Geopoint>.Get(target, Xaml.Controls.MapIcon.LocationProperty);
    }
}

namespace CSharpMarkup.WinUI // MapLayer
{
    public partial class MapLayer : DependencyObject, IUI<Xaml.Controls.MapLayer>
    {
        Xaml.Controls.MapLayer ui;

        public new Xaml.Controls.MapLayer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public MapLayer Invoke(Action<Xaml.Controls.MapLayer> action) { action?.Invoke(UI); return this; }

        protected MapLayer() { }
    }
}

namespace CSharpMarkup.WinUI // MediaPlayerElement
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.MediaPlayerElement"/></summary>
        public static MediaPlayerElement MediaPlayerElement(bool? AreTransportControlsEnabled = default, bool? AutoPlay = default, bool? IsFullWindow = default, Xaml.Media.ImageSource PosterSource = default, Windows.Media.Playback.IMediaPlaybackSource Source = default, Xaml.Media.Stretch? Stretch = default, Xaml.Controls.MediaTransportControls TransportControls = default)
        {
            var ui = new Xaml.Controls.MediaPlayerElement();
            if (AreTransportControlsEnabled is not null) ui.AreTransportControlsEnabled = AreTransportControlsEnabled.Value;
            if (AutoPlay is not null) ui.AutoPlay = AutoPlay.Value;
            if (IsFullWindow is not null) ui.IsFullWindow = IsFullWindow.Value;
            if (PosterSource is not null) ui.PosterSource = PosterSource;
            if (Source is not null) ui.Source = Source;
            if (Stretch is not null) ui.Stretch = Stretch.Value;
            if (TransportControls is not null) ui.TransportControls = TransportControls;
            return CSharpMarkup.WinUI.MediaPlayerElement.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.MediaPlayerElement"/></summary>
        public static MediaPlayerElement MediaPlayerElement()
        {
            var ui = new Xaml.Controls.MediaPlayerElement();
            return CSharpMarkup.WinUI.MediaPlayerElement.StartChain(ui);
        }
    }

    public partial class MediaPlayerElement : Control, IUI<Xaml.Controls.MediaPlayerElement>
    {
        static MediaPlayerElement instance;

        internal static MediaPlayerElement StartChain(Xaml.Controls.MediaPlayerElement ui)
        {
            if (instance == null) instance = new MediaPlayerElement();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.MediaPlayerElement ui;

        public new Xaml.Controls.MediaPlayerElement UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(MediaPlayerElement view) => view?.UI;

        public static implicit operator Xaml.Controls.MediaPlayerElement(MediaPlayerElement view) => view?.UI;

        public static implicit operator MediaPlayerElement(Xaml.Controls.MediaPlayerElement ui) => MediaPlayerElement.StartChain(ui);

        public MediaPlayerElement Invoke(Action<Xaml.Controls.MediaPlayerElement> action) { action?.Invoke(UI); return this; }

        protected MediaPlayerElement() { }
    }

    public static partial class MediaPlayerElementExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.MediaPlayerElement.AreTransportControlsEnabled"/></summary>
        public static TView AreTransportControlsEnabled<TView>(this TView view, bool value) where TView : MediaPlayerElement { view.UI.AreTransportControlsEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaPlayerElement.AutoPlay"/></summary>
        public static TView AutoPlay<TView>(this TView view, bool value) where TView : MediaPlayerElement { view.UI.AutoPlay = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaPlayerElement.IsFullWindow"/></summary>
        public static TView IsFullWindow<TView>(this TView view, bool value) where TView : MediaPlayerElement { view.UI.IsFullWindow = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaPlayerElement.PosterSource"/></summary>
        public static TView PosterSource<TView>(this TView view, Xaml.Media.ImageSource value) where TView : MediaPlayerElement { view.UI.PosterSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaPlayerElement.Source"/></summary>
        public static TView Source<TView>(this TView view, Windows.Media.Playback.IMediaPlaybackSource value) where TView : MediaPlayerElement { view.UI.Source = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaPlayerElement.Stretch"/></summary>
        public static TView Stretch<TView>(this TView view, Xaml.Media.Stretch value) where TView : MediaPlayerElement { view.UI.Stretch = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaPlayerElement.TransportControls"/></summary>
        public static TView TransportControls<TView>(this TView view, Xaml.Controls.MediaTransportControls value) where TView : MediaPlayerElement { view.UI.TransportControls = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaPlayerElement.AreTransportControlsEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> AreTransportControlsEnabled<TTarget>(this TTarget target) where TTarget : MediaPlayerElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaPlayerElement.AreTransportControlsEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaPlayerElement.AutoPlay"/></summary>
        public static DependencyProperty<TTarget, bool> AutoPlay<TTarget>(this TTarget target) where TTarget : MediaPlayerElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaPlayerElement.AutoPlayProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaPlayerElement.IsFullWindow"/></summary>
        public static DependencyProperty<TTarget, bool> IsFullWindow<TTarget>(this TTarget target) where TTarget : MediaPlayerElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaPlayerElement.IsFullWindowProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaPlayerElement.MediaPlayer"/></summary>
        public static DependencyProperty<TTarget, Windows.Media.Playback.MediaPlayer> MediaPlayer<TTarget>(this TTarget target) where TTarget : MediaPlayerElement
        => DependencyProperty<TTarget, Windows.Media.Playback.MediaPlayer>.Get(target, Xaml.Controls.MediaPlayerElement.MediaPlayerProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaPlayerElement.PosterSource"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ImageSource> PosterSource<TTarget>(this TTarget target) where TTarget : MediaPlayerElement
        => DependencyProperty<TTarget, Xaml.Media.ImageSource>.Get(target, Xaml.Controls.MediaPlayerElement.PosterSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaPlayerElement.Source"/></summary>
        public static DependencyProperty<TTarget, Windows.Media.Playback.IMediaPlaybackSource> Source<TTarget>(this TTarget target) where TTarget : MediaPlayerElement
        => DependencyProperty<TTarget, Windows.Media.Playback.IMediaPlaybackSource>.Get(target, Xaml.Controls.MediaPlayerElement.SourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaPlayerElement.Stretch"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Stretch> Stretch<TTarget>(this TTarget target) where TTarget : MediaPlayerElement
        => DependencyProperty<TTarget, Xaml.Media.Stretch>.Get(target, Xaml.Controls.MediaPlayerElement.StretchProperty);
    }
}

namespace CSharpMarkup.WinUI // MediaPlayerPresenter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.MediaPlayerPresenter"/></summary>
        public static MediaPlayerPresenter MediaPlayerPresenter(bool? IsFullWindow = default, Windows.Media.Playback.MediaPlayer MediaPlayer = default, Xaml.Media.Stretch? Stretch = default)
        {
            var ui = new Xaml.Controls.MediaPlayerPresenter();
            if (IsFullWindow is not null) ui.IsFullWindow = IsFullWindow.Value;
            if (MediaPlayer is not null) ui.MediaPlayer = MediaPlayer;
            if (Stretch is not null) ui.Stretch = Stretch.Value;
            return CSharpMarkup.WinUI.MediaPlayerPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.MediaPlayerPresenter"/></summary>
        public static MediaPlayerPresenter MediaPlayerPresenter()
        {
            var ui = new Xaml.Controls.MediaPlayerPresenter();
            return CSharpMarkup.WinUI.MediaPlayerPresenter.StartChain(ui);
        }
    }

    public partial class MediaPlayerPresenter : FrameworkElement, IUI<Xaml.Controls.MediaPlayerPresenter>
    {
        static MediaPlayerPresenter instance;

        internal static MediaPlayerPresenter StartChain(Xaml.Controls.MediaPlayerPresenter ui)
        {
            if (instance == null) instance = new MediaPlayerPresenter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.MediaPlayerPresenter ui;

        public new Xaml.Controls.MediaPlayerPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(MediaPlayerPresenter view) => view?.UI;

        public static implicit operator Xaml.Controls.MediaPlayerPresenter(MediaPlayerPresenter view) => view?.UI;

        public static implicit operator MediaPlayerPresenter(Xaml.Controls.MediaPlayerPresenter ui) => MediaPlayerPresenter.StartChain(ui);

        public MediaPlayerPresenter Invoke(Action<Xaml.Controls.MediaPlayerPresenter> action) { action?.Invoke(UI); return this; }

        protected MediaPlayerPresenter() { }
    }

    public static partial class MediaPlayerPresenterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.MediaPlayerPresenter.IsFullWindow"/></summary>
        public static TView IsFullWindow<TView>(this TView view, bool value) where TView : MediaPlayerPresenter { view.UI.IsFullWindow = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaPlayerPresenter.MediaPlayer"/></summary>
        public static TView MediaPlayer<TView>(this TView view, Windows.Media.Playback.MediaPlayer value) where TView : MediaPlayerPresenter { view.UI.MediaPlayer = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaPlayerPresenter.Stretch"/></summary>
        public static TView Stretch<TView>(this TView view, Xaml.Media.Stretch value) where TView : MediaPlayerPresenter { view.UI.Stretch = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaPlayerPresenter.IsFullWindow"/></summary>
        public static DependencyProperty<TTarget, bool> IsFullWindow<TTarget>(this TTarget target) where TTarget : MediaPlayerPresenter
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaPlayerPresenter.IsFullWindowProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaPlayerPresenter.MediaPlayer"/></summary>
        public static DependencyProperty<TTarget, Windows.Media.Playback.MediaPlayer> MediaPlayer<TTarget>(this TTarget target) where TTarget : MediaPlayerPresenter
        => DependencyProperty<TTarget, Windows.Media.Playback.MediaPlayer>.Get(target, Xaml.Controls.MediaPlayerPresenter.MediaPlayerProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaPlayerPresenter.Stretch"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Stretch> Stretch<TTarget>(this TTarget target) where TTarget : MediaPlayerPresenter
        => DependencyProperty<TTarget, Xaml.Media.Stretch>.Get(target, Xaml.Controls.MediaPlayerPresenter.StretchProperty);
    }
}

namespace CSharpMarkup.WinUI // MediaTransportControls
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.MediaTransportControls"/></summary>
        public static MediaTransportControls MediaTransportControls(Xaml.Media.FastPlayFallbackBehaviour? FastPlayFallbackBehaviour = default, bool? IsCompact = default, bool? IsFastForwardButtonVisible = default, bool? IsFastForwardEnabled = default, bool? IsFastRewindButtonVisible = default, bool? IsFastRewindEnabled = default, bool? IsNextTrackButtonVisible = default, bool? IsPlaybackRateButtonVisible = default, bool? IsPlaybackRateEnabled = default, bool? IsPreviousTrackButtonVisible = default, bool? IsRepeatButtonVisible = default, bool? IsRepeatEnabled = default, bool? IsSeekBarVisible = default, bool? IsSeekEnabled = default, bool? IsSkipBackwardButtonVisible = default, bool? IsSkipBackwardEnabled = default, bool? IsSkipForwardButtonVisible = default, bool? IsSkipForwardEnabled = default, bool? IsStopButtonVisible = default, bool? IsStopEnabled = default, bool? IsVolumeButtonVisible = default, bool? IsVolumeEnabled = default, bool? IsZoomButtonVisible = default, bool? IsZoomEnabled = default, bool? ShowAndHideAutomatically = default)
        {
            var ui = new Xaml.Controls.MediaTransportControls();
            if (FastPlayFallbackBehaviour is not null) ui.FastPlayFallbackBehaviour = FastPlayFallbackBehaviour.Value;
            if (IsCompact is not null) ui.IsCompact = IsCompact.Value;
            if (IsFastForwardButtonVisible is not null) ui.IsFastForwardButtonVisible = IsFastForwardButtonVisible.Value;
            if (IsFastForwardEnabled is not null) ui.IsFastForwardEnabled = IsFastForwardEnabled.Value;
            if (IsFastRewindButtonVisible is not null) ui.IsFastRewindButtonVisible = IsFastRewindButtonVisible.Value;
            if (IsFastRewindEnabled is not null) ui.IsFastRewindEnabled = IsFastRewindEnabled.Value;
            if (IsNextTrackButtonVisible is not null) ui.IsNextTrackButtonVisible = IsNextTrackButtonVisible.Value;
            if (IsPlaybackRateButtonVisible is not null) ui.IsPlaybackRateButtonVisible = IsPlaybackRateButtonVisible.Value;
            if (IsPlaybackRateEnabled is not null) ui.IsPlaybackRateEnabled = IsPlaybackRateEnabled.Value;
            if (IsPreviousTrackButtonVisible is not null) ui.IsPreviousTrackButtonVisible = IsPreviousTrackButtonVisible.Value;
            if (IsRepeatButtonVisible is not null) ui.IsRepeatButtonVisible = IsRepeatButtonVisible.Value;
            if (IsRepeatEnabled is not null) ui.IsRepeatEnabled = IsRepeatEnabled.Value;
            if (IsSeekBarVisible is not null) ui.IsSeekBarVisible = IsSeekBarVisible.Value;
            if (IsSeekEnabled is not null) ui.IsSeekEnabled = IsSeekEnabled.Value;
            if (IsSkipBackwardButtonVisible is not null) ui.IsSkipBackwardButtonVisible = IsSkipBackwardButtonVisible.Value;
            if (IsSkipBackwardEnabled is not null) ui.IsSkipBackwardEnabled = IsSkipBackwardEnabled.Value;
            if (IsSkipForwardButtonVisible is not null) ui.IsSkipForwardButtonVisible = IsSkipForwardButtonVisible.Value;
            if (IsSkipForwardEnabled is not null) ui.IsSkipForwardEnabled = IsSkipForwardEnabled.Value;
            if (IsStopButtonVisible is not null) ui.IsStopButtonVisible = IsStopButtonVisible.Value;
            if (IsStopEnabled is not null) ui.IsStopEnabled = IsStopEnabled.Value;
            if (IsVolumeButtonVisible is not null) ui.IsVolumeButtonVisible = IsVolumeButtonVisible.Value;
            if (IsVolumeEnabled is not null) ui.IsVolumeEnabled = IsVolumeEnabled.Value;
            if (IsZoomButtonVisible is not null) ui.IsZoomButtonVisible = IsZoomButtonVisible.Value;
            if (IsZoomEnabled is not null) ui.IsZoomEnabled = IsZoomEnabled.Value;
            if (ShowAndHideAutomatically is not null) ui.ShowAndHideAutomatically = ShowAndHideAutomatically.Value;
            return CSharpMarkup.WinUI.MediaTransportControls.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.MediaTransportControls"/></summary>
        public static MediaTransportControls MediaTransportControls()
        {
            var ui = new Xaml.Controls.MediaTransportControls();
            return CSharpMarkup.WinUI.MediaTransportControls.StartChain(ui);
        }
    }

    public partial class MediaTransportControls : Control, IUI<Xaml.Controls.MediaTransportControls>
    {
        static MediaTransportControls instance;

        internal static MediaTransportControls StartChain(Xaml.Controls.MediaTransportControls ui)
        {
            if (instance == null) instance = new MediaTransportControls();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.MediaTransportControls ui;

        public new Xaml.Controls.MediaTransportControls UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(MediaTransportControls view) => view?.UI;

        public static implicit operator Xaml.Controls.MediaTransportControls(MediaTransportControls view) => view?.UI;

        public static implicit operator MediaTransportControls(Xaml.Controls.MediaTransportControls ui) => MediaTransportControls.StartChain(ui);

        public MediaTransportControls Invoke(Action<Xaml.Controls.MediaTransportControls> action) { action?.Invoke(UI); return this; }

        protected MediaTransportControls() { }
    }

    public static partial class MediaTransportControlsExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.FastPlayFallbackBehaviour"/></summary>
        public static TView FastPlayFallbackBehaviour<TView>(this TView view, Xaml.Media.FastPlayFallbackBehaviour value) where TView : MediaTransportControls { view.UI.FastPlayFallbackBehaviour = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsCompact"/></summary>
        public static TView IsCompact<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsCompact = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsFastForwardButtonVisible"/></summary>
        public static TView IsFastForwardButtonVisible<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsFastForwardButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsFastForwardEnabled"/></summary>
        public static TView IsFastForwardEnabled<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsFastForwardEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsFastRewindButtonVisible"/></summary>
        public static TView IsFastRewindButtonVisible<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsFastRewindButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsFastRewindEnabled"/></summary>
        public static TView IsFastRewindEnabled<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsFastRewindEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsNextTrackButtonVisible"/></summary>
        public static TView IsNextTrackButtonVisible<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsNextTrackButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsPlaybackRateButtonVisible"/></summary>
        public static TView IsPlaybackRateButtonVisible<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsPlaybackRateButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsPlaybackRateEnabled"/></summary>
        public static TView IsPlaybackRateEnabled<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsPlaybackRateEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsPreviousTrackButtonVisible"/></summary>
        public static TView IsPreviousTrackButtonVisible<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsPreviousTrackButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsRepeatButtonVisible"/></summary>
        public static TView IsRepeatButtonVisible<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsRepeatButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsRepeatEnabled"/></summary>
        public static TView IsRepeatEnabled<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsRepeatEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsSeekBarVisible"/></summary>
        public static TView IsSeekBarVisible<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsSeekBarVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsSeekEnabled"/></summary>
        public static TView IsSeekEnabled<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsSeekEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsSkipBackwardButtonVisible"/></summary>
        public static TView IsSkipBackwardButtonVisible<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsSkipBackwardButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsSkipBackwardEnabled"/></summary>
        public static TView IsSkipBackwardEnabled<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsSkipBackwardEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsSkipForwardButtonVisible"/></summary>
        public static TView IsSkipForwardButtonVisible<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsSkipForwardButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsSkipForwardEnabled"/></summary>
        public static TView IsSkipForwardEnabled<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsSkipForwardEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsStopButtonVisible"/></summary>
        public static TView IsStopButtonVisible<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsStopButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsStopEnabled"/></summary>
        public static TView IsStopEnabled<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsStopEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsVolumeButtonVisible"/></summary>
        public static TView IsVolumeButtonVisible<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsVolumeButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsVolumeEnabled"/></summary>
        public static TView IsVolumeEnabled<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsVolumeEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsZoomButtonVisible"/></summary>
        public static TView IsZoomButtonVisible<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsZoomButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.IsZoomEnabled"/></summary>
        public static TView IsZoomEnabled<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.IsZoomEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControls.ShowAndHideAutomatically"/></summary>
        public static TView ShowAndHideAutomatically<TView>(this TView view, bool value) where TView : MediaTransportControls { view.UI.ShowAndHideAutomatically = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.FastPlayFallbackBehaviour"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FastPlayFallbackBehaviour> FastPlayFallbackBehaviour<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, Xaml.Media.FastPlayFallbackBehaviour>.Get(target, Xaml.Controls.MediaTransportControls.FastPlayFallbackBehaviourProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsCompact"/></summary>
        public static DependencyProperty<TTarget, bool> IsCompact<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsCompactProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsFastForwardButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsFastForwardButtonVisible<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsFastForwardButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsFastForwardEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsFastForwardEnabled<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsFastForwardEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsFastRewindButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsFastRewindButtonVisible<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsFastRewindButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsFastRewindEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsFastRewindEnabled<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsFastRewindEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsNextTrackButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsNextTrackButtonVisible<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsNextTrackButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsPlaybackRateButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsPlaybackRateButtonVisible<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsPlaybackRateButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsPlaybackRateEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsPlaybackRateEnabled<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsPlaybackRateEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsPreviousTrackButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsPreviousTrackButtonVisible<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsPreviousTrackButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsRepeatButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsRepeatButtonVisible<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsRepeatButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsRepeatEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsRepeatEnabled<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsRepeatEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsSeekBarVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsSeekBarVisible<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsSeekBarVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsSeekEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsSeekEnabled<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsSeekEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsSkipBackwardButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsSkipBackwardButtonVisible<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsSkipBackwardButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsSkipBackwardEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsSkipBackwardEnabled<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsSkipBackwardEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsSkipForwardButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsSkipForwardButtonVisible<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsSkipForwardButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsSkipForwardEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsSkipForwardEnabled<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsSkipForwardEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsStopButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsStopButtonVisible<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsStopButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsStopEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsStopEnabled<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsStopEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsVolumeButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsVolumeButtonVisible<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsVolumeButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsVolumeEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsVolumeEnabled<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsVolumeEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsZoomButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsZoomButtonVisible<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsZoomButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.IsZoomEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsZoomEnabled<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.IsZoomEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControls.ShowAndHideAutomatically"/></summary>
        public static DependencyProperty<TTarget, bool> ShowAndHideAutomatically<TTarget>(this TTarget target) where TTarget : MediaTransportControls
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MediaTransportControls.ShowAndHideAutomaticallyProperty);
    }
}

namespace CSharpMarkup.WinUI // MediaTransportControlsHelper
{
    public static partial class MediaTransportControlsHelperExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.MediaTransportControlsHelper.DropoutOrder"/></summary>
        public static TTarget MediaTransportControlsHelper_DropoutOrder<TTarget>(this TTarget target, int? value) where TTarget : UIElement
        { Xaml.Controls.MediaTransportControlsHelper.SetDropoutOrder(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MediaTransportControlsHelper.DropoutOrder"/></summary>
        public static DependencyProperty<TTarget, int?> MediaTransportControlsHelper_DropoutOrder<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, int?>.Get(target, Xaml.Controls.MediaTransportControlsHelper.DropoutOrderProperty);
    }
}

namespace CSharpMarkup.WinUI // MenuBar
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.MenuBar"/></summary>
        public static MenuBar MenuBar(params Xaml.Controls.MenuBarItem[] Items)
        {
            var ui = new Xaml.Controls.MenuBar();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Controls.MenuBarItem>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j]);
                else
                    ui.Items.Add(child);
            }
            return CSharpMarkup.WinUI.MenuBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.MenuBar"/></summary>
        public static MenuBar MenuBar()
        {
            var ui = new Xaml.Controls.MenuBar();
            return CSharpMarkup.WinUI.MenuBar.StartChain(ui);
        }
    }

    public partial class MenuBar : Control, IUI<Xaml.Controls.MenuBar>
    {
        static MenuBar instance;

        internal static MenuBar StartChain(Xaml.Controls.MenuBar ui)
        {
            if (instance == null) instance = new MenuBar();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.MenuBar ui;

        public new Xaml.Controls.MenuBar UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(MenuBar view) => view?.UI;

        public static implicit operator Xaml.Controls.MenuBar(MenuBar view) => view?.UI;

        public static implicit operator MenuBar(Xaml.Controls.MenuBar ui) => MenuBar.StartChain(ui);

        public MenuBar Invoke(Action<Xaml.Controls.MenuBar> action) { action?.Invoke(UI); return this; }

        protected MenuBar() { }
    }

    public static partial class MenuBarExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MenuBar.Items"/></summary>
        public static DependencyProperty<TTarget, IList<Xaml.Controls.MenuBarItem>> Items<TTarget>(this TTarget target) where TTarget : MenuBar
        => DependencyProperty<TTarget, IList<Xaml.Controls.MenuBarItem>>.Get(target, Xaml.Controls.MenuBar.ItemsProperty);
    }
}

namespace CSharpMarkup.WinUI // MenuBarItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.MenuBarItem"/></summary>
        public static MenuBarItem MenuBarItem(params Xaml.Controls.MenuFlyoutItemBase[] Items)
        {
            var ui = new Xaml.Controls.MenuBarItem();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Controls.MenuFlyoutItemBase>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j]);
                else
                    ui.Items.Add(child);
            }
            return CSharpMarkup.WinUI.MenuBarItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.MenuBarItem"/></summary>
        public static MenuBarItem MenuBarItem()
        {
            var ui = new Xaml.Controls.MenuBarItem();
            return CSharpMarkup.WinUI.MenuBarItem.StartChain(ui);
        }
    }

    public partial class MenuBarItem : Control, IUI<Xaml.Controls.MenuBarItem>
    {
        static MenuBarItem instance;

        internal static MenuBarItem StartChain(Xaml.Controls.MenuBarItem ui)
        {
            if (instance == null) instance = new MenuBarItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.MenuBarItem ui;

        public new Xaml.Controls.MenuBarItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(MenuBarItem view) => view?.UI;

        public static implicit operator Xaml.Controls.MenuBarItem(MenuBarItem view) => view?.UI;

        public static implicit operator MenuBarItem(Xaml.Controls.MenuBarItem ui) => MenuBarItem.StartChain(ui);

        public MenuBarItem Invoke(Action<Xaml.Controls.MenuBarItem> action) { action?.Invoke(UI); return this; }

        protected MenuBarItem() { }
    }

    public static partial class MenuBarItemExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.MenuBarItem.Title"/></summary>
        public static TView Title<TView>(this TView view, string value) where TView : MenuBarItem { view.UI.Title = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MenuBarItem.Items"/></summary>
        public static DependencyProperty<TTarget, IList<Xaml.Controls.MenuFlyoutItemBase>> Items<TTarget>(this TTarget target) where TTarget : MenuBarItem
        => DependencyProperty<TTarget, IList<Xaml.Controls.MenuFlyoutItemBase>>.Get(target, Xaml.Controls.MenuBarItem.ItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MenuBarItem.Title"/></summary>
        public static DependencyProperty<TTarget, string> Title<TTarget>(this TTarget target) where TTarget : MenuBarItem
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.MenuBarItem.TitleProperty);
    }
}

namespace CSharpMarkup.WinUI // MenuBarItemFlyout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.MenuBarItemFlyout"/></summary>
        public static MenuBarItemFlyout MenuBarItemFlyout(params Xaml.Controls.MenuFlyoutItemBase[] Items)
        {
            var ui = new Xaml.Controls.MenuBarItemFlyout();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Controls.MenuFlyoutItemBase>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j]);
                else
                    ui.Items.Add(child);
            }
            return CSharpMarkup.WinUI.MenuBarItemFlyout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.MenuBarItemFlyout"/></summary>
        public static MenuBarItemFlyout MenuBarItemFlyout()
        {
            var ui = new Xaml.Controls.MenuBarItemFlyout();
            return CSharpMarkup.WinUI.MenuBarItemFlyout.StartChain(ui);
        }
    }

    public partial class MenuBarItemFlyout : MenuFlyout, IUI<Xaml.Controls.MenuBarItemFlyout>
    {
        static MenuBarItemFlyout instance;

        internal static MenuBarItemFlyout StartChain(Xaml.Controls.MenuBarItemFlyout ui)
        {
            if (instance == null) instance = new MenuBarItemFlyout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.MenuBarItemFlyout ui;

        public new Xaml.Controls.MenuBarItemFlyout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.MenuBarItemFlyout(MenuBarItemFlyout view) => view?.UI;

        public static implicit operator MenuBarItemFlyout(Xaml.Controls.MenuBarItemFlyout ui) => MenuBarItemFlyout.StartChain(ui);

        public MenuBarItemFlyout Invoke(Action<Xaml.Controls.MenuBarItemFlyout> action) { action?.Invoke(UI); return this; }

        protected MenuBarItemFlyout() { }
    }
}

namespace CSharpMarkup.WinUI // MenuFlyout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.MenuFlyout"/></summary>
        public static MenuFlyout MenuFlyout(params Xaml.Controls.MenuFlyoutItemBase[] Items)
        {
            var ui = new Xaml.Controls.MenuFlyout();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Controls.MenuFlyoutItemBase>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j]);
                else
                    ui.Items.Add(child);
            }
            return CSharpMarkup.WinUI.MenuFlyout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.MenuFlyout"/></summary>
        public static MenuFlyout MenuFlyout()
        {
            var ui = new Xaml.Controls.MenuFlyout();
            return CSharpMarkup.WinUI.MenuFlyout.StartChain(ui);
        }
    }

    public partial class MenuFlyout : FlyoutBase, IUI<Xaml.Controls.MenuFlyout>
    {
        static MenuFlyout instance;

        internal static MenuFlyout StartChain(Xaml.Controls.MenuFlyout ui)
        {
            if (instance == null) instance = new MenuFlyout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.MenuFlyout ui;

        public new Xaml.Controls.MenuFlyout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.MenuFlyout(MenuFlyout view) => view?.UI;

        public static implicit operator MenuFlyout(Xaml.Controls.MenuFlyout ui) => MenuFlyout.StartChain(ui);

        public MenuFlyout Invoke(Action<Xaml.Controls.MenuFlyout> action) { action?.Invoke(UI); return this; }

        protected MenuFlyout() { }
    }

    public static partial class MenuFlyoutExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.MenuFlyout.MenuFlyoutPresenterStyle"/></summary>
        public static TView MenuFlyoutPresenterStyle<TView>(this TView view, Xaml.Style value) where TView : MenuFlyout { view.UI.MenuFlyoutPresenterStyle = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MenuFlyout.MenuFlyoutPresenterStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> MenuFlyoutPresenterStyle<TTarget>(this TTarget target) where TTarget : MenuFlyout
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.MenuFlyout.MenuFlyoutPresenterStyleProperty);
    }
}

namespace CSharpMarkup.WinUI // MenuFlyoutItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.MenuFlyoutItem"/></summary>
        public static MenuFlyoutItem MenuFlyoutItem(string Text)
        {
            var ui = new Xaml.Controls.MenuFlyoutItem();
            if (Text is not null) ui.Text = Text;
            return CSharpMarkup.WinUI.MenuFlyoutItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.MenuFlyoutItem"/></summary>
        public static MenuFlyoutItem MenuFlyoutItem(ICommand Command = default, object CommandParameter = default, Xaml.Controls.IconElement Icon = default, string KeyboardAcceleratorTextOverride = default, string Text = default)
        {
            var ui = new Xaml.Controls.MenuFlyoutItem();
            if (Command is not null) ui.Command = Command;
            if (CommandParameter is not null) ui.CommandParameter = CommandParameter;
            if (Icon is not null) ui.Icon = Icon;
            if (KeyboardAcceleratorTextOverride is not null) ui.KeyboardAcceleratorTextOverride = KeyboardAcceleratorTextOverride;
            if (Text is not null) ui.Text = Text;
            return CSharpMarkup.WinUI.MenuFlyoutItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.MenuFlyoutItem"/></summary>
        public static MenuFlyoutItem MenuFlyoutItem()
        {
            var ui = new Xaml.Controls.MenuFlyoutItem();
            return CSharpMarkup.WinUI.MenuFlyoutItem.StartChain(ui);
        }
    }

    public partial class MenuFlyoutItem : MenuFlyoutItemBase, IUI<Xaml.Controls.MenuFlyoutItem>
    {
        static MenuFlyoutItem instance;

        internal static MenuFlyoutItem StartChain(Xaml.Controls.MenuFlyoutItem ui)
        {
            if (instance == null) instance = new MenuFlyoutItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.MenuFlyoutItem ui;

        public new Xaml.Controls.MenuFlyoutItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(MenuFlyoutItem view) => view?.UI;

        public static implicit operator Xaml.Controls.MenuFlyoutItem(MenuFlyoutItem view) => view?.UI;

        public static implicit operator MenuFlyoutItem(Xaml.Controls.MenuFlyoutItem ui) => MenuFlyoutItem.StartChain(ui);

        public MenuFlyoutItem Invoke(Action<Xaml.Controls.MenuFlyoutItem> action) { action?.Invoke(UI); return this; }

        protected MenuFlyoutItem() { }
    }

    public static partial class MenuFlyoutItemExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.MenuFlyoutItem.Command"/></summary>
        public static TView Command<TView>(this TView view, ICommand value) where TView : MenuFlyoutItem { view.UI.Command = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MenuFlyoutItem.CommandParameter"/></summary>
        public static TView CommandParameter<TView>(this TView view, object value) where TView : MenuFlyoutItem { view.UI.CommandParameter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MenuFlyoutItem.Icon"/></summary>
        public static TView Icon<TView>(this TView view, Xaml.Controls.IconElement value) where TView : MenuFlyoutItem { view.UI.Icon = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MenuFlyoutItem.KeyboardAcceleratorTextOverride"/></summary>
        public static TView KeyboardAcceleratorTextOverride<TView>(this TView view, string value) where TView : MenuFlyoutItem { view.UI.KeyboardAcceleratorTextOverride = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MenuFlyoutItem.CommandParameter"/></summary>
        public static DependencyProperty<TTarget, object> CommandParameter<TTarget>(this TTarget target) where TTarget : MenuFlyoutItem
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.MenuFlyoutItem.CommandParameterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MenuFlyoutItem.Command"/></summary>
        public static DependencyProperty<TTarget, ICommand> Command<TTarget>(this TTarget target) where TTarget : MenuFlyoutItem
        => DependencyProperty<TTarget, ICommand>.Get(target, Xaml.Controls.MenuFlyoutItem.CommandProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MenuFlyoutItem.Icon"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconElement> Icon<TTarget>(this TTarget target) where TTarget : MenuFlyoutItem
        => DependencyProperty<TTarget, Xaml.Controls.IconElement>.Get(target, Xaml.Controls.MenuFlyoutItem.IconProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MenuFlyoutItem.KeyboardAcceleratorTextOverride"/></summary>
        public static DependencyProperty<TTarget, string> KeyboardAcceleratorTextOverride<TTarget>(this TTarget target) where TTarget : MenuFlyoutItem
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.MenuFlyoutItem.KeyboardAcceleratorTextOverrideProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MenuFlyoutItem.Text"/></summary>
        public static DependencyProperty<TTarget, string> Text<TTarget>(this TTarget target) where TTarget : MenuFlyoutItem
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.MenuFlyoutItem.TextProperty);
    }
}

namespace CSharpMarkup.WinUI // MenuFlyoutItemBase
{
    public partial class MenuFlyoutItemBase : Control, IUI<Xaml.Controls.MenuFlyoutItemBase>
    {
        Xaml.Controls.MenuFlyoutItemBase ui;

        public new Xaml.Controls.MenuFlyoutItemBase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public MenuFlyoutItemBase Invoke(Action<Xaml.Controls.MenuFlyoutItemBase> action) { action?.Invoke(UI); return this; }

        protected MenuFlyoutItemBase() { }
    }
}

namespace CSharpMarkup.WinUI // MenuFlyoutPresenter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.MenuFlyoutPresenter"/></summary>
        public static MenuFlyoutPresenter MenuFlyoutPresenter(params UIObject[] Items)
        {
            var ui = new Xaml.Controls.MenuFlyoutPresenter();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<UIObject>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j].UI);
                else
                    ui.Items.Add(child.UI);
            }
            return CSharpMarkup.WinUI.MenuFlyoutPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.MenuFlyoutPresenter"/></summary>
        public static MenuFlyoutPresenter MenuFlyoutPresenter()
        {
            var ui = new Xaml.Controls.MenuFlyoutPresenter();
            return CSharpMarkup.WinUI.MenuFlyoutPresenter.StartChain(ui);
        }
    }

    public partial class MenuFlyoutPresenter : ItemsControl, IUI<Xaml.Controls.MenuFlyoutPresenter>
    {
        static MenuFlyoutPresenter instance;

        internal static MenuFlyoutPresenter StartChain(Xaml.Controls.MenuFlyoutPresenter ui)
        {
            if (instance == null) instance = new MenuFlyoutPresenter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.MenuFlyoutPresenter ui;

        public new Xaml.Controls.MenuFlyoutPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(MenuFlyoutPresenter view) => view?.UI;

        public static implicit operator Xaml.Controls.MenuFlyoutPresenter(MenuFlyoutPresenter view) => view?.UI;

        public static implicit operator MenuFlyoutPresenter(Xaml.Controls.MenuFlyoutPresenter ui) => MenuFlyoutPresenter.StartChain(ui);

        public MenuFlyoutPresenter Invoke(Action<Xaml.Controls.MenuFlyoutPresenter> action) { action?.Invoke(UI); return this; }

        protected MenuFlyoutPresenter() { }
    }

    public static partial class MenuFlyoutPresenterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.MenuFlyoutPresenter.IsDefaultShadowEnabled"/></summary>
        public static TView IsDefaultShadowEnabled<TView>(this TView view, bool value) where TView : MenuFlyoutPresenter { view.UI.IsDefaultShadowEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MenuFlyoutPresenter.SystemBackdrop"/></summary>
        public static TView SystemBackdrop<TView>(this TView view, Xaml.Media.SystemBackdrop value) where TView : MenuFlyoutPresenter { view.UI.SystemBackdrop = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MenuFlyoutPresenter.IsDefaultShadowEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsDefaultShadowEnabled<TTarget>(this TTarget target) where TTarget : MenuFlyoutPresenter
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.MenuFlyoutPresenter.IsDefaultShadowEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MenuFlyoutPresenter.SystemBackdrop"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.SystemBackdrop> SystemBackdrop<TTarget>(this TTarget target) where TTarget : MenuFlyoutPresenter
        => DependencyProperty<TTarget, Xaml.Media.SystemBackdrop>.Get(target, Xaml.Controls.MenuFlyoutPresenter.SystemBackdropProperty);
    }
}

namespace CSharpMarkup.WinUI // MenuFlyoutSeparator
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.MenuFlyoutSeparator"/></summary>
        public static MenuFlyoutSeparator MenuFlyoutSeparator()
        {
            var ui = new Xaml.Controls.MenuFlyoutSeparator();
            return CSharpMarkup.WinUI.MenuFlyoutSeparator.StartChain(ui);
        }
    }

    public partial class MenuFlyoutSeparator : MenuFlyoutItemBase, IUI<Xaml.Controls.MenuFlyoutSeparator>
    {
        static MenuFlyoutSeparator instance;

        internal static MenuFlyoutSeparator StartChain(Xaml.Controls.MenuFlyoutSeparator ui)
        {
            if (instance == null) instance = new MenuFlyoutSeparator();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.MenuFlyoutSeparator ui;

        public new Xaml.Controls.MenuFlyoutSeparator UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(MenuFlyoutSeparator view) => view?.UI;

        public static implicit operator Xaml.Controls.MenuFlyoutSeparator(MenuFlyoutSeparator view) => view?.UI;

        public static implicit operator MenuFlyoutSeparator(Xaml.Controls.MenuFlyoutSeparator ui) => MenuFlyoutSeparator.StartChain(ui);

        public MenuFlyoutSeparator Invoke(Action<Xaml.Controls.MenuFlyoutSeparator> action) { action?.Invoke(UI); return this; }

        protected MenuFlyoutSeparator() { }
    }
}

namespace CSharpMarkup.WinUI // MenuFlyoutSubItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.MenuFlyoutSubItem"/></summary>
        public static MenuFlyoutSubItem MenuFlyoutSubItem(params Xaml.Controls.MenuFlyoutItemBase[] Items)
        {
            var ui = new Xaml.Controls.MenuFlyoutSubItem();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Controls.MenuFlyoutItemBase>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j]);
                else
                    ui.Items.Add(child);
            }
            return CSharpMarkup.WinUI.MenuFlyoutSubItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.MenuFlyoutSubItem"/></summary>
        public static MenuFlyoutSubItem MenuFlyoutSubItem()
        {
            var ui = new Xaml.Controls.MenuFlyoutSubItem();
            return CSharpMarkup.WinUI.MenuFlyoutSubItem.StartChain(ui);
        }
    }

    public partial class MenuFlyoutSubItem : MenuFlyoutItemBase, IUI<Xaml.Controls.MenuFlyoutSubItem>
    {
        static MenuFlyoutSubItem instance;

        internal static MenuFlyoutSubItem StartChain(Xaml.Controls.MenuFlyoutSubItem ui)
        {
            if (instance == null) instance = new MenuFlyoutSubItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.MenuFlyoutSubItem ui;

        public new Xaml.Controls.MenuFlyoutSubItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(MenuFlyoutSubItem view) => view?.UI;

        public static implicit operator Xaml.Controls.MenuFlyoutSubItem(MenuFlyoutSubItem view) => view?.UI;

        public static implicit operator MenuFlyoutSubItem(Xaml.Controls.MenuFlyoutSubItem ui) => MenuFlyoutSubItem.StartChain(ui);

        public MenuFlyoutSubItem Invoke(Action<Xaml.Controls.MenuFlyoutSubItem> action) { action?.Invoke(UI); return this; }

        protected MenuFlyoutSubItem() { }
    }

    public static partial class MenuFlyoutSubItemExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.MenuFlyoutSubItem.Icon"/></summary>
        public static TView Icon<TView>(this TView view, Xaml.Controls.IconElement value) where TView : MenuFlyoutSubItem { view.UI.Icon = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.MenuFlyoutSubItem.Text"/></summary>
        public static TView Text<TView>(this TView view, string value) where TView : MenuFlyoutSubItem { view.UI.Text = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MenuFlyoutSubItem.Icon"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconElement> Icon<TTarget>(this TTarget target) where TTarget : MenuFlyoutSubItem
        => DependencyProperty<TTarget, Xaml.Controls.IconElement>.Get(target, Xaml.Controls.MenuFlyoutSubItem.IconProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.MenuFlyoutSubItem.Text"/></summary>
        public static DependencyProperty<TTarget, string> Text<TTarget>(this TTarget target) where TTarget : MenuFlyoutSubItem
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.MenuFlyoutSubItem.TextProperty);
    }
}

namespace CSharpMarkup.WinUI // NavigationView
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.NavigationView"/></summary>
        public static NavigationView NavigationView(UIObject Content)
        {
            var ui = new Xaml.Controls.NavigationView();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.NavigationView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.NavigationView"/></summary>
        public static NavigationView NavigationView(bool? AlwaysShowHeader = default, Xaml.Controls.AutoSuggestBox AutoSuggestBox = default, double? CompactModeThresholdWidth = default, double? CompactPaneLength = default, Xaml.UIElement ContentOverlay = default, double? ExpandedModeThresholdWidth = default, object FooterMenuItemsSource = default, object Header = default, Xaml.DataTemplate HeaderTemplate = default, Xaml.Controls.NavigationViewBackButtonVisible? IsBackButtonVisible = default, bool? IsBackEnabled = default, bool? IsPaneOpen = default, bool? IsPaneToggleButtonVisible = default, bool? IsPaneVisible = default, bool? IsSettingsVisible = default, bool? IsTitleBarAutoPaddingEnabled = default, Xaml.Style MenuItemContainerStyle = default, Xaml.Controls.StyleSelector MenuItemContainerStyleSelector = default, object MenuItemsSource = default, Xaml.DataTemplate MenuItemTemplate = default, Xaml.Controls.DataTemplateSelector MenuItemTemplateSelector = default, double? OpenPaneLength = default, Xaml.Controls.NavigationViewOverflowLabelMode? OverflowLabelMode = default, Xaml.UIElement PaneCustomContent = default, Xaml.Controls.NavigationViewPaneDisplayMode? PaneDisplayMode = default, Xaml.UIElement PaneFooter = default, Xaml.UIElement PaneHeader = default, string PaneTitle = default, Xaml.Style PaneToggleButtonStyle = default, object SelectedItem = default, Xaml.Controls.NavigationViewSelectionFollowsFocus? SelectionFollowsFocus = default, Xaml.Controls.NavigationViewShoulderNavigationEnabled? ShoulderNavigationEnabled = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.NavigationView();
            if (AlwaysShowHeader is not null) ui.AlwaysShowHeader = AlwaysShowHeader.Value;
            if (AutoSuggestBox is not null) ui.AutoSuggestBox = AutoSuggestBox;
            if (CompactModeThresholdWidth is not null) ui.CompactModeThresholdWidth = CompactModeThresholdWidth.Value;
            if (CompactPaneLength is not null) ui.CompactPaneLength = CompactPaneLength.Value;
            if (ContentOverlay is not null) ui.ContentOverlay = ContentOverlay;
            if (ExpandedModeThresholdWidth is not null) ui.ExpandedModeThresholdWidth = ExpandedModeThresholdWidth.Value;
            if (FooterMenuItemsSource is not null) ui.FooterMenuItemsSource = FooterMenuItemsSource;
            if (Header is not null) ui.Header = Header;
            if (HeaderTemplate is not null) ui.HeaderTemplate = HeaderTemplate;
            if (IsBackButtonVisible is not null) ui.IsBackButtonVisible = IsBackButtonVisible.Value;
            if (IsBackEnabled is not null) ui.IsBackEnabled = IsBackEnabled.Value;
            if (IsPaneOpen is not null) ui.IsPaneOpen = IsPaneOpen.Value;
            if (IsPaneToggleButtonVisible is not null) ui.IsPaneToggleButtonVisible = IsPaneToggleButtonVisible.Value;
            if (IsPaneVisible is not null) ui.IsPaneVisible = IsPaneVisible.Value;
            if (IsSettingsVisible is not null) ui.IsSettingsVisible = IsSettingsVisible.Value;
            if (IsTitleBarAutoPaddingEnabled is not null) ui.IsTitleBarAutoPaddingEnabled = IsTitleBarAutoPaddingEnabled.Value;
            if (MenuItemContainerStyle is not null) ui.MenuItemContainerStyle = MenuItemContainerStyle;
            if (MenuItemContainerStyleSelector is not null) ui.MenuItemContainerStyleSelector = MenuItemContainerStyleSelector;
            if (MenuItemsSource is not null) ui.MenuItemsSource = MenuItemsSource;
            if (MenuItemTemplate is not null) ui.MenuItemTemplate = MenuItemTemplate;
            if (MenuItemTemplateSelector is not null) ui.MenuItemTemplateSelector = MenuItemTemplateSelector;
            if (OpenPaneLength is not null) ui.OpenPaneLength = OpenPaneLength.Value;
            if (OverflowLabelMode is not null) ui.OverflowLabelMode = OverflowLabelMode.Value;
            if (PaneCustomContent is not null) ui.PaneCustomContent = PaneCustomContent;
            if (PaneDisplayMode is not null) ui.PaneDisplayMode = PaneDisplayMode.Value;
            if (PaneFooter is not null) ui.PaneFooter = PaneFooter;
            if (PaneHeader is not null) ui.PaneHeader = PaneHeader;
            if (PaneTitle is not null) ui.PaneTitle = PaneTitle;
            if (PaneToggleButtonStyle is not null) ui.PaneToggleButtonStyle = PaneToggleButtonStyle;
            if (SelectedItem is not null) ui.SelectedItem = SelectedItem;
            if (SelectionFollowsFocus is not null) ui.SelectionFollowsFocus = SelectionFollowsFocus.Value;
            if (ShoulderNavigationEnabled is not null) ui.ShoulderNavigationEnabled = ShoulderNavigationEnabled.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.NavigationView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.NavigationView"/></summary>
        public static NavigationView NavigationView()
        {
            var ui = new Xaml.Controls.NavigationView();
            return CSharpMarkup.WinUI.NavigationView.StartChain(ui);
        }
    }

    public partial class NavigationView : ContentControl, IUI<Xaml.Controls.NavigationView>
    {
        static NavigationView instance;

        internal static NavigationView StartChain(Xaml.Controls.NavigationView ui)
        {
            if (instance == null) instance = new NavigationView();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.NavigationView ui;

        public new Xaml.Controls.NavigationView UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(NavigationView view) => view?.UI;

        public static implicit operator Xaml.Controls.NavigationView(NavigationView view) => view?.UI;

        public static implicit operator NavigationView(Xaml.Controls.NavigationView ui) => NavigationView.StartChain(ui);

        public NavigationView Invoke(Action<Xaml.Controls.NavigationView> action) { action?.Invoke(UI); return this; }

        protected NavigationView() { }
    }

    public static partial class NavigationViewExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.NavigationView.AlwaysShowHeader"/></summary>
        public static TView AlwaysShowHeader<TView>(this TView view, bool value) where TView : NavigationView { view.UI.AlwaysShowHeader = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.AutoSuggestBox"/></summary>
        public static TView AutoSuggestBox<TView>(this TView view, Xaml.Controls.AutoSuggestBox value) where TView : NavigationView { view.UI.AutoSuggestBox = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.CompactModeThresholdWidth"/></summary>
        public static TView CompactModeThresholdWidth<TView>(this TView view, double value) where TView : NavigationView { view.UI.CompactModeThresholdWidth = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.CompactPaneLength"/></summary>
        public static TView CompactPaneLength<TView>(this TView view, double value) where TView : NavigationView { view.UI.CompactPaneLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.ContentOverlay"/></summary>
        public static TView ContentOverlay<TView>(this TView view, Xaml.UIElement value) where TView : NavigationView { view.UI.ContentOverlay = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.ExpandedModeThresholdWidth"/></summary>
        public static TView ExpandedModeThresholdWidth<TView>(this TView view, double value) where TView : NavigationView { view.UI.ExpandedModeThresholdWidth = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.FooterMenuItemsSource"/></summary>
        public static TView FooterMenuItemsSource<TView>(this TView view, object value) where TView : NavigationView { view.UI.FooterMenuItemsSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : NavigationView { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : NavigationView { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.IsBackButtonVisible"/></summary>
        public static TView IsBackButtonVisible<TView>(this TView view, Xaml.Controls.NavigationViewBackButtonVisible value) where TView : NavigationView { view.UI.IsBackButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.IsBackEnabled"/></summary>
        public static TView IsBackEnabled<TView>(this TView view, bool value) where TView : NavigationView { view.UI.IsBackEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.IsPaneOpen"/></summary>
        public static TView IsPaneOpen<TView>(this TView view, bool value) where TView : NavigationView { view.UI.IsPaneOpen = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.IsPaneToggleButtonVisible"/></summary>
        public static TView IsPaneToggleButtonVisible<TView>(this TView view, bool value) where TView : NavigationView { view.UI.IsPaneToggleButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.IsPaneVisible"/></summary>
        public static TView IsPaneVisible<TView>(this TView view, bool value) where TView : NavigationView { view.UI.IsPaneVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.IsSettingsVisible"/></summary>
        public static TView IsSettingsVisible<TView>(this TView view, bool value) where TView : NavigationView { view.UI.IsSettingsVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.IsTitleBarAutoPaddingEnabled"/></summary>
        public static TView IsTitleBarAutoPaddingEnabled<TView>(this TView view, bool value) where TView : NavigationView { view.UI.IsTitleBarAutoPaddingEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.MenuItemContainerStyle"/></summary>
        public static TView MenuItemContainerStyle<TView>(this TView view, Xaml.Style value) where TView : NavigationView { view.UI.MenuItemContainerStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.MenuItemContainerStyleSelector"/></summary>
        public static TView MenuItemContainerStyleSelector<TView>(this TView view, Xaml.Controls.StyleSelector value) where TView : NavigationView { view.UI.MenuItemContainerStyleSelector = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.MenuItemsSource"/></summary>
        public static TView MenuItemsSource<TView>(this TView view, object value) where TView : NavigationView { view.UI.MenuItemsSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.MenuItemTemplate"/></summary>
        public static TView MenuItemTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : NavigationView { view.UI.MenuItemTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.MenuItemTemplateSelector"/></summary>
        public static TView MenuItemTemplateSelector<TView>(this TView view, Xaml.Controls.DataTemplateSelector value) where TView : NavigationView { view.UI.MenuItemTemplateSelector = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.OpenPaneLength"/></summary>
        public static TView OpenPaneLength<TView>(this TView view, double value) where TView : NavigationView { view.UI.OpenPaneLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.OverflowLabelMode"/></summary>
        public static TView OverflowLabelMode<TView>(this TView view, Xaml.Controls.NavigationViewOverflowLabelMode value) where TView : NavigationView { view.UI.OverflowLabelMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.PaneCustomContent"/></summary>
        public static TView PaneCustomContent<TView>(this TView view, Xaml.UIElement value) where TView : NavigationView { view.UI.PaneCustomContent = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.PaneDisplayMode"/></summary>
        public static TView PaneDisplayMode<TView>(this TView view, Xaml.Controls.NavigationViewPaneDisplayMode value) where TView : NavigationView { view.UI.PaneDisplayMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.PaneFooter"/></summary>
        public static TView PaneFooter<TView>(this TView view, Xaml.UIElement value) where TView : NavigationView { view.UI.PaneFooter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.PaneHeader"/></summary>
        public static TView PaneHeader<TView>(this TView view, Xaml.UIElement value) where TView : NavigationView { view.UI.PaneHeader = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.PaneTitle"/></summary>
        public static TView PaneTitle<TView>(this TView view, string value) where TView : NavigationView { view.UI.PaneTitle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.PaneToggleButtonStyle"/></summary>
        public static TView PaneToggleButtonStyle<TView>(this TView view, Xaml.Style value) where TView : NavigationView { view.UI.PaneToggleButtonStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.SelectedItem"/></summary>
        public static TView SelectedItem<TView>(this TView view, object value) where TView : NavigationView { view.UI.SelectedItem = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.SelectionFollowsFocus"/></summary>
        public static TView SelectionFollowsFocus<TView>(this TView view, Xaml.Controls.NavigationViewSelectionFollowsFocus value) where TView : NavigationView { view.UI.SelectionFollowsFocus = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationView.ShoulderNavigationEnabled"/></summary>
        public static TView ShoulderNavigationEnabled<TView>(this TView view, Xaml.Controls.NavigationViewShoulderNavigationEnabled value) where TView : NavigationView { view.UI.ShoulderNavigationEnabled = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.AlwaysShowHeader"/></summary>
        public static DependencyProperty<TTarget, bool> AlwaysShowHeader<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NavigationView.AlwaysShowHeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.AutoSuggestBox"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.AutoSuggestBox> AutoSuggestBox<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.Controls.AutoSuggestBox>.Get(target, Xaml.Controls.NavigationView.AutoSuggestBoxProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.CompactModeThresholdWidth"/></summary>
        public static DependencyProperty<TTarget, double> CompactModeThresholdWidth<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.NavigationView.CompactModeThresholdWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.CompactPaneLength"/></summary>
        public static DependencyProperty<TTarget, double> CompactPaneLength<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.NavigationView.CompactPaneLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.ContentOverlay"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> ContentOverlay<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.NavigationView.ContentOverlayProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.DisplayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.NavigationViewDisplayMode> DisplayMode<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.Controls.NavigationViewDisplayMode>.Get(target, Xaml.Controls.NavigationView.DisplayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.ExpandedModeThresholdWidth"/></summary>
        public static DependencyProperty<TTarget, double> ExpandedModeThresholdWidth<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.NavigationView.ExpandedModeThresholdWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.FooterMenuItems"/></summary>
        public static DependencyProperty<TTarget, IList<object>> FooterMenuItems<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, IList<object>>.Get(target, Xaml.Controls.NavigationView.FooterMenuItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.FooterMenuItemsSource"/></summary>
        public static DependencyProperty<TTarget, object> FooterMenuItemsSource<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.NavigationView.FooterMenuItemsSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.NavigationView.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.NavigationView.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.IsBackButtonVisible"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.NavigationViewBackButtonVisible> IsBackButtonVisible<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.Controls.NavigationViewBackButtonVisible>.Get(target, Xaml.Controls.NavigationView.IsBackButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.IsBackEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsBackEnabled<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NavigationView.IsBackEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.IsPaneOpen"/></summary>
        public static DependencyProperty<TTarget, bool> IsPaneOpen<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NavigationView.IsPaneOpenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.IsPaneToggleButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsPaneToggleButtonVisible<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NavigationView.IsPaneToggleButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.IsPaneVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsPaneVisible<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NavigationView.IsPaneVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.IsSettingsVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsSettingsVisible<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NavigationView.IsSettingsVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.IsTitleBarAutoPaddingEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsTitleBarAutoPaddingEnabled<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NavigationView.IsTitleBarAutoPaddingEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.MenuItemContainerStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> MenuItemContainerStyle<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.NavigationView.MenuItemContainerStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.MenuItemContainerStyleSelector"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.StyleSelector> MenuItemContainerStyleSelector<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.Controls.StyleSelector>.Get(target, Xaml.Controls.NavigationView.MenuItemContainerStyleSelectorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.MenuItems"/></summary>
        public static DependencyProperty<TTarget, IList<object>> MenuItems<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, IList<object>>.Get(target, Xaml.Controls.NavigationView.MenuItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.MenuItemsSource"/></summary>
        public static DependencyProperty<TTarget, object> MenuItemsSource<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.NavigationView.MenuItemsSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.MenuItemTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> MenuItemTemplate<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.NavigationView.MenuItemTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.MenuItemTemplateSelector"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.DataTemplateSelector> MenuItemTemplateSelector<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.Controls.DataTemplateSelector>.Get(target, Xaml.Controls.NavigationView.MenuItemTemplateSelectorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.OpenPaneLength"/></summary>
        public static DependencyProperty<TTarget, double> OpenPaneLength<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.NavigationView.OpenPaneLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.OverflowLabelMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.NavigationViewOverflowLabelMode> OverflowLabelMode<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.Controls.NavigationViewOverflowLabelMode>.Get(target, Xaml.Controls.NavigationView.OverflowLabelModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.PaneCustomContent"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> PaneCustomContent<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.NavigationView.PaneCustomContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.PaneDisplayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.NavigationViewPaneDisplayMode> PaneDisplayMode<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.Controls.NavigationViewPaneDisplayMode>.Get(target, Xaml.Controls.NavigationView.PaneDisplayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.PaneFooter"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> PaneFooter<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.NavigationView.PaneFooterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.PaneHeader"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> PaneHeader<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.NavigationView.PaneHeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.PaneTitle"/></summary>
        public static DependencyProperty<TTarget, string> PaneTitle<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.NavigationView.PaneTitleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.PaneToggleButtonStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> PaneToggleButtonStyle<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.NavigationView.PaneToggleButtonStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.SelectedItem"/></summary>
        public static DependencyProperty<TTarget, object> SelectedItem<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.NavigationView.SelectedItemProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.SelectionFollowsFocus"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.NavigationViewSelectionFollowsFocus> SelectionFollowsFocus<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.Controls.NavigationViewSelectionFollowsFocus>.Get(target, Xaml.Controls.NavigationView.SelectionFollowsFocusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.SettingsItem"/></summary>
        public static DependencyProperty<TTarget, object> SettingsItem<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.NavigationView.SettingsItemProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.ShoulderNavigationEnabled"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.NavigationViewShoulderNavigationEnabled> ShoulderNavigationEnabled<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.Controls.NavigationViewShoulderNavigationEnabled>.Get(target, Xaml.Controls.NavigationView.ShoulderNavigationEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationView.TemplateSettings"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.NavigationViewTemplateSettings> TemplateSettings<TTarget>(this TTarget target) where TTarget : NavigationView
        => DependencyProperty<TTarget, Xaml.Controls.NavigationViewTemplateSettings>.Get(target, Xaml.Controls.NavigationView.TemplateSettingsProperty);
    }
}

namespace CSharpMarkup.WinUI // NavigationViewItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.NavigationViewItem"/></summary>
        public static NavigationViewItem NavigationViewItem(UIObject Content)
        {
            var ui = new Xaml.Controls.NavigationViewItem();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.NavigationViewItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.NavigationViewItem"/></summary>
        public static NavigationViewItem NavigationViewItem(bool? HasUnrealizedChildren = default, Xaml.Controls.IconElement Icon = default, Xaml.Controls.InfoBadge InfoBadge = default, bool? IsChildSelected = default, bool? IsExpanded = default, object MenuItemsSource = default, bool? SelectsOnInvoked = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.NavigationViewItem();
            if (HasUnrealizedChildren is not null) ui.HasUnrealizedChildren = HasUnrealizedChildren.Value;
            if (Icon is not null) ui.Icon = Icon;
            if (InfoBadge is not null) ui.InfoBadge = InfoBadge;
            if (IsChildSelected is not null) ui.IsChildSelected = IsChildSelected.Value;
            if (IsExpanded is not null) ui.IsExpanded = IsExpanded.Value;
            if (MenuItemsSource is not null) ui.MenuItemsSource = MenuItemsSource;
            if (SelectsOnInvoked is not null) ui.SelectsOnInvoked = SelectsOnInvoked.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.NavigationViewItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.NavigationViewItem"/></summary>
        public static NavigationViewItem NavigationViewItem()
        {
            var ui = new Xaml.Controls.NavigationViewItem();
            return CSharpMarkup.WinUI.NavigationViewItem.StartChain(ui);
        }
    }

    public partial class NavigationViewItem : NavigationViewItemBase, IUI<Xaml.Controls.NavigationViewItem>
    {
        static NavigationViewItem instance;

        internal static NavigationViewItem StartChain(Xaml.Controls.NavigationViewItem ui)
        {
            if (instance == null) instance = new NavigationViewItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.NavigationViewItem ui;

        public new Xaml.Controls.NavigationViewItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(NavigationViewItem view) => view?.UI;

        public static implicit operator Xaml.Controls.NavigationViewItem(NavigationViewItem view) => view?.UI;

        public static implicit operator NavigationViewItem(Xaml.Controls.NavigationViewItem ui) => NavigationViewItem.StartChain(ui);

        public NavigationViewItem Invoke(Action<Xaml.Controls.NavigationViewItem> action) { action?.Invoke(UI); return this; }

        protected NavigationViewItem() { }
    }

    public static partial class NavigationViewItemExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.NavigationViewItem.HasUnrealizedChildren"/></summary>
        public static TView HasUnrealizedChildren<TView>(this TView view, bool value) where TView : NavigationViewItem { view.UI.HasUnrealizedChildren = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationViewItem.Icon"/></summary>
        public static TView Icon<TView>(this TView view, Xaml.Controls.IconElement value) where TView : NavigationViewItem { view.UI.Icon = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationViewItem.InfoBadge"/></summary>
        public static TView InfoBadge<TView>(this TView view, Xaml.Controls.InfoBadge value) where TView : NavigationViewItem { view.UI.InfoBadge = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationViewItem.IsChildSelected"/></summary>
        public static TView IsChildSelected<TView>(this TView view, bool value) where TView : NavigationViewItem { view.UI.IsChildSelected = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationViewItem.IsExpanded"/></summary>
        public static TView IsExpanded<TView>(this TView view, bool value) where TView : NavigationViewItem { view.UI.IsExpanded = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationViewItem.MenuItemsSource"/></summary>
        public static TView MenuItemsSource<TView>(this TView view, object value) where TView : NavigationViewItem { view.UI.MenuItemsSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NavigationViewItem.SelectsOnInvoked"/></summary>
        public static TView SelectsOnInvoked<TView>(this TView view, bool value) where TView : NavigationViewItem { view.UI.SelectsOnInvoked = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewItem.CompactPaneLength"/></summary>
        public static DependencyProperty<TTarget, double> CompactPaneLength<TTarget>(this TTarget target) where TTarget : NavigationViewItem
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.NavigationViewItem.CompactPaneLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewItem.HasUnrealizedChildren"/></summary>
        public static DependencyProperty<TTarget, bool> HasUnrealizedChildren<TTarget>(this TTarget target) where TTarget : NavigationViewItem
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NavigationViewItem.HasUnrealizedChildrenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewItem.Icon"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconElement> Icon<TTarget>(this TTarget target) where TTarget : NavigationViewItem
        => DependencyProperty<TTarget, Xaml.Controls.IconElement>.Get(target, Xaml.Controls.NavigationViewItem.IconProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewItem.InfoBadge"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.InfoBadge> InfoBadge<TTarget>(this TTarget target) where TTarget : NavigationViewItem
        => DependencyProperty<TTarget, Xaml.Controls.InfoBadge>.Get(target, Xaml.Controls.NavigationViewItem.InfoBadgeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewItem.IsChildSelected"/></summary>
        public static DependencyProperty<TTarget, bool> IsChildSelected<TTarget>(this TTarget target) where TTarget : NavigationViewItem
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NavigationViewItem.IsChildSelectedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewItem.IsExpanded"/></summary>
        public static DependencyProperty<TTarget, bool> IsExpanded<TTarget>(this TTarget target) where TTarget : NavigationViewItem
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NavigationViewItem.IsExpandedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewItem.MenuItems"/></summary>
        public static DependencyProperty<TTarget, IList<object>> MenuItems<TTarget>(this TTarget target) where TTarget : NavigationViewItem
        => DependencyProperty<TTarget, IList<object>>.Get(target, Xaml.Controls.NavigationViewItem.MenuItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewItem.MenuItemsSource"/></summary>
        public static DependencyProperty<TTarget, object> MenuItemsSource<TTarget>(this TTarget target) where TTarget : NavigationViewItem
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.NavigationViewItem.MenuItemsSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewItem.SelectsOnInvoked"/></summary>
        public static DependencyProperty<TTarget, bool> SelectsOnInvoked<TTarget>(this TTarget target) where TTarget : NavigationViewItem
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NavigationViewItem.SelectsOnInvokedProperty);
    }
}

namespace CSharpMarkup.WinUI // NavigationViewItemBase
{
    public partial class NavigationViewItemBase : ContentControl, IUI<Xaml.Controls.NavigationViewItemBase>
    {
        Xaml.Controls.NavigationViewItemBase ui;

        public new Xaml.Controls.NavigationViewItemBase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public NavigationViewItemBase Invoke(Action<Xaml.Controls.NavigationViewItemBase> action) { action?.Invoke(UI); return this; }

        protected NavigationViewItemBase() { }
    }

    public static partial class NavigationViewItemBaseExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.NavigationViewItemBase.IsSelected"/></summary>
        public static TView IsSelected<TView>(this TView view, bool value) where TView : NavigationViewItemBase { view.UI.IsSelected = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewItemBase.IsSelected"/></summary>
        public static DependencyProperty<TTarget, bool> IsSelected<TTarget>(this TTarget target) where TTarget : NavigationViewItemBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NavigationViewItemBase.IsSelectedProperty);
    }
}

namespace CSharpMarkup.WinUI // NavigationViewItemHeader
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.NavigationViewItemHeader"/></summary>
        public static NavigationViewItemHeader NavigationViewItemHeader(UIObject Content)
        {
            var ui = new Xaml.Controls.NavigationViewItemHeader();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.NavigationViewItemHeader.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.NavigationViewItemHeader"/></summary>
        public static NavigationViewItemHeader NavigationViewItemHeader()
        {
            var ui = new Xaml.Controls.NavigationViewItemHeader();
            return CSharpMarkup.WinUI.NavigationViewItemHeader.StartChain(ui);
        }
    }

    public partial class NavigationViewItemHeader : NavigationViewItemBase, IUI<Xaml.Controls.NavigationViewItemHeader>
    {
        static NavigationViewItemHeader instance;

        internal static NavigationViewItemHeader StartChain(Xaml.Controls.NavigationViewItemHeader ui)
        {
            if (instance == null) instance = new NavigationViewItemHeader();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.NavigationViewItemHeader ui;

        public new Xaml.Controls.NavigationViewItemHeader UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(NavigationViewItemHeader view) => view?.UI;

        public static implicit operator Xaml.Controls.NavigationViewItemHeader(NavigationViewItemHeader view) => view?.UI;

        public static implicit operator NavigationViewItemHeader(Xaml.Controls.NavigationViewItemHeader ui) => NavigationViewItemHeader.StartChain(ui);

        public NavigationViewItemHeader Invoke(Action<Xaml.Controls.NavigationViewItemHeader> action) { action?.Invoke(UI); return this; }

        protected NavigationViewItemHeader() { }
    }
}

namespace CSharpMarkup.WinUI // NavigationViewItemSeparator
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.NavigationViewItemSeparator"/></summary>
        public static NavigationViewItemSeparator NavigationViewItemSeparator(UIObject Content)
        {
            var ui = new Xaml.Controls.NavigationViewItemSeparator();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.NavigationViewItemSeparator.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.NavigationViewItemSeparator"/></summary>
        public static NavigationViewItemSeparator NavigationViewItemSeparator()
        {
            var ui = new Xaml.Controls.NavigationViewItemSeparator();
            return CSharpMarkup.WinUI.NavigationViewItemSeparator.StartChain(ui);
        }
    }

    public partial class NavigationViewItemSeparator : NavigationViewItemBase, IUI<Xaml.Controls.NavigationViewItemSeparator>
    {
        static NavigationViewItemSeparator instance;

        internal static NavigationViewItemSeparator StartChain(Xaml.Controls.NavigationViewItemSeparator ui)
        {
            if (instance == null) instance = new NavigationViewItemSeparator();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.NavigationViewItemSeparator ui;

        public new Xaml.Controls.NavigationViewItemSeparator UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(NavigationViewItemSeparator view) => view?.UI;

        public static implicit operator Xaml.Controls.NavigationViewItemSeparator(NavigationViewItemSeparator view) => view?.UI;

        public static implicit operator NavigationViewItemSeparator(Xaml.Controls.NavigationViewItemSeparator ui) => NavigationViewItemSeparator.StartChain(ui);

        public NavigationViewItemSeparator Invoke(Action<Xaml.Controls.NavigationViewItemSeparator> action) { action?.Invoke(UI); return this; }

        protected NavigationViewItemSeparator() { }
    }
}

namespace CSharpMarkup.WinUI // NavigationViewTemplateSettings
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.NavigationViewTemplateSettings"/></summary>
        public static NavigationViewTemplateSettings NavigationViewTemplateSettings()
        {
            var ui = new Xaml.Controls.NavigationViewTemplateSettings();
            return CSharpMarkup.WinUI.NavigationViewTemplateSettings.StartChain(ui);
        }
    }

    public partial class NavigationViewTemplateSettings : DependencyObject, IUI<Xaml.Controls.NavigationViewTemplateSettings>
    {
        static NavigationViewTemplateSettings instance;

        internal static NavigationViewTemplateSettings StartChain(Xaml.Controls.NavigationViewTemplateSettings ui)
        {
            if (instance == null) instance = new NavigationViewTemplateSettings();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.NavigationViewTemplateSettings ui;

        public new Xaml.Controls.NavigationViewTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.NavigationViewTemplateSettings(NavigationViewTemplateSettings view) => view?.UI;

        public static implicit operator NavigationViewTemplateSettings(Xaml.Controls.NavigationViewTemplateSettings ui) => NavigationViewTemplateSettings.StartChain(ui);

        public NavigationViewTemplateSettings Invoke(Action<Xaml.Controls.NavigationViewTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected NavigationViewTemplateSettings() { }
    }

    public static partial class NavigationViewTemplateSettingsExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewTemplateSettings.BackButtonVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Visibility> BackButtonVisibility<TTarget>(this TTarget target) where TTarget : NavigationViewTemplateSettings
        => DependencyProperty<TTarget, Xaml.Visibility>.Get(target, Xaml.Controls.NavigationViewTemplateSettings.BackButtonVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewTemplateSettings.LeftPaneVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Visibility> LeftPaneVisibility<TTarget>(this TTarget target) where TTarget : NavigationViewTemplateSettings
        => DependencyProperty<TTarget, Xaml.Visibility>.Get(target, Xaml.Controls.NavigationViewTemplateSettings.LeftPaneVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewTemplateSettings.OpenPaneLength"/></summary>
        public static DependencyProperty<TTarget, double> OpenPaneLength<TTarget>(this TTarget target) where TTarget : NavigationViewTemplateSettings
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.NavigationViewTemplateSettings.OpenPaneLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewTemplateSettings.OverflowButtonVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Visibility> OverflowButtonVisibility<TTarget>(this TTarget target) where TTarget : NavigationViewTemplateSettings
        => DependencyProperty<TTarget, Xaml.Visibility>.Get(target, Xaml.Controls.NavigationViewTemplateSettings.OverflowButtonVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewTemplateSettings.PaneToggleButtonVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Visibility> PaneToggleButtonVisibility<TTarget>(this TTarget target) where TTarget : NavigationViewTemplateSettings
        => DependencyProperty<TTarget, Xaml.Visibility>.Get(target, Xaml.Controls.NavigationViewTemplateSettings.PaneToggleButtonVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewTemplateSettings.PaneToggleButtonWidth"/></summary>
        public static DependencyProperty<TTarget, double> PaneToggleButtonWidth<TTarget>(this TTarget target) where TTarget : NavigationViewTemplateSettings
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.NavigationViewTemplateSettings.PaneToggleButtonWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewTemplateSettings.SingleSelectionFollowsFocus"/></summary>
        public static DependencyProperty<TTarget, bool> SingleSelectionFollowsFocus<TTarget>(this TTarget target) where TTarget : NavigationViewTemplateSettings
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NavigationViewTemplateSettings.SingleSelectionFollowsFocusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewTemplateSettings.SmallerPaneToggleButtonWidth"/></summary>
        public static DependencyProperty<TTarget, double> SmallerPaneToggleButtonWidth<TTarget>(this TTarget target) where TTarget : NavigationViewTemplateSettings
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.NavigationViewTemplateSettings.SmallerPaneToggleButtonWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewTemplateSettings.TopPadding"/></summary>
        public static DependencyProperty<TTarget, double> TopPadding<TTarget>(this TTarget target) where TTarget : NavigationViewTemplateSettings
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.NavigationViewTemplateSettings.TopPaddingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NavigationViewTemplateSettings.TopPaneVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Visibility> TopPaneVisibility<TTarget>(this TTarget target) where TTarget : NavigationViewTemplateSettings
        => DependencyProperty<TTarget, Xaml.Visibility>.Get(target, Xaml.Controls.NavigationViewTemplateSettings.TopPaneVisibilityProperty);
    }
}

namespace CSharpMarkup.WinUI // NonVirtualizingLayout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.NonVirtualizingLayout"/></summary>
        public static NonVirtualizingLayout NonVirtualizingLayout()
        {
            var ui = new Xaml.Controls.NonVirtualizingLayout();
            return CSharpMarkup.WinUI.NonVirtualizingLayout.StartChain(ui);
        }
    }

    public partial class NonVirtualizingLayout : Layout, IUI<Xaml.Controls.NonVirtualizingLayout>
    {
        static NonVirtualizingLayout instance;

        internal static NonVirtualizingLayout StartChain(Xaml.Controls.NonVirtualizingLayout ui)
        {
            if (instance == null) instance = new NonVirtualizingLayout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.NonVirtualizingLayout ui;

        public new Xaml.Controls.NonVirtualizingLayout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.NonVirtualizingLayout(NonVirtualizingLayout view) => view?.UI;

        public static implicit operator NonVirtualizingLayout(Xaml.Controls.NonVirtualizingLayout ui) => NonVirtualizingLayout.StartChain(ui);

        public NonVirtualizingLayout Invoke(Action<Xaml.Controls.NonVirtualizingLayout> action) { action?.Invoke(UI); return this; }

        protected NonVirtualizingLayout() { }
    }
}

namespace CSharpMarkup.WinUI // NonVirtualizingLayoutContext
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.NonVirtualizingLayoutContext"/></summary>
        public static NonVirtualizingLayoutContext NonVirtualizingLayoutContext()
        {
            var ui = new Xaml.Controls.NonVirtualizingLayoutContext();
            return CSharpMarkup.WinUI.NonVirtualizingLayoutContext.StartChain(ui);
        }
    }

    public partial class NonVirtualizingLayoutContext : LayoutContext, IUI<Xaml.Controls.NonVirtualizingLayoutContext>
    {
        static NonVirtualizingLayoutContext instance;

        internal static NonVirtualizingLayoutContext StartChain(Xaml.Controls.NonVirtualizingLayoutContext ui)
        {
            if (instance == null) instance = new NonVirtualizingLayoutContext();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.NonVirtualizingLayoutContext ui;

        public new Xaml.Controls.NonVirtualizingLayoutContext UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.NonVirtualizingLayoutContext(NonVirtualizingLayoutContext view) => view?.UI;

        public static implicit operator NonVirtualizingLayoutContext(Xaml.Controls.NonVirtualizingLayoutContext ui) => NonVirtualizingLayoutContext.StartChain(ui);

        public NonVirtualizingLayoutContext Invoke(Action<Xaml.Controls.NonVirtualizingLayoutContext> action) { action?.Invoke(UI); return this; }

        protected NonVirtualizingLayoutContext() { }
    }
}

namespace CSharpMarkup.WinUI // NumberBox
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.NumberBox"/></summary>
        public static NumberBox NumberBox(bool? AcceptsExpression = default, object Description = default, object Header = default, Xaml.DataTemplate HeaderTemplate = default, bool? IsWrapEnabled = default, double? LargeChange = default, double? Maximum = default, double? Minimum = default, Windows.Globalization.NumberFormatting.INumberFormatter2 NumberFormatter = default, string PlaceholderText = default, bool? PreventKeyboardDisplayOnProgrammaticFocus = default, Xaml.Controls.Primitives.FlyoutBase SelectionFlyout = default, Xaml.Media.SolidColorBrush SelectionHighlightColor = default, double? SmallChange = default, Xaml.Controls.NumberBoxSpinButtonPlacementMode? SpinButtonPlacementMode = default, string Text = default, Xaml.TextReadingOrder? TextReadingOrder = default, Xaml.Controls.NumberBoxValidationMode? ValidationMode = default, double? Value = default)
        {
            var ui = new Xaml.Controls.NumberBox();
            if (AcceptsExpression is not null) ui.AcceptsExpression = AcceptsExpression.Value;
            if (Description is not null) ui.Description = Description;
            if (Header is not null) ui.Header = Header;
            if (HeaderTemplate is not null) ui.HeaderTemplate = HeaderTemplate;
            if (IsWrapEnabled is not null) ui.IsWrapEnabled = IsWrapEnabled.Value;
            if (LargeChange is not null) ui.LargeChange = LargeChange.Value;
            if (Maximum is not null) ui.Maximum = Maximum.Value;
            if (Minimum is not null) ui.Minimum = Minimum.Value;
            if (NumberFormatter is not null) ui.NumberFormatter = NumberFormatter;
            if (PlaceholderText is not null) ui.PlaceholderText = PlaceholderText;
            if (PreventKeyboardDisplayOnProgrammaticFocus is not null) ui.PreventKeyboardDisplayOnProgrammaticFocus = PreventKeyboardDisplayOnProgrammaticFocus.Value;
            if (SelectionFlyout is not null) ui.SelectionFlyout = SelectionFlyout;
            if (SelectionHighlightColor is not null) ui.SelectionHighlightColor = SelectionHighlightColor;
            if (SmallChange is not null) ui.SmallChange = SmallChange.Value;
            if (SpinButtonPlacementMode is not null) ui.SpinButtonPlacementMode = SpinButtonPlacementMode.Value;
            if (Text is not null) ui.Text = Text;
            if (TextReadingOrder is not null) ui.TextReadingOrder = TextReadingOrder.Value;
            if (ValidationMode is not null) ui.ValidationMode = ValidationMode.Value;
            if (Value is not null) ui.Value = Value.Value;
            return CSharpMarkup.WinUI.NumberBox.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.NumberBox"/></summary>
        public static NumberBox NumberBox()
        {
            var ui = new Xaml.Controls.NumberBox();
            return CSharpMarkup.WinUI.NumberBox.StartChain(ui);
        }
    }

    public partial class NumberBox : Control, IUI<Xaml.Controls.NumberBox>
    {
        static NumberBox instance;

        internal static NumberBox StartChain(Xaml.Controls.NumberBox ui)
        {
            if (instance == null) instance = new NumberBox();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.NumberBox ui;

        public new Xaml.Controls.NumberBox UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(NumberBox view) => view?.UI;

        public static implicit operator Xaml.Controls.NumberBox(NumberBox view) => view?.UI;

        public static implicit operator NumberBox(Xaml.Controls.NumberBox ui) => NumberBox.StartChain(ui);

        public NumberBox Invoke(Action<Xaml.Controls.NumberBox> action) { action?.Invoke(UI); return this; }

        protected NumberBox() { }
    }

    public static partial class NumberBoxExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.NumberBox.AcceptsExpression"/></summary>
        public static TView AcceptsExpression<TView>(this TView view, bool value) where TView : NumberBox { view.UI.AcceptsExpression = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.Description"/></summary>
        public static TView Description<TView>(this TView view, object value) where TView : NumberBox { view.UI.Description = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : NumberBox { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : NumberBox { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.IsWrapEnabled"/></summary>
        public static TView IsWrapEnabled<TView>(this TView view, bool value) where TView : NumberBox { view.UI.IsWrapEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.LargeChange"/></summary>
        public static TView LargeChange<TView>(this TView view, double value) where TView : NumberBox { view.UI.LargeChange = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.Maximum"/></summary>
        public static TView Maximum<TView>(this TView view, double value) where TView : NumberBox { view.UI.Maximum = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.Minimum"/></summary>
        public static TView Minimum<TView>(this TView view, double value) where TView : NumberBox { view.UI.Minimum = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.NumberFormatter"/></summary>
        public static TView NumberFormatter<TView>(this TView view, Windows.Globalization.NumberFormatting.INumberFormatter2 value) where TView : NumberBox { view.UI.NumberFormatter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.PlaceholderText"/></summary>
        public static TView PlaceholderText<TView>(this TView view, string value) where TView : NumberBox { view.UI.PlaceholderText = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.PreventKeyboardDisplayOnProgrammaticFocus"/></summary>
        public static TView PreventKeyboardDisplayOnProgrammaticFocus<TView>(this TView view, bool value) where TView : NumberBox { view.UI.PreventKeyboardDisplayOnProgrammaticFocus = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.SelectionFlyout"/></summary>
        public static TView SelectionFlyout<TView>(this TView view, Xaml.Controls.Primitives.FlyoutBase value) where TView : NumberBox { view.UI.SelectionFlyout = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.SelectionHighlightColor"/></summary>
        public static TView SelectionHighlightColor<TView>(this TView view, Xaml.Media.SolidColorBrush value) where TView : NumberBox { view.UI.SelectionHighlightColor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.SmallChange"/></summary>
        public static TView SmallChange<TView>(this TView view, double value) where TView : NumberBox { view.UI.SmallChange = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.SpinButtonPlacementMode"/></summary>
        public static TView SpinButtonPlacementMode<TView>(this TView view, Xaml.Controls.NumberBoxSpinButtonPlacementMode value) where TView : NumberBox { view.UI.SpinButtonPlacementMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.Text"/></summary>
        public static TView Text<TView>(this TView view, string value) where TView : NumberBox { view.UI.Text = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.TextReadingOrder"/></summary>
        public static TView TextReadingOrder<TView>(this TView view, Xaml.TextReadingOrder value) where TView : NumberBox { view.UI.TextReadingOrder = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.ValidationMode"/></summary>
        public static TView ValidationMode<TView>(this TView view, Xaml.Controls.NumberBoxValidationMode value) where TView : NumberBox { view.UI.ValidationMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.NumberBox.Value"/></summary>
        public static TView Value<TView>(this TView view, double value) where TView : NumberBox { view.UI.Value = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.AcceptsExpression"/></summary>
        public static DependencyProperty<TTarget, bool> AcceptsExpression<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NumberBox.AcceptsExpressionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.Description"/></summary>
        public static DependencyProperty<TTarget, object> Description<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.NumberBox.DescriptionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.NumberBox.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.NumberBox.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.IsWrapEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsWrapEnabled<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NumberBox.IsWrapEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.LargeChange"/></summary>
        public static DependencyProperty<TTarget, double> LargeChange<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.NumberBox.LargeChangeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.Maximum"/></summary>
        public static DependencyProperty<TTarget, double> Maximum<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.NumberBox.MaximumProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.Minimum"/></summary>
        public static DependencyProperty<TTarget, double> Minimum<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.NumberBox.MinimumProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.NumberFormatter"/></summary>
        public static DependencyProperty<TTarget, Windows.Globalization.NumberFormatting.INumberFormatter2> NumberFormatter<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, Windows.Globalization.NumberFormatting.INumberFormatter2>.Get(target, Xaml.Controls.NumberBox.NumberFormatterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.PlaceholderText"/></summary>
        public static DependencyProperty<TTarget, string> PlaceholderText<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.NumberBox.PlaceholderTextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.PreventKeyboardDisplayOnProgrammaticFocus"/></summary>
        public static DependencyProperty<TTarget, bool> PreventKeyboardDisplayOnProgrammaticFocus<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.NumberBox.PreventKeyboardDisplayOnProgrammaticFocusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.SelectionFlyout"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase> SelectionFlyout<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase>.Get(target, Xaml.Controls.NumberBox.SelectionFlyoutProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.SelectionHighlightColor"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.SolidColorBrush> SelectionHighlightColor<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, Xaml.Media.SolidColorBrush>.Get(target, Xaml.Controls.NumberBox.SelectionHighlightColorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.SmallChange"/></summary>
        public static DependencyProperty<TTarget, double> SmallChange<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.NumberBox.SmallChangeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.SpinButtonPlacementMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.NumberBoxSpinButtonPlacementMode> SpinButtonPlacementMode<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, Xaml.Controls.NumberBoxSpinButtonPlacementMode>.Get(target, Xaml.Controls.NumberBox.SpinButtonPlacementModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.Text"/></summary>
        public static DependencyProperty<TTarget, string> Text<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.NumberBox.TextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.TextReadingOrder"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextReadingOrder> TextReadingOrder<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, Xaml.TextReadingOrder>.Get(target, Xaml.Controls.NumberBox.TextReadingOrderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.ValidationMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.NumberBoxValidationMode> ValidationMode<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, Xaml.Controls.NumberBoxValidationMode>.Get(target, Xaml.Controls.NumberBox.ValidationModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.NumberBox.Value"/></summary>
        public static DependencyProperty<TTarget, double> Value<TTarget>(this TTarget target) where TTarget : NumberBox
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.NumberBox.ValueProperty);
    }
}

namespace CSharpMarkup.WinUI // Page
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Page"/></summary>
        public static Page Page(Xaml.UIElement Content)
        {
            var ui = new Xaml.Controls.Page();
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.Page.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Page"/></summary>
        public static Page Page(Xaml.Controls.AppBar BottomAppBar = default, Xaml.Navigation.NavigationCacheMode? NavigationCacheMode = default, Xaml.Controls.AppBar TopAppBar = default, Xaml.UIElement Content = default)
        {
            var ui = new Xaml.Controls.Page();
            if (BottomAppBar is not null) ui.BottomAppBar = BottomAppBar;
            if (NavigationCacheMode is not null) ui.NavigationCacheMode = NavigationCacheMode.Value;
            if (TopAppBar is not null) ui.TopAppBar = TopAppBar;
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.Page.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Page"/></summary>
        public static Page Page()
        {
            var ui = new Xaml.Controls.Page();
            return CSharpMarkup.WinUI.Page.StartChain(ui);
        }
    }

    public partial class Page : UserControl, IUI<Xaml.Controls.Page>
    {
        static Page instance;

        internal static Page StartChain(Xaml.Controls.Page ui)
        {
            if (instance == null) instance = new Page();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Page ui;

        public new Xaml.Controls.Page UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Page view) => view?.UI;

        public static implicit operator Xaml.Controls.Page(Page view) => view?.UI;

        public static implicit operator Page(Xaml.Controls.Page ui) => Page.StartChain(ui);

        public Page Invoke(Action<Xaml.Controls.Page> action) { action?.Invoke(UI); return this; }

        protected Page() { }
    }

    public static partial class PageExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Page.BottomAppBar"/></summary>
        public static TView BottomAppBar<TView>(this TView view, Xaml.Controls.AppBar value) where TView : Page { view.UI.BottomAppBar = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Page.NavigationCacheMode"/></summary>
        public static TView NavigationCacheMode<TView>(this TView view, Xaml.Navigation.NavigationCacheMode value) where TView : Page { view.UI.NavigationCacheMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Page.TopAppBar"/></summary>
        public static TView TopAppBar<TView>(this TView view, Xaml.Controls.AppBar value) where TView : Page { view.UI.TopAppBar = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Page.BottomAppBar"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.AppBar> BottomAppBar<TTarget>(this TTarget target) where TTarget : Page
        => DependencyProperty<TTarget, Xaml.Controls.AppBar>.Get(target, Xaml.Controls.Page.BottomAppBarProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Page.Frame"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Frame> Frame<TTarget>(this TTarget target) where TTarget : Page
        => DependencyProperty<TTarget, Xaml.Controls.Frame>.Get(target, Xaml.Controls.Page.FrameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Page.TopAppBar"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.AppBar> TopAppBar<TTarget>(this TTarget target) where TTarget : Page
        => DependencyProperty<TTarget, Xaml.Controls.AppBar>.Get(target, Xaml.Controls.Page.TopAppBarProperty);
    }
}

namespace CSharpMarkup.WinUI // Panel
{
    public partial class Panel : FrameworkElement, IUI<Xaml.Controls.Panel>
    {
        Xaml.Controls.Panel ui;

        public new Xaml.Controls.Panel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Panel Invoke(Action<Xaml.Controls.Panel> action) { action?.Invoke(UI); return this; }

        protected Panel() { }
    }

    public static partial class PanelExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Panel.Background"/></summary>
        public static TView Background<TView>(this TView view, Xaml.Media.Brush value) where TView : Panel { view.UI.Background = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Panel.Background"/></summary>
        public static TView Background<TView>(this TView view, Windows.UI.Color value) where TView : Panel { view.UI.Background = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Panel.Background"/></summary>
        public static TView Background<TView>(this TView view, string color) where TView : Panel { view.UI.Background = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Panel.BackgroundTransition"/></summary>
        public static TView BackgroundTransition<TView>(this TView view, Xaml.BrushTransition value) where TView : Panel { view.UI.BackgroundTransition = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Panel.ChildrenTransitions"/></summary>
        public static TView ChildrenTransitions<TView>(this TView view, Xaml.Media.Animation.TransitionCollection value) where TView : Panel { view.UI.ChildrenTransitions = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Panel.Background"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Background<TTarget>(this TTarget target) where TTarget : Panel
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Panel.BackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Panel.ChildrenTransitions"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection> ChildrenTransitions<TTarget>(this TTarget target) where TTarget : Panel
        => DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection>.Get(target, Xaml.Controls.Panel.ChildrenTransitionsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Panel.IsItemsHost"/></summary>
        public static DependencyProperty<TTarget, bool> IsItemsHost<TTarget>(this TTarget target) where TTarget : Panel
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Panel.IsItemsHostProperty);
    }
}

namespace CSharpMarkup.WinUI // ParallaxView
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ParallaxView"/></summary>
        public static ParallaxView ParallaxView(Xaml.UIElement Child)
        {
            var ui = new Xaml.Controls.ParallaxView();
            if (Child is not null) ui.Child = Child;
            return CSharpMarkup.WinUI.ParallaxView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ParallaxView"/></summary>
        public static ParallaxView ParallaxView(double? HorizontalShift = default, double? HorizontalSourceEndOffset = default, Xaml.Controls.ParallaxSourceOffsetKind? HorizontalSourceOffsetKind = default, double? HorizontalSourceStartOffset = default, bool? IsHorizontalShiftClamped = default, bool? IsVerticalShiftClamped = default, double? MaxHorizontalShiftRatio = default, double? MaxVerticalShiftRatio = default, Xaml.UIElement Source = default, double? VerticalShift = default, double? VerticalSourceEndOffset = default, Xaml.Controls.ParallaxSourceOffsetKind? VerticalSourceOffsetKind = default, double? VerticalSourceStartOffset = default, Xaml.UIElement Child = default)
        {
            var ui = new Xaml.Controls.ParallaxView();
            if (HorizontalShift is not null) ui.HorizontalShift = HorizontalShift.Value;
            if (HorizontalSourceEndOffset is not null) ui.HorizontalSourceEndOffset = HorizontalSourceEndOffset.Value;
            if (HorizontalSourceOffsetKind is not null) ui.HorizontalSourceOffsetKind = HorizontalSourceOffsetKind.Value;
            if (HorizontalSourceStartOffset is not null) ui.HorizontalSourceStartOffset = HorizontalSourceStartOffset.Value;
            if (IsHorizontalShiftClamped is not null) ui.IsHorizontalShiftClamped = IsHorizontalShiftClamped.Value;
            if (IsVerticalShiftClamped is not null) ui.IsVerticalShiftClamped = IsVerticalShiftClamped.Value;
            if (MaxHorizontalShiftRatio is not null) ui.MaxHorizontalShiftRatio = MaxHorizontalShiftRatio.Value;
            if (MaxVerticalShiftRatio is not null) ui.MaxVerticalShiftRatio = MaxVerticalShiftRatio.Value;
            if (Source is not null) ui.Source = Source;
            if (VerticalShift is not null) ui.VerticalShift = VerticalShift.Value;
            if (VerticalSourceEndOffset is not null) ui.VerticalSourceEndOffset = VerticalSourceEndOffset.Value;
            if (VerticalSourceOffsetKind is not null) ui.VerticalSourceOffsetKind = VerticalSourceOffsetKind.Value;
            if (VerticalSourceStartOffset is not null) ui.VerticalSourceStartOffset = VerticalSourceStartOffset.Value;
            if (Child is not null) ui.Child = Child;
            return CSharpMarkup.WinUI.ParallaxView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ParallaxView"/></summary>
        public static ParallaxView ParallaxView()
        {
            var ui = new Xaml.Controls.ParallaxView();
            return CSharpMarkup.WinUI.ParallaxView.StartChain(ui);
        }
    }

    public partial class ParallaxView : FrameworkElement, IUI<Xaml.Controls.ParallaxView>
    {
        static ParallaxView instance;

        internal static ParallaxView StartChain(Xaml.Controls.ParallaxView ui)
        {
            if (instance == null) instance = new ParallaxView();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ParallaxView ui;

        public new Xaml.Controls.ParallaxView UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ParallaxView view) => view?.UI;

        public static implicit operator Xaml.Controls.ParallaxView(ParallaxView view) => view?.UI;

        public static implicit operator ParallaxView(Xaml.Controls.ParallaxView ui) => ParallaxView.StartChain(ui);

        public ParallaxView Invoke(Action<Xaml.Controls.ParallaxView> action) { action?.Invoke(UI); return this; }

        protected ParallaxView() { }
    }

    public static partial class ParallaxViewExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ParallaxView.HorizontalShift"/></summary>
        public static TView HorizontalShift<TView>(this TView view, double value) where TView : ParallaxView { view.UI.HorizontalShift = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ParallaxView.HorizontalSourceEndOffset"/></summary>
        public static TView HorizontalSourceEndOffset<TView>(this TView view, double value) where TView : ParallaxView { view.UI.HorizontalSourceEndOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ParallaxView.HorizontalSourceOffsetKind"/></summary>
        public static TView HorizontalSourceOffsetKind<TView>(this TView view, Xaml.Controls.ParallaxSourceOffsetKind value) where TView : ParallaxView { view.UI.HorizontalSourceOffsetKind = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ParallaxView.HorizontalSourceStartOffset"/></summary>
        public static TView HorizontalSourceStartOffset<TView>(this TView view, double value) where TView : ParallaxView { view.UI.HorizontalSourceStartOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ParallaxView.IsHorizontalShiftClamped"/></summary>
        public static TView IsHorizontalShiftClamped<TView>(this TView view, bool value) where TView : ParallaxView { view.UI.IsHorizontalShiftClamped = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ParallaxView.IsVerticalShiftClamped"/></summary>
        public static TView IsVerticalShiftClamped<TView>(this TView view, bool value) where TView : ParallaxView { view.UI.IsVerticalShiftClamped = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ParallaxView.MaxHorizontalShiftRatio"/></summary>
        public static TView MaxHorizontalShiftRatio<TView>(this TView view, double value) where TView : ParallaxView { view.UI.MaxHorizontalShiftRatio = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ParallaxView.MaxVerticalShiftRatio"/></summary>
        public static TView MaxVerticalShiftRatio<TView>(this TView view, double value) where TView : ParallaxView { view.UI.MaxVerticalShiftRatio = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ParallaxView.Source"/></summary>
        public static TView Source<TView>(this TView view, Xaml.UIElement value) where TView : ParallaxView { view.UI.Source = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ParallaxView.VerticalShift"/></summary>
        public static TView VerticalShift<TView>(this TView view, double value) where TView : ParallaxView { view.UI.VerticalShift = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ParallaxView.VerticalSourceEndOffset"/></summary>
        public static TView VerticalSourceEndOffset<TView>(this TView view, double value) where TView : ParallaxView { view.UI.VerticalSourceEndOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ParallaxView.VerticalSourceOffsetKind"/></summary>
        public static TView VerticalSourceOffsetKind<TView>(this TView view, Xaml.Controls.ParallaxSourceOffsetKind value) where TView : ParallaxView { view.UI.VerticalSourceOffsetKind = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ParallaxView.VerticalSourceStartOffset"/></summary>
        public static TView VerticalSourceStartOffset<TView>(this TView view, double value) where TView : ParallaxView { view.UI.VerticalSourceStartOffset = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ParallaxView.Child"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Child<TTarget>(this TTarget target) where TTarget : ParallaxView
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.ParallaxView.ChildProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ParallaxView.HorizontalShift"/></summary>
        public static DependencyProperty<TTarget, double> HorizontalShift<TTarget>(this TTarget target) where TTarget : ParallaxView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ParallaxView.HorizontalShiftProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ParallaxView.HorizontalSourceEndOffset"/></summary>
        public static DependencyProperty<TTarget, double> HorizontalSourceEndOffset<TTarget>(this TTarget target) where TTarget : ParallaxView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ParallaxView.HorizontalSourceEndOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ParallaxView.HorizontalSourceOffsetKind"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ParallaxSourceOffsetKind> HorizontalSourceOffsetKind<TTarget>(this TTarget target) where TTarget : ParallaxView
        => DependencyProperty<TTarget, Xaml.Controls.ParallaxSourceOffsetKind>.Get(target, Xaml.Controls.ParallaxView.HorizontalSourceOffsetKindProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ParallaxView.HorizontalSourceStartOffset"/></summary>
        public static DependencyProperty<TTarget, double> HorizontalSourceStartOffset<TTarget>(this TTarget target) where TTarget : ParallaxView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ParallaxView.HorizontalSourceStartOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ParallaxView.IsHorizontalShiftClamped"/></summary>
        public static DependencyProperty<TTarget, bool> IsHorizontalShiftClamped<TTarget>(this TTarget target) where TTarget : ParallaxView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ParallaxView.IsHorizontalShiftClampedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ParallaxView.IsVerticalShiftClamped"/></summary>
        public static DependencyProperty<TTarget, bool> IsVerticalShiftClamped<TTarget>(this TTarget target) where TTarget : ParallaxView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ParallaxView.IsVerticalShiftClampedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ParallaxView.MaxHorizontalShiftRatio"/></summary>
        public static DependencyProperty<TTarget, double> MaxHorizontalShiftRatio<TTarget>(this TTarget target) where TTarget : ParallaxView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ParallaxView.MaxHorizontalShiftRatioProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ParallaxView.MaxVerticalShiftRatio"/></summary>
        public static DependencyProperty<TTarget, double> MaxVerticalShiftRatio<TTarget>(this TTarget target) where TTarget : ParallaxView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ParallaxView.MaxVerticalShiftRatioProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ParallaxView.Source"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Source<TTarget>(this TTarget target) where TTarget : ParallaxView
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.ParallaxView.SourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ParallaxView.VerticalShift"/></summary>
        public static DependencyProperty<TTarget, double> VerticalShift<TTarget>(this TTarget target) where TTarget : ParallaxView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ParallaxView.VerticalShiftProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ParallaxView.VerticalSourceEndOffset"/></summary>
        public static DependencyProperty<TTarget, double> VerticalSourceEndOffset<TTarget>(this TTarget target) where TTarget : ParallaxView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ParallaxView.VerticalSourceEndOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ParallaxView.VerticalSourceOffsetKind"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ParallaxSourceOffsetKind> VerticalSourceOffsetKind<TTarget>(this TTarget target) where TTarget : ParallaxView
        => DependencyProperty<TTarget, Xaml.Controls.ParallaxSourceOffsetKind>.Get(target, Xaml.Controls.ParallaxView.VerticalSourceOffsetKindProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ParallaxView.VerticalSourceStartOffset"/></summary>
        public static DependencyProperty<TTarget, double> VerticalSourceStartOffset<TTarget>(this TTarget target) where TTarget : ParallaxView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ParallaxView.VerticalSourceStartOffsetProperty);
    }
}

namespace CSharpMarkup.WinUI // PasswordBox
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.PasswordBox"/></summary>
        /// <remarks>Remark: PasswordBox().Bind() binds to <see cref="Xaml.Controls.PasswordBox.PasswordProperty"/></remarks>
        public static PasswordBox PasswordBox(object Description = default, object Header = default, Xaml.DataTemplate HeaderTemplate = default, Xaml.Input.InputScope InputScope = default, bool? IsPasswordRevealButtonEnabled = default, int? MaxLength = default, string Password = default, string PasswordChar = default, Xaml.Controls.PasswordRevealMode? PasswordRevealMode = default, string PlaceholderText = default, bool? PreventKeyboardDisplayOnProgrammaticFocus = default, Xaml.Controls.Primitives.FlyoutBase SelectionFlyout = default, Xaml.Media.SolidColorBrush SelectionHighlightColor = default, Xaml.TextReadingOrder? TextReadingOrder = default)
        {
            var ui = new Xaml.Controls.PasswordBox();
            if (Description is not null) ui.Description = Description;
            if (Header is not null) ui.Header = Header;
            if (HeaderTemplate is not null) ui.HeaderTemplate = HeaderTemplate;
            if (InputScope is not null) ui.InputScope = InputScope;
            if (IsPasswordRevealButtonEnabled is not null) ui.IsPasswordRevealButtonEnabled = IsPasswordRevealButtonEnabled.Value;
            if (MaxLength is not null) ui.MaxLength = MaxLength.Value;
            if (Password is not null) ui.Password = Password;
            if (PasswordChar is not null) ui.PasswordChar = PasswordChar;
            if (PasswordRevealMode is not null) ui.PasswordRevealMode = PasswordRevealMode.Value;
            if (PlaceholderText is not null) ui.PlaceholderText = PlaceholderText;
            if (PreventKeyboardDisplayOnProgrammaticFocus is not null) ui.PreventKeyboardDisplayOnProgrammaticFocus = PreventKeyboardDisplayOnProgrammaticFocus.Value;
            if (SelectionFlyout is not null) ui.SelectionFlyout = SelectionFlyout;
            if (SelectionHighlightColor is not null) ui.SelectionHighlightColor = SelectionHighlightColor;
            if (TextReadingOrder is not null) ui.TextReadingOrder = TextReadingOrder.Value;
            return CSharpMarkup.WinUI.PasswordBox.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.PasswordBox"/></summary>
        /// <remarks>Remark: PasswordBox().Bind() binds to <see cref="Xaml.Controls.PasswordBox.PasswordProperty"/></remarks>
        public static PasswordBox PasswordBox()
        {
            var ui = new Xaml.Controls.PasswordBox();
            return CSharpMarkup.WinUI.PasswordBox.StartChain(ui);
        }
    }

    public partial class PasswordBox : Control, IUI<Xaml.Controls.PasswordBox>, IDefaultBindProperty
    {
        static PasswordBox instance;

        internal static PasswordBox StartChain(Xaml.Controls.PasswordBox ui)
        {
            if (instance == null) instance = new PasswordBox();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.PasswordBox ui;

        public new Xaml.Controls.PasswordBox UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.PasswordBox.PasswordProperty"/></summary>
        public Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.PasswordBox.PasswordProperty;

        public static implicit operator Xaml.UIElement(PasswordBox view) => view?.UI;

        public static implicit operator Xaml.Controls.PasswordBox(PasswordBox view) => view?.UI;

        public static implicit operator PasswordBox(Xaml.Controls.PasswordBox ui) => PasswordBox.StartChain(ui);

        public PasswordBox Invoke(Action<Xaml.Controls.PasswordBox> action) { action?.Invoke(UI); return this; }

        protected PasswordBox() { }
    }

    public static partial class PasswordBoxExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.PasswordBox.Description"/></summary>
        public static TView Description<TView>(this TView view, object value) where TView : PasswordBox { view.UI.Description = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PasswordBox.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : PasswordBox { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PasswordBox.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : PasswordBox { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PasswordBox.InputScope"/></summary>
        public static TView InputScope<TView>(this TView view, Xaml.Input.InputScope value) where TView : PasswordBox { view.UI.InputScope = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PasswordBox.IsPasswordRevealButtonEnabled"/></summary>
        public static TView IsPasswordRevealButtonEnabled<TView>(this TView view, bool value) where TView : PasswordBox { view.UI.IsPasswordRevealButtonEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PasswordBox.MaxLength"/></summary>
        public static TView MaxLength<TView>(this TView view, int value) where TView : PasswordBox { view.UI.MaxLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PasswordBox.Password"/></summary>
        public static TView Password<TView>(this TView view, string value) where TView : PasswordBox { view.UI.Password = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PasswordBox.PasswordChar"/></summary>
        public static TView PasswordChar<TView>(this TView view, string value) where TView : PasswordBox { view.UI.PasswordChar = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PasswordBox.PasswordRevealMode"/></summary>
        public static TView PasswordRevealMode<TView>(this TView view, Xaml.Controls.PasswordRevealMode value) where TView : PasswordBox { view.UI.PasswordRevealMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PasswordBox.PlaceholderText"/></summary>
        public static TView PlaceholderText<TView>(this TView view, string value) where TView : PasswordBox { view.UI.PlaceholderText = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PasswordBox.PreventKeyboardDisplayOnProgrammaticFocus"/></summary>
        public static TView PreventKeyboardDisplayOnProgrammaticFocus<TView>(this TView view, bool value) where TView : PasswordBox { view.UI.PreventKeyboardDisplayOnProgrammaticFocus = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PasswordBox.SelectionFlyout"/></summary>
        public static TView SelectionFlyout<TView>(this TView view, Xaml.Controls.Primitives.FlyoutBase value) where TView : PasswordBox { view.UI.SelectionFlyout = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PasswordBox.SelectionHighlightColor"/></summary>
        public static TView SelectionHighlightColor<TView>(this TView view, Xaml.Media.SolidColorBrush value) where TView : PasswordBox { view.UI.SelectionHighlightColor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PasswordBox.TextReadingOrder"/></summary>
        public static TView TextReadingOrder<TView>(this TView view, Xaml.TextReadingOrder value) where TView : PasswordBox { view.UI.TextReadingOrder = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.CanPasteClipboardContent"/></summary>
        public static DependencyProperty<TTarget, bool> CanPasteClipboardContent<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.PasswordBox.CanPasteClipboardContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.Description"/></summary>
        public static DependencyProperty<TTarget, object> Description<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.PasswordBox.DescriptionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.PasswordBox.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.PasswordBox.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.InputScope"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.InputScope> InputScope<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, Xaml.Input.InputScope>.Get(target, Xaml.Controls.PasswordBox.InputScopeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.IsPasswordRevealButtonEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsPasswordRevealButtonEnabled<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.PasswordBox.IsPasswordRevealButtonEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.MaxLength"/></summary>
        public static DependencyProperty<TTarget, int> MaxLength<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.PasswordBox.MaxLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.PasswordChar"/></summary>
        public static DependencyProperty<TTarget, string> PasswordChar<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.PasswordBox.PasswordCharProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.Password"/></summary>
        public static DependencyProperty<TTarget, string> Password<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.PasswordBox.PasswordProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.PasswordRevealMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.PasswordRevealMode> PasswordRevealMode<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, Xaml.Controls.PasswordRevealMode>.Get(target, Xaml.Controls.PasswordBox.PasswordRevealModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.PlaceholderText"/></summary>
        public static DependencyProperty<TTarget, string> PlaceholderText<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.PasswordBox.PlaceholderTextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.PreventKeyboardDisplayOnProgrammaticFocus"/></summary>
        public static DependencyProperty<TTarget, bool> PreventKeyboardDisplayOnProgrammaticFocus<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.PasswordBox.PreventKeyboardDisplayOnProgrammaticFocusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.SelectionFlyout"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase> SelectionFlyout<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase>.Get(target, Xaml.Controls.PasswordBox.SelectionFlyoutProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.SelectionHighlightColor"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.SolidColorBrush> SelectionHighlightColor<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, Xaml.Media.SolidColorBrush>.Get(target, Xaml.Controls.PasswordBox.SelectionHighlightColorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PasswordBox.TextReadingOrder"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextReadingOrder> TextReadingOrder<TTarget>(this TTarget target) where TTarget : PasswordBox
        => DependencyProperty<TTarget, Xaml.TextReadingOrder>.Get(target, Xaml.Controls.PasswordBox.TextReadingOrderProperty);
    }
}

namespace CSharpMarkup.WinUI // PathIcon
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.PathIcon"/></summary>
        /// <remarks>Remark: PathIcon().Bind() binds to <see cref="Xaml.Controls.PathIcon.DataProperty"/></remarks>
        public static PathIcon PathIcon(CSharpMarkup.WinUI.to.Geometry? Data = default)
        {
            var ui = new Xaml.Controls.PathIcon();
            if (Data is not null) ui.Data = Data.Value;
            return CSharpMarkup.WinUI.PathIcon.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.PathIcon"/></summary>
        /// <remarks>Remark: PathIcon().Bind() binds to <see cref="Xaml.Controls.PathIcon.DataProperty"/></remarks>
        public static PathIcon PathIcon()
        {
            var ui = new Xaml.Controls.PathIcon();
            return CSharpMarkup.WinUI.PathIcon.StartChain(ui);
        }
    }

    public partial class PathIcon : IconElement, IUI<Xaml.Controls.PathIcon>, IDefaultBindProperty
    {
        static PathIcon instance;

        internal static PathIcon StartChain(Xaml.Controls.PathIcon ui)
        {
            if (instance == null) instance = new PathIcon();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.PathIcon ui;

        public new Xaml.Controls.PathIcon UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.PathIcon.DataProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.PathIcon.DataProperty;

        public static implicit operator Xaml.UIElement(PathIcon view) => view?.UI;

        public static implicit operator Xaml.Controls.PathIcon(PathIcon view) => view?.UI;

        public static implicit operator PathIcon(Xaml.Controls.PathIcon ui) => PathIcon.StartChain(ui);

        public PathIcon Invoke(Action<Xaml.Controls.PathIcon> action) { action?.Invoke(UI); return this; }

        protected PathIcon() { }
    }

    public static partial class PathIconExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.PathIcon.Data"/></summary>
        public static TView Data<TView>(this TView view, CSharpMarkup.WinUI.to.Geometry value) where TView : PathIcon { view.UI.Data = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PathIcon.Data"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Geometry> Data<TTarget>(this TTarget target) where TTarget : PathIcon
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Geometry>.Get(target, Xaml.Controls.PathIcon.DataProperty);
    }
}

namespace CSharpMarkup.WinUI // PathIconSource
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.PathIconSource"/></summary>
        /// <remarks>Remark: PathIconSource().Bind() binds to <see cref="Xaml.Controls.PathIconSource.DataProperty"/></remarks>
        public static PathIconSource PathIconSource(CSharpMarkup.WinUI.to.Geometry? Data = default)
        {
            var ui = new Xaml.Controls.PathIconSource();
            if (Data is not null) ui.Data = Data.Value;
            return CSharpMarkup.WinUI.PathIconSource.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.PathIconSource"/></summary>
        /// <remarks>Remark: PathIconSource().Bind() binds to <see cref="Xaml.Controls.PathIconSource.DataProperty"/></remarks>
        public static PathIconSource PathIconSource()
        {
            var ui = new Xaml.Controls.PathIconSource();
            return CSharpMarkup.WinUI.PathIconSource.StartChain(ui);
        }
    }

    public partial class PathIconSource : IconSource, IUI<Xaml.Controls.PathIconSource>, IDefaultBindProperty
    {
        static PathIconSource instance;

        internal static PathIconSource StartChain(Xaml.Controls.PathIconSource ui)
        {
            if (instance == null) instance = new PathIconSource();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.PathIconSource ui;

        public new Xaml.Controls.PathIconSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.PathIconSource.DataProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.PathIconSource.DataProperty;

        public static implicit operator Xaml.Controls.PathIconSource(PathIconSource view) => view?.UI;

        public static implicit operator PathIconSource(Xaml.Controls.PathIconSource ui) => PathIconSource.StartChain(ui);

        public PathIconSource Invoke(Action<Xaml.Controls.PathIconSource> action) { action?.Invoke(UI); return this; }

        protected PathIconSource() { }
    }

    public static partial class PathIconSourceExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.PathIconSource.Data"/></summary>
        public static TView Data<TView>(this TView view, CSharpMarkup.WinUI.to.Geometry value) where TView : PathIconSource { view.UI.Data = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PathIconSource.Data"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Geometry> Data<TTarget>(this TTarget target) where TTarget : PathIconSource
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Geometry>.Get(target, Xaml.Controls.PathIconSource.DataProperty);
    }
}

namespace CSharpMarkup.WinUI // PersonPicture
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.PersonPicture"/></summary>
        public static PersonPicture PersonPicture(string BadgeGlyph = default, Xaml.Media.ImageSource BadgeImageSource = default, int? BadgeNumber = default, string BadgeText = default, Windows.ApplicationModel.Contacts.Contact Contact = default, string DisplayName = default, string Initials = default, bool? IsGroup = default, bool? PreferSmallImage = default, Xaml.Media.ImageSource ProfilePicture = default)
        {
            var ui = new Xaml.Controls.PersonPicture();
            if (BadgeGlyph is not null) ui.BadgeGlyph = BadgeGlyph;
            if (BadgeImageSource is not null) ui.BadgeImageSource = BadgeImageSource;
            if (BadgeNumber is not null) ui.BadgeNumber = BadgeNumber.Value;
            if (BadgeText is not null) ui.BadgeText = BadgeText;
            if (Contact is not null) ui.Contact = Contact;
            if (DisplayName is not null) ui.DisplayName = DisplayName;
            if (Initials is not null) ui.Initials = Initials;
            if (IsGroup is not null) ui.IsGroup = IsGroup.Value;
            if (PreferSmallImage is not null) ui.PreferSmallImage = PreferSmallImage.Value;
            if (ProfilePicture is not null) ui.ProfilePicture = ProfilePicture;
            return CSharpMarkup.WinUI.PersonPicture.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.PersonPicture"/></summary>
        public static PersonPicture PersonPicture()
        {
            var ui = new Xaml.Controls.PersonPicture();
            return CSharpMarkup.WinUI.PersonPicture.StartChain(ui);
        }
    }

    public partial class PersonPicture : Control, IUI<Xaml.Controls.PersonPicture>
    {
        static PersonPicture instance;

        internal static PersonPicture StartChain(Xaml.Controls.PersonPicture ui)
        {
            if (instance == null) instance = new PersonPicture();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.PersonPicture ui;

        public new Xaml.Controls.PersonPicture UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(PersonPicture view) => view?.UI;

        public static implicit operator Xaml.Controls.PersonPicture(PersonPicture view) => view?.UI;

        public static implicit operator PersonPicture(Xaml.Controls.PersonPicture ui) => PersonPicture.StartChain(ui);

        public PersonPicture Invoke(Action<Xaml.Controls.PersonPicture> action) { action?.Invoke(UI); return this; }

        protected PersonPicture() { }
    }

    public static partial class PersonPictureExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.PersonPicture.BadgeGlyph"/></summary>
        public static TView BadgeGlyph<TView>(this TView view, string value) where TView : PersonPicture { view.UI.BadgeGlyph = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PersonPicture.BadgeImageSource"/></summary>
        public static TView BadgeImageSource<TView>(this TView view, Xaml.Media.ImageSource value) where TView : PersonPicture { view.UI.BadgeImageSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PersonPicture.BadgeNumber"/></summary>
        public static TView BadgeNumber<TView>(this TView view, int value) where TView : PersonPicture { view.UI.BadgeNumber = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PersonPicture.BadgeText"/></summary>
        public static TView BadgeText<TView>(this TView view, string value) where TView : PersonPicture { view.UI.BadgeText = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PersonPicture.Contact"/></summary>
        public static TView Contact<TView>(this TView view, Windows.ApplicationModel.Contacts.Contact value) where TView : PersonPicture { view.UI.Contact = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PersonPicture.DisplayName"/></summary>
        public static TView DisplayName<TView>(this TView view, string value) where TView : PersonPicture { view.UI.DisplayName = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PersonPicture.Initials"/></summary>
        public static TView Initials<TView>(this TView view, string value) where TView : PersonPicture { view.UI.Initials = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PersonPicture.IsGroup"/></summary>
        public static TView IsGroup<TView>(this TView view, bool value) where TView : PersonPicture { view.UI.IsGroup = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PersonPicture.PreferSmallImage"/></summary>
        public static TView PreferSmallImage<TView>(this TView view, bool value) where TView : PersonPicture { view.UI.PreferSmallImage = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PersonPicture.ProfilePicture"/></summary>
        public static TView ProfilePicture<TView>(this TView view, Xaml.Media.ImageSource value) where TView : PersonPicture { view.UI.ProfilePicture = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PersonPicture.BadgeGlyph"/></summary>
        public static DependencyProperty<TTarget, string> BadgeGlyph<TTarget>(this TTarget target) where TTarget : PersonPicture
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.PersonPicture.BadgeGlyphProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PersonPicture.BadgeImageSource"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ImageSource> BadgeImageSource<TTarget>(this TTarget target) where TTarget : PersonPicture
        => DependencyProperty<TTarget, Xaml.Media.ImageSource>.Get(target, Xaml.Controls.PersonPicture.BadgeImageSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PersonPicture.BadgeNumber"/></summary>
        public static DependencyProperty<TTarget, int> BadgeNumber<TTarget>(this TTarget target) where TTarget : PersonPicture
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.PersonPicture.BadgeNumberProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PersonPicture.BadgeText"/></summary>
        public static DependencyProperty<TTarget, string> BadgeText<TTarget>(this TTarget target) where TTarget : PersonPicture
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.PersonPicture.BadgeTextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PersonPicture.Contact"/></summary>
        public static DependencyProperty<TTarget, Windows.ApplicationModel.Contacts.Contact> Contact<TTarget>(this TTarget target) where TTarget : PersonPicture
        => DependencyProperty<TTarget, Windows.ApplicationModel.Contacts.Contact>.Get(target, Xaml.Controls.PersonPicture.ContactProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PersonPicture.DisplayName"/></summary>
        public static DependencyProperty<TTarget, string> DisplayName<TTarget>(this TTarget target) where TTarget : PersonPicture
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.PersonPicture.DisplayNameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PersonPicture.Initials"/></summary>
        public static DependencyProperty<TTarget, string> Initials<TTarget>(this TTarget target) where TTarget : PersonPicture
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.PersonPicture.InitialsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PersonPicture.IsGroup"/></summary>
        public static DependencyProperty<TTarget, bool> IsGroup<TTarget>(this TTarget target) where TTarget : PersonPicture
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.PersonPicture.IsGroupProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PersonPicture.PreferSmallImage"/></summary>
        public static DependencyProperty<TTarget, bool> PreferSmallImage<TTarget>(this TTarget target) where TTarget : PersonPicture
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.PersonPicture.PreferSmallImageProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PersonPicture.ProfilePicture"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ImageSource> ProfilePicture<TTarget>(this TTarget target) where TTarget : PersonPicture
        => DependencyProperty<TTarget, Xaml.Media.ImageSource>.Get(target, Xaml.Controls.PersonPicture.ProfilePictureProperty);
    }
}

namespace CSharpMarkup.WinUI // PersonPictureTemplateSettings
{
    public partial class PersonPictureTemplateSettings : DependencyObject, IUI<Xaml.Controls.PersonPictureTemplateSettings>
    {
        Xaml.Controls.PersonPictureTemplateSettings ui;

        public new Xaml.Controls.PersonPictureTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PersonPictureTemplateSettings Invoke(Action<Xaml.Controls.PersonPictureTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected PersonPictureTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // PickerConfirmedEventArgs
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.PickerConfirmedEventArgs"/></summary>
        public static PickerConfirmedEventArgs PickerConfirmedEventArgs()
        {
            var ui = new Xaml.Controls.PickerConfirmedEventArgs();
            return CSharpMarkup.WinUI.PickerConfirmedEventArgs.StartChain(ui);
        }
    }

    public partial class PickerConfirmedEventArgs : DependencyObject, IUI<Xaml.Controls.PickerConfirmedEventArgs>
    {
        static PickerConfirmedEventArgs instance;

        internal static PickerConfirmedEventArgs StartChain(Xaml.Controls.PickerConfirmedEventArgs ui)
        {
            if (instance == null) instance = new PickerConfirmedEventArgs();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.PickerConfirmedEventArgs ui;

        public new Xaml.Controls.PickerConfirmedEventArgs UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.PickerConfirmedEventArgs(PickerConfirmedEventArgs view) => view?.UI;

        public static implicit operator PickerConfirmedEventArgs(Xaml.Controls.PickerConfirmedEventArgs ui) => PickerConfirmedEventArgs.StartChain(ui);

        public PickerConfirmedEventArgs Invoke(Action<Xaml.Controls.PickerConfirmedEventArgs> action) { action?.Invoke(UI); return this; }

        protected PickerConfirmedEventArgs() { }
    }
}

namespace CSharpMarkup.WinUI // PickerFlyout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.PickerFlyout"/></summary>
        public static PickerFlyout PickerFlyout(Xaml.UIElement Content)
        {
            var ui = new Xaml.Controls.PickerFlyout();
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.PickerFlyout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.PickerFlyout"/></summary>
        public static PickerFlyout PickerFlyout(bool? ConfirmationButtonsVisible = default, Xaml.UIElement Content = default)
        {
            var ui = new Xaml.Controls.PickerFlyout();
            if (ConfirmationButtonsVisible is not null) ui.ConfirmationButtonsVisible = ConfirmationButtonsVisible.Value;
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.PickerFlyout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.PickerFlyout"/></summary>
        public static PickerFlyout PickerFlyout()
        {
            var ui = new Xaml.Controls.PickerFlyout();
            return CSharpMarkup.WinUI.PickerFlyout.StartChain(ui);
        }
    }

    public partial class PickerFlyout : PickerFlyoutBase, IUI<Xaml.Controls.PickerFlyout>
    {
        static PickerFlyout instance;

        internal static PickerFlyout StartChain(Xaml.Controls.PickerFlyout ui)
        {
            if (instance == null) instance = new PickerFlyout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.PickerFlyout ui;

        public new Xaml.Controls.PickerFlyout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.PickerFlyout(PickerFlyout view) => view?.UI;

        public static implicit operator PickerFlyout(Xaml.Controls.PickerFlyout ui) => PickerFlyout.StartChain(ui);

        public PickerFlyout Invoke(Action<Xaml.Controls.PickerFlyout> action) { action?.Invoke(UI); return this; }

        protected PickerFlyout() { }
    }

    public static partial class PickerFlyoutExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.PickerFlyout.ConfirmationButtonsVisible"/></summary>
        public static TView ConfirmationButtonsVisible<TView>(this TView view, bool value) where TView : PickerFlyout { view.UI.ConfirmationButtonsVisible = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PickerFlyout.ConfirmationButtonsVisible"/></summary>
        public static DependencyProperty<TTarget, bool> ConfirmationButtonsVisible<TTarget>(this TTarget target) where TTarget : PickerFlyout
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.PickerFlyout.ConfirmationButtonsVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PickerFlyout.Content"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Content<TTarget>(this TTarget target) where TTarget : PickerFlyout
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.PickerFlyout.ContentProperty);
    }
}

namespace CSharpMarkup.WinUI // PickerFlyoutPresenter
{
    public partial class PickerFlyoutPresenter : ContentControl, IUI<Xaml.Controls.PickerFlyoutPresenter>
    {
        Xaml.Controls.PickerFlyoutPresenter ui;

        public new Xaml.Controls.PickerFlyoutPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PickerFlyoutPresenter Invoke(Action<Xaml.Controls.PickerFlyoutPresenter> action) { action?.Invoke(UI); return this; }

        protected PickerFlyoutPresenter() { }
    }
}

namespace CSharpMarkup.WinUI // PipsPager
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.PipsPager"/></summary>
        public static PipsPager PipsPager(int? MaxVisiblePips = default, Xaml.Style NextButtonStyle = default, Xaml.Controls.PipsPagerButtonVisibility? NextButtonVisibility = default, Xaml.Style NormalPipStyle = default, int? NumberOfPages = default, Xaml.Controls.Orientation? Orientation = default, Xaml.Style PreviousButtonStyle = default, Xaml.Controls.PipsPagerButtonVisibility? PreviousButtonVisibility = default, int? SelectedPageIndex = default, Xaml.Style SelectedPipStyle = default, Xaml.Controls.PipsPagerWrapMode? WrapMode = default)
        {
            var ui = new Xaml.Controls.PipsPager();
            if (MaxVisiblePips is not null) ui.MaxVisiblePips = MaxVisiblePips.Value;
            if (NextButtonStyle is not null) ui.NextButtonStyle = NextButtonStyle;
            if (NextButtonVisibility is not null) ui.NextButtonVisibility = NextButtonVisibility.Value;
            if (NormalPipStyle is not null) ui.NormalPipStyle = NormalPipStyle;
            if (NumberOfPages is not null) ui.NumberOfPages = NumberOfPages.Value;
            if (Orientation is not null) ui.Orientation = Orientation.Value;
            if (PreviousButtonStyle is not null) ui.PreviousButtonStyle = PreviousButtonStyle;
            if (PreviousButtonVisibility is not null) ui.PreviousButtonVisibility = PreviousButtonVisibility.Value;
            if (SelectedPageIndex is not null) ui.SelectedPageIndex = SelectedPageIndex.Value;
            if (SelectedPipStyle is not null) ui.SelectedPipStyle = SelectedPipStyle;
            if (WrapMode is not null) ui.WrapMode = WrapMode.Value;
            return CSharpMarkup.WinUI.PipsPager.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.PipsPager"/></summary>
        public static PipsPager PipsPager()
        {
            var ui = new Xaml.Controls.PipsPager();
            return CSharpMarkup.WinUI.PipsPager.StartChain(ui);
        }
    }

    public partial class PipsPager : Control, IUI<Xaml.Controls.PipsPager>
    {
        static PipsPager instance;

        internal static PipsPager StartChain(Xaml.Controls.PipsPager ui)
        {
            if (instance == null) instance = new PipsPager();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.PipsPager ui;

        public new Xaml.Controls.PipsPager UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(PipsPager view) => view?.UI;

        public static implicit operator Xaml.Controls.PipsPager(PipsPager view) => view?.UI;

        public static implicit operator PipsPager(Xaml.Controls.PipsPager ui) => PipsPager.StartChain(ui);

        public PipsPager Invoke(Action<Xaml.Controls.PipsPager> action) { action?.Invoke(UI); return this; }

        protected PipsPager() { }
    }

    public static partial class PipsPagerExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.PipsPager.MaxVisiblePips"/></summary>
        public static TView MaxVisiblePips<TView>(this TView view, int value) where TView : PipsPager { view.UI.MaxVisiblePips = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PipsPager.NextButtonStyle"/></summary>
        public static TView NextButtonStyle<TView>(this TView view, Xaml.Style value) where TView : PipsPager { view.UI.NextButtonStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PipsPager.NextButtonVisibility"/></summary>
        public static TView NextButtonVisibility<TView>(this TView view, Xaml.Controls.PipsPagerButtonVisibility value) where TView : PipsPager { view.UI.NextButtonVisibility = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PipsPager.NormalPipStyle"/></summary>
        public static TView NormalPipStyle<TView>(this TView view, Xaml.Style value) where TView : PipsPager { view.UI.NormalPipStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PipsPager.NumberOfPages"/></summary>
        public static TView NumberOfPages<TView>(this TView view, int value) where TView : PipsPager { view.UI.NumberOfPages = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PipsPager.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.Orientation value) where TView : PipsPager { view.UI.Orientation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PipsPager.PreviousButtonStyle"/></summary>
        public static TView PreviousButtonStyle<TView>(this TView view, Xaml.Style value) where TView : PipsPager { view.UI.PreviousButtonStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PipsPager.PreviousButtonVisibility"/></summary>
        public static TView PreviousButtonVisibility<TView>(this TView view, Xaml.Controls.PipsPagerButtonVisibility value) where TView : PipsPager { view.UI.PreviousButtonVisibility = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PipsPager.SelectedPageIndex"/></summary>
        public static TView SelectedPageIndex<TView>(this TView view, int value) where TView : PipsPager { view.UI.SelectedPageIndex = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PipsPager.SelectedPipStyle"/></summary>
        public static TView SelectedPipStyle<TView>(this TView view, Xaml.Style value) where TView : PipsPager { view.UI.SelectedPipStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.PipsPager.WrapMode"/></summary>
        public static TView WrapMode<TView>(this TView view, Xaml.Controls.PipsPagerWrapMode value) where TView : PipsPager { view.UI.WrapMode = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PipsPager.MaxVisiblePips"/></summary>
        public static DependencyProperty<TTarget, int> MaxVisiblePips<TTarget>(this TTarget target) where TTarget : PipsPager
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.PipsPager.MaxVisiblePipsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PipsPager.NextButtonStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> NextButtonStyle<TTarget>(this TTarget target) where TTarget : PipsPager
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.PipsPager.NextButtonStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PipsPager.NextButtonVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.PipsPagerButtonVisibility> NextButtonVisibility<TTarget>(this TTarget target) where TTarget : PipsPager
        => DependencyProperty<TTarget, Xaml.Controls.PipsPagerButtonVisibility>.Get(target, Xaml.Controls.PipsPager.NextButtonVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PipsPager.NormalPipStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> NormalPipStyle<TTarget>(this TTarget target) where TTarget : PipsPager
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.PipsPager.NormalPipStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PipsPager.NumberOfPages"/></summary>
        public static DependencyProperty<TTarget, int> NumberOfPages<TTarget>(this TTarget target) where TTarget : PipsPager
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.PipsPager.NumberOfPagesProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PipsPager.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Orientation> Orientation<TTarget>(this TTarget target) where TTarget : PipsPager
        => DependencyProperty<TTarget, Xaml.Controls.Orientation>.Get(target, Xaml.Controls.PipsPager.OrientationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PipsPager.PreviousButtonStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> PreviousButtonStyle<TTarget>(this TTarget target) where TTarget : PipsPager
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.PipsPager.PreviousButtonStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PipsPager.PreviousButtonVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.PipsPagerButtonVisibility> PreviousButtonVisibility<TTarget>(this TTarget target) where TTarget : PipsPager
        => DependencyProperty<TTarget, Xaml.Controls.PipsPagerButtonVisibility>.Get(target, Xaml.Controls.PipsPager.PreviousButtonVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PipsPager.SelectedPageIndex"/></summary>
        public static DependencyProperty<TTarget, int> SelectedPageIndex<TTarget>(this TTarget target) where TTarget : PipsPager
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.PipsPager.SelectedPageIndexProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PipsPager.SelectedPipStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> SelectedPipStyle<TTarget>(this TTarget target) where TTarget : PipsPager
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.PipsPager.SelectedPipStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PipsPager.WrapMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.PipsPagerWrapMode> WrapMode<TTarget>(this TTarget target) where TTarget : PipsPager
        => DependencyProperty<TTarget, Xaml.Controls.PipsPagerWrapMode>.Get(target, Xaml.Controls.PipsPager.WrapModeProperty);
    }
}

namespace CSharpMarkup.WinUI // PipsPagerTemplateSettings
{
    public partial class PipsPagerTemplateSettings : DependencyObject, IUI<Xaml.Controls.PipsPagerTemplateSettings>
    {
        Xaml.Controls.PipsPagerTemplateSettings ui;

        public new Xaml.Controls.PipsPagerTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PipsPagerTemplateSettings Invoke(Action<Xaml.Controls.PipsPagerTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected PipsPagerTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // Pivot
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Pivot"/></summary>
        public static Pivot Pivot(params UIObject[] Items)
        {
            var ui = new Xaml.Controls.Pivot();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<UIObject>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j].UI);
                else
                    ui.Items.Add(child.UI);
            }
            return CSharpMarkup.WinUI.Pivot.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Pivot"/></summary>
        public static Pivot Pivot()
        {
            var ui = new Xaml.Controls.Pivot();
            return CSharpMarkup.WinUI.Pivot.StartChain(ui);
        }
    }

    public partial class Pivot : ItemsControl, IUI<Xaml.Controls.Pivot>
    {
        static Pivot instance;

        internal static Pivot StartChain(Xaml.Controls.Pivot ui)
        {
            if (instance == null) instance = new Pivot();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Pivot ui;

        public new Xaml.Controls.Pivot UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Pivot view) => view?.UI;

        public static implicit operator Xaml.Controls.Pivot(Pivot view) => view?.UI;

        public static implicit operator Pivot(Xaml.Controls.Pivot ui) => Pivot.StartChain(ui);

        public Pivot Invoke(Action<Xaml.Controls.Pivot> action) { action?.Invoke(UI); return this; }

        protected Pivot() { }
    }

    public static partial class PivotExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Pivot.HeaderFocusVisualPlacement"/></summary>
        public static TView HeaderFocusVisualPlacement<TView>(this TView view, Xaml.Controls.PivotHeaderFocusVisualPlacement value) where TView : Pivot { view.UI.HeaderFocusVisualPlacement = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Pivot.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : Pivot { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Pivot.IsHeaderItemsCarouselEnabled"/></summary>
        public static TView IsHeaderItemsCarouselEnabled<TView>(this TView view, bool value) where TView : Pivot { view.UI.IsHeaderItemsCarouselEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Pivot.IsLocked"/></summary>
        public static TView IsLocked<TView>(this TView view, bool value) where TView : Pivot { view.UI.IsLocked = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Pivot.LeftHeader"/></summary>
        public static TView LeftHeader<TView>(this TView view, object value) where TView : Pivot { view.UI.LeftHeader = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Pivot.LeftHeaderTemplate"/></summary>
        public static TView LeftHeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : Pivot { view.UI.LeftHeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Pivot.RightHeader"/></summary>
        public static TView RightHeader<TView>(this TView view, object value) where TView : Pivot { view.UI.RightHeader = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Pivot.RightHeaderTemplate"/></summary>
        public static TView RightHeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : Pivot { view.UI.RightHeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Pivot.SelectedIndex"/></summary>
        public static TView SelectedIndex<TView>(this TView view, int value) where TView : Pivot { view.UI.SelectedIndex = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Pivot.SelectedItem"/></summary>
        public static TView SelectedItem<TView>(this TView view, object value) where TView : Pivot { view.UI.SelectedItem = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Pivot.Title"/></summary>
        public static TView Title<TView>(this TView view, object value) where TView : Pivot { view.UI.Title = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Pivot.TitleTemplate"/></summary>
        public static TView TitleTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : Pivot { view.UI.TitleTemplate = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Pivot.HeaderFocusVisualPlacement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.PivotHeaderFocusVisualPlacement> HeaderFocusVisualPlacement<TTarget>(this TTarget target) where TTarget : Pivot
        => DependencyProperty<TTarget, Xaml.Controls.PivotHeaderFocusVisualPlacement>.Get(target, Xaml.Controls.Pivot.HeaderFocusVisualPlacementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Pivot.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : Pivot
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.Pivot.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Pivot.IsHeaderItemsCarouselEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsHeaderItemsCarouselEnabled<TTarget>(this TTarget target) where TTarget : Pivot
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Pivot.IsHeaderItemsCarouselEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Pivot.IsLocked"/></summary>
        public static DependencyProperty<TTarget, bool> IsLocked<TTarget>(this TTarget target) where TTarget : Pivot
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Pivot.IsLockedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Pivot.LeftHeader"/></summary>
        public static DependencyProperty<TTarget, object> LeftHeader<TTarget>(this TTarget target) where TTarget : Pivot
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.Pivot.LeftHeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Pivot.LeftHeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> LeftHeaderTemplate<TTarget>(this TTarget target) where TTarget : Pivot
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.Pivot.LeftHeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Pivot.RightHeader"/></summary>
        public static DependencyProperty<TTarget, object> RightHeader<TTarget>(this TTarget target) where TTarget : Pivot
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.Pivot.RightHeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Pivot.RightHeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> RightHeaderTemplate<TTarget>(this TTarget target) where TTarget : Pivot
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.Pivot.RightHeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Pivot.SelectedIndex"/></summary>
        public static DependencyProperty<TTarget, int> SelectedIndex<TTarget>(this TTarget target) where TTarget : Pivot
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Pivot.SelectedIndexProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Pivot.SelectedItem"/></summary>
        public static DependencyProperty<TTarget, object> SelectedItem<TTarget>(this TTarget target) where TTarget : Pivot
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.Pivot.SelectedItemProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Pivot.Title"/></summary>
        public static DependencyProperty<TTarget, object> Title<TTarget>(this TTarget target) where TTarget : Pivot
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.Pivot.TitleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Pivot.TitleTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> TitleTemplate<TTarget>(this TTarget target) where TTarget : Pivot
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.Pivot.TitleTemplateProperty);

        /// <summary>Set <see cref="Xaml.Controls.Pivot.SlideInAnimationGroup"/></summary>
        public static TTarget Pivot_SlideInAnimationGroup<TTarget>(this TTarget target, Xaml.Controls.PivotSlideInAnimationGroup value) where TTarget : FrameworkElement
        { Xaml.Controls.Pivot.SetSlideInAnimationGroup(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Pivot.SlideInAnimationGroup"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.PivotSlideInAnimationGroup> Pivot_SlideInAnimationGroup<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.Controls.PivotSlideInAnimationGroup>.Get(target, Xaml.Controls.Pivot.SlideInAnimationGroupProperty);
    }
}

namespace CSharpMarkup.WinUI // PivotItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.PivotItem"/></summary>
        public static PivotItem PivotItem(UIObject Content)
        {
            var ui = new Xaml.Controls.PivotItem();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.PivotItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.PivotItem"/></summary>
        public static PivotItem PivotItem(object Header = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.PivotItem();
            if (Header is not null) ui.Header = Header;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.PivotItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.PivotItem"/></summary>
        public static PivotItem PivotItem()
        {
            var ui = new Xaml.Controls.PivotItem();
            return CSharpMarkup.WinUI.PivotItem.StartChain(ui);
        }
    }

    public partial class PivotItem : ContentControl, IUI<Xaml.Controls.PivotItem>
    {
        static PivotItem instance;

        internal static PivotItem StartChain(Xaml.Controls.PivotItem ui)
        {
            if (instance == null) instance = new PivotItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.PivotItem ui;

        public new Xaml.Controls.PivotItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(PivotItem view) => view?.UI;

        public static implicit operator Xaml.Controls.PivotItem(PivotItem view) => view?.UI;

        public static implicit operator PivotItem(Xaml.Controls.PivotItem ui) => PivotItem.StartChain(ui);

        public PivotItem Invoke(Action<Xaml.Controls.PivotItem> action) { action?.Invoke(UI); return this; }

        protected PivotItem() { }
    }

    public static partial class PivotItemExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.PivotItem.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : PivotItem { view.UI.Header = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.PivotItem.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : PivotItem
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.PivotItem.HeaderProperty);
    }
}

namespace CSharpMarkup.WinUI // AppBarButtonTemplateSettings
{
    public partial class AppBarButtonTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.AppBarButtonTemplateSettings>
    {
        Xaml.Controls.Primitives.AppBarButtonTemplateSettings ui;

        public new Xaml.Controls.Primitives.AppBarButtonTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public AppBarButtonTemplateSettings Invoke(Action<Xaml.Controls.Primitives.AppBarButtonTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected AppBarButtonTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // AppBarTemplateSettings
{
    public partial class AppBarTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.AppBarTemplateSettings>
    {
        Xaml.Controls.Primitives.AppBarTemplateSettings ui;

        public new Xaml.Controls.Primitives.AppBarTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public AppBarTemplateSettings Invoke(Action<Xaml.Controls.Primitives.AppBarTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected AppBarTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // AppBarToggleButtonTemplateSettings
{
    public partial class AppBarToggleButtonTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings>
    {
        Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings ui;

        public new Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public AppBarToggleButtonTemplateSettings Invoke(Action<Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected AppBarToggleButtonTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // AutoSuggestBoxHelper
{
    public static partial class AutoSuggestBoxHelperExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.AutoSuggestBoxHelper.KeepInteriorCornersSquare"/></summary>
        public static TTarget AutoSuggestBoxHelper_KeepInteriorCornersSquare<TTarget>(this TTarget target, bool value) where TTarget : AutoSuggestBox
        { Xaml.Controls.Primitives.AutoSuggestBoxHelper.SetKeepInteriorCornersSquare(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.AutoSuggestBoxHelper.KeepInteriorCornersSquare"/></summary>
        public static DependencyProperty<TTarget, bool> AutoSuggestBoxHelper_KeepInteriorCornersSquare<TTarget>(this TTarget target) where TTarget : AutoSuggestBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.AutoSuggestBoxHelper.KeepInteriorCornersSquareProperty);
    }
}

namespace CSharpMarkup.WinUI // ButtonBase
{
    public partial class ButtonBase : ContentControl, IUI<Xaml.Controls.Primitives.ButtonBase>, IDefaultBindProperty
    {
        Xaml.Controls.Primitives.ButtonBase ui;

        public new Xaml.Controls.Primitives.ButtonBase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.Primitives.ButtonBase.CommandProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.Primitives.ButtonBase.CommandProperty;

        public ButtonBase Invoke(Action<Xaml.Controls.Primitives.ButtonBase> action) { action?.Invoke(UI); return this; }

        protected ButtonBase() { }
    }

    public static partial class ButtonBaseExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.ButtonBase.ClickMode"/></summary>
        public static TView ClickMode<TView>(this TView view, Xaml.Controls.ClickMode value) where TView : ButtonBase { view.UI.ClickMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ButtonBase.Command"/></summary>
        public static TView Command<TView>(this TView view, ICommand value) where TView : ButtonBase { view.UI.Command = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ButtonBase.CommandParameter"/></summary>
        public static TView CommandParameter<TView>(this TView view, object value) where TView : ButtonBase { view.UI.CommandParameter = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ButtonBase.ClickMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ClickMode> ClickMode<TTarget>(this TTarget target) where TTarget : ButtonBase
        => DependencyProperty<TTarget, Xaml.Controls.ClickMode>.Get(target, Xaml.Controls.Primitives.ButtonBase.ClickModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ButtonBase.CommandParameter"/></summary>
        public static DependencyProperty<TTarget, object> CommandParameter<TTarget>(this TTarget target) where TTarget : ButtonBase
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.Primitives.ButtonBase.CommandParameterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ButtonBase.Command"/></summary>
        public static DependencyProperty<TTarget, ICommand> Command<TTarget>(this TTarget target) where TTarget : ButtonBase
        => DependencyProperty<TTarget, ICommand>.Get(target, Xaml.Controls.Primitives.ButtonBase.CommandProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ButtonBase.IsPointerOver"/></summary>
        public static DependencyProperty<TTarget, bool> IsPointerOver<TTarget>(this TTarget target) where TTarget : ButtonBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.ButtonBase.IsPointerOverProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ButtonBase.IsPressed"/></summary>
        public static DependencyProperty<TTarget, bool> IsPressed<TTarget>(this TTarget target) where TTarget : ButtonBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.ButtonBase.IsPressedProperty);
    }
}

namespace CSharpMarkup.WinUI // CalendarPanel
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.CalendarPanel"/></summary>
        public static CalendarPanel CalendarPanel(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.Primitives.CalendarPanel();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.CalendarPanel.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.CalendarPanel"/></summary>
        public static CalendarPanel CalendarPanel()
        {
            var ui = new Xaml.Controls.Primitives.CalendarPanel();
            return CSharpMarkup.WinUI.CalendarPanel.StartChain(ui);
        }
    }

    public partial class CalendarPanel : Panel, IUI<Xaml.Controls.Primitives.CalendarPanel>
    {
        static CalendarPanel instance;

        internal static CalendarPanel StartChain(Xaml.Controls.Primitives.CalendarPanel ui)
        {
            if (instance == null) instance = new CalendarPanel();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.CalendarPanel ui;

        public new Xaml.Controls.Primitives.CalendarPanel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(CalendarPanel view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.CalendarPanel(CalendarPanel view) => view?.UI;

        public static implicit operator CalendarPanel(Xaml.Controls.Primitives.CalendarPanel ui) => CalendarPanel.StartChain(ui);

        public CalendarPanel Invoke(Action<Xaml.Controls.Primitives.CalendarPanel> action) { action?.Invoke(UI); return this; }

        protected CalendarPanel() { }
    }
}

namespace CSharpMarkup.WinUI // CalendarViewTemplateSettings
{
    public partial class CalendarViewTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.CalendarViewTemplateSettings>
    {
        Xaml.Controls.Primitives.CalendarViewTemplateSettings ui;

        public new Xaml.Controls.Primitives.CalendarViewTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public CalendarViewTemplateSettings Invoke(Action<Xaml.Controls.Primitives.CalendarViewTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected CalendarViewTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // CarouselPanel
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.CarouselPanel"/></summary>
        public static CarouselPanel CarouselPanel(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.Primitives.CarouselPanel();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.CarouselPanel.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.CarouselPanel"/></summary>
        public static CarouselPanel CarouselPanel()
        {
            var ui = new Xaml.Controls.Primitives.CarouselPanel();
            return CSharpMarkup.WinUI.CarouselPanel.StartChain(ui);
        }
    }

    public partial class CarouselPanel : VirtualizingPanel, IUI<Xaml.Controls.Primitives.CarouselPanel>
    {
        static CarouselPanel instance;

        internal static CarouselPanel StartChain(Xaml.Controls.Primitives.CarouselPanel ui)
        {
            if (instance == null) instance = new CarouselPanel();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.CarouselPanel ui;

        public new Xaml.Controls.Primitives.CarouselPanel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(CarouselPanel view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.CarouselPanel(CarouselPanel view) => view?.UI;

        public static implicit operator CarouselPanel(Xaml.Controls.Primitives.CarouselPanel ui) => CarouselPanel.StartChain(ui);

        public CarouselPanel Invoke(Action<Xaml.Controls.Primitives.CarouselPanel> action) { action?.Invoke(UI); return this; }

        protected CarouselPanel() { }
    }

    public static partial class CarouselPanelExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.CarouselPanel.CanHorizontallyScroll"/></summary>
        public static TView CanHorizontallyScroll<TView>(this TView view, bool value) where TView : CarouselPanel { view.UI.CanHorizontallyScroll = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.CarouselPanel.CanVerticallyScroll"/></summary>
        public static TView CanVerticallyScroll<TView>(this TView view, bool value) where TView : CarouselPanel { view.UI.CanVerticallyScroll = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.CarouselPanel.ScrollOwner"/></summary>
        public static TView ScrollOwner<TView>(this TView view, object value) where TView : CarouselPanel { view.UI.ScrollOwner = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // ColorPickerSlider
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ColorPickerSlider"/></summary>
        public static ColorPickerSlider ColorPickerSlider(Xaml.Controls.ColorPickerHsvChannel? ColorChannel = default)
        {
            var ui = new Xaml.Controls.Primitives.ColorPickerSlider();
            if (ColorChannel is not null) ui.ColorChannel = ColorChannel.Value;
            return CSharpMarkup.WinUI.ColorPickerSlider.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ColorPickerSlider"/></summary>
        public static ColorPickerSlider ColorPickerSlider()
        {
            var ui = new Xaml.Controls.Primitives.ColorPickerSlider();
            return CSharpMarkup.WinUI.ColorPickerSlider.StartChain(ui);
        }
    }

    public partial class ColorPickerSlider : Slider, IUI<Xaml.Controls.Primitives.ColorPickerSlider>
    {
        static ColorPickerSlider instance;

        internal static ColorPickerSlider StartChain(Xaml.Controls.Primitives.ColorPickerSlider ui)
        {
            if (instance == null) instance = new ColorPickerSlider();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.ColorPickerSlider ui;

        public new Xaml.Controls.Primitives.ColorPickerSlider UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ColorPickerSlider view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.ColorPickerSlider(ColorPickerSlider view) => view?.UI;

        public static implicit operator ColorPickerSlider(Xaml.Controls.Primitives.ColorPickerSlider ui) => ColorPickerSlider.StartChain(ui);

        public ColorPickerSlider Invoke(Action<Xaml.Controls.Primitives.ColorPickerSlider> action) { action?.Invoke(UI); return this; }

        protected ColorPickerSlider() { }
    }

    public static partial class ColorPickerSliderExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.ColorPickerSlider.ColorChannel"/></summary>
        public static TView ColorChannel<TView>(this TView view, Xaml.Controls.ColorPickerHsvChannel value) where TView : ColorPickerSlider { view.UI.ColorChannel = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ColorPickerSlider.ColorChannel"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ColorPickerHsvChannel> ColorChannel<TTarget>(this TTarget target) where TTarget : ColorPickerSlider
        => DependencyProperty<TTarget, Xaml.Controls.ColorPickerHsvChannel>.Get(target, Xaml.Controls.Primitives.ColorPickerSlider.ColorChannelProperty);
    }
}

namespace CSharpMarkup.WinUI // ColorSpectrum
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ColorSpectrum"/></summary>
        /// <remarks>Remark: ColorSpectrum().Bind() binds to <see cref="Xaml.Controls.Primitives.ColorSpectrum.ColorProperty"/></remarks>
        public static ColorSpectrum ColorSpectrum(Windows.UI.Color? Color = default, Xaml.Controls.ColorSpectrumComponents? Components = default, Vector4? HsvColor = default, int? MaxHue = default, int? MaxSaturation = default, int? MaxValue = default, int? MinHue = default, int? MinSaturation = default, int? MinValue = default, Xaml.Controls.ColorSpectrumShape? Shape = default)
        {
            var ui = new Xaml.Controls.Primitives.ColorSpectrum();
            if (Color is not null) ui.Color = Color.Value;
            if (Components is not null) ui.Components = Components.Value;
            if (HsvColor is not null) ui.HsvColor = HsvColor.Value;
            if (MaxHue is not null) ui.MaxHue = MaxHue.Value;
            if (MaxSaturation is not null) ui.MaxSaturation = MaxSaturation.Value;
            if (MaxValue is not null) ui.MaxValue = MaxValue.Value;
            if (MinHue is not null) ui.MinHue = MinHue.Value;
            if (MinSaturation is not null) ui.MinSaturation = MinSaturation.Value;
            if (MinValue is not null) ui.MinValue = MinValue.Value;
            if (Shape is not null) ui.Shape = Shape.Value;
            return CSharpMarkup.WinUI.ColorSpectrum.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ColorSpectrum"/></summary>
        /// <remarks>Remark: ColorSpectrum().Bind() binds to <see cref="Xaml.Controls.Primitives.ColorSpectrum.ColorProperty"/></remarks>
        public static ColorSpectrum ColorSpectrum()
        {
            var ui = new Xaml.Controls.Primitives.ColorSpectrum();
            return CSharpMarkup.WinUI.ColorSpectrum.StartChain(ui);
        }
    }

    public partial class ColorSpectrum : Control, IUI<Xaml.Controls.Primitives.ColorSpectrum>, IDefaultBindProperty
    {
        static ColorSpectrum instance;

        internal static ColorSpectrum StartChain(Xaml.Controls.Primitives.ColorSpectrum ui)
        {
            if (instance == null) instance = new ColorSpectrum();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.ColorSpectrum ui;

        public new Xaml.Controls.Primitives.ColorSpectrum UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.Primitives.ColorSpectrum.ColorProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.Primitives.ColorSpectrum.ColorProperty;

        public static implicit operator Xaml.UIElement(ColorSpectrum view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.ColorSpectrum(ColorSpectrum view) => view?.UI;

        public static implicit operator ColorSpectrum(Xaml.Controls.Primitives.ColorSpectrum ui) => ColorSpectrum.StartChain(ui);

        public ColorSpectrum Invoke(Action<Xaml.Controls.Primitives.ColorSpectrum> action) { action?.Invoke(UI); return this; }

        protected ColorSpectrum() { }
    }

    public static partial class ColorSpectrumExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.ColorSpectrum.Color"/></summary>
        public static TView Color<TView>(this TView view, Windows.UI.Color value) where TView : ColorSpectrum { view.UI.Color = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ColorSpectrum.Components"/></summary>
        public static TView Components<TView>(this TView view, Xaml.Controls.ColorSpectrumComponents value) where TView : ColorSpectrum { view.UI.Components = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ColorSpectrum.HsvColor"/></summary>
        public static TView HsvColor<TView>(this TView view, Vector4 value) where TView : ColorSpectrum { view.UI.HsvColor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ColorSpectrum.MaxHue"/></summary>
        public static TView MaxHue<TView>(this TView view, int value) where TView : ColorSpectrum { view.UI.MaxHue = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ColorSpectrum.MaxSaturation"/></summary>
        public static TView MaxSaturation<TView>(this TView view, int value) where TView : ColorSpectrum { view.UI.MaxSaturation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ColorSpectrum.MaxValue"/></summary>
        public static TView MaxValue<TView>(this TView view, int value) where TView : ColorSpectrum { view.UI.MaxValue = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ColorSpectrum.MinHue"/></summary>
        public static TView MinHue<TView>(this TView view, int value) where TView : ColorSpectrum { view.UI.MinHue = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ColorSpectrum.MinSaturation"/></summary>
        public static TView MinSaturation<TView>(this TView view, int value) where TView : ColorSpectrum { view.UI.MinSaturation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ColorSpectrum.MinValue"/></summary>
        public static TView MinValue<TView>(this TView view, int value) where TView : ColorSpectrum { view.UI.MinValue = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ColorSpectrum.Shape"/></summary>
        public static TView Shape<TView>(this TView view, Xaml.Controls.ColorSpectrumShape value) where TView : ColorSpectrum { view.UI.Shape = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ColorSpectrum.Color"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Color> Color<TTarget>(this TTarget target) where TTarget : ColorSpectrum
        => DependencyProperty<TTarget, Windows.UI.Color>.Get(target, Xaml.Controls.Primitives.ColorSpectrum.ColorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ColorSpectrum.Components"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents> Components<TTarget>(this TTarget target) where TTarget : ColorSpectrum
        => DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents>.Get(target, Xaml.Controls.Primitives.ColorSpectrum.ComponentsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ColorSpectrum.HsvColor"/></summary>
        public static DependencyProperty<TTarget, Vector4> HsvColor<TTarget>(this TTarget target) where TTarget : ColorSpectrum
        => DependencyProperty<TTarget, Vector4>.Get(target, Xaml.Controls.Primitives.ColorSpectrum.HsvColorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ColorSpectrum.MaxHue"/></summary>
        public static DependencyProperty<TTarget, int> MaxHue<TTarget>(this TTarget target) where TTarget : ColorSpectrum
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Primitives.ColorSpectrum.MaxHueProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ColorSpectrum.MaxSaturation"/></summary>
        public static DependencyProperty<TTarget, int> MaxSaturation<TTarget>(this TTarget target) where TTarget : ColorSpectrum
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Primitives.ColorSpectrum.MaxSaturationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ColorSpectrum.MaxValue"/></summary>
        public static DependencyProperty<TTarget, int> MaxValue<TTarget>(this TTarget target) where TTarget : ColorSpectrum
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Primitives.ColorSpectrum.MaxValueProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ColorSpectrum.MinHue"/></summary>
        public static DependencyProperty<TTarget, int> MinHue<TTarget>(this TTarget target) where TTarget : ColorSpectrum
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Primitives.ColorSpectrum.MinHueProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ColorSpectrum.MinSaturation"/></summary>
        public static DependencyProperty<TTarget, int> MinSaturation<TTarget>(this TTarget target) where TTarget : ColorSpectrum
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Primitives.ColorSpectrum.MinSaturationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ColorSpectrum.MinValue"/></summary>
        public static DependencyProperty<TTarget, int> MinValue<TTarget>(this TTarget target) where TTarget : ColorSpectrum
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Primitives.ColorSpectrum.MinValueProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ColorSpectrum.Shape"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumShape> Shape<TTarget>(this TTarget target) where TTarget : ColorSpectrum
        => DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumShape>.Get(target, Xaml.Controls.Primitives.ColorSpectrum.ShapeProperty);
    }
}

namespace CSharpMarkup.WinUI // ColumnMajorUniformToLargestGridLayout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout"/></summary>
        public static ColumnMajorUniformToLargestGridLayout ColumnMajorUniformToLargestGridLayout(double? ColumnSpacing = default, int? MaxColumns = default, double? RowSpacing = default)
        {
            var ui = new Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout();
            if (ColumnSpacing is not null) ui.ColumnSpacing = ColumnSpacing.Value;
            if (MaxColumns is not null) ui.MaxColumns = MaxColumns.Value;
            if (RowSpacing is not null) ui.RowSpacing = RowSpacing.Value;
            return CSharpMarkup.WinUI.ColumnMajorUniformToLargestGridLayout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout"/></summary>
        public static ColumnMajorUniformToLargestGridLayout ColumnMajorUniformToLargestGridLayout()
        {
            var ui = new Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout();
            return CSharpMarkup.WinUI.ColumnMajorUniformToLargestGridLayout.StartChain(ui);
        }
    }

    public partial class ColumnMajorUniformToLargestGridLayout : NonVirtualizingLayout, IUI<Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout>
    {
        static ColumnMajorUniformToLargestGridLayout instance;

        internal static ColumnMajorUniformToLargestGridLayout StartChain(Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout ui)
        {
            if (instance == null) instance = new ColumnMajorUniformToLargestGridLayout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout ui;

        public new Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout(ColumnMajorUniformToLargestGridLayout view) => view?.UI;

        public static implicit operator ColumnMajorUniformToLargestGridLayout(Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout ui) => ColumnMajorUniformToLargestGridLayout.StartChain(ui);

        public ColumnMajorUniformToLargestGridLayout Invoke(Action<Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout> action) { action?.Invoke(UI); return this; }

        protected ColumnMajorUniformToLargestGridLayout() { }
    }

    public static partial class ColumnMajorUniformToLargestGridLayoutExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout.ColumnSpacing"/></summary>
        public static TView ColumnSpacing<TView>(this TView view, double value) where TView : ColumnMajorUniformToLargestGridLayout { view.UI.ColumnSpacing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout.MaxColumns"/></summary>
        public static TView MaxColumns<TView>(this TView view, int value) where TView : ColumnMajorUniformToLargestGridLayout { view.UI.MaxColumns = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout.RowSpacing"/></summary>
        public static TView RowSpacing<TView>(this TView view, double value) where TView : ColumnMajorUniformToLargestGridLayout { view.UI.RowSpacing = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout.ColumnSpacing"/></summary>
        public static DependencyProperty<TTarget, double> ColumnSpacing<TTarget>(this TTarget target) where TTarget : ColumnMajorUniformToLargestGridLayout
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout.ColumnSpacingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout.MaxColumns"/></summary>
        public static DependencyProperty<TTarget, int> MaxColumns<TTarget>(this TTarget target) where TTarget : ColumnMajorUniformToLargestGridLayout
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout.MaxColumnsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout.RowSpacing"/></summary>
        public static DependencyProperty<TTarget, double> RowSpacing<TTarget>(this TTarget target) where TTarget : ColumnMajorUniformToLargestGridLayout
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout.RowSpacingProperty);
    }
}

namespace CSharpMarkup.WinUI // ComboBoxHelper
{
    public static partial class ComboBoxHelperExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.ComboBoxHelper.KeepInteriorCornersSquare"/></summary>
        public static TTarget ComboBoxHelper_KeepInteriorCornersSquare<TTarget>(this TTarget target, bool value) where TTarget : ComboBox
        { Xaml.Controls.Primitives.ComboBoxHelper.SetKeepInteriorCornersSquare(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ComboBoxHelper.KeepInteriorCornersSquare"/></summary>
        public static DependencyProperty<TTarget, bool> ComboBoxHelper_KeepInteriorCornersSquare<TTarget>(this TTarget target) where TTarget : ComboBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.ComboBoxHelper.KeepInteriorCornersSquareProperty);
    }
}

namespace CSharpMarkup.WinUI // ComboBoxTemplateSettings
{
    public partial class ComboBoxTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.ComboBoxTemplateSettings>
    {
        Xaml.Controls.Primitives.ComboBoxTemplateSettings ui;

        public new Xaml.Controls.Primitives.ComboBoxTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ComboBoxTemplateSettings Invoke(Action<Xaml.Controls.Primitives.ComboBoxTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected ComboBoxTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // CommandBarFlyoutCommandBar
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.CommandBarFlyoutCommandBar"/></summary>
        public static CommandBarFlyoutCommandBar CommandBarFlyoutCommandBar(params CommandBarElement[] PrimaryCommands)
        {
            var ui = new Xaml.Controls.Primitives.CommandBarFlyoutCommandBar();
            for (int i = 0; i < PrimaryCommands.Length; i++)
            {
                var child = PrimaryCommands[i];
                if (child == null) continue;

                var subChildren = Spreader<CommandBarElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.PrimaryCommands.Add(subChildren[j].UI);
                else
                    ui.PrimaryCommands.Add(child.UI);
            }
            return CSharpMarkup.WinUI.CommandBarFlyoutCommandBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.CommandBarFlyoutCommandBar"/></summary>
        public static CommandBarFlyoutCommandBar CommandBarFlyoutCommandBar()
        {
            var ui = new Xaml.Controls.Primitives.CommandBarFlyoutCommandBar();
            return CSharpMarkup.WinUI.CommandBarFlyoutCommandBar.StartChain(ui);
        }
    }

    public partial class CommandBarFlyoutCommandBar : CommandBar, IUI<Xaml.Controls.Primitives.CommandBarFlyoutCommandBar>
    {
        static CommandBarFlyoutCommandBar instance;

        internal static CommandBarFlyoutCommandBar StartChain(Xaml.Controls.Primitives.CommandBarFlyoutCommandBar ui)
        {
            if (instance == null) instance = new CommandBarFlyoutCommandBar();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.CommandBarFlyoutCommandBar ui;

        public new Xaml.Controls.Primitives.CommandBarFlyoutCommandBar UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(CommandBarFlyoutCommandBar view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.CommandBarFlyoutCommandBar(CommandBarFlyoutCommandBar view) => view?.UI;

        public static implicit operator CommandBarFlyoutCommandBar(Xaml.Controls.Primitives.CommandBarFlyoutCommandBar ui) => CommandBarFlyoutCommandBar.StartChain(ui);

        public CommandBarFlyoutCommandBar Invoke(Action<Xaml.Controls.Primitives.CommandBarFlyoutCommandBar> action) { action?.Invoke(UI); return this; }

        protected CommandBarFlyoutCommandBar() { }
    }

    public static partial class CommandBarFlyoutCommandBarExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.CommandBarFlyoutCommandBar.SystemBackdrop"/></summary>
        public static TView SystemBackdrop<TView>(this TView view, Xaml.Media.SystemBackdrop value) where TView : CommandBarFlyoutCommandBar { view.UI.SystemBackdrop = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.CommandBarFlyoutCommandBar.SystemBackdrop"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.SystemBackdrop> SystemBackdrop<TTarget>(this TTarget target) where TTarget : CommandBarFlyoutCommandBar
        => DependencyProperty<TTarget, Xaml.Media.SystemBackdrop>.Get(target, Xaml.Controls.Primitives.CommandBarFlyoutCommandBar.SystemBackdropProperty);
    }
}

namespace CSharpMarkup.WinUI // CommandBarFlyoutCommandBarAutomationProperties
{
    public static partial class CommandBarFlyoutCommandBarAutomationPropertiesExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.CommandBarFlyoutCommandBarAutomationProperties.ControlType"/></summary>
        public static TTarget CommandBarFlyoutCommandBarAutomationProperties_ControlType<TTarget>(this TTarget target, Xaml.Automation.Peers.AutomationControlType value) where TTarget : UIElement
        { Xaml.Controls.Primitives.CommandBarFlyoutCommandBarAutomationProperties.SetControlType(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.CommandBarFlyoutCommandBarAutomationProperties.ControlType"/></summary>
        public static DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> CommandBarFlyoutCommandBarAutomationProperties_ControlType<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType>.Get(target, Xaml.Controls.Primitives.CommandBarFlyoutCommandBarAutomationProperties.ControlTypeProperty);
    }
}

namespace CSharpMarkup.WinUI // CommandBarFlyoutCommandBarTemplateSettings
{
    public partial class CommandBarFlyoutCommandBarTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings>
    {
        Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings ui;

        public new Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public CommandBarFlyoutCommandBarTemplateSettings Invoke(Action<Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected CommandBarFlyoutCommandBarTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // CommandBarTemplateSettings
{
    public partial class CommandBarTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.CommandBarTemplateSettings>
    {
        Xaml.Controls.Primitives.CommandBarTemplateSettings ui;

        public new Xaml.Controls.Primitives.CommandBarTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public CommandBarTemplateSettings Invoke(Action<Xaml.Controls.Primitives.CommandBarTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected CommandBarTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // CornerRadiusFilterConverter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.CornerRadiusFilterConverter"/></summary>
        public static CornerRadiusFilterConverter CornerRadiusFilterConverter(Xaml.Controls.Primitives.CornerRadiusFilterKind? Filter = default, double? Scale = default)
        {
            var ui = new Xaml.Controls.Primitives.CornerRadiusFilterConverter();
            if (Filter is not null) ui.Filter = Filter.Value;
            if (Scale is not null) ui.Scale = Scale.Value;
            return CSharpMarkup.WinUI.CornerRadiusFilterConverter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.CornerRadiusFilterConverter"/></summary>
        public static CornerRadiusFilterConverter CornerRadiusFilterConverter()
        {
            var ui = new Xaml.Controls.Primitives.CornerRadiusFilterConverter();
            return CSharpMarkup.WinUI.CornerRadiusFilterConverter.StartChain(ui);
        }
    }

    public partial class CornerRadiusFilterConverter : DependencyObject, IUI<Xaml.Controls.Primitives.CornerRadiusFilterConverter>
    {
        static CornerRadiusFilterConverter instance;

        internal static CornerRadiusFilterConverter StartChain(Xaml.Controls.Primitives.CornerRadiusFilterConverter ui)
        {
            if (instance == null) instance = new CornerRadiusFilterConverter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.CornerRadiusFilterConverter ui;

        public new Xaml.Controls.Primitives.CornerRadiusFilterConverter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.Primitives.CornerRadiusFilterConverter(CornerRadiusFilterConverter view) => view?.UI;

        public static implicit operator CornerRadiusFilterConverter(Xaml.Controls.Primitives.CornerRadiusFilterConverter ui) => CornerRadiusFilterConverter.StartChain(ui);

        public CornerRadiusFilterConverter Invoke(Action<Xaml.Controls.Primitives.CornerRadiusFilterConverter> action) { action?.Invoke(UI); return this; }

        protected CornerRadiusFilterConverter() { }
    }

    public static partial class CornerRadiusFilterConverterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.CornerRadiusFilterConverter.Filter"/></summary>
        public static TView Filter<TView>(this TView view, Xaml.Controls.Primitives.CornerRadiusFilterKind value) where TView : CornerRadiusFilterConverter { view.UI.Filter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.CornerRadiusFilterConverter.Scale"/></summary>
        public static TView Scale<TView>(this TView view, double value) where TView : CornerRadiusFilterConverter { view.UI.Scale = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.CornerRadiusFilterConverter.Filter"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusFilterKind> Filter<TTarget>(this TTarget target) where TTarget : CornerRadiusFilterConverter
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusFilterKind>.Get(target, Xaml.Controls.Primitives.CornerRadiusFilterConverter.FilterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.CornerRadiusFilterConverter.Scale"/></summary>
        public static DependencyProperty<TTarget, double> Scale<TTarget>(this TTarget target) where TTarget : CornerRadiusFilterConverter
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.CornerRadiusFilterConverter.ScaleProperty);
    }
}

namespace CSharpMarkup.WinUI // CornerRadiusToThicknessConverter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverter"/></summary>
        public static CornerRadiusToThicknessConverter CornerRadiusToThicknessConverter(Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind? ConversionKind = default, double? Multiplier = default)
        {
            var ui = new Xaml.Controls.Primitives.CornerRadiusToThicknessConverter();
            if (ConversionKind is not null) ui.ConversionKind = ConversionKind.Value;
            if (Multiplier is not null) ui.Multiplier = Multiplier.Value;
            return CSharpMarkup.WinUI.CornerRadiusToThicknessConverter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverter"/></summary>
        public static CornerRadiusToThicknessConverter CornerRadiusToThicknessConverter()
        {
            var ui = new Xaml.Controls.Primitives.CornerRadiusToThicknessConverter();
            return CSharpMarkup.WinUI.CornerRadiusToThicknessConverter.StartChain(ui);
        }
    }

    public partial class CornerRadiusToThicknessConverter : DependencyObject, IUI<Xaml.Controls.Primitives.CornerRadiusToThicknessConverter>
    {
        static CornerRadiusToThicknessConverter instance;

        internal static CornerRadiusToThicknessConverter StartChain(Xaml.Controls.Primitives.CornerRadiusToThicknessConverter ui)
        {
            if (instance == null) instance = new CornerRadiusToThicknessConverter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.CornerRadiusToThicknessConverter ui;

        public new Xaml.Controls.Primitives.CornerRadiusToThicknessConverter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.Primitives.CornerRadiusToThicknessConverter(CornerRadiusToThicknessConverter view) => view?.UI;

        public static implicit operator CornerRadiusToThicknessConverter(Xaml.Controls.Primitives.CornerRadiusToThicknessConverter ui) => CornerRadiusToThicknessConverter.StartChain(ui);

        public CornerRadiusToThicknessConverter Invoke(Action<Xaml.Controls.Primitives.CornerRadiusToThicknessConverter> action) { action?.Invoke(UI); return this; }

        protected CornerRadiusToThicknessConverter() { }
    }

    public static partial class CornerRadiusToThicknessConverterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverter.ConversionKind"/></summary>
        public static TView ConversionKind<TView>(this TView view, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind value) where TView : CornerRadiusToThicknessConverter { view.UI.ConversionKind = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverter.Multiplier"/></summary>
        public static TView Multiplier<TView>(this TView view, double value) where TView : CornerRadiusToThicknessConverter { view.UI.Multiplier = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverter.ConversionKind"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind> ConversionKind<TTarget>(this TTarget target) where TTarget : CornerRadiusToThicknessConverter
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind>.Get(target, Xaml.Controls.Primitives.CornerRadiusToThicknessConverter.ConversionKindProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverter.Multiplier"/></summary>
        public static DependencyProperty<TTarget, double> Multiplier<TTarget>(this TTarget target) where TTarget : CornerRadiusToThicknessConverter
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.CornerRadiusToThicknessConverter.MultiplierProperty);
    }
}

namespace CSharpMarkup.WinUI // FlyoutBase
{
    public partial class FlyoutBase : DependencyObject, IUI<Xaml.Controls.Primitives.FlyoutBase>
    {
        Xaml.Controls.Primitives.FlyoutBase ui;

        public new Xaml.Controls.Primitives.FlyoutBase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public FlyoutBase Invoke(Action<Xaml.Controls.Primitives.FlyoutBase> action) { action?.Invoke(UI); return this; }

        protected FlyoutBase() { }
    }

    public static partial class FlyoutBaseExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.FlyoutBase.AllowFocusOnInteraction"/></summary>
        public static TView AllowFocusOnInteraction<TView>(this TView view, bool value) where TView : FlyoutBase { view.UI.AllowFocusOnInteraction = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.FlyoutBase.AllowFocusWhenDisabled"/></summary>
        public static TView AllowFocusWhenDisabled<TView>(this TView view, bool value) where TView : FlyoutBase { view.UI.AllowFocusWhenDisabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.FlyoutBase.AreOpenCloseAnimationsEnabled"/></summary>
        public static TView AreOpenCloseAnimationsEnabled<TView>(this TView view, bool value) where TView : FlyoutBase { view.UI.AreOpenCloseAnimationsEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.FlyoutBase.ElementSoundMode"/></summary>
        public static TView ElementSoundMode<TView>(this TView view, Xaml.ElementSoundMode value) where TView : FlyoutBase { view.UI.ElementSoundMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.FlyoutBase.LightDismissOverlayMode"/></summary>
        public static TView LightDismissOverlayMode<TView>(this TView view, Xaml.Controls.LightDismissOverlayMode value) where TView : FlyoutBase { view.UI.LightDismissOverlayMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.FlyoutBase.OverlayInputPassThroughElement"/></summary>
        public static TView OverlayInputPassThroughElement<TView>(this TView view, Xaml.DependencyObject value) where TView : FlyoutBase { view.UI.OverlayInputPassThroughElement = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.FlyoutBase.Placement"/></summary>
        public static TView Placement<TView>(this TView view, Xaml.Controls.Primitives.FlyoutPlacementMode value) where TView : FlyoutBase { view.UI.Placement = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.FlyoutBase.ShouldConstrainToRootBounds"/></summary>
        public static TView ShouldConstrainToRootBounds<TView>(this TView view, bool value) where TView : FlyoutBase { view.UI.ShouldConstrainToRootBounds = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.FlyoutBase.ShowMode"/></summary>
        public static TView ShowMode<TView>(this TView view, Xaml.Controls.Primitives.FlyoutShowMode value) where TView : FlyoutBase { view.UI.ShowMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.FlyoutBase.SystemBackdrop"/></summary>
        public static TView SystemBackdrop<TView>(this TView view, Xaml.Media.SystemBackdrop value) where TView : FlyoutBase { view.UI.SystemBackdrop = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.FlyoutBase.XamlRoot"/></summary>
        public static TView XamlRoot<TView>(this TView view, Xaml.XamlRoot value) where TView : FlyoutBase { view.UI.XamlRoot = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.FlyoutBase.AllowFocusOnInteraction"/></summary>
        public static DependencyProperty<TTarget, bool> AllowFocusOnInteraction<TTarget>(this TTarget target) where TTarget : FlyoutBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.FlyoutBase.AllowFocusOnInteractionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.FlyoutBase.AllowFocusWhenDisabled"/></summary>
        public static DependencyProperty<TTarget, bool> AllowFocusWhenDisabled<TTarget>(this TTarget target) where TTarget : FlyoutBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.FlyoutBase.AllowFocusWhenDisabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.FlyoutBase.AreOpenCloseAnimationsEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> AreOpenCloseAnimationsEnabled<TTarget>(this TTarget target) where TTarget : FlyoutBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.FlyoutBase.AreOpenCloseAnimationsEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.FlyoutBase.ElementSoundMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.ElementSoundMode> ElementSoundMode<TTarget>(this TTarget target) where TTarget : FlyoutBase
        => DependencyProperty<TTarget, Xaml.ElementSoundMode>.Get(target, Xaml.Controls.Primitives.FlyoutBase.ElementSoundModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.FlyoutBase.InputDevicePrefersPrimaryCommands"/></summary>
        public static DependencyProperty<TTarget, bool> InputDevicePrefersPrimaryCommands<TTarget>(this TTarget target) where TTarget : FlyoutBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.FlyoutBase.InputDevicePrefersPrimaryCommandsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.FlyoutBase.IsOpen"/></summary>
        public static DependencyProperty<TTarget, bool> IsOpen<TTarget>(this TTarget target) where TTarget : FlyoutBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.FlyoutBase.IsOpenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.FlyoutBase.LightDismissOverlayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> LightDismissOverlayMode<TTarget>(this TTarget target) where TTarget : FlyoutBase
        => DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode>.Get(target, Xaml.Controls.Primitives.FlyoutBase.LightDismissOverlayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.FlyoutBase.OverlayInputPassThroughElement"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> OverlayInputPassThroughElement<TTarget>(this TTarget target) where TTarget : FlyoutBase
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Controls.Primitives.FlyoutBase.OverlayInputPassThroughElementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.FlyoutBase.Placement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> Placement<TTarget>(this TTarget target) where TTarget : FlyoutBase
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode>.Get(target, Xaml.Controls.Primitives.FlyoutBase.PlacementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.FlyoutBase.ShouldConstrainToRootBounds"/></summary>
        public static DependencyProperty<TTarget, bool> ShouldConstrainToRootBounds<TTarget>(this TTarget target) where TTarget : FlyoutBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.FlyoutBase.ShouldConstrainToRootBoundsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.FlyoutBase.ShowMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutShowMode> ShowMode<TTarget>(this TTarget target) where TTarget : FlyoutBase
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutShowMode>.Get(target, Xaml.Controls.Primitives.FlyoutBase.ShowModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.FlyoutBase.SystemBackdrop"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.SystemBackdrop> SystemBackdrop<TTarget>(this TTarget target) where TTarget : FlyoutBase
        => DependencyProperty<TTarget, Xaml.Media.SystemBackdrop>.Get(target, Xaml.Controls.Primitives.FlyoutBase.SystemBackdropProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.FlyoutBase.Target"/></summary>
        public static DependencyProperty<TTarget, Xaml.FrameworkElement> Target<TTarget>(this TTarget target) where TTarget : FlyoutBase
        => DependencyProperty<TTarget, Xaml.FrameworkElement>.Get(target, Xaml.Controls.Primitives.FlyoutBase.TargetProperty);

        /// <summary>Set <see cref="Xaml.Controls.Primitives.FlyoutBase.AttachedFlyout"/></summary>
        public static TTarget FlyoutBase_AttachedFlyout<TTarget>(this TTarget target, Xaml.Controls.Primitives.FlyoutBase value) where TTarget : FrameworkElement
        { Xaml.Controls.Primitives.FlyoutBase.SetAttachedFlyout(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.FlyoutBase.AttachedFlyout"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase> FlyoutBase_AttachedFlyout<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase>.Get(target, Xaml.Controls.Primitives.FlyoutBase.AttachedFlyoutProperty);
    }
}

namespace CSharpMarkup.WinUI // GridViewItemPresenter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.GridViewItemPresenter"/></summary>
        public static GridViewItemPresenter GridViewItemPresenter(UIObject Content)
        {
            var ui = new Xaml.Controls.Primitives.GridViewItemPresenter();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.GridViewItemPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.GridViewItemPresenter"/></summary>
        public static GridViewItemPresenter GridViewItemPresenter(Xaml.Media.Brush CheckBrush = default, Xaml.Media.Brush CheckHintBrush = default, Xaml.Media.Brush CheckSelectingBrush = default, Xaml.Thickness? ContentMargin = default, double? DisabledOpacity = default, Xaml.Media.Brush DragBackground = default, Xaml.Media.Brush DragForeground = default, double? DragOpacity = default, Xaml.Media.Brush FocusBorderBrush = default, Xaml.HorizontalAlignment? GridViewItemPresenterHorizontalContentAlignment = default, Xaml.Thickness? GridViewItemPresenterPadding = default, Xaml.VerticalAlignment? GridViewItemPresenterVerticalContentAlignment = default, Xaml.Media.Brush PlaceholderBackground = default, Xaml.Media.Brush PointerOverBackground = default, Xaml.Thickness? PointerOverBackgroundMargin = default, double? ReorderHintOffset = default, Xaml.Media.Brush SelectedBackground = default, Xaml.Thickness? SelectedBorderThickness = default, Xaml.Media.Brush SelectedForeground = default, Xaml.Media.Brush SelectedPointerOverBackground = default, Xaml.Media.Brush SelectedPointerOverBorderBrush = default, bool? SelectionCheckMarkVisualEnabled = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.Primitives.GridViewItemPresenter();
            if (CheckBrush is not null) ui.CheckBrush = CheckBrush;
            if (CheckHintBrush is not null) ui.CheckHintBrush = CheckHintBrush;
            if (CheckSelectingBrush is not null) ui.CheckSelectingBrush = CheckSelectingBrush;
            if (ContentMargin is not null) ui.ContentMargin = ContentMargin.Value;
            if (DisabledOpacity is not null) ui.DisabledOpacity = DisabledOpacity.Value;
            if (DragBackground is not null) ui.DragBackground = DragBackground;
            if (DragForeground is not null) ui.DragForeground = DragForeground;
            if (DragOpacity is not null) ui.DragOpacity = DragOpacity.Value;
            if (FocusBorderBrush is not null) ui.FocusBorderBrush = FocusBorderBrush;
            if (GridViewItemPresenterHorizontalContentAlignment is not null) ui.GridViewItemPresenterHorizontalContentAlignment = GridViewItemPresenterHorizontalContentAlignment.Value;
            if (GridViewItemPresenterPadding is not null) ui.GridViewItemPresenterPadding = GridViewItemPresenterPadding.Value;
            if (GridViewItemPresenterVerticalContentAlignment is not null) ui.GridViewItemPresenterVerticalContentAlignment = GridViewItemPresenterVerticalContentAlignment.Value;
            if (PlaceholderBackground is not null) ui.PlaceholderBackground = PlaceholderBackground;
            if (PointerOverBackground is not null) ui.PointerOverBackground = PointerOverBackground;
            if (PointerOverBackgroundMargin is not null) ui.PointerOverBackgroundMargin = PointerOverBackgroundMargin.Value;
            if (ReorderHintOffset is not null) ui.ReorderHintOffset = ReorderHintOffset.Value;
            if (SelectedBackground is not null) ui.SelectedBackground = SelectedBackground;
            if (SelectedBorderThickness is not null) ui.SelectedBorderThickness = SelectedBorderThickness.Value;
            if (SelectedForeground is not null) ui.SelectedForeground = SelectedForeground;
            if (SelectedPointerOverBackground is not null) ui.SelectedPointerOverBackground = SelectedPointerOverBackground;
            if (SelectedPointerOverBorderBrush is not null) ui.SelectedPointerOverBorderBrush = SelectedPointerOverBorderBrush;
            if (SelectionCheckMarkVisualEnabled is not null) ui.SelectionCheckMarkVisualEnabled = SelectionCheckMarkVisualEnabled.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.GridViewItemPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.GridViewItemPresenter"/></summary>
        public static GridViewItemPresenter GridViewItemPresenter()
        {
            var ui = new Xaml.Controls.Primitives.GridViewItemPresenter();
            return CSharpMarkup.WinUI.GridViewItemPresenter.StartChain(ui);
        }
    }

    public partial class GridViewItemPresenter : ContentPresenter, IUI<Xaml.Controls.Primitives.GridViewItemPresenter>
    {
        static GridViewItemPresenter instance;

        internal static GridViewItemPresenter StartChain(Xaml.Controls.Primitives.GridViewItemPresenter ui)
        {
            if (instance == null) instance = new GridViewItemPresenter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.GridViewItemPresenter ui;

        public new Xaml.Controls.Primitives.GridViewItemPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(GridViewItemPresenter view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.GridViewItemPresenter(GridViewItemPresenter view) => view?.UI;

        public static implicit operator GridViewItemPresenter(Xaml.Controls.Primitives.GridViewItemPresenter ui) => GridViewItemPresenter.StartChain(ui);

        public GridViewItemPresenter Invoke(Action<Xaml.Controls.Primitives.GridViewItemPresenter> action) { action?.Invoke(UI); return this; }

        protected GridViewItemPresenter() { }
    }

    public static partial class GridViewItemPresenterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.CheckBrush"/></summary>
        public static TView CheckBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : GridViewItemPresenter { view.UI.CheckBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.CheckBrush"/></summary>
        public static TView CheckBrush<TView>(this TView view, Windows.UI.Color value) where TView : GridViewItemPresenter { view.UI.CheckBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.CheckBrush"/></summary>
        public static TView CheckBrush<TView>(this TView view, string color) where TView : GridViewItemPresenter { view.UI.CheckBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.CheckHintBrush"/></summary>
        public static TView CheckHintBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : GridViewItemPresenter { view.UI.CheckHintBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.CheckHintBrush"/></summary>
        public static TView CheckHintBrush<TView>(this TView view, Windows.UI.Color value) where TView : GridViewItemPresenter { view.UI.CheckHintBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.CheckHintBrush"/></summary>
        public static TView CheckHintBrush<TView>(this TView view, string color) where TView : GridViewItemPresenter { view.UI.CheckHintBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.CheckSelectingBrush"/></summary>
        public static TView CheckSelectingBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : GridViewItemPresenter { view.UI.CheckSelectingBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.CheckSelectingBrush"/></summary>
        public static TView CheckSelectingBrush<TView>(this TView view, Windows.UI.Color value) where TView : GridViewItemPresenter { view.UI.CheckSelectingBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.CheckSelectingBrush"/></summary>
        public static TView CheckSelectingBrush<TView>(this TView view, string color) where TView : GridViewItemPresenter { view.UI.CheckSelectingBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.ContentMargin"/></summary>
        public static TView ContentMargin<TView>(this TView view, Xaml.Thickness value) where TView : GridViewItemPresenter { view.UI.ContentMargin = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.ContentMargin"/></summary>
        public static TView ContentMargin<TView>(this TView view, double uniform) where TView : GridViewItemPresenter { view.UI.ContentMargin = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.ContentMargin"/></summary>
        public static TView ContentMargin<TView>(this TView view, double horizontal, double vertical) where TView : GridViewItemPresenter { view.UI.ContentMargin = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.ContentMargin"/></summary>
        public static TView ContentMargin<TView>(this TView view, double left, double top, double right, double bottom) where TView : GridViewItemPresenter { view.UI.ContentMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.ContentMargin"/></summary>
        public static TView ContentMargins<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : GridViewItemPresenter { view.UI.ContentMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.DisabledOpacity"/></summary>
        public static TView DisabledOpacity<TView>(this TView view, double value) where TView : GridViewItemPresenter { view.UI.DisabledOpacity = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.DragBackground"/></summary>
        public static TView DragBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : GridViewItemPresenter { view.UI.DragBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.DragBackground"/></summary>
        public static TView DragBackground<TView>(this TView view, Windows.UI.Color value) where TView : GridViewItemPresenter { view.UI.DragBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.DragBackground"/></summary>
        public static TView DragBackground<TView>(this TView view, string color) where TView : GridViewItemPresenter { view.UI.DragBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.DragForeground"/></summary>
        public static TView DragForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : GridViewItemPresenter { view.UI.DragForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.DragForeground"/></summary>
        public static TView DragForeground<TView>(this TView view, Windows.UI.Color value) where TView : GridViewItemPresenter { view.UI.DragForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.DragForeground"/></summary>
        public static TView DragForeground<TView>(this TView view, string color) where TView : GridViewItemPresenter { view.UI.DragForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.DragOpacity"/></summary>
        public static TView DragOpacity<TView>(this TView view, double value) where TView : GridViewItemPresenter { view.UI.DragOpacity = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.FocusBorderBrush"/></summary>
        public static TView FocusBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : GridViewItemPresenter { view.UI.FocusBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.FocusBorderBrush"/></summary>
        public static TView FocusBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : GridViewItemPresenter { view.UI.FocusBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.FocusBorderBrush"/></summary>
        public static TView FocusBorderBrush<TView>(this TView view, string color) where TView : GridViewItemPresenter { view.UI.FocusBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.GridViewItemPresenterHorizontalContentAlignment"/></summary>
        public static TView GridViewItemPresenterHorizontalContentAlignment<TView>(this TView view, Xaml.HorizontalAlignment value) where TView : GridViewItemPresenter { view.UI.GridViewItemPresenterHorizontalContentAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.GridViewItemPresenterPadding"/></summary>
        public static TView GridViewItemPresenterPadding<TView>(this TView view, Xaml.Thickness value) where TView : GridViewItemPresenter { view.UI.GridViewItemPresenterPadding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.GridViewItemPresenterPadding"/></summary>
        public static TView GridViewItemPresenterPadding<TView>(this TView view, double uniform) where TView : GridViewItemPresenter { view.UI.GridViewItemPresenterPadding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.GridViewItemPresenterPadding"/></summary>
        public static TView GridViewItemPresenterPadding<TView>(this TView view, double horizontal, double vertical) where TView : GridViewItemPresenter { view.UI.GridViewItemPresenterPadding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.GridViewItemPresenterPadding"/></summary>
        public static TView GridViewItemPresenterPadding<TView>(this TView view, double left, double top, double right, double bottom) where TView : GridViewItemPresenter { view.UI.GridViewItemPresenterPadding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.GridViewItemPresenterPadding"/></summary>
        public static TView GridViewItemPresenterPaddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : GridViewItemPresenter { view.UI.GridViewItemPresenterPadding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.GridViewItemPresenterVerticalContentAlignment"/></summary>
        public static TView GridViewItemPresenterVerticalContentAlignment<TView>(this TView view, Xaml.VerticalAlignment value) where TView : GridViewItemPresenter { view.UI.GridViewItemPresenterVerticalContentAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.PlaceholderBackground"/></summary>
        public static TView PlaceholderBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : GridViewItemPresenter { view.UI.PlaceholderBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.PlaceholderBackground"/></summary>
        public static TView PlaceholderBackground<TView>(this TView view, Windows.UI.Color value) where TView : GridViewItemPresenter { view.UI.PlaceholderBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.PlaceholderBackground"/></summary>
        public static TView PlaceholderBackground<TView>(this TView view, string color) where TView : GridViewItemPresenter { view.UI.PlaceholderBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.PointerOverBackground"/></summary>
        public static TView PointerOverBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : GridViewItemPresenter { view.UI.PointerOverBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.PointerOverBackground"/></summary>
        public static TView PointerOverBackground<TView>(this TView view, Windows.UI.Color value) where TView : GridViewItemPresenter { view.UI.PointerOverBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.PointerOverBackground"/></summary>
        public static TView PointerOverBackground<TView>(this TView view, string color) where TView : GridViewItemPresenter { view.UI.PointerOverBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.PointerOverBackgroundMargin"/></summary>
        public static TView PointerOverBackgroundMargin<TView>(this TView view, Xaml.Thickness value) where TView : GridViewItemPresenter { view.UI.PointerOverBackgroundMargin = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.PointerOverBackgroundMargin"/></summary>
        public static TView PointerOverBackgroundMargin<TView>(this TView view, double uniform) where TView : GridViewItemPresenter { view.UI.PointerOverBackgroundMargin = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.PointerOverBackgroundMargin"/></summary>
        public static TView PointerOverBackgroundMargin<TView>(this TView view, double horizontal, double vertical) where TView : GridViewItemPresenter { view.UI.PointerOverBackgroundMargin = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.PointerOverBackgroundMargin"/></summary>
        public static TView PointerOverBackgroundMargin<TView>(this TView view, double left, double top, double right, double bottom) where TView : GridViewItemPresenter { view.UI.PointerOverBackgroundMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.PointerOverBackgroundMargin"/></summary>
        public static TView PointerOverBackgroundMargins<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : GridViewItemPresenter { view.UI.PointerOverBackgroundMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.ReorderHintOffset"/></summary>
        public static TView ReorderHintOffset<TView>(this TView view, double value) where TView : GridViewItemPresenter { view.UI.ReorderHintOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedBackground"/></summary>
        public static TView SelectedBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : GridViewItemPresenter { view.UI.SelectedBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedBackground"/></summary>
        public static TView SelectedBackground<TView>(this TView view, Windows.UI.Color value) where TView : GridViewItemPresenter { view.UI.SelectedBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedBackground"/></summary>
        public static TView SelectedBackground<TView>(this TView view, string color) where TView : GridViewItemPresenter { view.UI.SelectedBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedBorderThickness"/></summary>
        public static TView SelectedBorderThickness<TView>(this TView view, Xaml.Thickness value) where TView : GridViewItemPresenter { view.UI.SelectedBorderThickness = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedBorderThickness"/></summary>
        public static TView SelectedBorderThickness<TView>(this TView view, double uniform) where TView : GridViewItemPresenter { view.UI.SelectedBorderThickness = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedBorderThickness"/></summary>
        public static TView SelectedBorderThickness<TView>(this TView view, double horizontal, double vertical) where TView : GridViewItemPresenter { view.UI.SelectedBorderThickness = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedBorderThickness"/></summary>
        public static TView SelectedBorderThickness<TView>(this TView view, double left, double top, double right, double bottom) where TView : GridViewItemPresenter { view.UI.SelectedBorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedBorderThickness"/></summary>
        public static TView SelectedBorderThicknesses<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : GridViewItemPresenter { view.UI.SelectedBorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedForeground"/></summary>
        public static TView SelectedForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : GridViewItemPresenter { view.UI.SelectedForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedForeground"/></summary>
        public static TView SelectedForeground<TView>(this TView view, Windows.UI.Color value) where TView : GridViewItemPresenter { view.UI.SelectedForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedForeground"/></summary>
        public static TView SelectedForeground<TView>(this TView view, string color) where TView : GridViewItemPresenter { view.UI.SelectedForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedPointerOverBackground"/></summary>
        public static TView SelectedPointerOverBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : GridViewItemPresenter { view.UI.SelectedPointerOverBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedPointerOverBackground"/></summary>
        public static TView SelectedPointerOverBackground<TView>(this TView view, Windows.UI.Color value) where TView : GridViewItemPresenter { view.UI.SelectedPointerOverBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedPointerOverBackground"/></summary>
        public static TView SelectedPointerOverBackground<TView>(this TView view, string color) where TView : GridViewItemPresenter { view.UI.SelectedPointerOverBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedPointerOverBorderBrush"/></summary>
        public static TView SelectedPointerOverBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : GridViewItemPresenter { view.UI.SelectedPointerOverBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedPointerOverBorderBrush"/></summary>
        public static TView SelectedPointerOverBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : GridViewItemPresenter { view.UI.SelectedPointerOverBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedPointerOverBorderBrush"/></summary>
        public static TView SelectedPointerOverBorderBrush<TView>(this TView view, string color) where TView : GridViewItemPresenter { view.UI.SelectedPointerOverBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectionCheckMarkVisualEnabled"/></summary>
        public static TView SelectionCheckMarkVisualEnabled<TView>(this TView view, bool value) where TView : GridViewItemPresenter { view.UI.SelectionCheckMarkVisualEnabled = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.CheckBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckBrush<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.CheckBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.CheckHintBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckHintBrush<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.CheckHintBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.CheckSelectingBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckSelectingBrush<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.CheckSelectingBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.ContentMargin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> ContentMargin<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.ContentMarginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.DisabledOpacity"/></summary>
        public static DependencyProperty<TTarget, double> DisabledOpacity<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.DisabledOpacityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.DragBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> DragBackground<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.DragBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.DragForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> DragForeground<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.DragForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.DragOpacity"/></summary>
        public static DependencyProperty<TTarget, double> DragOpacity<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.DragOpacityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.FocusBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> FocusBorderBrush<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.FocusBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.GridViewItemPresenterHorizontalContentAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.HorizontalAlignment> GridViewItemPresenterHorizontalContentAlignment<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.HorizontalAlignment>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.GridViewItemPresenterHorizontalContentAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.GridViewItemPresenterPadding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> GridViewItemPresenterPadding<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.GridViewItemPresenterPaddingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.GridViewItemPresenterVerticalContentAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.VerticalAlignment> GridViewItemPresenterVerticalContentAlignment<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.VerticalAlignment>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.GridViewItemPresenterVerticalContentAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.PlaceholderBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> PlaceholderBackground<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.PlaceholderBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.PointerOverBackgroundMargin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> PointerOverBackgroundMargin<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.PointerOverBackgroundMarginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.PointerOverBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> PointerOverBackground<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.PointerOverBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.ReorderHintOffset"/></summary>
        public static DependencyProperty<TTarget, double> ReorderHintOffset<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.ReorderHintOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedBackground<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.SelectedBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedBorderThickness"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> SelectedBorderThickness<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.SelectedBorderThicknessProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedForeground<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.SelectedForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedPointerOverBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedPointerOverBackground<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.SelectedPointerOverBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectedPointerOverBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedPointerOverBorderBrush<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.SelectedPointerOverBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.GridViewItemPresenter.SelectionCheckMarkVisualEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> SelectionCheckMarkVisualEnabled<TTarget>(this TTarget target) where TTarget : GridViewItemPresenter
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.GridViewItemPresenter.SelectionCheckMarkVisualEnabledProperty);
    }
}

namespace CSharpMarkup.WinUI // GridViewItemTemplateSettings
{
    public partial class GridViewItemTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.GridViewItemTemplateSettings>
    {
        Xaml.Controls.Primitives.GridViewItemTemplateSettings ui;

        public new Xaml.Controls.Primitives.GridViewItemTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public GridViewItemTemplateSettings Invoke(Action<Xaml.Controls.Primitives.GridViewItemTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected GridViewItemTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // InfoBarPanel
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.InfoBarPanel"/></summary>
        public static InfoBarPanel InfoBarPanel(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.Primitives.InfoBarPanel();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.InfoBarPanel.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.InfoBarPanel"/></summary>
        public static InfoBarPanel InfoBarPanel()
        {
            var ui = new Xaml.Controls.Primitives.InfoBarPanel();
            return CSharpMarkup.WinUI.InfoBarPanel.StartChain(ui);
        }
    }

    public partial class InfoBarPanel : Panel, IUI<Xaml.Controls.Primitives.InfoBarPanel>
    {
        static InfoBarPanel instance;

        internal static InfoBarPanel StartChain(Xaml.Controls.Primitives.InfoBarPanel ui)
        {
            if (instance == null) instance = new InfoBarPanel();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.InfoBarPanel ui;

        public new Xaml.Controls.Primitives.InfoBarPanel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(InfoBarPanel view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.InfoBarPanel(InfoBarPanel view) => view?.UI;

        public static implicit operator InfoBarPanel(Xaml.Controls.Primitives.InfoBarPanel ui) => InfoBarPanel.StartChain(ui);

        public InfoBarPanel Invoke(Action<Xaml.Controls.Primitives.InfoBarPanel> action) { action?.Invoke(UI); return this; }

        protected InfoBarPanel() { }
    }

    public static partial class InfoBarPanelExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationPadding"/></summary>
        public static TView HorizontalOrientationPadding<TView>(this TView view, Xaml.Thickness value) where TView : InfoBarPanel { view.UI.HorizontalOrientationPadding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationPadding"/></summary>
        public static TView HorizontalOrientationPadding<TView>(this TView view, double uniform) where TView : InfoBarPanel { view.UI.HorizontalOrientationPadding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationPadding"/></summary>
        public static TView HorizontalOrientationPadding<TView>(this TView view, double horizontal, double vertical) where TView : InfoBarPanel { view.UI.HorizontalOrientationPadding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationPadding"/></summary>
        public static TView HorizontalOrientationPadding<TView>(this TView view, double left, double top, double right, double bottom) where TView : InfoBarPanel { view.UI.HorizontalOrientationPadding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationPadding"/></summary>
        public static TView HorizontalOrientationPaddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : InfoBarPanel { view.UI.HorizontalOrientationPadding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationPadding"/></summary>
        public static TView VerticalOrientationPadding<TView>(this TView view, Xaml.Thickness value) where TView : InfoBarPanel { view.UI.VerticalOrientationPadding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationPadding"/></summary>
        public static TView VerticalOrientationPadding<TView>(this TView view, double uniform) where TView : InfoBarPanel { view.UI.VerticalOrientationPadding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationPadding"/></summary>
        public static TView VerticalOrientationPadding<TView>(this TView view, double horizontal, double vertical) where TView : InfoBarPanel { view.UI.VerticalOrientationPadding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationPadding"/></summary>
        public static TView VerticalOrientationPadding<TView>(this TView view, double left, double top, double right, double bottom) where TView : InfoBarPanel { view.UI.VerticalOrientationPadding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationPadding"/></summary>
        public static TView VerticalOrientationPaddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : InfoBarPanel { view.UI.VerticalOrientationPadding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationPadding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> HorizontalOrientationPadding<TTarget>(this TTarget target) where TTarget : InfoBarPanel
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationPaddingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationPadding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> VerticalOrientationPadding<TTarget>(this TTarget target) where TTarget : InfoBarPanel
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationPaddingProperty);

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationMargin"/></summary>
        public static TTarget InfoBarPanel_HorizontalOrientationMargin<TTarget>(this TTarget target, Xaml.Thickness value) where TTarget : DependencyObject
        { Xaml.Controls.Primitives.InfoBarPanel.SetHorizontalOrientationMargin(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationMargin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> InfoBarPanel_HorizontalOrientationMargin<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationMarginProperty);

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationMargin"/></summary>
        public static TTarget InfoBarPanel_HorizontalOrientationMargin<TTarget>(this TTarget target, double uniform) where TTarget : DependencyObject
        { Xaml.Controls.Primitives.InfoBarPanel.SetHorizontalOrientationMargin(target.UI, Helpers.Thickness(uniform)); return target; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationMargin"/></summary>
        public static TTarget InfoBarPanel_HorizontalOrientationMargin<TTarget>(this TTarget target, double horizontal, double vertical) where TTarget : DependencyObject
        { Xaml.Controls.Primitives.InfoBarPanel.SetHorizontalOrientationMargin(target.UI, Helpers.Thickness(horizontal, vertical)); return target; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationMargin"/></summary>
        public static TTarget InfoBarPanel_HorizontalOrientationMargin<TTarget>(this TTarget target, double left, double top, double right, double bottom) where TTarget : DependencyObject
        { Xaml.Controls.Primitives.InfoBarPanel.SetHorizontalOrientationMargin(target.UI, Helpers.Thickness(left, top, right, bottom)); return target; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.HorizontalOrientationMargin"/></summary>
        public static TTarget InfoBarPanel_HorizontalOrientationMargins<TTarget>(this TTarget target, double left = 0, double top = 0, double right = 0, double bottom = 0) where TTarget : DependencyObject
        { Xaml.Controls.Primitives.InfoBarPanel.SetHorizontalOrientationMargin(target.UI, Helpers.Thickness(left, top, right, bottom)); return target; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationMargin"/></summary>
        public static TTarget InfoBarPanel_VerticalOrientationMargin<TTarget>(this TTarget target, Xaml.Thickness value) where TTarget : DependencyObject
        { Xaml.Controls.Primitives.InfoBarPanel.SetVerticalOrientationMargin(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationMargin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> InfoBarPanel_VerticalOrientationMargin<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationMarginProperty);

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationMargin"/></summary>
        public static TTarget InfoBarPanel_VerticalOrientationMargin<TTarget>(this TTarget target, double uniform) where TTarget : DependencyObject
        { Xaml.Controls.Primitives.InfoBarPanel.SetVerticalOrientationMargin(target.UI, Helpers.Thickness(uniform)); return target; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationMargin"/></summary>
        public static TTarget InfoBarPanel_VerticalOrientationMargin<TTarget>(this TTarget target, double horizontal, double vertical) where TTarget : DependencyObject
        { Xaml.Controls.Primitives.InfoBarPanel.SetVerticalOrientationMargin(target.UI, Helpers.Thickness(horizontal, vertical)); return target; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationMargin"/></summary>
        public static TTarget InfoBarPanel_VerticalOrientationMargin<TTarget>(this TTarget target, double left, double top, double right, double bottom) where TTarget : DependencyObject
        { Xaml.Controls.Primitives.InfoBarPanel.SetVerticalOrientationMargin(target.UI, Helpers.Thickness(left, top, right, bottom)); return target; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel.VerticalOrientationMargin"/></summary>
        public static TTarget InfoBarPanel_VerticalOrientationMargins<TTarget>(this TTarget target, double left = 0, double top = 0, double right = 0, double bottom = 0) where TTarget : DependencyObject
        { Xaml.Controls.Primitives.InfoBarPanel.SetVerticalOrientationMargin(target.UI, Helpers.Thickness(left, top, right, bottom)); return target; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.InfoBarPanel"/> attached properties</summary>
        public static TTarget InfoBarPanels<TTarget>(this TTarget target

            , Xaml.Thickness? HorizontalOrientationMargin = default

            , Xaml.Thickness? VerticalOrientationMargin = default

        ) where TTarget : DependencyObject
        {
            if (HorizontalOrientationMargin is not null) Xaml.Controls.Primitives.InfoBarPanel.SetHorizontalOrientationMargin(target.UI, HorizontalOrientationMargin.Value);

            if (VerticalOrientationMargin is not null) Xaml.Controls.Primitives.InfoBarPanel.SetVerticalOrientationMargin(target.UI, VerticalOrientationMargin.Value);

            return target;
        }
    }
}

namespace CSharpMarkup.WinUI // JumpListItemBackgroundConverter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.JumpListItemBackgroundConverter"/></summary>
        public static JumpListItemBackgroundConverter JumpListItemBackgroundConverter(Xaml.Media.Brush Disabled = default, Xaml.Media.Brush Enabled = default)
        {
            var ui = new Xaml.Controls.Primitives.JumpListItemBackgroundConverter();
            if (Disabled is not null) ui.Disabled = Disabled;
            if (Enabled is not null) ui.Enabled = Enabled;
            return CSharpMarkup.WinUI.JumpListItemBackgroundConverter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.JumpListItemBackgroundConverter"/></summary>
        public static JumpListItemBackgroundConverter JumpListItemBackgroundConverter()
        {
            var ui = new Xaml.Controls.Primitives.JumpListItemBackgroundConverter();
            return CSharpMarkup.WinUI.JumpListItemBackgroundConverter.StartChain(ui);
        }
    }

    public partial class JumpListItemBackgroundConverter : DependencyObject, IUI<Xaml.Controls.Primitives.JumpListItemBackgroundConverter>
    {
        static JumpListItemBackgroundConverter instance;

        internal static JumpListItemBackgroundConverter StartChain(Xaml.Controls.Primitives.JumpListItemBackgroundConverter ui)
        {
            if (instance == null) instance = new JumpListItemBackgroundConverter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.JumpListItemBackgroundConverter ui;

        public new Xaml.Controls.Primitives.JumpListItemBackgroundConverter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.Primitives.JumpListItemBackgroundConverter(JumpListItemBackgroundConverter view) => view?.UI;

        public static implicit operator JumpListItemBackgroundConverter(Xaml.Controls.Primitives.JumpListItemBackgroundConverter ui) => JumpListItemBackgroundConverter.StartChain(ui);

        public JumpListItemBackgroundConverter Invoke(Action<Xaml.Controls.Primitives.JumpListItemBackgroundConverter> action) { action?.Invoke(UI); return this; }

        protected JumpListItemBackgroundConverter() { }
    }

    public static partial class JumpListItemBackgroundConverterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.JumpListItemBackgroundConverter.Disabled"/></summary>
        public static TView Disabled<TView>(this TView view, Xaml.Media.Brush value) where TView : JumpListItemBackgroundConverter { view.UI.Disabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.JumpListItemBackgroundConverter.Disabled"/></summary>
        public static TView Disabled<TView>(this TView view, Windows.UI.Color value) where TView : JumpListItemBackgroundConverter { view.UI.Disabled = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.JumpListItemBackgroundConverter.Disabled"/></summary>
        public static TView Disabled<TView>(this TView view, string color) where TView : JumpListItemBackgroundConverter { view.UI.Disabled = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.JumpListItemBackgroundConverter.Enabled"/></summary>
        public static TView Enabled<TView>(this TView view, Xaml.Media.Brush value) where TView : JumpListItemBackgroundConverter { view.UI.Enabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.JumpListItemBackgroundConverter.Enabled"/></summary>
        public static TView Enabled<TView>(this TView view, Windows.UI.Color value) where TView : JumpListItemBackgroundConverter { view.UI.Enabled = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.JumpListItemBackgroundConverter.Enabled"/></summary>
        public static TView Enabled<TView>(this TView view, string color) where TView : JumpListItemBackgroundConverter { view.UI.Enabled = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.JumpListItemBackgroundConverter.Disabled"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Disabled<TTarget>(this TTarget target) where TTarget : JumpListItemBackgroundConverter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.JumpListItemBackgroundConverter.DisabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.JumpListItemBackgroundConverter.Enabled"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Enabled<TTarget>(this TTarget target) where TTarget : JumpListItemBackgroundConverter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.JumpListItemBackgroundConverter.EnabledProperty);
    }
}

namespace CSharpMarkup.WinUI // JumpListItemForegroundConverter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.JumpListItemForegroundConverter"/></summary>
        public static JumpListItemForegroundConverter JumpListItemForegroundConverter(Xaml.Media.Brush Disabled = default, Xaml.Media.Brush Enabled = default)
        {
            var ui = new Xaml.Controls.Primitives.JumpListItemForegroundConverter();
            if (Disabled is not null) ui.Disabled = Disabled;
            if (Enabled is not null) ui.Enabled = Enabled;
            return CSharpMarkup.WinUI.JumpListItemForegroundConverter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.JumpListItemForegroundConverter"/></summary>
        public static JumpListItemForegroundConverter JumpListItemForegroundConverter()
        {
            var ui = new Xaml.Controls.Primitives.JumpListItemForegroundConverter();
            return CSharpMarkup.WinUI.JumpListItemForegroundConverter.StartChain(ui);
        }
    }

    public partial class JumpListItemForegroundConverter : DependencyObject, IUI<Xaml.Controls.Primitives.JumpListItemForegroundConverter>
    {
        static JumpListItemForegroundConverter instance;

        internal static JumpListItemForegroundConverter StartChain(Xaml.Controls.Primitives.JumpListItemForegroundConverter ui)
        {
            if (instance == null) instance = new JumpListItemForegroundConverter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.JumpListItemForegroundConverter ui;

        public new Xaml.Controls.Primitives.JumpListItemForegroundConverter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.Primitives.JumpListItemForegroundConverter(JumpListItemForegroundConverter view) => view?.UI;

        public static implicit operator JumpListItemForegroundConverter(Xaml.Controls.Primitives.JumpListItemForegroundConverter ui) => JumpListItemForegroundConverter.StartChain(ui);

        public JumpListItemForegroundConverter Invoke(Action<Xaml.Controls.Primitives.JumpListItemForegroundConverter> action) { action?.Invoke(UI); return this; }

        protected JumpListItemForegroundConverter() { }
    }

    public static partial class JumpListItemForegroundConverterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.JumpListItemForegroundConverter.Disabled"/></summary>
        public static TView Disabled<TView>(this TView view, Xaml.Media.Brush value) where TView : JumpListItemForegroundConverter { view.UI.Disabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.JumpListItemForegroundConverter.Disabled"/></summary>
        public static TView Disabled<TView>(this TView view, Windows.UI.Color value) where TView : JumpListItemForegroundConverter { view.UI.Disabled = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.JumpListItemForegroundConverter.Disabled"/></summary>
        public static TView Disabled<TView>(this TView view, string color) where TView : JumpListItemForegroundConverter { view.UI.Disabled = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.JumpListItemForegroundConverter.Enabled"/></summary>
        public static TView Enabled<TView>(this TView view, Xaml.Media.Brush value) where TView : JumpListItemForegroundConverter { view.UI.Enabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.JumpListItemForegroundConverter.Enabled"/></summary>
        public static TView Enabled<TView>(this TView view, Windows.UI.Color value) where TView : JumpListItemForegroundConverter { view.UI.Enabled = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.JumpListItemForegroundConverter.Enabled"/></summary>
        public static TView Enabled<TView>(this TView view, string color) where TView : JumpListItemForegroundConverter { view.UI.Enabled = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.JumpListItemForegroundConverter.Disabled"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Disabled<TTarget>(this TTarget target) where TTarget : JumpListItemForegroundConverter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.JumpListItemForegroundConverter.DisabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.JumpListItemForegroundConverter.Enabled"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Enabled<TTarget>(this TTarget target) where TTarget : JumpListItemForegroundConverter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.JumpListItemForegroundConverter.EnabledProperty);
    }
}

namespace CSharpMarkup.WinUI // ListViewItemPresenter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ListViewItemPresenter"/></summary>
        public static ListViewItemPresenter ListViewItemPresenter(UIObject Content)
        {
            var ui = new Xaml.Controls.Primitives.ListViewItemPresenter();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ListViewItemPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ListViewItemPresenter"/></summary>
        public static ListViewItemPresenter ListViewItemPresenter(Xaml.Media.Brush CheckBoxBorderBrush = default, Xaml.Media.Brush CheckBoxBrush = default, CSharpMarkup.WinUI.to.CornerRadius? CheckBoxCornerRadius = default, Xaml.Media.Brush CheckBoxDisabledBorderBrush = default, Xaml.Media.Brush CheckBoxDisabledBrush = default, Xaml.Media.Brush CheckBoxPointerOverBorderBrush = default, Xaml.Media.Brush CheckBoxPointerOverBrush = default, Xaml.Media.Brush CheckBoxPressedBorderBrush = default, Xaml.Media.Brush CheckBoxPressedBrush = default, Xaml.Media.Brush CheckBoxSelectedBrush = default, Xaml.Media.Brush CheckBoxSelectedDisabledBrush = default, Xaml.Media.Brush CheckBoxSelectedPointerOverBrush = default, Xaml.Media.Brush CheckBoxSelectedPressedBrush = default, Xaml.Media.Brush CheckBrush = default, Xaml.Media.Brush CheckDisabledBrush = default, Xaml.Media.Brush CheckHintBrush = default, Xaml.Controls.Primitives.ListViewItemPresenterCheckMode? CheckMode = default, Xaml.Media.Brush CheckPressedBrush = default, Xaml.Media.Brush CheckSelectingBrush = default, Xaml.Thickness? ContentMargin = default, double? DisabledOpacity = default, Xaml.Media.Brush DragBackground = default, Xaml.Media.Brush DragForeground = default, double? DragOpacity = default, Xaml.Media.Brush FocusBorderBrush = default, Xaml.Media.Brush FocusSecondaryBorderBrush = default, Xaml.HorizontalAlignment? ListViewItemPresenterHorizontalContentAlignment = default, Xaml.Thickness? ListViewItemPresenterPadding = default, Xaml.VerticalAlignment? ListViewItemPresenterVerticalContentAlignment = default, Xaml.Media.Brush PlaceholderBackground = default, Xaml.Media.Brush PointerOverBackground = default, Xaml.Thickness? PointerOverBackgroundMargin = default, Xaml.Media.Brush PointerOverBorderBrush = default, Xaml.Media.Brush PointerOverForeground = default, Xaml.Media.Brush PressedBackground = default, double? ReorderHintOffset = default, Xaml.Media.Brush RevealBackground = default, bool? RevealBackgroundShowsAboveContent = default, Xaml.Media.Brush RevealBorderBrush = default, Xaml.Thickness? RevealBorderThickness = default, Xaml.Media.Brush SelectedBackground = default, Xaml.Media.Brush SelectedBorderBrush = default, Xaml.Thickness? SelectedBorderThickness = default, Xaml.Media.Brush SelectedDisabledBackground = default, Xaml.Media.Brush SelectedDisabledBorderBrush = default, Xaml.Media.Brush SelectedForeground = default, Xaml.Media.Brush SelectedInnerBorderBrush = default, Xaml.Media.Brush SelectedPointerOverBackground = default, Xaml.Media.Brush SelectedPointerOverBorderBrush = default, Xaml.Media.Brush SelectedPressedBackground = default, Xaml.Media.Brush SelectedPressedBorderBrush = default, bool? SelectionCheckMarkVisualEnabled = default, Xaml.Media.Brush SelectionIndicatorBrush = default, CSharpMarkup.WinUI.to.CornerRadius? SelectionIndicatorCornerRadius = default, Xaml.Media.Brush SelectionIndicatorDisabledBrush = default, Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode? SelectionIndicatorMode = default, Xaml.Media.Brush SelectionIndicatorPointerOverBrush = default, Xaml.Media.Brush SelectionIndicatorPressedBrush = default, bool? SelectionIndicatorVisualEnabled = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.Primitives.ListViewItemPresenter();
            if (CheckBoxBorderBrush is not null) ui.CheckBoxBorderBrush = CheckBoxBorderBrush;
            if (CheckBoxBrush is not null) ui.CheckBoxBrush = CheckBoxBrush;
            if (CheckBoxCornerRadius is not null) ui.CheckBoxCornerRadius = CheckBoxCornerRadius.Value;
            if (CheckBoxDisabledBorderBrush is not null) ui.CheckBoxDisabledBorderBrush = CheckBoxDisabledBorderBrush;
            if (CheckBoxDisabledBrush is not null) ui.CheckBoxDisabledBrush = CheckBoxDisabledBrush;
            if (CheckBoxPointerOverBorderBrush is not null) ui.CheckBoxPointerOverBorderBrush = CheckBoxPointerOverBorderBrush;
            if (CheckBoxPointerOverBrush is not null) ui.CheckBoxPointerOverBrush = CheckBoxPointerOverBrush;
            if (CheckBoxPressedBorderBrush is not null) ui.CheckBoxPressedBorderBrush = CheckBoxPressedBorderBrush;
            if (CheckBoxPressedBrush is not null) ui.CheckBoxPressedBrush = CheckBoxPressedBrush;
            if (CheckBoxSelectedBrush is not null) ui.CheckBoxSelectedBrush = CheckBoxSelectedBrush;
            if (CheckBoxSelectedDisabledBrush is not null) ui.CheckBoxSelectedDisabledBrush = CheckBoxSelectedDisabledBrush;
            if (CheckBoxSelectedPointerOverBrush is not null) ui.CheckBoxSelectedPointerOverBrush = CheckBoxSelectedPointerOverBrush;
            if (CheckBoxSelectedPressedBrush is not null) ui.CheckBoxSelectedPressedBrush = CheckBoxSelectedPressedBrush;
            if (CheckBrush is not null) ui.CheckBrush = CheckBrush;
            if (CheckDisabledBrush is not null) ui.CheckDisabledBrush = CheckDisabledBrush;
            if (CheckHintBrush is not null) ui.CheckHintBrush = CheckHintBrush;
            if (CheckMode is not null) ui.CheckMode = CheckMode.Value;
            if (CheckPressedBrush is not null) ui.CheckPressedBrush = CheckPressedBrush;
            if (CheckSelectingBrush is not null) ui.CheckSelectingBrush = CheckSelectingBrush;
            if (ContentMargin is not null) ui.ContentMargin = ContentMargin.Value;
            if (DisabledOpacity is not null) ui.DisabledOpacity = DisabledOpacity.Value;
            if (DragBackground is not null) ui.DragBackground = DragBackground;
            if (DragForeground is not null) ui.DragForeground = DragForeground;
            if (DragOpacity is not null) ui.DragOpacity = DragOpacity.Value;
            if (FocusBorderBrush is not null) ui.FocusBorderBrush = FocusBorderBrush;
            if (FocusSecondaryBorderBrush is not null) ui.FocusSecondaryBorderBrush = FocusSecondaryBorderBrush;
            if (ListViewItemPresenterHorizontalContentAlignment is not null) ui.ListViewItemPresenterHorizontalContentAlignment = ListViewItemPresenterHorizontalContentAlignment.Value;
            if (ListViewItemPresenterPadding is not null) ui.ListViewItemPresenterPadding = ListViewItemPresenterPadding.Value;
            if (ListViewItemPresenterVerticalContentAlignment is not null) ui.ListViewItemPresenterVerticalContentAlignment = ListViewItemPresenterVerticalContentAlignment.Value;
            if (PlaceholderBackground is not null) ui.PlaceholderBackground = PlaceholderBackground;
            if (PointerOverBackground is not null) ui.PointerOverBackground = PointerOverBackground;
            if (PointerOverBackgroundMargin is not null) ui.PointerOverBackgroundMargin = PointerOverBackgroundMargin.Value;
            if (PointerOverBorderBrush is not null) ui.PointerOverBorderBrush = PointerOverBorderBrush;
            if (PointerOverForeground is not null) ui.PointerOverForeground = PointerOverForeground;
            if (PressedBackground is not null) ui.PressedBackground = PressedBackground;
            if (ReorderHintOffset is not null) ui.ReorderHintOffset = ReorderHintOffset.Value;
            if (RevealBackground is not null) ui.RevealBackground = RevealBackground;
            if (RevealBackgroundShowsAboveContent is not null) ui.RevealBackgroundShowsAboveContent = RevealBackgroundShowsAboveContent.Value;
            if (RevealBorderBrush is not null) ui.RevealBorderBrush = RevealBorderBrush;
            if (RevealBorderThickness is not null) ui.RevealBorderThickness = RevealBorderThickness.Value;
            if (SelectedBackground is not null) ui.SelectedBackground = SelectedBackground;
            if (SelectedBorderBrush is not null) ui.SelectedBorderBrush = SelectedBorderBrush;
            if (SelectedBorderThickness is not null) ui.SelectedBorderThickness = SelectedBorderThickness.Value;
            if (SelectedDisabledBackground is not null) ui.SelectedDisabledBackground = SelectedDisabledBackground;
            if (SelectedDisabledBorderBrush is not null) ui.SelectedDisabledBorderBrush = SelectedDisabledBorderBrush;
            if (SelectedForeground is not null) ui.SelectedForeground = SelectedForeground;
            if (SelectedInnerBorderBrush is not null) ui.SelectedInnerBorderBrush = SelectedInnerBorderBrush;
            if (SelectedPointerOverBackground is not null) ui.SelectedPointerOverBackground = SelectedPointerOverBackground;
            if (SelectedPointerOverBorderBrush is not null) ui.SelectedPointerOverBorderBrush = SelectedPointerOverBorderBrush;
            if (SelectedPressedBackground is not null) ui.SelectedPressedBackground = SelectedPressedBackground;
            if (SelectedPressedBorderBrush is not null) ui.SelectedPressedBorderBrush = SelectedPressedBorderBrush;
            if (SelectionCheckMarkVisualEnabled is not null) ui.SelectionCheckMarkVisualEnabled = SelectionCheckMarkVisualEnabled.Value;
            if (SelectionIndicatorBrush is not null) ui.SelectionIndicatorBrush = SelectionIndicatorBrush;
            if (SelectionIndicatorCornerRadius is not null) ui.SelectionIndicatorCornerRadius = SelectionIndicatorCornerRadius.Value;
            if (SelectionIndicatorDisabledBrush is not null) ui.SelectionIndicatorDisabledBrush = SelectionIndicatorDisabledBrush;
            if (SelectionIndicatorMode is not null) ui.SelectionIndicatorMode = SelectionIndicatorMode.Value;
            if (SelectionIndicatorPointerOverBrush is not null) ui.SelectionIndicatorPointerOverBrush = SelectionIndicatorPointerOverBrush;
            if (SelectionIndicatorPressedBrush is not null) ui.SelectionIndicatorPressedBrush = SelectionIndicatorPressedBrush;
            if (SelectionIndicatorVisualEnabled is not null) ui.SelectionIndicatorVisualEnabled = SelectionIndicatorVisualEnabled.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ListViewItemPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ListViewItemPresenter"/></summary>
        public static ListViewItemPresenter ListViewItemPresenter()
        {
            var ui = new Xaml.Controls.Primitives.ListViewItemPresenter();
            return CSharpMarkup.WinUI.ListViewItemPresenter.StartChain(ui);
        }
    }

    public partial class ListViewItemPresenter : ContentPresenter, IUI<Xaml.Controls.Primitives.ListViewItemPresenter>
    {
        static ListViewItemPresenter instance;

        internal static ListViewItemPresenter StartChain(Xaml.Controls.Primitives.ListViewItemPresenter ui)
        {
            if (instance == null) instance = new ListViewItemPresenter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.ListViewItemPresenter ui;

        public new Xaml.Controls.Primitives.ListViewItemPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ListViewItemPresenter view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.ListViewItemPresenter(ListViewItemPresenter view) => view?.UI;

        public static implicit operator ListViewItemPresenter(Xaml.Controls.Primitives.ListViewItemPresenter ui) => ListViewItemPresenter.StartChain(ui);

        public ListViewItemPresenter Invoke(Action<Xaml.Controls.Primitives.ListViewItemPresenter> action) { action?.Invoke(UI); return this; }

        protected ListViewItemPresenter() { }
    }

    public static partial class ListViewItemPresenterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxBorderBrush"/></summary>
        public static TView CheckBoxBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckBoxBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxBorderBrush"/></summary>
        public static TView CheckBoxBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckBoxBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxBorderBrush"/></summary>
        public static TView CheckBoxBorderBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckBoxBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxBrush"/></summary>
        public static TView CheckBoxBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckBoxBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxBrush"/></summary>
        public static TView CheckBoxBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckBoxBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxBrush"/></summary>
        public static TView CheckBoxBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckBoxBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxCornerRadius"/></summary>
        public static TView CheckBoxCornerRadius<TView>(this TView view, CSharpMarkup.WinUI.to.CornerRadius value) where TView : ListViewItemPresenter { view.UI.CheckBoxCornerRadius = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxDisabledBorderBrush"/></summary>
        public static TView CheckBoxDisabledBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckBoxDisabledBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxDisabledBorderBrush"/></summary>
        public static TView CheckBoxDisabledBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckBoxDisabledBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxDisabledBorderBrush"/></summary>
        public static TView CheckBoxDisabledBorderBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckBoxDisabledBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxDisabledBrush"/></summary>
        public static TView CheckBoxDisabledBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckBoxDisabledBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxDisabledBrush"/></summary>
        public static TView CheckBoxDisabledBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckBoxDisabledBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxDisabledBrush"/></summary>
        public static TView CheckBoxDisabledBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckBoxDisabledBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPointerOverBorderBrush"/></summary>
        public static TView CheckBoxPointerOverBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckBoxPointerOverBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPointerOverBorderBrush"/></summary>
        public static TView CheckBoxPointerOverBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckBoxPointerOverBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPointerOverBorderBrush"/></summary>
        public static TView CheckBoxPointerOverBorderBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckBoxPointerOverBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPointerOverBrush"/></summary>
        public static TView CheckBoxPointerOverBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckBoxPointerOverBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPointerOverBrush"/></summary>
        public static TView CheckBoxPointerOverBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckBoxPointerOverBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPointerOverBrush"/></summary>
        public static TView CheckBoxPointerOverBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckBoxPointerOverBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPressedBorderBrush"/></summary>
        public static TView CheckBoxPressedBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckBoxPressedBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPressedBorderBrush"/></summary>
        public static TView CheckBoxPressedBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckBoxPressedBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPressedBorderBrush"/></summary>
        public static TView CheckBoxPressedBorderBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckBoxPressedBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPressedBrush"/></summary>
        public static TView CheckBoxPressedBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckBoxPressedBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPressedBrush"/></summary>
        public static TView CheckBoxPressedBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckBoxPressedBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPressedBrush"/></summary>
        public static TView CheckBoxPressedBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckBoxPressedBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedBrush"/></summary>
        public static TView CheckBoxSelectedBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckBoxSelectedBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedBrush"/></summary>
        public static TView CheckBoxSelectedBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckBoxSelectedBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedBrush"/></summary>
        public static TView CheckBoxSelectedBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckBoxSelectedBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedDisabledBrush"/></summary>
        public static TView CheckBoxSelectedDisabledBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckBoxSelectedDisabledBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedDisabledBrush"/></summary>
        public static TView CheckBoxSelectedDisabledBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckBoxSelectedDisabledBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedDisabledBrush"/></summary>
        public static TView CheckBoxSelectedDisabledBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckBoxSelectedDisabledBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedPointerOverBrush"/></summary>
        public static TView CheckBoxSelectedPointerOverBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckBoxSelectedPointerOverBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedPointerOverBrush"/></summary>
        public static TView CheckBoxSelectedPointerOverBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckBoxSelectedPointerOverBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedPointerOverBrush"/></summary>
        public static TView CheckBoxSelectedPointerOverBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckBoxSelectedPointerOverBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedPressedBrush"/></summary>
        public static TView CheckBoxSelectedPressedBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckBoxSelectedPressedBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedPressedBrush"/></summary>
        public static TView CheckBoxSelectedPressedBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckBoxSelectedPressedBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedPressedBrush"/></summary>
        public static TView CheckBoxSelectedPressedBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckBoxSelectedPressedBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBrush"/></summary>
        public static TView CheckBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBrush"/></summary>
        public static TView CheckBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBrush"/></summary>
        public static TView CheckBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckDisabledBrush"/></summary>
        public static TView CheckDisabledBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckDisabledBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckDisabledBrush"/></summary>
        public static TView CheckDisabledBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckDisabledBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckDisabledBrush"/></summary>
        public static TView CheckDisabledBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckDisabledBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckHintBrush"/></summary>
        public static TView CheckHintBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckHintBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckHintBrush"/></summary>
        public static TView CheckHintBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckHintBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckHintBrush"/></summary>
        public static TView CheckHintBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckHintBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckMode"/></summary>
        public static TView CheckMode<TView>(this TView view, Xaml.Controls.Primitives.ListViewItemPresenterCheckMode value) where TView : ListViewItemPresenter { view.UI.CheckMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckPressedBrush"/></summary>
        public static TView CheckPressedBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckPressedBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckPressedBrush"/></summary>
        public static TView CheckPressedBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckPressedBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckPressedBrush"/></summary>
        public static TView CheckPressedBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckPressedBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckSelectingBrush"/></summary>
        public static TView CheckSelectingBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.CheckSelectingBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckSelectingBrush"/></summary>
        public static TView CheckSelectingBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.CheckSelectingBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckSelectingBrush"/></summary>
        public static TView CheckSelectingBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.CheckSelectingBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ContentMargin"/></summary>
        public static TView ContentMargin<TView>(this TView view, Xaml.Thickness value) where TView : ListViewItemPresenter { view.UI.ContentMargin = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ContentMargin"/></summary>
        public static TView ContentMargin<TView>(this TView view, double uniform) where TView : ListViewItemPresenter { view.UI.ContentMargin = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ContentMargin"/></summary>
        public static TView ContentMargin<TView>(this TView view, double horizontal, double vertical) where TView : ListViewItemPresenter { view.UI.ContentMargin = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ContentMargin"/></summary>
        public static TView ContentMargin<TView>(this TView view, double left, double top, double right, double bottom) where TView : ListViewItemPresenter { view.UI.ContentMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ContentMargin"/></summary>
        public static TView ContentMargins<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : ListViewItemPresenter { view.UI.ContentMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.DisabledOpacity"/></summary>
        public static TView DisabledOpacity<TView>(this TView view, double value) where TView : ListViewItemPresenter { view.UI.DisabledOpacity = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.DragBackground"/></summary>
        public static TView DragBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.DragBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.DragBackground"/></summary>
        public static TView DragBackground<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.DragBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.DragBackground"/></summary>
        public static TView DragBackground<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.DragBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.DragForeground"/></summary>
        public static TView DragForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.DragForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.DragForeground"/></summary>
        public static TView DragForeground<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.DragForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.DragForeground"/></summary>
        public static TView DragForeground<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.DragForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.DragOpacity"/></summary>
        public static TView DragOpacity<TView>(this TView view, double value) where TView : ListViewItemPresenter { view.UI.DragOpacity = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.FocusBorderBrush"/></summary>
        public static TView FocusBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.FocusBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.FocusBorderBrush"/></summary>
        public static TView FocusBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.FocusBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.FocusBorderBrush"/></summary>
        public static TView FocusBorderBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.FocusBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.FocusSecondaryBorderBrush"/></summary>
        public static TView FocusSecondaryBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.FocusSecondaryBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.FocusSecondaryBorderBrush"/></summary>
        public static TView FocusSecondaryBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.FocusSecondaryBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.FocusSecondaryBorderBrush"/></summary>
        public static TView FocusSecondaryBorderBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.FocusSecondaryBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ListViewItemPresenterHorizontalContentAlignment"/></summary>
        public static TView ListViewItemPresenterHorizontalContentAlignment<TView>(this TView view, Xaml.HorizontalAlignment value) where TView : ListViewItemPresenter { view.UI.ListViewItemPresenterHorizontalContentAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ListViewItemPresenterPadding"/></summary>
        public static TView ListViewItemPresenterPadding<TView>(this TView view, Xaml.Thickness value) where TView : ListViewItemPresenter { view.UI.ListViewItemPresenterPadding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ListViewItemPresenterPadding"/></summary>
        public static TView ListViewItemPresenterPadding<TView>(this TView view, double uniform) where TView : ListViewItemPresenter { view.UI.ListViewItemPresenterPadding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ListViewItemPresenterPadding"/></summary>
        public static TView ListViewItemPresenterPadding<TView>(this TView view, double horizontal, double vertical) where TView : ListViewItemPresenter { view.UI.ListViewItemPresenterPadding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ListViewItemPresenterPadding"/></summary>
        public static TView ListViewItemPresenterPadding<TView>(this TView view, double left, double top, double right, double bottom) where TView : ListViewItemPresenter { view.UI.ListViewItemPresenterPadding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ListViewItemPresenterPadding"/></summary>
        public static TView ListViewItemPresenterPaddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : ListViewItemPresenter { view.UI.ListViewItemPresenterPadding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ListViewItemPresenterVerticalContentAlignment"/></summary>
        public static TView ListViewItemPresenterVerticalContentAlignment<TView>(this TView view, Xaml.VerticalAlignment value) where TView : ListViewItemPresenter { view.UI.ListViewItemPresenterVerticalContentAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PlaceholderBackground"/></summary>
        public static TView PlaceholderBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.PlaceholderBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PlaceholderBackground"/></summary>
        public static TView PlaceholderBackground<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.PlaceholderBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PlaceholderBackground"/></summary>
        public static TView PlaceholderBackground<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.PlaceholderBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBackground"/></summary>
        public static TView PointerOverBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.PointerOverBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBackground"/></summary>
        public static TView PointerOverBackground<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.PointerOverBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBackground"/></summary>
        public static TView PointerOverBackground<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.PointerOverBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBackgroundMargin"/></summary>
        public static TView PointerOverBackgroundMargin<TView>(this TView view, Xaml.Thickness value) where TView : ListViewItemPresenter { view.UI.PointerOverBackgroundMargin = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBackgroundMargin"/></summary>
        public static TView PointerOverBackgroundMargin<TView>(this TView view, double uniform) where TView : ListViewItemPresenter { view.UI.PointerOverBackgroundMargin = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBackgroundMargin"/></summary>
        public static TView PointerOverBackgroundMargin<TView>(this TView view, double horizontal, double vertical) where TView : ListViewItemPresenter { view.UI.PointerOverBackgroundMargin = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBackgroundMargin"/></summary>
        public static TView PointerOverBackgroundMargin<TView>(this TView view, double left, double top, double right, double bottom) where TView : ListViewItemPresenter { view.UI.PointerOverBackgroundMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBackgroundMargin"/></summary>
        public static TView PointerOverBackgroundMargins<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : ListViewItemPresenter { view.UI.PointerOverBackgroundMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBorderBrush"/></summary>
        public static TView PointerOverBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.PointerOverBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBorderBrush"/></summary>
        public static TView PointerOverBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.PointerOverBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBorderBrush"/></summary>
        public static TView PointerOverBorderBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.PointerOverBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverForeground"/></summary>
        public static TView PointerOverForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.PointerOverForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverForeground"/></summary>
        public static TView PointerOverForeground<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.PointerOverForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverForeground"/></summary>
        public static TView PointerOverForeground<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.PointerOverForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PressedBackground"/></summary>
        public static TView PressedBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.PressedBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PressedBackground"/></summary>
        public static TView PressedBackground<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.PressedBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PressedBackground"/></summary>
        public static TView PressedBackground<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.PressedBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ReorderHintOffset"/></summary>
        public static TView ReorderHintOffset<TView>(this TView view, double value) where TView : ListViewItemPresenter { view.UI.ReorderHintOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBackground"/></summary>
        public static TView RevealBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.RevealBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBackground"/></summary>
        public static TView RevealBackground<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.RevealBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBackground"/></summary>
        public static TView RevealBackground<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.RevealBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBackgroundShowsAboveContent"/></summary>
        public static TView RevealBackgroundShowsAboveContent<TView>(this TView view, bool value) where TView : ListViewItemPresenter { view.UI.RevealBackgroundShowsAboveContent = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBorderBrush"/></summary>
        public static TView RevealBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.RevealBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBorderBrush"/></summary>
        public static TView RevealBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.RevealBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBorderBrush"/></summary>
        public static TView RevealBorderBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.RevealBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBorderThickness"/></summary>
        public static TView RevealBorderThickness<TView>(this TView view, Xaml.Thickness value) where TView : ListViewItemPresenter { view.UI.RevealBorderThickness = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBorderThickness"/></summary>
        public static TView RevealBorderThickness<TView>(this TView view, double uniform) where TView : ListViewItemPresenter { view.UI.RevealBorderThickness = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBorderThickness"/></summary>
        public static TView RevealBorderThickness<TView>(this TView view, double horizontal, double vertical) where TView : ListViewItemPresenter { view.UI.RevealBorderThickness = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBorderThickness"/></summary>
        public static TView RevealBorderThickness<TView>(this TView view, double left, double top, double right, double bottom) where TView : ListViewItemPresenter { view.UI.RevealBorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBorderThickness"/></summary>
        public static TView RevealBorderThicknesses<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : ListViewItemPresenter { view.UI.RevealBorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBackground"/></summary>
        public static TView SelectedBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.SelectedBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBackground"/></summary>
        public static TView SelectedBackground<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.SelectedBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBackground"/></summary>
        public static TView SelectedBackground<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.SelectedBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBorderBrush"/></summary>
        public static TView SelectedBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.SelectedBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBorderBrush"/></summary>
        public static TView SelectedBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.SelectedBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBorderBrush"/></summary>
        public static TView SelectedBorderBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.SelectedBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBorderThickness"/></summary>
        public static TView SelectedBorderThickness<TView>(this TView view, Xaml.Thickness value) where TView : ListViewItemPresenter { view.UI.SelectedBorderThickness = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBorderThickness"/></summary>
        public static TView SelectedBorderThickness<TView>(this TView view, double uniform) where TView : ListViewItemPresenter { view.UI.SelectedBorderThickness = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBorderThickness"/></summary>
        public static TView SelectedBorderThickness<TView>(this TView view, double horizontal, double vertical) where TView : ListViewItemPresenter { view.UI.SelectedBorderThickness = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBorderThickness"/></summary>
        public static TView SelectedBorderThickness<TView>(this TView view, double left, double top, double right, double bottom) where TView : ListViewItemPresenter { view.UI.SelectedBorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBorderThickness"/></summary>
        public static TView SelectedBorderThicknesses<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : ListViewItemPresenter { view.UI.SelectedBorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedDisabledBackground"/></summary>
        public static TView SelectedDisabledBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.SelectedDisabledBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedDisabledBackground"/></summary>
        public static TView SelectedDisabledBackground<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.SelectedDisabledBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedDisabledBackground"/></summary>
        public static TView SelectedDisabledBackground<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.SelectedDisabledBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedDisabledBorderBrush"/></summary>
        public static TView SelectedDisabledBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.SelectedDisabledBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedDisabledBorderBrush"/></summary>
        public static TView SelectedDisabledBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.SelectedDisabledBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedDisabledBorderBrush"/></summary>
        public static TView SelectedDisabledBorderBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.SelectedDisabledBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedForeground"/></summary>
        public static TView SelectedForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.SelectedForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedForeground"/></summary>
        public static TView SelectedForeground<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.SelectedForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedForeground"/></summary>
        public static TView SelectedForeground<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.SelectedForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedInnerBorderBrush"/></summary>
        public static TView SelectedInnerBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.SelectedInnerBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedInnerBorderBrush"/></summary>
        public static TView SelectedInnerBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.SelectedInnerBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedInnerBorderBrush"/></summary>
        public static TView SelectedInnerBorderBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.SelectedInnerBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPointerOverBackground"/></summary>
        public static TView SelectedPointerOverBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.SelectedPointerOverBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPointerOverBackground"/></summary>
        public static TView SelectedPointerOverBackground<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.SelectedPointerOverBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPointerOverBackground"/></summary>
        public static TView SelectedPointerOverBackground<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.SelectedPointerOverBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPointerOverBorderBrush"/></summary>
        public static TView SelectedPointerOverBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.SelectedPointerOverBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPointerOverBorderBrush"/></summary>
        public static TView SelectedPointerOverBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.SelectedPointerOverBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPointerOverBorderBrush"/></summary>
        public static TView SelectedPointerOverBorderBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.SelectedPointerOverBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPressedBackground"/></summary>
        public static TView SelectedPressedBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.SelectedPressedBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPressedBackground"/></summary>
        public static TView SelectedPressedBackground<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.SelectedPressedBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPressedBackground"/></summary>
        public static TView SelectedPressedBackground<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.SelectedPressedBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPressedBorderBrush"/></summary>
        public static TView SelectedPressedBorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.SelectedPressedBorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPressedBorderBrush"/></summary>
        public static TView SelectedPressedBorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.SelectedPressedBorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPressedBorderBrush"/></summary>
        public static TView SelectedPressedBorderBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.SelectedPressedBorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionCheckMarkVisualEnabled"/></summary>
        public static TView SelectionCheckMarkVisualEnabled<TView>(this TView view, bool value) where TView : ListViewItemPresenter { view.UI.SelectionCheckMarkVisualEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorBrush"/></summary>
        public static TView SelectionIndicatorBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorBrush"/></summary>
        public static TView SelectionIndicatorBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorBrush"/></summary>
        public static TView SelectionIndicatorBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorCornerRadius"/></summary>
        public static TView SelectionIndicatorCornerRadius<TView>(this TView view, CSharpMarkup.WinUI.to.CornerRadius value) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorCornerRadius = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorDisabledBrush"/></summary>
        public static TView SelectionIndicatorDisabledBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorDisabledBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorDisabledBrush"/></summary>
        public static TView SelectionIndicatorDisabledBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorDisabledBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorDisabledBrush"/></summary>
        public static TView SelectionIndicatorDisabledBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorDisabledBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorMode"/></summary>
        public static TView SelectionIndicatorMode<TView>(this TView view, Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode value) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorPointerOverBrush"/></summary>
        public static TView SelectionIndicatorPointerOverBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorPointerOverBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorPointerOverBrush"/></summary>
        public static TView SelectionIndicatorPointerOverBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorPointerOverBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorPointerOverBrush"/></summary>
        public static TView SelectionIndicatorPointerOverBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorPointerOverBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorPressedBrush"/></summary>
        public static TView SelectionIndicatorPressedBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorPressedBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorPressedBrush"/></summary>
        public static TView SelectionIndicatorPressedBrush<TView>(this TView view, Windows.UI.Color value) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorPressedBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorPressedBrush"/></summary>
        public static TView SelectionIndicatorPressedBrush<TView>(this TView view, string color) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorPressedBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorVisualEnabled"/></summary>
        public static TView SelectionIndicatorVisualEnabled<TView>(this TView view, bool value) where TView : ListViewItemPresenter { view.UI.SelectionIndicatorVisualEnabled = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckBoxBorderBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckBoxBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxCornerRadius"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius> CheckBoxCornerRadius<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxCornerRadiusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxDisabledBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckBoxDisabledBorderBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxDisabledBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxDisabledBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckBoxDisabledBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxDisabledBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPointerOverBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckBoxPointerOverBorderBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPointerOverBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPointerOverBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckBoxPointerOverBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPointerOverBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPressedBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckBoxPressedBorderBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPressedBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPressedBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckBoxPressedBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxPressedBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckBoxSelectedBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedDisabledBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckBoxSelectedDisabledBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedDisabledBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedPointerOverBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckBoxSelectedPointerOverBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedPointerOverBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedPressedBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckBoxSelectedPressedBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckBoxSelectedPressedBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckDisabledBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckDisabledBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckDisabledBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckHintBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckHintBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckHintBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.ListViewItemPresenterCheckMode> CheckMode<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.ListViewItemPresenterCheckMode>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckPressedBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckPressedBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckPressedBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.CheckSelectingBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> CheckSelectingBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.CheckSelectingBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ContentMargin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> ContentMargin<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.ContentMarginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.DisabledOpacity"/></summary>
        public static DependencyProperty<TTarget, double> DisabledOpacity<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.DisabledOpacityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.DragBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> DragBackground<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.DragBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.DragForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> DragForeground<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.DragForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.DragOpacity"/></summary>
        public static DependencyProperty<TTarget, double> DragOpacity<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.DragOpacityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.FocusBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> FocusBorderBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.FocusBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.FocusSecondaryBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> FocusSecondaryBorderBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.FocusSecondaryBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ListViewItemPresenterHorizontalContentAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.HorizontalAlignment> ListViewItemPresenterHorizontalContentAlignment<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.HorizontalAlignment>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.ListViewItemPresenterHorizontalContentAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ListViewItemPresenterPadding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> ListViewItemPresenterPadding<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.ListViewItemPresenterPaddingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ListViewItemPresenterVerticalContentAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.VerticalAlignment> ListViewItemPresenterVerticalContentAlignment<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.VerticalAlignment>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.ListViewItemPresenterVerticalContentAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PlaceholderBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> PlaceholderBackground<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.PlaceholderBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBackgroundMargin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> PointerOverBackgroundMargin<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBackgroundMarginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> PointerOverBackground<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> PointerOverBorderBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> PointerOverForeground<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.PointerOverForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.PressedBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> PressedBackground<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.PressedBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.ReorderHintOffset"/></summary>
        public static DependencyProperty<TTarget, double> ReorderHintOffset<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.ReorderHintOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> RevealBackground<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.RevealBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBackgroundShowsAboveContent"/></summary>
        public static DependencyProperty<TTarget, bool> RevealBackgroundShowsAboveContent<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.RevealBackgroundShowsAboveContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> RevealBorderBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.RevealBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.RevealBorderThickness"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> RevealBorderThickness<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.RevealBorderThicknessProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedBackground<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedBorderBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBorderThickness"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> SelectedBorderThickness<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectedBorderThicknessProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedDisabledBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedDisabledBackground<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectedDisabledBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedDisabledBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedDisabledBorderBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectedDisabledBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedForeground<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectedForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedInnerBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedInnerBorderBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectedInnerBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPointerOverBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedPointerOverBackground<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPointerOverBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPointerOverBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedPointerOverBorderBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPointerOverBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPressedBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedPressedBackground<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPressedBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPressedBorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectedPressedBorderBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectedPressedBorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionCheckMarkVisualEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> SelectionCheckMarkVisualEnabled<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectionCheckMarkVisualEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectionIndicatorBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorCornerRadius"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius> SelectionIndicatorCornerRadius<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorCornerRadiusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorDisabledBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectionIndicatorDisabledBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorDisabledBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode> SelectionIndicatorMode<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorPointerOverBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectionIndicatorPointerOverBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorPointerOverBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorPressedBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> SelectionIndicatorPressedBrush<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorPressedBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorVisualEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> SelectionIndicatorVisualEnabled<TTarget>(this TTarget target) where TTarget : ListViewItemPresenter
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.ListViewItemPresenter.SelectionIndicatorVisualEnabledProperty);
    }
}

namespace CSharpMarkup.WinUI // ListViewItemTemplateSettings
{
    public partial class ListViewItemTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.ListViewItemTemplateSettings>
    {
        Xaml.Controls.Primitives.ListViewItemTemplateSettings ui;

        public new Xaml.Controls.Primitives.ListViewItemTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ListViewItemTemplateSettings Invoke(Action<Xaml.Controls.Primitives.ListViewItemTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected ListViewItemTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // LoopingSelector
{
    public partial class LoopingSelector : Control, IUI<Xaml.Controls.Primitives.LoopingSelector>
    {
        Xaml.Controls.Primitives.LoopingSelector ui;

        public new Xaml.Controls.Primitives.LoopingSelector UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public LoopingSelector Invoke(Action<Xaml.Controls.Primitives.LoopingSelector> action) { action?.Invoke(UI); return this; }

        protected LoopingSelector() { }
    }

    public static partial class LoopingSelectorExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.LoopingSelector.ItemHeight"/></summary>
        public static TView ItemHeight<TView>(this TView view, int value) where TView : LoopingSelector { view.UI.ItemHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.LoopingSelector.Items"/></summary>
        public static TView Items<TView>(this TView view, IList<object> value) where TView : LoopingSelector { view.UI.Items = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.LoopingSelector.ItemTemplate"/></summary>
        public static TView ItemTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : LoopingSelector { view.UI.ItemTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.LoopingSelector.ItemWidth"/></summary>
        public static TView ItemWidth<TView>(this TView view, int value) where TView : LoopingSelector { view.UI.ItemWidth = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.LoopingSelector.SelectedIndex"/></summary>
        public static TView SelectedIndex<TView>(this TView view, int value) where TView : LoopingSelector { view.UI.SelectedIndex = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.LoopingSelector.SelectedItem"/></summary>
        public static TView SelectedItem<TView>(this TView view, object value) where TView : LoopingSelector { view.UI.SelectedItem = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.LoopingSelector.ShouldLoop"/></summary>
        public static TView ShouldLoop<TView>(this TView view, bool value) where TView : LoopingSelector { view.UI.ShouldLoop = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.LoopingSelector.ItemHeight"/></summary>
        public static DependencyProperty<TTarget, int> ItemHeight<TTarget>(this TTarget target) where TTarget : LoopingSelector
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Primitives.LoopingSelector.ItemHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.LoopingSelector.Items"/></summary>
        public static DependencyProperty<TTarget, IList<object>> Items<TTarget>(this TTarget target) where TTarget : LoopingSelector
        => DependencyProperty<TTarget, IList<object>>.Get(target, Xaml.Controls.Primitives.LoopingSelector.ItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.LoopingSelector.ItemTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> ItemTemplate<TTarget>(this TTarget target) where TTarget : LoopingSelector
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.Primitives.LoopingSelector.ItemTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.LoopingSelector.ItemWidth"/></summary>
        public static DependencyProperty<TTarget, int> ItemWidth<TTarget>(this TTarget target) where TTarget : LoopingSelector
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Primitives.LoopingSelector.ItemWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.LoopingSelector.SelectedIndex"/></summary>
        public static DependencyProperty<TTarget, int> SelectedIndex<TTarget>(this TTarget target) where TTarget : LoopingSelector
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Primitives.LoopingSelector.SelectedIndexProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.LoopingSelector.SelectedItem"/></summary>
        public static DependencyProperty<TTarget, object> SelectedItem<TTarget>(this TTarget target) where TTarget : LoopingSelector
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.Primitives.LoopingSelector.SelectedItemProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.LoopingSelector.ShouldLoop"/></summary>
        public static DependencyProperty<TTarget, bool> ShouldLoop<TTarget>(this TTarget target) where TTarget : LoopingSelector
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.LoopingSelector.ShouldLoopProperty);
    }
}

namespace CSharpMarkup.WinUI // LoopingSelectorItem
{
    public partial class LoopingSelectorItem : ContentControl, IUI<Xaml.Controls.Primitives.LoopingSelectorItem>
    {
        Xaml.Controls.Primitives.LoopingSelectorItem ui;

        public new Xaml.Controls.Primitives.LoopingSelectorItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public LoopingSelectorItem Invoke(Action<Xaml.Controls.Primitives.LoopingSelectorItem> action) { action?.Invoke(UI); return this; }

        protected LoopingSelectorItem() { }
    }
}

namespace CSharpMarkup.WinUI // LoopingSelectorPanel
{
    public partial class LoopingSelectorPanel : Canvas, IUI<Xaml.Controls.Primitives.LoopingSelectorPanel>
    {
        Xaml.Controls.Primitives.LoopingSelectorPanel ui;

        public new Xaml.Controls.Primitives.LoopingSelectorPanel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public LoopingSelectorPanel Invoke(Action<Xaml.Controls.Primitives.LoopingSelectorPanel> action) { action?.Invoke(UI); return this; }

        protected LoopingSelectorPanel() { }
    }
}

namespace CSharpMarkup.WinUI // MenuFlyoutItemTemplateSettings
{
    public partial class MenuFlyoutItemTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings>
    {
        Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings ui;

        public new Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public MenuFlyoutItemTemplateSettings Invoke(Action<Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected MenuFlyoutItemTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // MenuFlyoutPresenterTemplateSettings
{
    public partial class MenuFlyoutPresenterTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings>
    {
        Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings ui;

        public new Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public MenuFlyoutPresenterTemplateSettings Invoke(Action<Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected MenuFlyoutPresenterTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // MonochromaticOverlayPresenter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.MonochromaticOverlayPresenter"/></summary>
        public static MonochromaticOverlayPresenter MonochromaticOverlayPresenter(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.Primitives.MonochromaticOverlayPresenter();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.MonochromaticOverlayPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.MonochromaticOverlayPresenter"/></summary>
        public static MonochromaticOverlayPresenter MonochromaticOverlayPresenter()
        {
            var ui = new Xaml.Controls.Primitives.MonochromaticOverlayPresenter();
            return CSharpMarkup.WinUI.MonochromaticOverlayPresenter.StartChain(ui);
        }
    }

    public partial class MonochromaticOverlayPresenter : Grid, IUI<Xaml.Controls.Primitives.MonochromaticOverlayPresenter>
    {
        static MonochromaticOverlayPresenter instance;

        internal static MonochromaticOverlayPresenter StartChain(Xaml.Controls.Primitives.MonochromaticOverlayPresenter ui)
        {
            if (instance == null) instance = new MonochromaticOverlayPresenter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.MonochromaticOverlayPresenter ui;

        public new Xaml.Controls.Primitives.MonochromaticOverlayPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(MonochromaticOverlayPresenter view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.MonochromaticOverlayPresenter(MonochromaticOverlayPresenter view) => view?.UI;

        public static implicit operator MonochromaticOverlayPresenter(Xaml.Controls.Primitives.MonochromaticOverlayPresenter ui) => MonochromaticOverlayPresenter.StartChain(ui);

        public MonochromaticOverlayPresenter Invoke(Action<Xaml.Controls.Primitives.MonochromaticOverlayPresenter> action) { action?.Invoke(UI); return this; }

        protected MonochromaticOverlayPresenter() { }
    }

    public static partial class MonochromaticOverlayPresenterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.MonochromaticOverlayPresenter.ReplacementColor"/></summary>
        public static TView ReplacementColor<TView>(this TView view, Windows.UI.Color value) where TView : MonochromaticOverlayPresenter { view.UI.ReplacementColor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.MonochromaticOverlayPresenter.SourceElement"/></summary>
        public static TView SourceElement<TView>(this TView view, Xaml.UIElement value) where TView : MonochromaticOverlayPresenter { view.UI.SourceElement = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.MonochromaticOverlayPresenter.ReplacementColor"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Color> ReplacementColor<TTarget>(this TTarget target) where TTarget : MonochromaticOverlayPresenter
        => DependencyProperty<TTarget, Windows.UI.Color>.Get(target, Xaml.Controls.Primitives.MonochromaticOverlayPresenter.ReplacementColorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.MonochromaticOverlayPresenter.SourceElement"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> SourceElement<TTarget>(this TTarget target) where TTarget : MonochromaticOverlayPresenter
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.Primitives.MonochromaticOverlayPresenter.SourceElementProperty);
    }
}

namespace CSharpMarkup.WinUI // NavigationViewItemPresenter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.NavigationViewItemPresenter"/></summary>
        public static NavigationViewItemPresenter NavigationViewItemPresenter(UIObject Content)
        {
            var ui = new Xaml.Controls.Primitives.NavigationViewItemPresenter();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.NavigationViewItemPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.NavigationViewItemPresenter"/></summary>
        public static NavigationViewItemPresenter NavigationViewItemPresenter(Xaml.Controls.IconElement Icon = default, Xaml.Controls.InfoBadge InfoBadge = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.Primitives.NavigationViewItemPresenter();
            if (Icon is not null) ui.Icon = Icon;
            if (InfoBadge is not null) ui.InfoBadge = InfoBadge;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.NavigationViewItemPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.NavigationViewItemPresenter"/></summary>
        public static NavigationViewItemPresenter NavigationViewItemPresenter()
        {
            var ui = new Xaml.Controls.Primitives.NavigationViewItemPresenter();
            return CSharpMarkup.WinUI.NavigationViewItemPresenter.StartChain(ui);
        }
    }

    public partial class NavigationViewItemPresenter : ContentControl, IUI<Xaml.Controls.Primitives.NavigationViewItemPresenter>
    {
        static NavigationViewItemPresenter instance;

        internal static NavigationViewItemPresenter StartChain(Xaml.Controls.Primitives.NavigationViewItemPresenter ui)
        {
            if (instance == null) instance = new NavigationViewItemPresenter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.NavigationViewItemPresenter ui;

        public new Xaml.Controls.Primitives.NavigationViewItemPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(NavigationViewItemPresenter view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.NavigationViewItemPresenter(NavigationViewItemPresenter view) => view?.UI;

        public static implicit operator NavigationViewItemPresenter(Xaml.Controls.Primitives.NavigationViewItemPresenter ui) => NavigationViewItemPresenter.StartChain(ui);

        public NavigationViewItemPresenter Invoke(Action<Xaml.Controls.Primitives.NavigationViewItemPresenter> action) { action?.Invoke(UI); return this; }

        protected NavigationViewItemPresenter() { }
    }

    public static partial class NavigationViewItemPresenterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.NavigationViewItemPresenter.Icon"/></summary>
        public static TView Icon<TView>(this TView view, Xaml.Controls.IconElement value) where TView : NavigationViewItemPresenter { view.UI.Icon = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.NavigationViewItemPresenter.InfoBadge"/></summary>
        public static TView InfoBadge<TView>(this TView view, Xaml.Controls.InfoBadge value) where TView : NavigationViewItemPresenter { view.UI.InfoBadge = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.NavigationViewItemPresenter.Icon"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconElement> Icon<TTarget>(this TTarget target) where TTarget : NavigationViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Controls.IconElement>.Get(target, Xaml.Controls.Primitives.NavigationViewItemPresenter.IconProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.NavigationViewItemPresenter.InfoBadge"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.InfoBadge> InfoBadge<TTarget>(this TTarget target) where TTarget : NavigationViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Controls.InfoBadge>.Get(target, Xaml.Controls.Primitives.NavigationViewItemPresenter.InfoBadgeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.NavigationViewItemPresenter.TemplateSettings"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings> TemplateSettings<TTarget>(this TTarget target) where TTarget : NavigationViewItemPresenter
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings>.Get(target, Xaml.Controls.Primitives.NavigationViewItemPresenter.TemplateSettingsProperty);
    }
}

namespace CSharpMarkup.WinUI // NavigationViewItemPresenterTemplateSettings
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings"/></summary>
        public static NavigationViewItemPresenterTemplateSettings NavigationViewItemPresenterTemplateSettings()
        {
            var ui = new Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings();
            return CSharpMarkup.WinUI.NavigationViewItemPresenterTemplateSettings.StartChain(ui);
        }
    }

    public partial class NavigationViewItemPresenterTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings>
    {
        static NavigationViewItemPresenterTemplateSettings instance;

        internal static NavigationViewItemPresenterTemplateSettings StartChain(Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings ui)
        {
            if (instance == null) instance = new NavigationViewItemPresenterTemplateSettings();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings ui;

        public new Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings(NavigationViewItemPresenterTemplateSettings view) => view?.UI;

        public static implicit operator NavigationViewItemPresenterTemplateSettings(Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings ui) => NavigationViewItemPresenterTemplateSettings.StartChain(ui);

        public NavigationViewItemPresenterTemplateSettings Invoke(Action<Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected NavigationViewItemPresenterTemplateSettings() { }
    }

    public static partial class NavigationViewItemPresenterTemplateSettingsExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.IconWidth"/></summary>
        public static DependencyProperty<TTarget, double> IconWidth<TTarget>(this TTarget target) where TTarget : NavigationViewItemPresenterTemplateSettings
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.IconWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.SmallerIconWidth"/></summary>
        public static DependencyProperty<TTarget, double> SmallerIconWidth<TTarget>(this TTarget target) where TTarget : NavigationViewItemPresenterTemplateSettings
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings.SmallerIconWidthProperty);
    }
}

namespace CSharpMarkup.WinUI // OrientedVirtualizingPanel
{
    public partial class OrientedVirtualizingPanel : VirtualizingPanel, IUI<Xaml.Controls.Primitives.OrientedVirtualizingPanel>
    {
        Xaml.Controls.Primitives.OrientedVirtualizingPanel ui;

        public new Xaml.Controls.Primitives.OrientedVirtualizingPanel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public OrientedVirtualizingPanel Invoke(Action<Xaml.Controls.Primitives.OrientedVirtualizingPanel> action) { action?.Invoke(UI); return this; }

        protected OrientedVirtualizingPanel() { }
    }

    public static partial class OrientedVirtualizingPanelExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.OrientedVirtualizingPanel.CanHorizontallyScroll"/></summary>
        public static TView CanHorizontallyScroll<TView>(this TView view, bool value) where TView : OrientedVirtualizingPanel { view.UI.CanHorizontallyScroll = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.OrientedVirtualizingPanel.CanVerticallyScroll"/></summary>
        public static TView CanVerticallyScroll<TView>(this TView view, bool value) where TView : OrientedVirtualizingPanel { view.UI.CanVerticallyScroll = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.OrientedVirtualizingPanel.ScrollOwner"/></summary>
        public static TView ScrollOwner<TView>(this TView view, object value) where TView : OrientedVirtualizingPanel { view.UI.ScrollOwner = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // PickerFlyoutBase
{
    public partial class PickerFlyoutBase : FlyoutBase, IUI<Xaml.Controls.Primitives.PickerFlyoutBase>
    {
        Xaml.Controls.Primitives.PickerFlyoutBase ui;

        public new Xaml.Controls.Primitives.PickerFlyoutBase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PickerFlyoutBase Invoke(Action<Xaml.Controls.Primitives.PickerFlyoutBase> action) { action?.Invoke(UI); return this; }

        protected PickerFlyoutBase() { }
    }

    public static partial class PickerFlyoutBaseExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.PickerFlyoutBase.Title"/></summary>
        public static TTarget PickerFlyoutBase_Title<TTarget>(this TTarget target, string value) where TTarget : DependencyObject
        { Xaml.Controls.Primitives.PickerFlyoutBase.SetTitle(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.PickerFlyoutBase.Title"/></summary>
        public static DependencyProperty<TTarget, string> PickerFlyoutBase_Title<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.Primitives.PickerFlyoutBase.TitleProperty);
    }
}

namespace CSharpMarkup.WinUI // PivotHeaderItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.PivotHeaderItem"/></summary>
        public static PivotHeaderItem PivotHeaderItem(UIObject Content)
        {
            var ui = new Xaml.Controls.Primitives.PivotHeaderItem();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.PivotHeaderItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.PivotHeaderItem"/></summary>
        public static PivotHeaderItem PivotHeaderItem()
        {
            var ui = new Xaml.Controls.Primitives.PivotHeaderItem();
            return CSharpMarkup.WinUI.PivotHeaderItem.StartChain(ui);
        }
    }

    public partial class PivotHeaderItem : ContentControl, IUI<Xaml.Controls.Primitives.PivotHeaderItem>
    {
        static PivotHeaderItem instance;

        internal static PivotHeaderItem StartChain(Xaml.Controls.Primitives.PivotHeaderItem ui)
        {
            if (instance == null) instance = new PivotHeaderItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.PivotHeaderItem ui;

        public new Xaml.Controls.Primitives.PivotHeaderItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(PivotHeaderItem view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.PivotHeaderItem(PivotHeaderItem view) => view?.UI;

        public static implicit operator PivotHeaderItem(Xaml.Controls.Primitives.PivotHeaderItem ui) => PivotHeaderItem.StartChain(ui);

        public PivotHeaderItem Invoke(Action<Xaml.Controls.Primitives.PivotHeaderItem> action) { action?.Invoke(UI); return this; }

        protected PivotHeaderItem() { }
    }
}

namespace CSharpMarkup.WinUI // PivotHeaderPanel
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.PivotHeaderPanel"/></summary>
        public static PivotHeaderPanel PivotHeaderPanel(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.Primitives.PivotHeaderPanel();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.PivotHeaderPanel.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.PivotHeaderPanel"/></summary>
        public static PivotHeaderPanel PivotHeaderPanel()
        {
            var ui = new Xaml.Controls.Primitives.PivotHeaderPanel();
            return CSharpMarkup.WinUI.PivotHeaderPanel.StartChain(ui);
        }
    }

    public partial class PivotHeaderPanel : Canvas, IUI<Xaml.Controls.Primitives.PivotHeaderPanel>
    {
        static PivotHeaderPanel instance;

        internal static PivotHeaderPanel StartChain(Xaml.Controls.Primitives.PivotHeaderPanel ui)
        {
            if (instance == null) instance = new PivotHeaderPanel();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.PivotHeaderPanel ui;

        public new Xaml.Controls.Primitives.PivotHeaderPanel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(PivotHeaderPanel view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.PivotHeaderPanel(PivotHeaderPanel view) => view?.UI;

        public static implicit operator PivotHeaderPanel(Xaml.Controls.Primitives.PivotHeaderPanel ui) => PivotHeaderPanel.StartChain(ui);

        public PivotHeaderPanel Invoke(Action<Xaml.Controls.Primitives.PivotHeaderPanel> action) { action?.Invoke(UI); return this; }

        protected PivotHeaderPanel() { }
    }
}

namespace CSharpMarkup.WinUI // PivotPanel
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.PivotPanel"/></summary>
        public static PivotPanel PivotPanel(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.Primitives.PivotPanel();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.PivotPanel.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.PivotPanel"/></summary>
        public static PivotPanel PivotPanel()
        {
            var ui = new Xaml.Controls.Primitives.PivotPanel();
            return CSharpMarkup.WinUI.PivotPanel.StartChain(ui);
        }
    }

    public partial class PivotPanel : Panel, IUI<Xaml.Controls.Primitives.PivotPanel>
    {
        static PivotPanel instance;

        internal static PivotPanel StartChain(Xaml.Controls.Primitives.PivotPanel ui)
        {
            if (instance == null) instance = new PivotPanel();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.PivotPanel ui;

        public new Xaml.Controls.Primitives.PivotPanel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(PivotPanel view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.PivotPanel(PivotPanel view) => view?.UI;

        public static implicit operator PivotPanel(Xaml.Controls.Primitives.PivotPanel ui) => PivotPanel.StartChain(ui);

        public PivotPanel Invoke(Action<Xaml.Controls.Primitives.PivotPanel> action) { action?.Invoke(UI); return this; }

        protected PivotPanel() { }
    }
}

namespace CSharpMarkup.WinUI // Popup
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.Popup"/></summary>
        public static Popup Popup(Xaml.UIElement Child)
        {
            var ui = new Xaml.Controls.Primitives.Popup();
            if (Child is not null) ui.Child = Child;
            return CSharpMarkup.WinUI.Popup.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.Popup"/></summary>
        public static Popup Popup(Xaml.Media.Animation.TransitionCollection ChildTransitions = default, Xaml.Controls.Primitives.PopupPlacementMode? DesiredPlacement = default, double? HorizontalOffset = default, bool? IsLightDismissEnabled = default, bool? IsOpen = default, Xaml.Controls.LightDismissOverlayMode? LightDismissOverlayMode = default, Xaml.FrameworkElement PlacementTarget = default, bool? ShouldConstrainToRootBounds = default, Xaml.Media.SystemBackdrop SystemBackdrop = default, double? VerticalOffset = default, Xaml.UIElement Child = default)
        {
            var ui = new Xaml.Controls.Primitives.Popup();
            if (ChildTransitions is not null) ui.ChildTransitions = ChildTransitions;
            if (DesiredPlacement is not null) ui.DesiredPlacement = DesiredPlacement.Value;
            if (HorizontalOffset is not null) ui.HorizontalOffset = HorizontalOffset.Value;
            if (IsLightDismissEnabled is not null) ui.IsLightDismissEnabled = IsLightDismissEnabled.Value;
            if (IsOpen is not null) ui.IsOpen = IsOpen.Value;
            if (LightDismissOverlayMode is not null) ui.LightDismissOverlayMode = LightDismissOverlayMode.Value;
            if (PlacementTarget is not null) ui.PlacementTarget = PlacementTarget;
            if (ShouldConstrainToRootBounds is not null) ui.ShouldConstrainToRootBounds = ShouldConstrainToRootBounds.Value;
            if (SystemBackdrop is not null) ui.SystemBackdrop = SystemBackdrop;
            if (VerticalOffset is not null) ui.VerticalOffset = VerticalOffset.Value;
            if (Child is not null) ui.Child = Child;
            return CSharpMarkup.WinUI.Popup.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.Popup"/></summary>
        public static Popup Popup()
        {
            var ui = new Xaml.Controls.Primitives.Popup();
            return CSharpMarkup.WinUI.Popup.StartChain(ui);
        }
    }

    public partial class Popup : FrameworkElement, IUI<Xaml.Controls.Primitives.Popup>
    {
        static Popup instance;

        internal static Popup StartChain(Xaml.Controls.Primitives.Popup ui)
        {
            if (instance == null) instance = new Popup();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.Popup ui;

        public new Xaml.Controls.Primitives.Popup UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Popup view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.Popup(Popup view) => view?.UI;

        public static implicit operator Popup(Xaml.Controls.Primitives.Popup ui) => Popup.StartChain(ui);

        public Popup Invoke(Action<Xaml.Controls.Primitives.Popup> action) { action?.Invoke(UI); return this; }

        protected Popup() { }
    }

    public static partial class PopupExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.Popup.ChildTransitions"/></summary>
        public static TView ChildTransitions<TView>(this TView view, Xaml.Media.Animation.TransitionCollection value) where TView : Popup { view.UI.ChildTransitions = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.Popup.DesiredPlacement"/></summary>
        public static TView DesiredPlacement<TView>(this TView view, Xaml.Controls.Primitives.PopupPlacementMode value) where TView : Popup { view.UI.DesiredPlacement = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.Popup.HorizontalOffset"/></summary>
        public static TView HorizontalOffset<TView>(this TView view, double value) where TView : Popup { view.UI.HorizontalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.Popup.IsLightDismissEnabled"/></summary>
        public static TView IsLightDismissEnabled<TView>(this TView view, bool value) where TView : Popup { view.UI.IsLightDismissEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.Popup.IsOpen"/></summary>
        public static TView IsOpen<TView>(this TView view, bool value) where TView : Popup { view.UI.IsOpen = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.Popup.LightDismissOverlayMode"/></summary>
        public static TView LightDismissOverlayMode<TView>(this TView view, Xaml.Controls.LightDismissOverlayMode value) where TView : Popup { view.UI.LightDismissOverlayMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.Popup.PlacementTarget"/></summary>
        public static TView PlacementTarget<TView>(this TView view, Xaml.FrameworkElement value) where TView : Popup { view.UI.PlacementTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.Popup.ShouldConstrainToRootBounds"/></summary>
        public static TView ShouldConstrainToRootBounds<TView>(this TView view, bool value) where TView : Popup { view.UI.ShouldConstrainToRootBounds = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.Popup.SystemBackdrop"/></summary>
        public static TView SystemBackdrop<TView>(this TView view, Xaml.Media.SystemBackdrop value) where TView : Popup { view.UI.SystemBackdrop = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.Popup.VerticalOffset"/></summary>
        public static TView VerticalOffset<TView>(this TView view, double value) where TView : Popup { view.UI.VerticalOffset = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Popup.Child"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Child<TTarget>(this TTarget target) where TTarget : Popup
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.Primitives.Popup.ChildProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Popup.ChildTransitions"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection> ChildTransitions<TTarget>(this TTarget target) where TTarget : Popup
        => DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection>.Get(target, Xaml.Controls.Primitives.Popup.ChildTransitionsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Popup.DesiredPlacement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode> DesiredPlacement<TTarget>(this TTarget target) where TTarget : Popup
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode>.Get(target, Xaml.Controls.Primitives.Popup.DesiredPlacementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Popup.HorizontalOffset"/></summary>
        public static DependencyProperty<TTarget, double> HorizontalOffset<TTarget>(this TTarget target) where TTarget : Popup
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.Popup.HorizontalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Popup.IsLightDismissEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsLightDismissEnabled<TTarget>(this TTarget target) where TTarget : Popup
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.Popup.IsLightDismissEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Popup.IsOpen"/></summary>
        public static DependencyProperty<TTarget, bool> IsOpen<TTarget>(this TTarget target) where TTarget : Popup
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.Popup.IsOpenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Popup.LightDismissOverlayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> LightDismissOverlayMode<TTarget>(this TTarget target) where TTarget : Popup
        => DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode>.Get(target, Xaml.Controls.Primitives.Popup.LightDismissOverlayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Popup.PlacementTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.FrameworkElement> PlacementTarget<TTarget>(this TTarget target) where TTarget : Popup
        => DependencyProperty<TTarget, Xaml.FrameworkElement>.Get(target, Xaml.Controls.Primitives.Popup.PlacementTargetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Popup.ShouldConstrainToRootBounds"/></summary>
        public static DependencyProperty<TTarget, bool> ShouldConstrainToRootBounds<TTarget>(this TTarget target) where TTarget : Popup
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.Popup.ShouldConstrainToRootBoundsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Popup.SystemBackdrop"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.SystemBackdrop> SystemBackdrop<TTarget>(this TTarget target) where TTarget : Popup
        => DependencyProperty<TTarget, Xaml.Media.SystemBackdrop>.Get(target, Xaml.Controls.Primitives.Popup.SystemBackdropProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Popup.VerticalOffset"/></summary>
        public static DependencyProperty<TTarget, double> VerticalOffset<TTarget>(this TTarget target) where TTarget : Popup
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.Popup.VerticalOffsetProperty);
    }
}

namespace CSharpMarkup.WinUI // RangeBase
{
    public partial class RangeBase : Control, IUI<Xaml.Controls.Primitives.RangeBase>, IDefaultBindProperty
    {
        Xaml.Controls.Primitives.RangeBase ui;

        public new Xaml.Controls.Primitives.RangeBase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.Primitives.RangeBase.ValueProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.Primitives.RangeBase.ValueProperty;

        public RangeBase Invoke(Action<Xaml.Controls.Primitives.RangeBase> action) { action?.Invoke(UI); return this; }

        protected RangeBase() { }
    }

    public static partial class RangeBaseExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.RangeBase.LargeChange"/></summary>
        public static TView LargeChange<TView>(this TView view, double value) where TView : RangeBase { view.UI.LargeChange = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.RangeBase.Maximum"/></summary>
        public static TView Maximum<TView>(this TView view, double value) where TView : RangeBase { view.UI.Maximum = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.RangeBase.Minimum"/></summary>
        public static TView Minimum<TView>(this TView view, double value) where TView : RangeBase { view.UI.Minimum = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.RangeBase.SmallChange"/></summary>
        public static TView SmallChange<TView>(this TView view, double value) where TView : RangeBase { view.UI.SmallChange = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.RangeBase.Value"/></summary>
        public static TView Value<TView>(this TView view, double value) where TView : RangeBase { view.UI.Value = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.RangeBase.LargeChange"/></summary>
        public static DependencyProperty<TTarget, double> LargeChange<TTarget>(this TTarget target) where TTarget : RangeBase
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.RangeBase.LargeChangeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.RangeBase.Maximum"/></summary>
        public static DependencyProperty<TTarget, double> Maximum<TTarget>(this TTarget target) where TTarget : RangeBase
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.RangeBase.MaximumProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.RangeBase.Minimum"/></summary>
        public static DependencyProperty<TTarget, double> Minimum<TTarget>(this TTarget target) where TTarget : RangeBase
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.RangeBase.MinimumProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.RangeBase.SmallChange"/></summary>
        public static DependencyProperty<TTarget, double> SmallChange<TTarget>(this TTarget target) where TTarget : RangeBase
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.RangeBase.SmallChangeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.RangeBase.Value"/></summary>
        public static DependencyProperty<TTarget, double> Value<TTarget>(this TTarget target) where TTarget : RangeBase
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.RangeBase.ValueProperty);
    }
}

namespace CSharpMarkup.WinUI // RepeatButton
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.RepeatButton"/></summary>
        public static RepeatButton RepeatButton(UIObject Content)
        {
            var ui = new Xaml.Controls.Primitives.RepeatButton();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.RepeatButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.RepeatButton"/></summary>
        public static RepeatButton RepeatButton(int? Delay = default, int? Interval = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.Primitives.RepeatButton();
            if (Delay is not null) ui.Delay = Delay.Value;
            if (Interval is not null) ui.Interval = Interval.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.RepeatButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.RepeatButton"/></summary>
        public static RepeatButton RepeatButton()
        {
            var ui = new Xaml.Controls.Primitives.RepeatButton();
            return CSharpMarkup.WinUI.RepeatButton.StartChain(ui);
        }
    }

    public partial class RepeatButton : ButtonBase, IUI<Xaml.Controls.Primitives.RepeatButton>
    {
        static RepeatButton instance;

        internal static RepeatButton StartChain(Xaml.Controls.Primitives.RepeatButton ui)
        {
            if (instance == null) instance = new RepeatButton();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.RepeatButton ui;

        public new Xaml.Controls.Primitives.RepeatButton UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(RepeatButton view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.RepeatButton(RepeatButton view) => view?.UI;

        public static implicit operator RepeatButton(Xaml.Controls.Primitives.RepeatButton ui) => RepeatButton.StartChain(ui);

        public RepeatButton Invoke(Action<Xaml.Controls.Primitives.RepeatButton> action) { action?.Invoke(UI); return this; }

        protected RepeatButton() { }
    }

    public static partial class RepeatButtonExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.RepeatButton.Delay"/></summary>
        public static TView Delay<TView>(this TView view, int value) where TView : RepeatButton { view.UI.Delay = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.RepeatButton.Interval"/></summary>
        public static TView Interval<TView>(this TView view, int value) where TView : RepeatButton { view.UI.Interval = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.RepeatButton.Delay"/></summary>
        public static DependencyProperty<TTarget, int> Delay<TTarget>(this TTarget target) where TTarget : RepeatButton
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Primitives.RepeatButton.DelayProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.RepeatButton.Interval"/></summary>
        public static DependencyProperty<TTarget, int> Interval<TTarget>(this TTarget target) where TTarget : RepeatButton
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Primitives.RepeatButton.IntervalProperty);
    }
}

namespace CSharpMarkup.WinUI // ScrollBar
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ScrollBar"/></summary>
        public static ScrollBar ScrollBar(Xaml.Controls.Primitives.ScrollingIndicatorMode? IndicatorMode = default, Xaml.Controls.Orientation? Orientation = default, double? ViewportSize = default)
        {
            var ui = new Xaml.Controls.Primitives.ScrollBar();
            if (IndicatorMode is not null) ui.IndicatorMode = IndicatorMode.Value;
            if (Orientation is not null) ui.Orientation = Orientation.Value;
            if (ViewportSize is not null) ui.ViewportSize = ViewportSize.Value;
            return CSharpMarkup.WinUI.ScrollBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ScrollBar"/></summary>
        public static ScrollBar ScrollBar()
        {
            var ui = new Xaml.Controls.Primitives.ScrollBar();
            return CSharpMarkup.WinUI.ScrollBar.StartChain(ui);
        }
    }

    public partial class ScrollBar : RangeBase, IUI<Xaml.Controls.Primitives.ScrollBar>
    {
        static ScrollBar instance;

        internal static ScrollBar StartChain(Xaml.Controls.Primitives.ScrollBar ui)
        {
            if (instance == null) instance = new ScrollBar();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.ScrollBar ui;

        public new Xaml.Controls.Primitives.ScrollBar UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ScrollBar view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.ScrollBar(ScrollBar view) => view?.UI;

        public static implicit operator ScrollBar(Xaml.Controls.Primitives.ScrollBar ui) => ScrollBar.StartChain(ui);

        public ScrollBar Invoke(Action<Xaml.Controls.Primitives.ScrollBar> action) { action?.Invoke(UI); return this; }

        protected ScrollBar() { }
    }

    public static partial class ScrollBarExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollBar.IndicatorMode"/></summary>
        public static TView IndicatorMode<TView>(this TView view, Xaml.Controls.Primitives.ScrollingIndicatorMode value) where TView : ScrollBar { view.UI.IndicatorMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollBar.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.Orientation value) where TView : ScrollBar { view.UI.Orientation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollBar.ViewportSize"/></summary>
        public static TView ViewportSize<TView>(this TView view, double value) where TView : ScrollBar { view.UI.ViewportSize = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollBar.IndicatorMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.ScrollingIndicatorMode> IndicatorMode<TTarget>(this TTarget target) where TTarget : ScrollBar
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.ScrollingIndicatorMode>.Get(target, Xaml.Controls.Primitives.ScrollBar.IndicatorModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollBar.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Orientation> Orientation<TTarget>(this TTarget target) where TTarget : ScrollBar
        => DependencyProperty<TTarget, Xaml.Controls.Orientation>.Get(target, Xaml.Controls.Primitives.ScrollBar.OrientationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollBar.ViewportSize"/></summary>
        public static DependencyProperty<TTarget, double> ViewportSize<TTarget>(this TTarget target) where TTarget : ScrollBar
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.ScrollBar.ViewportSizeProperty);
    }
}

namespace CSharpMarkup.WinUI // ScrollPresenter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ScrollPresenter"/></summary>
        public static ScrollPresenter ScrollPresenter(Xaml.UIElement Content)
        {
            var ui = new Xaml.Controls.Primitives.ScrollPresenter();
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.ScrollPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ScrollPresenter"/></summary>
        public static ScrollPresenter ScrollPresenter(Xaml.Media.Brush Background = default, Xaml.Controls.ScrollingContentOrientation? ContentOrientation = default, double? HorizontalAnchorRatio = default, Xaml.Controls.ScrollingChainMode? HorizontalScrollChainMode = default, Xaml.Controls.Primitives.IScrollController HorizontalScrollController = default, Xaml.Controls.ScrollingScrollMode? HorizontalScrollMode = default, Xaml.Controls.ScrollingRailMode? HorizontalScrollRailMode = default, Xaml.Controls.ScrollingInputKinds? IgnoredInputKinds = default, double? MaxZoomFactor = default, double? MinZoomFactor = default, double? VerticalAnchorRatio = default, Xaml.Controls.ScrollingChainMode? VerticalScrollChainMode = default, Xaml.Controls.Primitives.IScrollController VerticalScrollController = default, Xaml.Controls.ScrollingScrollMode? VerticalScrollMode = default, Xaml.Controls.ScrollingRailMode? VerticalScrollRailMode = default, Xaml.Controls.ScrollingChainMode? ZoomChainMode = default, Xaml.Controls.ScrollingZoomMode? ZoomMode = default, Xaml.UIElement Content = default)
        {
            var ui = new Xaml.Controls.Primitives.ScrollPresenter();
            if (Background is not null) ui.Background = Background;
            if (ContentOrientation is not null) ui.ContentOrientation = ContentOrientation.Value;
            if (HorizontalAnchorRatio is not null) ui.HorizontalAnchorRatio = HorizontalAnchorRatio.Value;
            if (HorizontalScrollChainMode is not null) ui.HorizontalScrollChainMode = HorizontalScrollChainMode.Value;
            if (HorizontalScrollController is not null) ui.HorizontalScrollController = HorizontalScrollController;
            if (HorizontalScrollMode is not null) ui.HorizontalScrollMode = HorizontalScrollMode.Value;
            if (HorizontalScrollRailMode is not null) ui.HorizontalScrollRailMode = HorizontalScrollRailMode.Value;
            if (IgnoredInputKinds is not null) ui.IgnoredInputKinds = IgnoredInputKinds.Value;
            if (MaxZoomFactor is not null) ui.MaxZoomFactor = MaxZoomFactor.Value;
            if (MinZoomFactor is not null) ui.MinZoomFactor = MinZoomFactor.Value;
            if (VerticalAnchorRatio is not null) ui.VerticalAnchorRatio = VerticalAnchorRatio.Value;
            if (VerticalScrollChainMode is not null) ui.VerticalScrollChainMode = VerticalScrollChainMode.Value;
            if (VerticalScrollController is not null) ui.VerticalScrollController = VerticalScrollController;
            if (VerticalScrollMode is not null) ui.VerticalScrollMode = VerticalScrollMode.Value;
            if (VerticalScrollRailMode is not null) ui.VerticalScrollRailMode = VerticalScrollRailMode.Value;
            if (ZoomChainMode is not null) ui.ZoomChainMode = ZoomChainMode.Value;
            if (ZoomMode is not null) ui.ZoomMode = ZoomMode.Value;
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.ScrollPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ScrollPresenter"/></summary>
        public static ScrollPresenter ScrollPresenter()
        {
            var ui = new Xaml.Controls.Primitives.ScrollPresenter();
            return CSharpMarkup.WinUI.ScrollPresenter.StartChain(ui);
        }
    }

    public partial class ScrollPresenter : FrameworkElement, IUI<Xaml.Controls.Primitives.ScrollPresenter>
    {
        static ScrollPresenter instance;

        internal static ScrollPresenter StartChain(Xaml.Controls.Primitives.ScrollPresenter ui)
        {
            if (instance == null) instance = new ScrollPresenter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.ScrollPresenter ui;

        public new Xaml.Controls.Primitives.ScrollPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ScrollPresenter view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.ScrollPresenter(ScrollPresenter view) => view?.UI;

        public static implicit operator ScrollPresenter(Xaml.Controls.Primitives.ScrollPresenter ui) => ScrollPresenter.StartChain(ui);

        public ScrollPresenter Invoke(Action<Xaml.Controls.Primitives.ScrollPresenter> action) { action?.Invoke(UI); return this; }

        protected ScrollPresenter() { }
    }

    public static partial class ScrollPresenterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.Background"/></summary>
        public static TView Background<TView>(this TView view, Xaml.Media.Brush value) where TView : ScrollPresenter { view.UI.Background = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.Background"/></summary>
        public static TView Background<TView>(this TView view, Windows.UI.Color value) where TView : ScrollPresenter { view.UI.Background = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.Background"/></summary>
        public static TView Background<TView>(this TView view, string color) where TView : ScrollPresenter { view.UI.Background = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.ContentOrientation"/></summary>
        public static TView ContentOrientation<TView>(this TView view, Xaml.Controls.ScrollingContentOrientation value) where TView : ScrollPresenter { view.UI.ContentOrientation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.HorizontalAnchorRatio"/></summary>
        public static TView HorizontalAnchorRatio<TView>(this TView view, double value) where TView : ScrollPresenter { view.UI.HorizontalAnchorRatio = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.HorizontalScrollChainMode"/></summary>
        public static TView HorizontalScrollChainMode<TView>(this TView view, Xaml.Controls.ScrollingChainMode value) where TView : ScrollPresenter { view.UI.HorizontalScrollChainMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.HorizontalScrollController"/></summary>
        public static TView HorizontalScrollController<TView>(this TView view, Xaml.Controls.Primitives.IScrollController value) where TView : ScrollPresenter { view.UI.HorizontalScrollController = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.HorizontalScrollMode"/></summary>
        public static TView HorizontalScrollMode<TView>(this TView view, Xaml.Controls.ScrollingScrollMode value) where TView : ScrollPresenter { view.UI.HorizontalScrollMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.HorizontalScrollRailMode"/></summary>
        public static TView HorizontalScrollRailMode<TView>(this TView view, Xaml.Controls.ScrollingRailMode value) where TView : ScrollPresenter { view.UI.HorizontalScrollRailMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.IgnoredInputKinds"/></summary>
        public static TView IgnoredInputKinds<TView>(this TView view, Xaml.Controls.ScrollingInputKinds value) where TView : ScrollPresenter { view.UI.IgnoredInputKinds = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.MaxZoomFactor"/></summary>
        public static TView MaxZoomFactor<TView>(this TView view, double value) where TView : ScrollPresenter { view.UI.MaxZoomFactor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.MinZoomFactor"/></summary>
        public static TView MinZoomFactor<TView>(this TView view, double value) where TView : ScrollPresenter { view.UI.MinZoomFactor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.VerticalAnchorRatio"/></summary>
        public static TView VerticalAnchorRatio<TView>(this TView view, double value) where TView : ScrollPresenter { view.UI.VerticalAnchorRatio = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.VerticalScrollChainMode"/></summary>
        public static TView VerticalScrollChainMode<TView>(this TView view, Xaml.Controls.ScrollingChainMode value) where TView : ScrollPresenter { view.UI.VerticalScrollChainMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.VerticalScrollController"/></summary>
        public static TView VerticalScrollController<TView>(this TView view, Xaml.Controls.Primitives.IScrollController value) where TView : ScrollPresenter { view.UI.VerticalScrollController = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.VerticalScrollMode"/></summary>
        public static TView VerticalScrollMode<TView>(this TView view, Xaml.Controls.ScrollingScrollMode value) where TView : ScrollPresenter { view.UI.VerticalScrollMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.VerticalScrollRailMode"/></summary>
        public static TView VerticalScrollRailMode<TView>(this TView view, Xaml.Controls.ScrollingRailMode value) where TView : ScrollPresenter { view.UI.VerticalScrollRailMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.ZoomChainMode"/></summary>
        public static TView ZoomChainMode<TView>(this TView view, Xaml.Controls.ScrollingChainMode value) where TView : ScrollPresenter { view.UI.ZoomChainMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ScrollPresenter.ZoomMode"/></summary>
        public static TView ZoomMode<TView>(this TView view, Xaml.Controls.ScrollingZoomMode value) where TView : ScrollPresenter { view.UI.ZoomMode = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.Background"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Background<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.BackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.ComputedHorizontalScrollMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode> ComputedHorizontalScrollMode<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.ComputedHorizontalScrollModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.ComputedVerticalScrollMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode> ComputedVerticalScrollMode<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.ComputedVerticalScrollModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.ContentOrientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingContentOrientation> ContentOrientation<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingContentOrientation>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.ContentOrientationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.Content"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Content<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.ContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.HorizontalAnchorRatio"/></summary>
        public static DependencyProperty<TTarget, double> HorizontalAnchorRatio<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.HorizontalAnchorRatioProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.HorizontalScrollChainMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode> HorizontalScrollChainMode<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.HorizontalScrollChainModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.HorizontalScrollMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode> HorizontalScrollMode<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.HorizontalScrollModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.HorizontalScrollRailMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingRailMode> HorizontalScrollRailMode<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingRailMode>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.HorizontalScrollRailModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.IgnoredInputKinds"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> IgnoredInputKinds<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.IgnoredInputKindsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.MaxZoomFactor"/></summary>
        public static DependencyProperty<TTarget, double> MaxZoomFactor<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.MaxZoomFactorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.MinZoomFactor"/></summary>
        public static DependencyProperty<TTarget, double> MinZoomFactor<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.MinZoomFactorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.VerticalAnchorRatio"/></summary>
        public static DependencyProperty<TTarget, double> VerticalAnchorRatio<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.VerticalAnchorRatioProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.VerticalScrollChainMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode> VerticalScrollChainMode<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.VerticalScrollChainModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.VerticalScrollMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode> VerticalScrollMode<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.VerticalScrollModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.VerticalScrollRailMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingRailMode> VerticalScrollRailMode<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingRailMode>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.VerticalScrollRailModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.ZoomChainMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode> ZoomChainMode<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.ZoomChainModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ScrollPresenter.ZoomMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingZoomMode> ZoomMode<TTarget>(this TTarget target) where TTarget : ScrollPresenter
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingZoomMode>.Get(target, Xaml.Controls.Primitives.ScrollPresenter.ZoomModeProperty);
    }
}

namespace CSharpMarkup.WinUI // Selector
{
    public partial class Selector : ItemsControl, IUI<Xaml.Controls.Primitives.Selector>
    {
        Xaml.Controls.Primitives.Selector ui;

        public new Xaml.Controls.Primitives.Selector UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Selector Invoke(Action<Xaml.Controls.Primitives.Selector> action) { action?.Invoke(UI); return this; }

        protected Selector() { }
    }

    public static partial class SelectorExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.Selector.IsSynchronizedWithCurrentItem"/></summary>
        public static TView IsSynchronizedWithCurrentItem<TView>(this TView view, bool? value) where TView : Selector { view.UI.IsSynchronizedWithCurrentItem = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.Selector.SelectedIndex"/></summary>
        public static TView SelectedIndex<TView>(this TView view, int value) where TView : Selector { view.UI.SelectedIndex = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.Selector.SelectedItem"/></summary>
        public static TView SelectedItem<TView>(this TView view, object value) where TView : Selector { view.UI.SelectedItem = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.Selector.SelectedValue"/></summary>
        public static TView SelectedValue<TView>(this TView view, object value) where TView : Selector { view.UI.SelectedValue = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.Selector.SelectedValuePath"/></summary>
        public static TView SelectedValuePath<TView>(this TView view, string value) where TView : Selector { view.UI.SelectedValuePath = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Selector.IsSynchronizedWithCurrentItem"/></summary>
        public static DependencyProperty<TTarget, bool?> IsSynchronizedWithCurrentItem<TTarget>(this TTarget target) where TTarget : Selector
        => DependencyProperty<TTarget, bool?>.Get(target, Xaml.Controls.Primitives.Selector.IsSynchronizedWithCurrentItemProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Selector.SelectedIndex"/></summary>
        public static DependencyProperty<TTarget, int> SelectedIndex<TTarget>(this TTarget target) where TTarget : Selector
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.Primitives.Selector.SelectedIndexProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Selector.SelectedItem"/></summary>
        public static DependencyProperty<TTarget, object> SelectedItem<TTarget>(this TTarget target) where TTarget : Selector
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.Primitives.Selector.SelectedItemProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Selector.SelectedValuePath"/></summary>
        public static DependencyProperty<TTarget, string> SelectedValuePath<TTarget>(this TTarget target) where TTarget : Selector
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.Primitives.Selector.SelectedValuePathProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Selector.SelectedValue"/></summary>
        public static DependencyProperty<TTarget, object> SelectedValue<TTarget>(this TTarget target) where TTarget : Selector
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.Primitives.Selector.SelectedValueProperty);
    }
}

namespace CSharpMarkup.WinUI // SelectorItem
{
    public partial class SelectorItem : ContentControl, IUI<Xaml.Controls.Primitives.SelectorItem>, IDefaultBindProperty
    {
        Xaml.Controls.Primitives.SelectorItem ui;

        public new Xaml.Controls.Primitives.SelectorItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.Primitives.SelectorItem.IsSelectedProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.Primitives.SelectorItem.IsSelectedProperty;

        public SelectorItem Invoke(Action<Xaml.Controls.Primitives.SelectorItem> action) { action?.Invoke(UI); return this; }

        protected SelectorItem() { }
    }

    public static partial class SelectorItemExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.SelectorItem.IsSelected"/></summary>
        public static TView IsSelected<TView>(this TView view, bool value) where TView : SelectorItem { view.UI.IsSelected = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.SelectorItem.IsSelected"/></summary>
        public static DependencyProperty<TTarget, bool> IsSelected<TTarget>(this TTarget target) where TTarget : SelectorItem
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.SelectorItem.IsSelectedProperty);
    }
}

namespace CSharpMarkup.WinUI // SplitViewTemplateSettings
{
    public partial class SplitViewTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.SplitViewTemplateSettings>
    {
        Xaml.Controls.Primitives.SplitViewTemplateSettings ui;

        public new Xaml.Controls.Primitives.SplitViewTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public SplitViewTemplateSettings Invoke(Action<Xaml.Controls.Primitives.SplitViewTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected SplitViewTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // TabViewListView
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.TabViewListView"/></summary>
        public static TabViewListView TabViewListView(params UIObject[] Items)
        {
            var ui = new Xaml.Controls.Primitives.TabViewListView();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<UIObject>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j].UI);
                else
                    ui.Items.Add(child.UI);
            }
            return CSharpMarkup.WinUI.TabViewListView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.TabViewListView"/></summary>
        public static TabViewListView TabViewListView()
        {
            var ui = new Xaml.Controls.Primitives.TabViewListView();
            return CSharpMarkup.WinUI.TabViewListView.StartChain(ui);
        }
    }

    public partial class TabViewListView : ListView, IUI<Xaml.Controls.Primitives.TabViewListView>
    {
        static TabViewListView instance;

        internal static TabViewListView StartChain(Xaml.Controls.Primitives.TabViewListView ui)
        {
            if (instance == null) instance = new TabViewListView();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.TabViewListView ui;

        public new Xaml.Controls.Primitives.TabViewListView UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(TabViewListView view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.TabViewListView(TabViewListView view) => view?.UI;

        public static implicit operator TabViewListView(Xaml.Controls.Primitives.TabViewListView ui) => TabViewListView.StartChain(ui);

        public TabViewListView Invoke(Action<Xaml.Controls.Primitives.TabViewListView> action) { action?.Invoke(UI); return this; }

        protected TabViewListView() { }
    }
}

namespace CSharpMarkup.WinUI // Thumb
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.Thumb"/></summary>
        public static Thumb Thumb()
        {
            var ui = new Xaml.Controls.Primitives.Thumb();
            return CSharpMarkup.WinUI.Thumb.StartChain(ui);
        }
    }

    public partial class Thumb : Control, IUI<Xaml.Controls.Primitives.Thumb>
    {
        static Thumb instance;

        internal static Thumb StartChain(Xaml.Controls.Primitives.Thumb ui)
        {
            if (instance == null) instance = new Thumb();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.Thumb ui;

        public new Xaml.Controls.Primitives.Thumb UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Thumb view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.Thumb(Thumb view) => view?.UI;

        public static implicit operator Thumb(Xaml.Controls.Primitives.Thumb ui) => Thumb.StartChain(ui);

        public Thumb Invoke(Action<Xaml.Controls.Primitives.Thumb> action) { action?.Invoke(UI); return this; }

        protected Thumb() { }
    }

    public static partial class ThumbExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.Thumb.IsDragging"/></summary>
        public static DependencyProperty<TTarget, bool> IsDragging<TTarget>(this TTarget target) where TTarget : Thumb
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.Thumb.IsDraggingProperty);
    }
}

namespace CSharpMarkup.WinUI // TickBar
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.TickBar"/></summary>
        public static TickBar TickBar(Xaml.Media.Brush Fill = default)
        {
            var ui = new Xaml.Controls.Primitives.TickBar();
            if (Fill is not null) ui.Fill = Fill;
            return CSharpMarkup.WinUI.TickBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.TickBar"/></summary>
        public static TickBar TickBar()
        {
            var ui = new Xaml.Controls.Primitives.TickBar();
            return CSharpMarkup.WinUI.TickBar.StartChain(ui);
        }
    }

    public partial class TickBar : FrameworkElement, IUI<Xaml.Controls.Primitives.TickBar>
    {
        static TickBar instance;

        internal static TickBar StartChain(Xaml.Controls.Primitives.TickBar ui)
        {
            if (instance == null) instance = new TickBar();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.TickBar ui;

        public new Xaml.Controls.Primitives.TickBar UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(TickBar view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.TickBar(TickBar view) => view?.UI;

        public static implicit operator TickBar(Xaml.Controls.Primitives.TickBar ui) => TickBar.StartChain(ui);

        public TickBar Invoke(Action<Xaml.Controls.Primitives.TickBar> action) { action?.Invoke(UI); return this; }

        protected TickBar() { }
    }

    public static partial class TickBarExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.TickBar.Fill"/></summary>
        public static TView Fill<TView>(this TView view, Xaml.Media.Brush value) where TView : TickBar { view.UI.Fill = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.TickBar.Fill"/></summary>
        public static TView Fill<TView>(this TView view, Windows.UI.Color value) where TView : TickBar { view.UI.Fill = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.TickBar.Fill"/></summary>
        public static TView Fill<TView>(this TView view, string color) where TView : TickBar { view.UI.Fill = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.TickBar.Fill"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Fill<TTarget>(this TTarget target) where TTarget : TickBar
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.Primitives.TickBar.FillProperty);
    }
}

namespace CSharpMarkup.WinUI // ToggleButton
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ToggleButton"/></summary>
        /// <remarks>Remark: ToggleButton().Bind() binds to <see cref="Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty"/></remarks>
        public static ToggleButton ToggleButton(UIObject Content)
        {
            var ui = new Xaml.Controls.Primitives.ToggleButton();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ToggleButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ToggleButton"/></summary>
        /// <remarks>Remark: ToggleButton().Bind() binds to <see cref="Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty"/></remarks>
        public static ToggleButton ToggleButton(bool? IsChecked = default, bool? IsThreeState = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.Primitives.ToggleButton();
            if (IsChecked is not null) ui.IsChecked = IsChecked.Value;
            if (IsThreeState is not null) ui.IsThreeState = IsThreeState.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ToggleButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Primitives.ToggleButton"/></summary>
        /// <remarks>Remark: ToggleButton().Bind() binds to <see cref="Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty"/></remarks>
        public static ToggleButton ToggleButton()
        {
            var ui = new Xaml.Controls.Primitives.ToggleButton();
            return CSharpMarkup.WinUI.ToggleButton.StartChain(ui);
        }
    }

    public partial class ToggleButton : ButtonBase, IUI<Xaml.Controls.Primitives.ToggleButton>, IDefaultBindProperty
    {
        static ToggleButton instance;

        internal static ToggleButton StartChain(Xaml.Controls.Primitives.ToggleButton ui)
        {
            if (instance == null) instance = new ToggleButton();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Primitives.ToggleButton ui;

        public new Xaml.Controls.Primitives.ToggleButton UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty;

        public static implicit operator Xaml.UIElement(ToggleButton view) => view?.UI;

        public static implicit operator Xaml.Controls.Primitives.ToggleButton(ToggleButton view) => view?.UI;

        public static implicit operator ToggleButton(Xaml.Controls.Primitives.ToggleButton ui) => ToggleButton.StartChain(ui);

        public ToggleButton Invoke(Action<Xaml.Controls.Primitives.ToggleButton> action) { action?.Invoke(UI); return this; }

        protected ToggleButton() { }
    }

    public static partial class ToggleButtonExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Primitives.ToggleButton.IsChecked"/></summary>
        public static TView IsChecked<TView>(this TView view, bool? value) where TView : ToggleButton { view.UI.IsChecked = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Primitives.ToggleButton.IsThreeState"/></summary>
        public static TView IsThreeState<TView>(this TView view, bool value) where TView : ToggleButton { view.UI.IsThreeState = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ToggleButton.IsChecked"/></summary>
        public static DependencyProperty<TTarget, bool?> IsChecked<TTarget>(this TTarget target) where TTarget : ToggleButton
        => DependencyProperty<TTarget, bool?>.Get(target, Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Primitives.ToggleButton.IsThreeState"/></summary>
        public static DependencyProperty<TTarget, bool> IsThreeState<TTarget>(this TTarget target) where TTarget : ToggleButton
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Primitives.ToggleButton.IsThreeStateProperty);
    }
}

namespace CSharpMarkup.WinUI // ToggleSwitchTemplateSettings
{
    public partial class ToggleSwitchTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.ToggleSwitchTemplateSettings>
    {
        Xaml.Controls.Primitives.ToggleSwitchTemplateSettings ui;

        public new Xaml.Controls.Primitives.ToggleSwitchTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ToggleSwitchTemplateSettings Invoke(Action<Xaml.Controls.Primitives.ToggleSwitchTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected ToggleSwitchTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // ToolTipTemplateSettings
{
    public partial class ToolTipTemplateSettings : DependencyObject, IUI<Xaml.Controls.Primitives.ToolTipTemplateSettings>
    {
        Xaml.Controls.Primitives.ToolTipTemplateSettings ui;

        public new Xaml.Controls.Primitives.ToolTipTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ToolTipTemplateSettings Invoke(Action<Xaml.Controls.Primitives.ToolTipTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected ToolTipTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // ProgressBar
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ProgressBar"/></summary>
        public static ProgressBar ProgressBar(bool? IsIndeterminate = default, bool? ShowError = default, bool? ShowPaused = default)
        {
            var ui = new Xaml.Controls.ProgressBar();
            if (IsIndeterminate is not null) ui.IsIndeterminate = IsIndeterminate.Value;
            if (ShowError is not null) ui.ShowError = ShowError.Value;
            if (ShowPaused is not null) ui.ShowPaused = ShowPaused.Value;
            return CSharpMarkup.WinUI.ProgressBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ProgressBar"/></summary>
        public static ProgressBar ProgressBar()
        {
            var ui = new Xaml.Controls.ProgressBar();
            return CSharpMarkup.WinUI.ProgressBar.StartChain(ui);
        }
    }

    public partial class ProgressBar : RangeBase, IUI<Xaml.Controls.ProgressBar>
    {
        static ProgressBar instance;

        internal static ProgressBar StartChain(Xaml.Controls.ProgressBar ui)
        {
            if (instance == null) instance = new ProgressBar();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ProgressBar ui;

        public new Xaml.Controls.ProgressBar UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ProgressBar view) => view?.UI;

        public static implicit operator Xaml.Controls.ProgressBar(ProgressBar view) => view?.UI;

        public static implicit operator ProgressBar(Xaml.Controls.ProgressBar ui) => ProgressBar.StartChain(ui);

        public ProgressBar Invoke(Action<Xaml.Controls.ProgressBar> action) { action?.Invoke(UI); return this; }

        protected ProgressBar() { }
    }

    public static partial class ProgressBarExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ProgressBar.IsIndeterminate"/></summary>
        public static TView IsIndeterminate<TView>(this TView view, bool value) where TView : ProgressBar { view.UI.IsIndeterminate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ProgressBar.ShowError"/></summary>
        public static TView ShowError<TView>(this TView view, bool value) where TView : ProgressBar { view.UI.ShowError = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ProgressBar.ShowPaused"/></summary>
        public static TView ShowPaused<TView>(this TView view, bool value) where TView : ProgressBar { view.UI.ShowPaused = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ProgressBar.IsIndeterminate"/></summary>
        public static DependencyProperty<TTarget, bool> IsIndeterminate<TTarget>(this TTarget target) where TTarget : ProgressBar
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ProgressBar.IsIndeterminateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ProgressBar.ShowError"/></summary>
        public static DependencyProperty<TTarget, bool> ShowError<TTarget>(this TTarget target) where TTarget : ProgressBar
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ProgressBar.ShowErrorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ProgressBar.ShowPaused"/></summary>
        public static DependencyProperty<TTarget, bool> ShowPaused<TTarget>(this TTarget target) where TTarget : ProgressBar
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ProgressBar.ShowPausedProperty);
    }
}

namespace CSharpMarkup.WinUI // ProgressBarTemplateSettings
{
    public partial class ProgressBarTemplateSettings : DependencyObject, IUI<Xaml.Controls.ProgressBarTemplateSettings>
    {
        Xaml.Controls.ProgressBarTemplateSettings ui;

        public new Xaml.Controls.ProgressBarTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ProgressBarTemplateSettings Invoke(Action<Xaml.Controls.ProgressBarTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected ProgressBarTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // ProgressRing
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ProgressRing"/></summary>
        /// <remarks>Remark: ProgressRing().Bind() binds to <see cref="Xaml.Controls.ProgressRing.IsActiveProperty"/></remarks>
        public static ProgressRing ProgressRing(bool? IsActive = default, bool? IsIndeterminate = default, double? Maximum = default, double? Minimum = default, double? Value = default)
        {
            var ui = new Xaml.Controls.ProgressRing();
            if (IsActive is not null) ui.IsActive = IsActive.Value;
            if (IsIndeterminate is not null) ui.IsIndeterminate = IsIndeterminate.Value;
            if (Maximum is not null) ui.Maximum = Maximum.Value;
            if (Minimum is not null) ui.Minimum = Minimum.Value;
            if (Value is not null) ui.Value = Value.Value;
            return CSharpMarkup.WinUI.ProgressRing.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ProgressRing"/></summary>
        /// <remarks>Remark: ProgressRing().Bind() binds to <see cref="Xaml.Controls.ProgressRing.IsActiveProperty"/></remarks>
        public static ProgressRing ProgressRing()
        {
            var ui = new Xaml.Controls.ProgressRing();
            return CSharpMarkup.WinUI.ProgressRing.StartChain(ui);
        }
    }

    public partial class ProgressRing : Control, IUI<Xaml.Controls.ProgressRing>, IDefaultBindProperty
    {
        static ProgressRing instance;

        internal static ProgressRing StartChain(Xaml.Controls.ProgressRing ui)
        {
            if (instance == null) instance = new ProgressRing();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ProgressRing ui;

        public new Xaml.Controls.ProgressRing UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.ProgressRing.IsActiveProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.ProgressRing.IsActiveProperty;

        public static implicit operator Xaml.UIElement(ProgressRing view) => view?.UI;

        public static implicit operator Xaml.Controls.ProgressRing(ProgressRing view) => view?.UI;

        public static implicit operator ProgressRing(Xaml.Controls.ProgressRing ui) => ProgressRing.StartChain(ui);

        public ProgressRing Invoke(Action<Xaml.Controls.ProgressRing> action) { action?.Invoke(UI); return this; }

        protected ProgressRing() { }
    }

    public static partial class ProgressRingExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ProgressRing.IsActive"/></summary>
        public static TView IsActive<TView>(this TView view, bool value) where TView : ProgressRing { view.UI.IsActive = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ProgressRing.IsIndeterminate"/></summary>
        public static TView IsIndeterminate<TView>(this TView view, bool value) where TView : ProgressRing { view.UI.IsIndeterminate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ProgressRing.Maximum"/></summary>
        public static TView Maximum<TView>(this TView view, double value) where TView : ProgressRing { view.UI.Maximum = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ProgressRing.Minimum"/></summary>
        public static TView Minimum<TView>(this TView view, double value) where TView : ProgressRing { view.UI.Minimum = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ProgressRing.Value"/></summary>
        public static TView Value<TView>(this TView view, double value) where TView : ProgressRing { view.UI.Value = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ProgressRing.IsActive"/></summary>
        public static DependencyProperty<TTarget, bool> IsActive<TTarget>(this TTarget target) where TTarget : ProgressRing
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ProgressRing.IsActiveProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ProgressRing.IsIndeterminate"/></summary>
        public static DependencyProperty<TTarget, bool> IsIndeterminate<TTarget>(this TTarget target) where TTarget : ProgressRing
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ProgressRing.IsIndeterminateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ProgressRing.Maximum"/></summary>
        public static DependencyProperty<TTarget, double> Maximum<TTarget>(this TTarget target) where TTarget : ProgressRing
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ProgressRing.MaximumProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ProgressRing.Minimum"/></summary>
        public static DependencyProperty<TTarget, double> Minimum<TTarget>(this TTarget target) where TTarget : ProgressRing
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ProgressRing.MinimumProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ProgressRing.Value"/></summary>
        public static DependencyProperty<TTarget, double> Value<TTarget>(this TTarget target) where TTarget : ProgressRing
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ProgressRing.ValueProperty);
    }
}

namespace CSharpMarkup.WinUI // ProgressRingTemplateSettings
{
    public partial class ProgressRingTemplateSettings : DependencyObject, IUI<Xaml.Controls.ProgressRingTemplateSettings>
    {
        Xaml.Controls.ProgressRingTemplateSettings ui;

        public new Xaml.Controls.ProgressRingTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ProgressRingTemplateSettings Invoke(Action<Xaml.Controls.ProgressRingTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected ProgressRingTemplateSettings() { }
    }
}

namespace CSharpMarkup.WinUI // RadioButton
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RadioButton"/></summary>
        public static RadioButton RadioButton(UIObject Content)
        {
            var ui = new Xaml.Controls.RadioButton();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.RadioButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RadioButton"/></summary>
        public static RadioButton RadioButton(string GroupName = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.RadioButton();
            if (GroupName is not null) ui.GroupName = GroupName;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.RadioButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RadioButton"/></summary>
        public static RadioButton RadioButton()
        {
            var ui = new Xaml.Controls.RadioButton();
            return CSharpMarkup.WinUI.RadioButton.StartChain(ui);
        }
    }

    public partial class RadioButton : ToggleButton, IUI<Xaml.Controls.RadioButton>
    {
        static RadioButton instance;

        internal static RadioButton StartChain(Xaml.Controls.RadioButton ui)
        {
            if (instance == null) instance = new RadioButton();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RadioButton ui;

        public new Xaml.Controls.RadioButton UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(RadioButton view) => view?.UI;

        public static implicit operator Xaml.Controls.RadioButton(RadioButton view) => view?.UI;

        public static implicit operator RadioButton(Xaml.Controls.RadioButton ui) => RadioButton.StartChain(ui);

        public RadioButton Invoke(Action<Xaml.Controls.RadioButton> action) { action?.Invoke(UI); return this; }

        protected RadioButton() { }
    }

    public static partial class RadioButtonExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.RadioButton.GroupName"/></summary>
        public static TView GroupName<TView>(this TView view, string value) where TView : RadioButton { view.UI.GroupName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RadioButton.GroupName"/></summary>
        public static DependencyProperty<TTarget, string> GroupName<TTarget>(this TTarget target) where TTarget : RadioButton
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.RadioButton.GroupNameProperty);
    }
}

namespace CSharpMarkup.WinUI // RadioButtons
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RadioButtons"/></summary>
        public static RadioButtons RadioButtons(params UIObject[] Items)
        {
            var ui = new Xaml.Controls.RadioButtons();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<UIObject>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j].UI);
                else
                    ui.Items.Add(child.UI);
            }
            return CSharpMarkup.WinUI.RadioButtons.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RadioButtons"/></summary>
        public static RadioButtons RadioButtons()
        {
            var ui = new Xaml.Controls.RadioButtons();
            return CSharpMarkup.WinUI.RadioButtons.StartChain(ui);
        }
    }

    public partial class RadioButtons : Control, IUI<Xaml.Controls.RadioButtons>
    {
        static RadioButtons instance;

        internal static RadioButtons StartChain(Xaml.Controls.RadioButtons ui)
        {
            if (instance == null) instance = new RadioButtons();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RadioButtons ui;

        public new Xaml.Controls.RadioButtons UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(RadioButtons view) => view?.UI;

        public static implicit operator Xaml.Controls.RadioButtons(RadioButtons view) => view?.UI;

        public static implicit operator RadioButtons(Xaml.Controls.RadioButtons ui) => RadioButtons.StartChain(ui);

        public RadioButtons Invoke(Action<Xaml.Controls.RadioButtons> action) { action?.Invoke(UI); return this; }

        protected RadioButtons() { }
    }

    public static partial class RadioButtonsExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.RadioButtons.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : RadioButtons { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RadioButtons.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : RadioButtons { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RadioButtons.ItemsSource"/></summary>
        public static TView ItemsSource<TView>(this TView view, object value) where TView : RadioButtons { view.UI.ItemsSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RadioButtons.ItemTemplate"/></summary>
        public static TView ItemTemplate<TView>(this TView view, object value) where TView : RadioButtons { view.UI.ItemTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RadioButtons.MaxColumns"/></summary>
        public static TView MaxColumns<TView>(this TView view, int value) where TView : RadioButtons { view.UI.MaxColumns = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RadioButtons.SelectedIndex"/></summary>
        public static TView SelectedIndex<TView>(this TView view, int value) where TView : RadioButtons { view.UI.SelectedIndex = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RadioButtons.SelectedItem"/></summary>
        public static TView SelectedItem<TView>(this TView view, object value) where TView : RadioButtons { view.UI.SelectedItem = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RadioButtons.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : RadioButtons
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RadioButtons.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RadioButtons.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : RadioButtons
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.RadioButtons.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RadioButtons.Items"/></summary>
        public static DependencyProperty<TTarget, IList<object>> Items<TTarget>(this TTarget target) where TTarget : RadioButtons
        => DependencyProperty<TTarget, IList<object>>.Get(target, Xaml.Controls.RadioButtons.ItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RadioButtons.ItemsSource"/></summary>
        public static DependencyProperty<TTarget, object> ItemsSource<TTarget>(this TTarget target) where TTarget : RadioButtons
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RadioButtons.ItemsSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RadioButtons.ItemTemplate"/></summary>
        public static DependencyProperty<TTarget, object> ItemTemplate<TTarget>(this TTarget target) where TTarget : RadioButtons
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RadioButtons.ItemTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RadioButtons.MaxColumns"/></summary>
        public static DependencyProperty<TTarget, int> MaxColumns<TTarget>(this TTarget target) where TTarget : RadioButtons
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.RadioButtons.MaxColumnsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RadioButtons.SelectedIndex"/></summary>
        public static DependencyProperty<TTarget, int> SelectedIndex<TTarget>(this TTarget target) where TTarget : RadioButtons
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.RadioButtons.SelectedIndexProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RadioButtons.SelectedItem"/></summary>
        public static DependencyProperty<TTarget, object> SelectedItem<TTarget>(this TTarget target) where TTarget : RadioButtons
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RadioButtons.SelectedItemProperty);
    }
}

namespace CSharpMarkup.WinUI // RadioMenuFlyoutItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RadioMenuFlyoutItem"/></summary>
        public static RadioMenuFlyoutItem RadioMenuFlyoutItem(string Text)
        {
            var ui = new Xaml.Controls.RadioMenuFlyoutItem();
            if (Text is not null) ui.Text = Text;
            return CSharpMarkup.WinUI.RadioMenuFlyoutItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RadioMenuFlyoutItem"/></summary>
        public static RadioMenuFlyoutItem RadioMenuFlyoutItem(string GroupName = default, bool? IsChecked = default, string Text = default)
        {
            var ui = new Xaml.Controls.RadioMenuFlyoutItem();
            if (GroupName is not null) ui.GroupName = GroupName;
            if (IsChecked is not null) ui.IsChecked = IsChecked.Value;
            if (Text is not null) ui.Text = Text;
            return CSharpMarkup.WinUI.RadioMenuFlyoutItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RadioMenuFlyoutItem"/></summary>
        public static RadioMenuFlyoutItem RadioMenuFlyoutItem()
        {
            var ui = new Xaml.Controls.RadioMenuFlyoutItem();
            return CSharpMarkup.WinUI.RadioMenuFlyoutItem.StartChain(ui);
        }
    }

    public partial class RadioMenuFlyoutItem : MenuFlyoutItem, IUI<Xaml.Controls.RadioMenuFlyoutItem>
    {
        static RadioMenuFlyoutItem instance;

        internal static RadioMenuFlyoutItem StartChain(Xaml.Controls.RadioMenuFlyoutItem ui)
        {
            if (instance == null) instance = new RadioMenuFlyoutItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RadioMenuFlyoutItem ui;

        public new Xaml.Controls.RadioMenuFlyoutItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(RadioMenuFlyoutItem view) => view?.UI;

        public static implicit operator Xaml.Controls.RadioMenuFlyoutItem(RadioMenuFlyoutItem view) => view?.UI;

        public static implicit operator RadioMenuFlyoutItem(Xaml.Controls.RadioMenuFlyoutItem ui) => RadioMenuFlyoutItem.StartChain(ui);

        public RadioMenuFlyoutItem Invoke(Action<Xaml.Controls.RadioMenuFlyoutItem> action) { action?.Invoke(UI); return this; }

        protected RadioMenuFlyoutItem() { }
    }

    public static partial class RadioMenuFlyoutItemExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.RadioMenuFlyoutItem.GroupName"/></summary>
        public static TView GroupName<TView>(this TView view, string value) where TView : RadioMenuFlyoutItem { view.UI.GroupName = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RadioMenuFlyoutItem.IsChecked"/></summary>
        public static TView IsChecked<TView>(this TView view, bool value) where TView : RadioMenuFlyoutItem { view.UI.IsChecked = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RadioMenuFlyoutItem.GroupName"/></summary>
        public static DependencyProperty<TTarget, string> GroupName<TTarget>(this TTarget target) where TTarget : RadioMenuFlyoutItem
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.RadioMenuFlyoutItem.GroupNameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RadioMenuFlyoutItem.IsChecked"/></summary>
        public static DependencyProperty<TTarget, bool> IsChecked<TTarget>(this TTarget target) where TTarget : RadioMenuFlyoutItem
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RadioMenuFlyoutItem.IsCheckedProperty);

        /// <summary>Set <see cref="Xaml.Controls.RadioMenuFlyoutItem.AreCheckStatesEnabled"/></summary>
        public static TTarget RadioMenuFlyoutItem_AreCheckStatesEnabled<TTarget>(this TTarget target, bool value) where TTarget : MenuFlyoutSubItem
        { Xaml.Controls.RadioMenuFlyoutItem.SetAreCheckStatesEnabled(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RadioMenuFlyoutItem.AreCheckStatesEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> RadioMenuFlyoutItem_AreCheckStatesEnabled<TTarget>(this TTarget target) where TTarget : MenuFlyoutSubItem
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RadioMenuFlyoutItem.AreCheckStatesEnabledProperty);
    }
}

namespace CSharpMarkup.WinUI // RatingControl
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RatingControl"/></summary>
        /// <remarks>Remark: RatingControl().Bind() binds to <see cref="Xaml.Controls.RatingControl.ValueProperty"/></remarks>
        public static RatingControl RatingControl(string Caption = default, int? InitialSetValue = default, bool? IsClearEnabled = default, bool? IsReadOnly = default, Xaml.Controls.RatingItemInfo ItemInfo = default, int? MaxRating = default, double? PlaceholderValue = default, double? Value = default)
        {
            var ui = new Xaml.Controls.RatingControl();
            if (Caption is not null) ui.Caption = Caption;
            if (InitialSetValue is not null) ui.InitialSetValue = InitialSetValue.Value;
            if (IsClearEnabled is not null) ui.IsClearEnabled = IsClearEnabled.Value;
            if (IsReadOnly is not null) ui.IsReadOnly = IsReadOnly.Value;
            if (ItemInfo is not null) ui.ItemInfo = ItemInfo;
            if (MaxRating is not null) ui.MaxRating = MaxRating.Value;
            if (PlaceholderValue is not null) ui.PlaceholderValue = PlaceholderValue.Value;
            if (Value is not null) ui.Value = Value.Value;
            return CSharpMarkup.WinUI.RatingControl.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RatingControl"/></summary>
        /// <remarks>Remark: RatingControl().Bind() binds to <see cref="Xaml.Controls.RatingControl.ValueProperty"/></remarks>
        public static RatingControl RatingControl()
        {
            var ui = new Xaml.Controls.RatingControl();
            return CSharpMarkup.WinUI.RatingControl.StartChain(ui);
        }
    }

    public partial class RatingControl : Control, IUI<Xaml.Controls.RatingControl>, IDefaultBindProperty
    {
        static RatingControl instance;

        internal static RatingControl StartChain(Xaml.Controls.RatingControl ui)
        {
            if (instance == null) instance = new RatingControl();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RatingControl ui;

        public new Xaml.Controls.RatingControl UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.RatingControl.ValueProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.RatingControl.ValueProperty;

        public static implicit operator Xaml.UIElement(RatingControl view) => view?.UI;

        public static implicit operator Xaml.Controls.RatingControl(RatingControl view) => view?.UI;

        public static implicit operator RatingControl(Xaml.Controls.RatingControl ui) => RatingControl.StartChain(ui);

        public RatingControl Invoke(Action<Xaml.Controls.RatingControl> action) { action?.Invoke(UI); return this; }

        protected RatingControl() { }
    }

    public static partial class RatingControlExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.RatingControl.Caption"/></summary>
        public static TView Caption<TView>(this TView view, string value) where TView : RatingControl { view.UI.Caption = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingControl.InitialSetValue"/></summary>
        public static TView InitialSetValue<TView>(this TView view, int value) where TView : RatingControl { view.UI.InitialSetValue = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingControl.IsClearEnabled"/></summary>
        public static TView IsClearEnabled<TView>(this TView view, bool value) where TView : RatingControl { view.UI.IsClearEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingControl.IsReadOnly"/></summary>
        public static TView IsReadOnly<TView>(this TView view, bool value) where TView : RatingControl { view.UI.IsReadOnly = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingControl.ItemInfo"/></summary>
        public static TView ItemInfo<TView>(this TView view, Xaml.Controls.RatingItemInfo value) where TView : RatingControl { view.UI.ItemInfo = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingControl.MaxRating"/></summary>
        public static TView MaxRating<TView>(this TView view, int value) where TView : RatingControl { view.UI.MaxRating = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingControl.PlaceholderValue"/></summary>
        public static TView PlaceholderValue<TView>(this TView view, double value) where TView : RatingControl { view.UI.PlaceholderValue = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingControl.Value"/></summary>
        public static TView Value<TView>(this TView view, double value) where TView : RatingControl { view.UI.Value = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingControl.Caption"/></summary>
        public static DependencyProperty<TTarget, string> Caption<TTarget>(this TTarget target) where TTarget : RatingControl
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.RatingControl.CaptionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingControl.InitialSetValue"/></summary>
        public static DependencyProperty<TTarget, int> InitialSetValue<TTarget>(this TTarget target) where TTarget : RatingControl
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.RatingControl.InitialSetValueProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingControl.IsClearEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsClearEnabled<TTarget>(this TTarget target) where TTarget : RatingControl
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RatingControl.IsClearEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingControl.IsReadOnly"/></summary>
        public static DependencyProperty<TTarget, bool> IsReadOnly<TTarget>(this TTarget target) where TTarget : RatingControl
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RatingControl.IsReadOnlyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingControl.ItemInfo"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.RatingItemInfo> ItemInfo<TTarget>(this TTarget target) where TTarget : RatingControl
        => DependencyProperty<TTarget, Xaml.Controls.RatingItemInfo>.Get(target, Xaml.Controls.RatingControl.ItemInfoProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingControl.MaxRating"/></summary>
        public static DependencyProperty<TTarget, int> MaxRating<TTarget>(this TTarget target) where TTarget : RatingControl
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.RatingControl.MaxRatingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingControl.PlaceholderValue"/></summary>
        public static DependencyProperty<TTarget, double> PlaceholderValue<TTarget>(this TTarget target) where TTarget : RatingControl
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.RatingControl.PlaceholderValueProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingControl.Value"/></summary>
        public static DependencyProperty<TTarget, double> Value<TTarget>(this TTarget target) where TTarget : RatingControl
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.RatingControl.ValueProperty);
    }
}

namespace CSharpMarkup.WinUI // RatingItemFontInfo
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RatingItemFontInfo"/></summary>
        public static RatingItemFontInfo RatingItemFontInfo(string DisabledGlyph = default, string Glyph = default, string PlaceholderGlyph = default, string PointerOverGlyph = default, string PointerOverPlaceholderGlyph = default, string UnsetGlyph = default)
        {
            var ui = new Xaml.Controls.RatingItemFontInfo();
            if (DisabledGlyph is not null) ui.DisabledGlyph = DisabledGlyph;
            if (Glyph is not null) ui.Glyph = Glyph;
            if (PlaceholderGlyph is not null) ui.PlaceholderGlyph = PlaceholderGlyph;
            if (PointerOverGlyph is not null) ui.PointerOverGlyph = PointerOverGlyph;
            if (PointerOverPlaceholderGlyph is not null) ui.PointerOverPlaceholderGlyph = PointerOverPlaceholderGlyph;
            if (UnsetGlyph is not null) ui.UnsetGlyph = UnsetGlyph;
            return CSharpMarkup.WinUI.RatingItemFontInfo.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RatingItemFontInfo"/></summary>
        public static RatingItemFontInfo RatingItemFontInfo()
        {
            var ui = new Xaml.Controls.RatingItemFontInfo();
            return CSharpMarkup.WinUI.RatingItemFontInfo.StartChain(ui);
        }
    }

    public partial class RatingItemFontInfo : RatingItemInfo, IUI<Xaml.Controls.RatingItemFontInfo>
    {
        static RatingItemFontInfo instance;

        internal static RatingItemFontInfo StartChain(Xaml.Controls.RatingItemFontInfo ui)
        {
            if (instance == null) instance = new RatingItemFontInfo();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RatingItemFontInfo ui;

        public new Xaml.Controls.RatingItemFontInfo UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.RatingItemFontInfo(RatingItemFontInfo view) => view?.UI;

        public static implicit operator RatingItemFontInfo(Xaml.Controls.RatingItemFontInfo ui) => RatingItemFontInfo.StartChain(ui);

        public RatingItemFontInfo Invoke(Action<Xaml.Controls.RatingItemFontInfo> action) { action?.Invoke(UI); return this; }

        protected RatingItemFontInfo() { }
    }

    public static partial class RatingItemFontInfoExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.RatingItemFontInfo.DisabledGlyph"/></summary>
        public static TView DisabledGlyph<TView>(this TView view, string value) where TView : RatingItemFontInfo { view.UI.DisabledGlyph = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingItemFontInfo.Glyph"/></summary>
        public static TView Glyph<TView>(this TView view, string value) where TView : RatingItemFontInfo { view.UI.Glyph = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingItemFontInfo.PlaceholderGlyph"/></summary>
        public static TView PlaceholderGlyph<TView>(this TView view, string value) where TView : RatingItemFontInfo { view.UI.PlaceholderGlyph = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingItemFontInfo.PointerOverGlyph"/></summary>
        public static TView PointerOverGlyph<TView>(this TView view, string value) where TView : RatingItemFontInfo { view.UI.PointerOverGlyph = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingItemFontInfo.PointerOverPlaceholderGlyph"/></summary>
        public static TView PointerOverPlaceholderGlyph<TView>(this TView view, string value) where TView : RatingItemFontInfo { view.UI.PointerOverPlaceholderGlyph = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingItemFontInfo.UnsetGlyph"/></summary>
        public static TView UnsetGlyph<TView>(this TView view, string value) where TView : RatingItemFontInfo { view.UI.UnsetGlyph = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingItemFontInfo.DisabledGlyph"/></summary>
        public static DependencyProperty<TTarget, string> DisabledGlyph<TTarget>(this TTarget target) where TTarget : RatingItemFontInfo
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.RatingItemFontInfo.DisabledGlyphProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingItemFontInfo.Glyph"/></summary>
        public static DependencyProperty<TTarget, string> Glyph<TTarget>(this TTarget target) where TTarget : RatingItemFontInfo
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.RatingItemFontInfo.GlyphProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingItemFontInfo.PlaceholderGlyph"/></summary>
        public static DependencyProperty<TTarget, string> PlaceholderGlyph<TTarget>(this TTarget target) where TTarget : RatingItemFontInfo
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.RatingItemFontInfo.PlaceholderGlyphProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingItemFontInfo.PointerOverGlyph"/></summary>
        public static DependencyProperty<TTarget, string> PointerOverGlyph<TTarget>(this TTarget target) where TTarget : RatingItemFontInfo
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.RatingItemFontInfo.PointerOverGlyphProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingItemFontInfo.PointerOverPlaceholderGlyph"/></summary>
        public static DependencyProperty<TTarget, string> PointerOverPlaceholderGlyph<TTarget>(this TTarget target) where TTarget : RatingItemFontInfo
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.RatingItemFontInfo.PointerOverPlaceholderGlyphProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingItemFontInfo.UnsetGlyph"/></summary>
        public static DependencyProperty<TTarget, string> UnsetGlyph<TTarget>(this TTarget target) where TTarget : RatingItemFontInfo
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.RatingItemFontInfo.UnsetGlyphProperty);
    }
}

namespace CSharpMarkup.WinUI // RatingItemImageInfo
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RatingItemImageInfo"/></summary>
        public static RatingItemImageInfo RatingItemImageInfo(Xaml.Media.ImageSource DisabledImage = default, Xaml.Media.ImageSource Image = default, Xaml.Media.ImageSource PlaceholderImage = default, Xaml.Media.ImageSource PointerOverImage = default, Xaml.Media.ImageSource PointerOverPlaceholderImage = default, Xaml.Media.ImageSource UnsetImage = default)
        {
            var ui = new Xaml.Controls.RatingItemImageInfo();
            if (DisabledImage is not null) ui.DisabledImage = DisabledImage;
            if (Image is not null) ui.Image = Image;
            if (PlaceholderImage is not null) ui.PlaceholderImage = PlaceholderImage;
            if (PointerOverImage is not null) ui.PointerOverImage = PointerOverImage;
            if (PointerOverPlaceholderImage is not null) ui.PointerOverPlaceholderImage = PointerOverPlaceholderImage;
            if (UnsetImage is not null) ui.UnsetImage = UnsetImage;
            return CSharpMarkup.WinUI.RatingItemImageInfo.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RatingItemImageInfo"/></summary>
        public static RatingItemImageInfo RatingItemImageInfo()
        {
            var ui = new Xaml.Controls.RatingItemImageInfo();
            return CSharpMarkup.WinUI.RatingItemImageInfo.StartChain(ui);
        }
    }

    public partial class RatingItemImageInfo : RatingItemInfo, IUI<Xaml.Controls.RatingItemImageInfo>
    {
        static RatingItemImageInfo instance;

        internal static RatingItemImageInfo StartChain(Xaml.Controls.RatingItemImageInfo ui)
        {
            if (instance == null) instance = new RatingItemImageInfo();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RatingItemImageInfo ui;

        public new Xaml.Controls.RatingItemImageInfo UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.RatingItemImageInfo(RatingItemImageInfo view) => view?.UI;

        public static implicit operator RatingItemImageInfo(Xaml.Controls.RatingItemImageInfo ui) => RatingItemImageInfo.StartChain(ui);

        public RatingItemImageInfo Invoke(Action<Xaml.Controls.RatingItemImageInfo> action) { action?.Invoke(UI); return this; }

        protected RatingItemImageInfo() { }
    }

    public static partial class RatingItemImageInfoExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.RatingItemImageInfo.DisabledImage"/></summary>
        public static TView DisabledImage<TView>(this TView view, Xaml.Media.ImageSource value) where TView : RatingItemImageInfo { view.UI.DisabledImage = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingItemImageInfo.Image"/></summary>
        public static TView Image<TView>(this TView view, Xaml.Media.ImageSource value) where TView : RatingItemImageInfo { view.UI.Image = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingItemImageInfo.PlaceholderImage"/></summary>
        public static TView PlaceholderImage<TView>(this TView view, Xaml.Media.ImageSource value) where TView : RatingItemImageInfo { view.UI.PlaceholderImage = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingItemImageInfo.PointerOverImage"/></summary>
        public static TView PointerOverImage<TView>(this TView view, Xaml.Media.ImageSource value) where TView : RatingItemImageInfo { view.UI.PointerOverImage = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingItemImageInfo.PointerOverPlaceholderImage"/></summary>
        public static TView PointerOverPlaceholderImage<TView>(this TView view, Xaml.Media.ImageSource value) where TView : RatingItemImageInfo { view.UI.PointerOverPlaceholderImage = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RatingItemImageInfo.UnsetImage"/></summary>
        public static TView UnsetImage<TView>(this TView view, Xaml.Media.ImageSource value) where TView : RatingItemImageInfo { view.UI.UnsetImage = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingItemImageInfo.DisabledImage"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ImageSource> DisabledImage<TTarget>(this TTarget target) where TTarget : RatingItemImageInfo
        => DependencyProperty<TTarget, Xaml.Media.ImageSource>.Get(target, Xaml.Controls.RatingItemImageInfo.DisabledImageProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingItemImageInfo.Image"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ImageSource> Image<TTarget>(this TTarget target) where TTarget : RatingItemImageInfo
        => DependencyProperty<TTarget, Xaml.Media.ImageSource>.Get(target, Xaml.Controls.RatingItemImageInfo.ImageProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingItemImageInfo.PlaceholderImage"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ImageSource> PlaceholderImage<TTarget>(this TTarget target) where TTarget : RatingItemImageInfo
        => DependencyProperty<TTarget, Xaml.Media.ImageSource>.Get(target, Xaml.Controls.RatingItemImageInfo.PlaceholderImageProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingItemImageInfo.PointerOverImage"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ImageSource> PointerOverImage<TTarget>(this TTarget target) where TTarget : RatingItemImageInfo
        => DependencyProperty<TTarget, Xaml.Media.ImageSource>.Get(target, Xaml.Controls.RatingItemImageInfo.PointerOverImageProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingItemImageInfo.PointerOverPlaceholderImage"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ImageSource> PointerOverPlaceholderImage<TTarget>(this TTarget target) where TTarget : RatingItemImageInfo
        => DependencyProperty<TTarget, Xaml.Media.ImageSource>.Get(target, Xaml.Controls.RatingItemImageInfo.PointerOverPlaceholderImageProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RatingItemImageInfo.UnsetImage"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ImageSource> UnsetImage<TTarget>(this TTarget target) where TTarget : RatingItemImageInfo
        => DependencyProperty<TTarget, Xaml.Media.ImageSource>.Get(target, Xaml.Controls.RatingItemImageInfo.UnsetImageProperty);
    }
}

namespace CSharpMarkup.WinUI // RatingItemInfo
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RatingItemInfo"/></summary>
        public static RatingItemInfo RatingItemInfo()
        {
            var ui = new Xaml.Controls.RatingItemInfo();
            return CSharpMarkup.WinUI.RatingItemInfo.StartChain(ui);
        }
    }

    public partial class RatingItemInfo : DependencyObject, IUI<Xaml.Controls.RatingItemInfo>
    {
        static RatingItemInfo instance;

        internal static RatingItemInfo StartChain(Xaml.Controls.RatingItemInfo ui)
        {
            if (instance == null) instance = new RatingItemInfo();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RatingItemInfo ui;

        public new Xaml.Controls.RatingItemInfo UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.RatingItemInfo(RatingItemInfo view) => view?.UI;

        public static implicit operator RatingItemInfo(Xaml.Controls.RatingItemInfo ui) => RatingItemInfo.StartChain(ui);

        public RatingItemInfo Invoke(Action<Xaml.Controls.RatingItemInfo> action) { action?.Invoke(UI); return this; }

        protected RatingItemInfo() { }
    }
}

namespace CSharpMarkup.WinUI // RefreshContainer
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RefreshContainer"/></summary>
        public static RefreshContainer RefreshContainer(UIObject Content)
        {
            var ui = new Xaml.Controls.RefreshContainer();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.RefreshContainer.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RefreshContainer"/></summary>
        public static RefreshContainer RefreshContainer(Xaml.Controls.RefreshPullDirection? PullDirection = default, Xaml.Controls.RefreshVisualizer Visualizer = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.RefreshContainer();
            if (PullDirection is not null) ui.PullDirection = PullDirection.Value;
            if (Visualizer is not null) ui.Visualizer = Visualizer;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.RefreshContainer.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RefreshContainer"/></summary>
        public static RefreshContainer RefreshContainer()
        {
            var ui = new Xaml.Controls.RefreshContainer();
            return CSharpMarkup.WinUI.RefreshContainer.StartChain(ui);
        }
    }

    public partial class RefreshContainer : ContentControl, IUI<Xaml.Controls.RefreshContainer>
    {
        static RefreshContainer instance;

        internal static RefreshContainer StartChain(Xaml.Controls.RefreshContainer ui)
        {
            if (instance == null) instance = new RefreshContainer();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RefreshContainer ui;

        public new Xaml.Controls.RefreshContainer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(RefreshContainer view) => view?.UI;

        public static implicit operator Xaml.Controls.RefreshContainer(RefreshContainer view) => view?.UI;

        public static implicit operator RefreshContainer(Xaml.Controls.RefreshContainer ui) => RefreshContainer.StartChain(ui);

        public RefreshContainer Invoke(Action<Xaml.Controls.RefreshContainer> action) { action?.Invoke(UI); return this; }

        protected RefreshContainer() { }
    }

    public static partial class RefreshContainerExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.RefreshContainer.PullDirection"/></summary>
        public static TView PullDirection<TView>(this TView view, Xaml.Controls.RefreshPullDirection value) where TView : RefreshContainer { view.UI.PullDirection = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RefreshContainer.Visualizer"/></summary>
        public static TView Visualizer<TView>(this TView view, Xaml.Controls.RefreshVisualizer value) where TView : RefreshContainer { view.UI.Visualizer = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RefreshContainer.PullDirection"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.RefreshPullDirection> PullDirection<TTarget>(this TTarget target) where TTarget : RefreshContainer
        => DependencyProperty<TTarget, Xaml.Controls.RefreshPullDirection>.Get(target, Xaml.Controls.RefreshContainer.PullDirectionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RefreshContainer.Visualizer"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizer> Visualizer<TTarget>(this TTarget target) where TTarget : RefreshContainer
        => DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizer>.Get(target, Xaml.Controls.RefreshContainer.VisualizerProperty);
    }
}

namespace CSharpMarkup.WinUI // RefreshVisualizer
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RefreshVisualizer"/></summary>
        public static RefreshVisualizer RefreshVisualizer(Xaml.UIElement Content = default, Xaml.Controls.RefreshVisualizerOrientation? Orientation = default)
        {
            var ui = new Xaml.Controls.RefreshVisualizer();
            if (Content is not null) ui.Content = Content;
            if (Orientation is not null) ui.Orientation = Orientation.Value;
            return CSharpMarkup.WinUI.RefreshVisualizer.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RefreshVisualizer"/></summary>
        public static RefreshVisualizer RefreshVisualizer()
        {
            var ui = new Xaml.Controls.RefreshVisualizer();
            return CSharpMarkup.WinUI.RefreshVisualizer.StartChain(ui);
        }
    }

    public partial class RefreshVisualizer : Control, IUI<Xaml.Controls.RefreshVisualizer>
    {
        static RefreshVisualizer instance;

        internal static RefreshVisualizer StartChain(Xaml.Controls.RefreshVisualizer ui)
        {
            if (instance == null) instance = new RefreshVisualizer();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RefreshVisualizer ui;

        public new Xaml.Controls.RefreshVisualizer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(RefreshVisualizer view) => view?.UI;

        public static implicit operator Xaml.Controls.RefreshVisualizer(RefreshVisualizer view) => view?.UI;

        public static implicit operator RefreshVisualizer(Xaml.Controls.RefreshVisualizer ui) => RefreshVisualizer.StartChain(ui);

        public RefreshVisualizer Invoke(Action<Xaml.Controls.RefreshVisualizer> action) { action?.Invoke(UI); return this; }

        protected RefreshVisualizer() { }
    }

    public static partial class RefreshVisualizerExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.RefreshVisualizer.Content"/></summary>
        public static TView Content<TView>(this TView view, Xaml.UIElement value) where TView : RefreshVisualizer { view.UI.Content = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RefreshVisualizer.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.RefreshVisualizerOrientation value) where TView : RefreshVisualizer { view.UI.Orientation = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RefreshVisualizer.Content"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Content<TTarget>(this TTarget target) where TTarget : RefreshVisualizer
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.RefreshVisualizer.ContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RefreshVisualizer.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizerOrientation> Orientation<TTarget>(this TTarget target) where TTarget : RefreshVisualizer
        => DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizerOrientation>.Get(target, Xaml.Controls.RefreshVisualizer.OrientationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RefreshVisualizer.State"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizerState> State<TTarget>(this TTarget target) where TTarget : RefreshVisualizer
        => DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizerState>.Get(target, Xaml.Controls.RefreshVisualizer.StateProperty);
    }
}

namespace CSharpMarkup.WinUI // RelativePanel
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RelativePanel"/></summary>
        public static RelativePanel RelativePanel(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.RelativePanel();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.RelativePanel.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RelativePanel"/></summary>
        public static RelativePanel RelativePanel()
        {
            var ui = new Xaml.Controls.RelativePanel();
            return CSharpMarkup.WinUI.RelativePanel.StartChain(ui);
        }
    }

    public partial class RelativePanel : Panel, IUI<Xaml.Controls.RelativePanel>
    {
        static RelativePanel instance;

        internal static RelativePanel StartChain(Xaml.Controls.RelativePanel ui)
        {
            if (instance == null) instance = new RelativePanel();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RelativePanel ui;

        public new Xaml.Controls.RelativePanel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(RelativePanel view) => view?.UI;

        public static implicit operator Xaml.Controls.RelativePanel(RelativePanel view) => view?.UI;

        public static implicit operator RelativePanel(Xaml.Controls.RelativePanel ui) => RelativePanel.StartChain(ui);

        public RelativePanel Invoke(Action<Xaml.Controls.RelativePanel> action) { action?.Invoke(UI); return this; }

        protected RelativePanel() { }
    }

    public static partial class RelativePanelExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.BackgroundSizing"/></summary>
        public static TView BackgroundSizing<TView>(this TView view, Xaml.Controls.BackgroundSizing value) where TView : RelativePanel { view.UI.BackgroundSizing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : RelativePanel { view.UI.BorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : RelativePanel { view.UI.BorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, string color) where TView : RelativePanel { view.UI.BorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, Xaml.Thickness value) where TView : RelativePanel { view.UI.BorderThickness = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double uniform) where TView : RelativePanel { view.UI.BorderThickness = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double horizontal, double vertical) where TView : RelativePanel { view.UI.BorderThickness = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double left, double top, double right, double bottom) where TView : RelativePanel { view.UI.BorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.BorderThickness"/></summary>
        public static TView BorderThicknesses<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : RelativePanel { view.UI.BorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.CornerRadius"/></summary>
        public static TView CornerRadius<TView>(this TView view, CSharpMarkup.WinUI.to.CornerRadius value) where TView : RelativePanel { view.UI.CornerRadius = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.Padding"/></summary>
        public static TView Padding<TView>(this TView view, Xaml.Thickness value) where TView : RelativePanel { view.UI.Padding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double uniform) where TView : RelativePanel { view.UI.Padding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double horizontal, double vertical) where TView : RelativePanel { view.UI.Padding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double left, double top, double right, double bottom) where TView : RelativePanel { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.Padding"/></summary>
        public static TView Paddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : RelativePanel { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.BackgroundSizing"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> BackgroundSizing<TTarget>(this TTarget target) where TTarget : RelativePanel
        => DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing>.Get(target, Xaml.Controls.RelativePanel.BackgroundSizingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.BorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> BorderBrush<TTarget>(this TTarget target) where TTarget : RelativePanel
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.RelativePanel.BorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.BorderThickness"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> BorderThickness<TTarget>(this TTarget target) where TTarget : RelativePanel
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.RelativePanel.BorderThicknessProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.CornerRadius"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius> CornerRadius<TTarget>(this TTarget target) where TTarget : RelativePanel
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius>.Get(target, Xaml.Controls.RelativePanel.CornerRadiusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.Padding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> Padding<TTarget>(this TTarget target) where TTarget : RelativePanel
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.RelativePanel.PaddingProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.Above"/></summary>
        public static TTarget RelativePanel_Above<TTarget>(this TTarget target, object value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetAbove(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.Above"/></summary>
        public static DependencyProperty<TTarget, object> RelativePanel_Above<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RelativePanel.AboveProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.AlignBottomWithPanel"/></summary>
        public static TTarget RelativePanel_AlignBottomWithPanel<TTarget>(this TTarget target, bool value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetAlignBottomWithPanel(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.AlignBottomWithPanel"/></summary>
        public static DependencyProperty<TTarget, bool> RelativePanel_AlignBottomWithPanel<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RelativePanel.AlignBottomWithPanelProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.AlignBottomWith"/></summary>
        public static TTarget RelativePanel_AlignBottomWith<TTarget>(this TTarget target, object value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetAlignBottomWith(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.AlignBottomWith"/></summary>
        public static DependencyProperty<TTarget, object> RelativePanel_AlignBottomWith<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RelativePanel.AlignBottomWithProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.AlignHorizontalCenterWithPanel"/></summary>
        public static TTarget RelativePanel_AlignHorizontalCenterWithPanel<TTarget>(this TTarget target, bool value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetAlignHorizontalCenterWithPanel(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.AlignHorizontalCenterWithPanel"/></summary>
        public static DependencyProperty<TTarget, bool> RelativePanel_AlignHorizontalCenterWithPanel<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.AlignHorizontalCenterWith"/></summary>
        public static TTarget RelativePanel_AlignHorizontalCenterWith<TTarget>(this TTarget target, object value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetAlignHorizontalCenterWith(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.AlignHorizontalCenterWith"/></summary>
        public static DependencyProperty<TTarget, object> RelativePanel_AlignHorizontalCenterWith<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RelativePanel.AlignHorizontalCenterWithProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.AlignLeftWithPanel"/></summary>
        public static TTarget RelativePanel_AlignLeftWithPanel<TTarget>(this TTarget target, bool value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetAlignLeftWithPanel(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.AlignLeftWithPanel"/></summary>
        public static DependencyProperty<TTarget, bool> RelativePanel_AlignLeftWithPanel<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RelativePanel.AlignLeftWithPanelProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.AlignLeftWith"/></summary>
        public static TTarget RelativePanel_AlignLeftWith<TTarget>(this TTarget target, object value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetAlignLeftWith(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.AlignLeftWith"/></summary>
        public static DependencyProperty<TTarget, object> RelativePanel_AlignLeftWith<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RelativePanel.AlignLeftWithProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.AlignRightWithPanel"/></summary>
        public static TTarget RelativePanel_AlignRightWithPanel<TTarget>(this TTarget target, bool value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetAlignRightWithPanel(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.AlignRightWithPanel"/></summary>
        public static DependencyProperty<TTarget, bool> RelativePanel_AlignRightWithPanel<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RelativePanel.AlignRightWithPanelProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.AlignRightWith"/></summary>
        public static TTarget RelativePanel_AlignRightWith<TTarget>(this TTarget target, object value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetAlignRightWith(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.AlignRightWith"/></summary>
        public static DependencyProperty<TTarget, object> RelativePanel_AlignRightWith<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RelativePanel.AlignRightWithProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.AlignTopWithPanel"/></summary>
        public static TTarget RelativePanel_AlignTopWithPanel<TTarget>(this TTarget target, bool value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetAlignTopWithPanel(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.AlignTopWithPanel"/></summary>
        public static DependencyProperty<TTarget, bool> RelativePanel_AlignTopWithPanel<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RelativePanel.AlignTopWithPanelProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.AlignTopWith"/></summary>
        public static TTarget RelativePanel_AlignTopWith<TTarget>(this TTarget target, object value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetAlignTopWith(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.AlignTopWith"/></summary>
        public static DependencyProperty<TTarget, object> RelativePanel_AlignTopWith<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RelativePanel.AlignTopWithProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.AlignVerticalCenterWithPanel"/></summary>
        public static TTarget RelativePanel_AlignVerticalCenterWithPanel<TTarget>(this TTarget target, bool value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetAlignVerticalCenterWithPanel(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.AlignVerticalCenterWithPanel"/></summary>
        public static DependencyProperty<TTarget, bool> RelativePanel_AlignVerticalCenterWithPanel<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.AlignVerticalCenterWith"/></summary>
        public static TTarget RelativePanel_AlignVerticalCenterWith<TTarget>(this TTarget target, object value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetAlignVerticalCenterWith(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.AlignVerticalCenterWith"/></summary>
        public static DependencyProperty<TTarget, object> RelativePanel_AlignVerticalCenterWith<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RelativePanel.AlignVerticalCenterWithProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.Below"/></summary>
        public static TTarget RelativePanel_Below<TTarget>(this TTarget target, object value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetBelow(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.Below"/></summary>
        public static DependencyProperty<TTarget, object> RelativePanel_Below<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RelativePanel.BelowProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.LeftOf"/></summary>
        public static TTarget RelativePanel_LeftOf<TTarget>(this TTarget target, object value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetLeftOf(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.LeftOf"/></summary>
        public static DependencyProperty<TTarget, object> RelativePanel_LeftOf<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RelativePanel.LeftOfProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel.RightOf"/></summary>
        public static TTarget RelativePanel_RightOf<TTarget>(this TTarget target, object value) where TTarget : UIElement
        { Xaml.Controls.RelativePanel.SetRightOf(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RelativePanel.RightOf"/></summary>
        public static DependencyProperty<TTarget, object> RelativePanel_RightOf<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RelativePanel.RightOfProperty);

        /// <summary>Set <see cref="Xaml.Controls.RelativePanel"/> attached properties</summary>
        public static TTarget RelativePanel<TTarget>(this TTarget target

            , object Above = default

            , bool? AlignBottomWithPanel = default

            , object AlignBottomWith = default

            , bool? AlignHorizontalCenterWithPanel = default

            , object AlignHorizontalCenterWith = default

            , bool? AlignLeftWithPanel = default

            , object AlignLeftWith = default

            , bool? AlignRightWithPanel = default

            , object AlignRightWith = default

            , bool? AlignTopWithPanel = default

            , object AlignTopWith = default

            , bool? AlignVerticalCenterWithPanel = default

            , object AlignVerticalCenterWith = default

            , object Below = default

            , object LeftOf = default

            , object RightOf = default

        ) where TTarget : UIElement
        {
            if (Above is not null) Xaml.Controls.RelativePanel.SetAbove(target.UI, Above);

            if (AlignBottomWithPanel is not null) Xaml.Controls.RelativePanel.SetAlignBottomWithPanel(target.UI, AlignBottomWithPanel.Value);

            if (AlignBottomWith is not null) Xaml.Controls.RelativePanel.SetAlignBottomWith(target.UI, AlignBottomWith);

            if (AlignHorizontalCenterWithPanel is not null) Xaml.Controls.RelativePanel.SetAlignHorizontalCenterWithPanel(target.UI, AlignHorizontalCenterWithPanel.Value);

            if (AlignHorizontalCenterWith is not null) Xaml.Controls.RelativePanel.SetAlignHorizontalCenterWith(target.UI, AlignHorizontalCenterWith);

            if (AlignLeftWithPanel is not null) Xaml.Controls.RelativePanel.SetAlignLeftWithPanel(target.UI, AlignLeftWithPanel.Value);

            if (AlignLeftWith is not null) Xaml.Controls.RelativePanel.SetAlignLeftWith(target.UI, AlignLeftWith);

            if (AlignRightWithPanel is not null) Xaml.Controls.RelativePanel.SetAlignRightWithPanel(target.UI, AlignRightWithPanel.Value);

            if (AlignRightWith is not null) Xaml.Controls.RelativePanel.SetAlignRightWith(target.UI, AlignRightWith);

            if (AlignTopWithPanel is not null) Xaml.Controls.RelativePanel.SetAlignTopWithPanel(target.UI, AlignTopWithPanel.Value);

            if (AlignTopWith is not null) Xaml.Controls.RelativePanel.SetAlignTopWith(target.UI, AlignTopWith);

            if (AlignVerticalCenterWithPanel is not null) Xaml.Controls.RelativePanel.SetAlignVerticalCenterWithPanel(target.UI, AlignVerticalCenterWithPanel.Value);

            if (AlignVerticalCenterWith is not null) Xaml.Controls.RelativePanel.SetAlignVerticalCenterWith(target.UI, AlignVerticalCenterWith);

            if (Below is not null) Xaml.Controls.RelativePanel.SetBelow(target.UI, Below);

            if (LeftOf is not null) Xaml.Controls.RelativePanel.SetLeftOf(target.UI, LeftOf);

            if (RightOf is not null) Xaml.Controls.RelativePanel.SetRightOf(target.UI, RightOf);

            return target;
        }
    }
}

namespace CSharpMarkup.WinUI // RevealListViewItemPresenter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RevealListViewItemPresenter"/></summary>
        public static RevealListViewItemPresenter RevealListViewItemPresenter(UIObject Content)
        {
            var ui = new Xaml.Controls.RevealListViewItemPresenter();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.RevealListViewItemPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RevealListViewItemPresenter"/></summary>
        public static RevealListViewItemPresenter RevealListViewItemPresenter()
        {
            var ui = new Xaml.Controls.RevealListViewItemPresenter();
            return CSharpMarkup.WinUI.RevealListViewItemPresenter.StartChain(ui);
        }
    }

    public partial class RevealListViewItemPresenter : ListViewItemPresenter, IUI<Xaml.Controls.RevealListViewItemPresenter>
    {
        static RevealListViewItemPresenter instance;

        internal static RevealListViewItemPresenter StartChain(Xaml.Controls.RevealListViewItemPresenter ui)
        {
            if (instance == null) instance = new RevealListViewItemPresenter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RevealListViewItemPresenter ui;

        public new Xaml.Controls.RevealListViewItemPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(RevealListViewItemPresenter view) => view?.UI;

        public static implicit operator Xaml.Controls.RevealListViewItemPresenter(RevealListViewItemPresenter view) => view?.UI;

        public static implicit operator RevealListViewItemPresenter(Xaml.Controls.RevealListViewItemPresenter ui) => RevealListViewItemPresenter.StartChain(ui);

        public RevealListViewItemPresenter Invoke(Action<Xaml.Controls.RevealListViewItemPresenter> action) { action?.Invoke(UI); return this; }

        protected RevealListViewItemPresenter() { }
    }
}

namespace CSharpMarkup.WinUI // RichEditBox
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RichEditBox"/></summary>
        public static RichEditBox RichEditBox(bool? AcceptsReturn = default, Xaml.Controls.CharacterCasing? CharacterCasing = default, Xaml.Controls.RichEditClipboardFormat? ClipboardCopyFormat = default, object Description = default, Xaml.Controls.CandidateWindowAlignment? DesiredCandidateWindowAlignment = default, Xaml.Controls.DisabledFormattingAccelerators? DisabledFormattingAccelerators = default, object Header = default, Xaml.DataTemplate HeaderTemplate = default, Xaml.TextAlignment? HorizontalTextAlignment = default, Xaml.Input.InputScope InputScope = default, bool? IsColorFontEnabled = default, bool? IsReadOnly = default, bool? IsSpellCheckEnabled = default, bool? IsTextPredictionEnabled = default, int? MaxLength = default, string PlaceholderText = default, bool? PreventKeyboardDisplayOnProgrammaticFocus = default, Xaml.Controls.Primitives.FlyoutBase SelectionFlyout = default, Xaml.Media.SolidColorBrush SelectionHighlightColor = default, Xaml.Media.SolidColorBrush SelectionHighlightColorWhenNotFocused = default, Xaml.TextAlignment? TextAlignment = default, Xaml.TextReadingOrder? TextReadingOrder = default, Xaml.TextWrapping? TextWrapping = default)
        {
            var ui = new Xaml.Controls.RichEditBox();
            if (AcceptsReturn is not null) ui.AcceptsReturn = AcceptsReturn.Value;
            if (CharacterCasing is not null) ui.CharacterCasing = CharacterCasing.Value;
            if (ClipboardCopyFormat is not null) ui.ClipboardCopyFormat = ClipboardCopyFormat.Value;
            if (Description is not null) ui.Description = Description;
            if (DesiredCandidateWindowAlignment is not null) ui.DesiredCandidateWindowAlignment = DesiredCandidateWindowAlignment.Value;
            if (DisabledFormattingAccelerators is not null) ui.DisabledFormattingAccelerators = DisabledFormattingAccelerators.Value;
            if (Header is not null) ui.Header = Header;
            if (HeaderTemplate is not null) ui.HeaderTemplate = HeaderTemplate;
            if (HorizontalTextAlignment is not null) ui.HorizontalTextAlignment = HorizontalTextAlignment.Value;
            if (InputScope is not null) ui.InputScope = InputScope;
            if (IsColorFontEnabled is not null) ui.IsColorFontEnabled = IsColorFontEnabled.Value;
            if (IsReadOnly is not null) ui.IsReadOnly = IsReadOnly.Value;
            if (IsSpellCheckEnabled is not null) ui.IsSpellCheckEnabled = IsSpellCheckEnabled.Value;
            if (IsTextPredictionEnabled is not null) ui.IsTextPredictionEnabled = IsTextPredictionEnabled.Value;
            if (MaxLength is not null) ui.MaxLength = MaxLength.Value;
            if (PlaceholderText is not null) ui.PlaceholderText = PlaceholderText;
            if (PreventKeyboardDisplayOnProgrammaticFocus is not null) ui.PreventKeyboardDisplayOnProgrammaticFocus = PreventKeyboardDisplayOnProgrammaticFocus.Value;
            if (SelectionFlyout is not null) ui.SelectionFlyout = SelectionFlyout;
            if (SelectionHighlightColor is not null) ui.SelectionHighlightColor = SelectionHighlightColor;
            if (SelectionHighlightColorWhenNotFocused is not null) ui.SelectionHighlightColorWhenNotFocused = SelectionHighlightColorWhenNotFocused;
            if (TextAlignment is not null) ui.TextAlignment = TextAlignment.Value;
            if (TextReadingOrder is not null) ui.TextReadingOrder = TextReadingOrder.Value;
            if (TextWrapping is not null) ui.TextWrapping = TextWrapping.Value;
            return CSharpMarkup.WinUI.RichEditBox.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RichEditBox"/></summary>
        public static RichEditBox RichEditBox()
        {
            var ui = new Xaml.Controls.RichEditBox();
            return CSharpMarkup.WinUI.RichEditBox.StartChain(ui);
        }
    }

    public partial class RichEditBox : Control, IUI<Xaml.Controls.RichEditBox>
    {
        static RichEditBox instance;

        internal static RichEditBox StartChain(Xaml.Controls.RichEditBox ui)
        {
            if (instance == null) instance = new RichEditBox();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RichEditBox ui;

        public new Xaml.Controls.RichEditBox UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(RichEditBox view) => view?.UI;

        public static implicit operator Xaml.Controls.RichEditBox(RichEditBox view) => view?.UI;

        public static implicit operator RichEditBox(Xaml.Controls.RichEditBox ui) => RichEditBox.StartChain(ui);

        public RichEditBox Invoke(Action<Xaml.Controls.RichEditBox> action) { action?.Invoke(UI); return this; }

        protected RichEditBox() { }
    }

    public static partial class RichEditBoxExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.AcceptsReturn"/></summary>
        public static TView AcceptsReturn<TView>(this TView view, bool value) where TView : RichEditBox { view.UI.AcceptsReturn = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.CharacterCasing"/></summary>
        public static TView CharacterCasing<TView>(this TView view, Xaml.Controls.CharacterCasing value) where TView : RichEditBox { view.UI.CharacterCasing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.ClipboardCopyFormat"/></summary>
        public static TView ClipboardCopyFormat<TView>(this TView view, Xaml.Controls.RichEditClipboardFormat value) where TView : RichEditBox { view.UI.ClipboardCopyFormat = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.Description"/></summary>
        public static TView Description<TView>(this TView view, object value) where TView : RichEditBox { view.UI.Description = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.DesiredCandidateWindowAlignment"/></summary>
        public static TView DesiredCandidateWindowAlignment<TView>(this TView view, Xaml.Controls.CandidateWindowAlignment value) where TView : RichEditBox { view.UI.DesiredCandidateWindowAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.DisabledFormattingAccelerators"/></summary>
        public static TView DisabledFormattingAccelerators<TView>(this TView view, Xaml.Controls.DisabledFormattingAccelerators value) where TView : RichEditBox { view.UI.DisabledFormattingAccelerators = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : RichEditBox { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : RichEditBox { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.HorizontalTextAlignment"/></summary>
        public static TView HorizontalTextAlignment<TView>(this TView view, Xaml.TextAlignment value) where TView : RichEditBox { view.UI.HorizontalTextAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.InputScope"/></summary>
        public static TView InputScope<TView>(this TView view, Xaml.Input.InputScope value) where TView : RichEditBox { view.UI.InputScope = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.IsColorFontEnabled"/></summary>
        public static TView IsColorFontEnabled<TView>(this TView view, bool value) where TView : RichEditBox { view.UI.IsColorFontEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.IsReadOnly"/></summary>
        public static TView IsReadOnly<TView>(this TView view, bool value) where TView : RichEditBox { view.UI.IsReadOnly = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.IsSpellCheckEnabled"/></summary>
        public static TView IsSpellCheckEnabled<TView>(this TView view, bool value) where TView : RichEditBox { view.UI.IsSpellCheckEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.IsTextPredictionEnabled"/></summary>
        public static TView IsTextPredictionEnabled<TView>(this TView view, bool value) where TView : RichEditBox { view.UI.IsTextPredictionEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.MaxLength"/></summary>
        public static TView MaxLength<TView>(this TView view, int value) where TView : RichEditBox { view.UI.MaxLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.PlaceholderText"/></summary>
        public static TView PlaceholderText<TView>(this TView view, string value) where TView : RichEditBox { view.UI.PlaceholderText = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.PreventKeyboardDisplayOnProgrammaticFocus"/></summary>
        public static TView PreventKeyboardDisplayOnProgrammaticFocus<TView>(this TView view, bool value) where TView : RichEditBox { view.UI.PreventKeyboardDisplayOnProgrammaticFocus = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.SelectionFlyout"/></summary>
        public static TView SelectionFlyout<TView>(this TView view, Xaml.Controls.Primitives.FlyoutBase value) where TView : RichEditBox { view.UI.SelectionFlyout = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.SelectionHighlightColor"/></summary>
        public static TView SelectionHighlightColor<TView>(this TView view, Xaml.Media.SolidColorBrush value) where TView : RichEditBox { view.UI.SelectionHighlightColor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.SelectionHighlightColorWhenNotFocused"/></summary>
        public static TView SelectionHighlightColorWhenNotFocused<TView>(this TView view, Xaml.Media.SolidColorBrush value) where TView : RichEditBox { view.UI.SelectionHighlightColorWhenNotFocused = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.TextAlignment"/></summary>
        public static TView TextAlignment<TView>(this TView view, Xaml.TextAlignment value) where TView : RichEditBox { view.UI.TextAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.TextReadingOrder"/></summary>
        public static TView TextReadingOrder<TView>(this TView view, Xaml.TextReadingOrder value) where TView : RichEditBox { view.UI.TextReadingOrder = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichEditBox.TextWrapping"/></summary>
        public static TView TextWrapping<TView>(this TView view, Xaml.TextWrapping value) where TView : RichEditBox { view.UI.TextWrapping = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.AcceptsReturn"/></summary>
        public static DependencyProperty<TTarget, bool> AcceptsReturn<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RichEditBox.AcceptsReturnProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.CharacterCasing"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.CharacterCasing> CharacterCasing<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, Xaml.Controls.CharacterCasing>.Get(target, Xaml.Controls.RichEditBox.CharacterCasingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.ClipboardCopyFormat"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.RichEditClipboardFormat> ClipboardCopyFormat<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, Xaml.Controls.RichEditClipboardFormat>.Get(target, Xaml.Controls.RichEditBox.ClipboardCopyFormatProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.Description"/></summary>
        public static DependencyProperty<TTarget, object> Description<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RichEditBox.DescriptionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.DesiredCandidateWindowAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.CandidateWindowAlignment> DesiredCandidateWindowAlignment<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, Xaml.Controls.CandidateWindowAlignment>.Get(target, Xaml.Controls.RichEditBox.DesiredCandidateWindowAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.DisabledFormattingAccelerators"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.DisabledFormattingAccelerators> DisabledFormattingAccelerators<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, Xaml.Controls.DisabledFormattingAccelerators>.Get(target, Xaml.Controls.RichEditBox.DisabledFormattingAcceleratorsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.RichEditBox.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.RichEditBox.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.HorizontalTextAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextAlignment> HorizontalTextAlignment<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, Xaml.TextAlignment>.Get(target, Xaml.Controls.RichEditBox.HorizontalTextAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.InputScope"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.InputScope> InputScope<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, Xaml.Input.InputScope>.Get(target, Xaml.Controls.RichEditBox.InputScopeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.IsColorFontEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsColorFontEnabled<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RichEditBox.IsColorFontEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.IsReadOnly"/></summary>
        public static DependencyProperty<TTarget, bool> IsReadOnly<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RichEditBox.IsReadOnlyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.IsSpellCheckEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsSpellCheckEnabled<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RichEditBox.IsSpellCheckEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.IsTextPredictionEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextPredictionEnabled<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RichEditBox.IsTextPredictionEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.MaxLength"/></summary>
        public static DependencyProperty<TTarget, int> MaxLength<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.RichEditBox.MaxLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.PlaceholderText"/></summary>
        public static DependencyProperty<TTarget, string> PlaceholderText<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.RichEditBox.PlaceholderTextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.PreventKeyboardDisplayOnProgrammaticFocus"/></summary>
        public static DependencyProperty<TTarget, bool> PreventKeyboardDisplayOnProgrammaticFocus<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RichEditBox.PreventKeyboardDisplayOnProgrammaticFocusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.ProofingMenuFlyout"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase> ProofingMenuFlyout<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase>.Get(target, Xaml.Controls.RichEditBox.ProofingMenuFlyoutProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.SelectionFlyout"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase> SelectionFlyout<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase>.Get(target, Xaml.Controls.RichEditBox.SelectionFlyoutProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.SelectionHighlightColor"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.SolidColorBrush> SelectionHighlightColor<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, Xaml.Media.SolidColorBrush>.Get(target, Xaml.Controls.RichEditBox.SelectionHighlightColorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.SelectionHighlightColorWhenNotFocused"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.SolidColorBrush> SelectionHighlightColorWhenNotFocused<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, Xaml.Media.SolidColorBrush>.Get(target, Xaml.Controls.RichEditBox.SelectionHighlightColorWhenNotFocusedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.TextAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextAlignment> TextAlignment<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, Xaml.TextAlignment>.Get(target, Xaml.Controls.RichEditBox.TextAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.TextReadingOrder"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextReadingOrder> TextReadingOrder<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, Xaml.TextReadingOrder>.Get(target, Xaml.Controls.RichEditBox.TextReadingOrderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichEditBox.TextWrapping"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextWrapping> TextWrapping<TTarget>(this TTarget target) where TTarget : RichEditBox
        => DependencyProperty<TTarget, Xaml.TextWrapping>.Get(target, Xaml.Controls.RichEditBox.TextWrappingProperty);
    }
}

namespace CSharpMarkup.WinUI // RichTextBlock
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RichTextBlock"/></summary>
        public static RichTextBlock RichTextBlock(params Xaml.Documents.Block[] Blocks)
        {
            var ui = new Xaml.Controls.RichTextBlock();
            for (int i = 0; i < Blocks.Length; i++)
            {
                var child = Blocks[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Documents.Block>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Blocks.Add(subChildren[j]);
                else
                    ui.Blocks.Add(child);
            }
            return CSharpMarkup.WinUI.RichTextBlock.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RichTextBlock"/></summary>
        public static RichTextBlock RichTextBlock()
        {
            var ui = new Xaml.Controls.RichTextBlock();
            return CSharpMarkup.WinUI.RichTextBlock.StartChain(ui);
        }
    }

    public partial class RichTextBlock : FrameworkElement, IUI<Xaml.Controls.RichTextBlock>
    {
        static RichTextBlock instance;

        internal static RichTextBlock StartChain(Xaml.Controls.RichTextBlock ui)
        {
            if (instance == null) instance = new RichTextBlock();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RichTextBlock ui;

        public new Xaml.Controls.RichTextBlock UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(RichTextBlock view) => view?.UI;

        public static implicit operator Xaml.Controls.RichTextBlock(RichTextBlock view) => view?.UI;

        public static implicit operator RichTextBlock(Xaml.Controls.RichTextBlock ui) => RichTextBlock.StartChain(ui);

        public RichTextBlock Invoke(Action<Xaml.Controls.RichTextBlock> action) { action?.Invoke(UI); return this; }

        protected RichTextBlock() { }
    }

    public static partial class RichTextBlockExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.CharacterSpacing"/></summary>
        public static TView CharacterSpacing<TView>(this TView view, int value) where TView : RichTextBlock { view.UI.CharacterSpacing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.FontFamily"/></summary>
        public static TView FontFamily<TView>(this TView view, Xaml.Media.FontFamily value) where TView : RichTextBlock { view.UI.FontFamily = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.FontSize"/></summary>
        public static TView FontSize<TView>(this TView view, double value) where TView : RichTextBlock { view.UI.FontSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.FontStretch"/></summary>
        public static TView FontStretch<TView>(this TView view, Windows.UI.Text.FontStretch value) where TView : RichTextBlock { view.UI.FontStretch = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.FontStyle"/></summary>
        public static TView FontStyle<TView>(this TView view, Windows.UI.Text.FontStyle value) where TView : RichTextBlock { view.UI.FontStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.FontWeight"/></summary>
        public static TView FontWeight<TView>(this TView view, Windows.UI.Text.FontWeight value) where TView : RichTextBlock { view.UI.FontWeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Xaml.Media.Brush value) where TView : RichTextBlock { view.UI.Foreground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Windows.UI.Color value) where TView : RichTextBlock { view.UI.Foreground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, string color) where TView : RichTextBlock { view.UI.Foreground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.HorizontalTextAlignment"/></summary>
        public static TView HorizontalTextAlignment<TView>(this TView view, Xaml.TextAlignment value) where TView : RichTextBlock { view.UI.HorizontalTextAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.IsColorFontEnabled"/></summary>
        public static TView IsColorFontEnabled<TView>(this TView view, bool value) where TView : RichTextBlock { view.UI.IsColorFontEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.IsTextScaleFactorEnabled"/></summary>
        public static TView IsTextScaleFactorEnabled<TView>(this TView view, bool value) where TView : RichTextBlock { view.UI.IsTextScaleFactorEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.IsTextSelectionEnabled"/></summary>
        public static TView IsTextSelectionEnabled<TView>(this TView view, bool value) where TView : RichTextBlock { view.UI.IsTextSelectionEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.LineHeight"/></summary>
        public static TView LineHeight<TView>(this TView view, double value) where TView : RichTextBlock { view.UI.LineHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.LineStackingStrategy"/></summary>
        public static TView LineStackingStrategy<TView>(this TView view, Xaml.LineStackingStrategy value) where TView : RichTextBlock { view.UI.LineStackingStrategy = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.MaxLines"/></summary>
        public static TView MaxLines<TView>(this TView view, int value) where TView : RichTextBlock { view.UI.MaxLines = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.OpticalMarginAlignment"/></summary>
        public static TView OpticalMarginAlignment<TView>(this TView view, Xaml.OpticalMarginAlignment value) where TView : RichTextBlock { view.UI.OpticalMarginAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.OverflowContentTarget"/></summary>
        public static TView OverflowContentTarget<TView>(this TView view, Xaml.Controls.RichTextBlockOverflow value) where TView : RichTextBlock { view.UI.OverflowContentTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.Padding"/></summary>
        public static TView Padding<TView>(this TView view, Xaml.Thickness value) where TView : RichTextBlock { view.UI.Padding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double uniform) where TView : RichTextBlock { view.UI.Padding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double horizontal, double vertical) where TView : RichTextBlock { view.UI.Padding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double left, double top, double right, double bottom) where TView : RichTextBlock { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.Padding"/></summary>
        public static TView Paddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : RichTextBlock { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.SelectionFlyout"/></summary>
        public static TView SelectionFlyout<TView>(this TView view, Xaml.Controls.Primitives.FlyoutBase value) where TView : RichTextBlock { view.UI.SelectionFlyout = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.SelectionHighlightColor"/></summary>
        public static TView SelectionHighlightColor<TView>(this TView view, Xaml.Media.SolidColorBrush value) where TView : RichTextBlock { view.UI.SelectionHighlightColor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.TextAlignment"/></summary>
        public static TView TextAlignment<TView>(this TView view, Xaml.TextAlignment value) where TView : RichTextBlock { view.UI.TextAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.TextDecorations"/></summary>
        public static TView TextDecorations<TView>(this TView view, Windows.UI.Text.TextDecorations value) where TView : RichTextBlock { view.UI.TextDecorations = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.TextIndent"/></summary>
        public static TView TextIndent<TView>(this TView view, double value) where TView : RichTextBlock { view.UI.TextIndent = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.TextLineBounds"/></summary>
        public static TView TextLineBounds<TView>(this TView view, Xaml.TextLineBounds value) where TView : RichTextBlock { view.UI.TextLineBounds = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.TextReadingOrder"/></summary>
        public static TView TextReadingOrder<TView>(this TView view, Xaml.TextReadingOrder value) where TView : RichTextBlock { view.UI.TextReadingOrder = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.TextTrimming"/></summary>
        public static TView TextTrimming<TView>(this TView view, Xaml.TextTrimming value) where TView : RichTextBlock { view.UI.TextTrimming = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlock.TextWrapping"/></summary>
        public static TView TextWrapping<TView>(this TView view, Xaml.TextWrapping value) where TView : RichTextBlock { view.UI.TextWrapping = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.CharacterSpacing"/></summary>
        public static DependencyProperty<TTarget, int> CharacterSpacing<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.RichTextBlock.CharacterSpacingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.FontFamily"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FontFamily> FontFamily<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Xaml.Media.FontFamily>.Get(target, Xaml.Controls.RichTextBlock.FontFamilyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.FontSize"/></summary>
        public static DependencyProperty<TTarget, double> FontSize<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.RichTextBlock.FontSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.FontStretch"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStretch> FontStretch<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Windows.UI.Text.FontStretch>.Get(target, Xaml.Controls.RichTextBlock.FontStretchProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.FontStyle"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStyle> FontStyle<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Windows.UI.Text.FontStyle>.Get(target, Xaml.Controls.RichTextBlock.FontStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.FontWeight"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontWeight> FontWeight<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Windows.UI.Text.FontWeight>.Get(target, Xaml.Controls.RichTextBlock.FontWeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.Foreground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Foreground<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.RichTextBlock.ForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.HasOverflowContent"/></summary>
        public static DependencyProperty<TTarget, bool> HasOverflowContent<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RichTextBlock.HasOverflowContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.HorizontalTextAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextAlignment> HorizontalTextAlignment<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Xaml.TextAlignment>.Get(target, Xaml.Controls.RichTextBlock.HorizontalTextAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.IsColorFontEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsColorFontEnabled<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RichTextBlock.IsColorFontEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.IsTextScaleFactorEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextScaleFactorEnabled<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RichTextBlock.IsTextScaleFactorEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.IsTextSelectionEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextSelectionEnabled<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RichTextBlock.IsTextSelectionEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.IsTextTrimmed"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextTrimmed<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RichTextBlock.IsTextTrimmedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.LineHeight"/></summary>
        public static DependencyProperty<TTarget, double> LineHeight<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.RichTextBlock.LineHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.LineStackingStrategy"/></summary>
        public static DependencyProperty<TTarget, Xaml.LineStackingStrategy> LineStackingStrategy<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Xaml.LineStackingStrategy>.Get(target, Xaml.Controls.RichTextBlock.LineStackingStrategyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.MaxLines"/></summary>
        public static DependencyProperty<TTarget, int> MaxLines<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.RichTextBlock.MaxLinesProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.OpticalMarginAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.OpticalMarginAlignment> OpticalMarginAlignment<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Xaml.OpticalMarginAlignment>.Get(target, Xaml.Controls.RichTextBlock.OpticalMarginAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.OverflowContentTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.RichTextBlockOverflow> OverflowContentTarget<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Xaml.Controls.RichTextBlockOverflow>.Get(target, Xaml.Controls.RichTextBlock.OverflowContentTargetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.Padding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> Padding<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.RichTextBlock.PaddingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.SelectedText"/></summary>
        public static DependencyProperty<TTarget, string> SelectedText<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.RichTextBlock.SelectedTextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.SelectionFlyout"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase> SelectionFlyout<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase>.Get(target, Xaml.Controls.RichTextBlock.SelectionFlyoutProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.SelectionHighlightColor"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.SolidColorBrush> SelectionHighlightColor<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Xaml.Media.SolidColorBrush>.Get(target, Xaml.Controls.RichTextBlock.SelectionHighlightColorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.TextAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextAlignment> TextAlignment<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Xaml.TextAlignment>.Get(target, Xaml.Controls.RichTextBlock.TextAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.TextDecorations"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.TextDecorations> TextDecorations<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Windows.UI.Text.TextDecorations>.Get(target, Xaml.Controls.RichTextBlock.TextDecorationsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.TextIndent"/></summary>
        public static DependencyProperty<TTarget, double> TextIndent<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.RichTextBlock.TextIndentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.TextLineBounds"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextLineBounds> TextLineBounds<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Xaml.TextLineBounds>.Get(target, Xaml.Controls.RichTextBlock.TextLineBoundsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.TextReadingOrder"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextReadingOrder> TextReadingOrder<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Xaml.TextReadingOrder>.Get(target, Xaml.Controls.RichTextBlock.TextReadingOrderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.TextTrimming"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextTrimming> TextTrimming<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Xaml.TextTrimming>.Get(target, Xaml.Controls.RichTextBlock.TextTrimmingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlock.TextWrapping"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextWrapping> TextWrapping<TTarget>(this TTarget target) where TTarget : RichTextBlock
        => DependencyProperty<TTarget, Xaml.TextWrapping>.Get(target, Xaml.Controls.RichTextBlock.TextWrappingProperty);
    }
}

namespace CSharpMarkup.WinUI // RichTextBlockOverflow
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RichTextBlockOverflow"/></summary>
        public static RichTextBlockOverflow RichTextBlockOverflow(int? MaxLines = default, Xaml.Controls.RichTextBlockOverflow OverflowContentTarget = default, Xaml.Thickness? Padding = default)
        {
            var ui = new Xaml.Controls.RichTextBlockOverflow();
            if (MaxLines is not null) ui.MaxLines = MaxLines.Value;
            if (OverflowContentTarget is not null) ui.OverflowContentTarget = OverflowContentTarget;
            if (Padding is not null) ui.Padding = Padding.Value;
            return CSharpMarkup.WinUI.RichTextBlockOverflow.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RichTextBlockOverflow"/></summary>
        public static RichTextBlockOverflow RichTextBlockOverflow()
        {
            var ui = new Xaml.Controls.RichTextBlockOverflow();
            return CSharpMarkup.WinUI.RichTextBlockOverflow.StartChain(ui);
        }
    }

    public partial class RichTextBlockOverflow : FrameworkElement, IUI<Xaml.Controls.RichTextBlockOverflow>
    {
        static RichTextBlockOverflow instance;

        internal static RichTextBlockOverflow StartChain(Xaml.Controls.RichTextBlockOverflow ui)
        {
            if (instance == null) instance = new RichTextBlockOverflow();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RichTextBlockOverflow ui;

        public new Xaml.Controls.RichTextBlockOverflow UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(RichTextBlockOverflow view) => view?.UI;

        public static implicit operator Xaml.Controls.RichTextBlockOverflow(RichTextBlockOverflow view) => view?.UI;

        public static implicit operator RichTextBlockOverflow(Xaml.Controls.RichTextBlockOverflow ui) => RichTextBlockOverflow.StartChain(ui);

        public RichTextBlockOverflow Invoke(Action<Xaml.Controls.RichTextBlockOverflow> action) { action?.Invoke(UI); return this; }

        protected RichTextBlockOverflow() { }
    }

    public static partial class RichTextBlockOverflowExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.RichTextBlockOverflow.MaxLines"/></summary>
        public static TView MaxLines<TView>(this TView view, int value) where TView : RichTextBlockOverflow { view.UI.MaxLines = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlockOverflow.OverflowContentTarget"/></summary>
        public static TView OverflowContentTarget<TView>(this TView view, Xaml.Controls.RichTextBlockOverflow value) where TView : RichTextBlockOverflow { view.UI.OverflowContentTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlockOverflow.Padding"/></summary>
        public static TView Padding<TView>(this TView view, Xaml.Thickness value) where TView : RichTextBlockOverflow { view.UI.Padding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlockOverflow.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double uniform) where TView : RichTextBlockOverflow { view.UI.Padding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlockOverflow.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double horizontal, double vertical) where TView : RichTextBlockOverflow { view.UI.Padding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlockOverflow.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double left, double top, double right, double bottom) where TView : RichTextBlockOverflow { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.RichTextBlockOverflow.Padding"/></summary>
        public static TView Paddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : RichTextBlockOverflow { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlockOverflow.HasOverflowContent"/></summary>
        public static DependencyProperty<TTarget, bool> HasOverflowContent<TTarget>(this TTarget target) where TTarget : RichTextBlockOverflow
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RichTextBlockOverflow.HasOverflowContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlockOverflow.IsTextTrimmed"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextTrimmed<TTarget>(this TTarget target) where TTarget : RichTextBlockOverflow
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.RichTextBlockOverflow.IsTextTrimmedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlockOverflow.MaxLines"/></summary>
        public static DependencyProperty<TTarget, int> MaxLines<TTarget>(this TTarget target) where TTarget : RichTextBlockOverflow
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.RichTextBlockOverflow.MaxLinesProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlockOverflow.OverflowContentTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.RichTextBlockOverflow> OverflowContentTarget<TTarget>(this TTarget target) where TTarget : RichTextBlockOverflow
        => DependencyProperty<TTarget, Xaml.Controls.RichTextBlockOverflow>.Get(target, Xaml.Controls.RichTextBlockOverflow.OverflowContentTargetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RichTextBlockOverflow.Padding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> Padding<TTarget>(this TTarget target) where TTarget : RichTextBlockOverflow
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.RichTextBlockOverflow.PaddingProperty);
    }
}

namespace CSharpMarkup.WinUI // RowDefinition
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.RowDefinition"/></summary>
        /// <remarks>Remark: RowDefinition().Bind() binds to <see cref="Xaml.Controls.RowDefinition.HeightProperty"/></remarks>
        public static RowDefinition RowDefinition(Xaml.GridLength Height)
        {
            var ui = new Xaml.Controls.RowDefinition();
            ui.Height = Height;
            return CSharpMarkup.WinUI.RowDefinition.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RowDefinition"/></summary>
        /// <remarks>Remark: RowDefinition().Bind() binds to <see cref="Xaml.Controls.RowDefinition.HeightProperty"/></remarks>
        public static RowDefinition RowDefinition(double? MaxHeight = default, double? MinHeight = default, Xaml.GridLength? Height = default)
        {
            var ui = new Xaml.Controls.RowDefinition();
            if (MaxHeight is not null) ui.MaxHeight = MaxHeight.Value;
            if (MinHeight is not null) ui.MinHeight = MinHeight.Value;
            if (Height is not null) ui.Height = Height.Value;
            return CSharpMarkup.WinUI.RowDefinition.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.RowDefinition"/></summary>
        /// <remarks>Remark: RowDefinition().Bind() binds to <see cref="Xaml.Controls.RowDefinition.HeightProperty"/></remarks>
        public static RowDefinition RowDefinition()
        {
            var ui = new Xaml.Controls.RowDefinition();
            return CSharpMarkup.WinUI.RowDefinition.StartChain(ui);
        }
    }

    public partial class RowDefinition : DependencyObject, IUI<Xaml.Controls.RowDefinition>, IDefaultBindProperty
    {
        static RowDefinition instance;

        internal static RowDefinition StartChain(Xaml.Controls.RowDefinition ui)
        {
            if (instance == null) instance = new RowDefinition();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.RowDefinition ui;

        public new Xaml.Controls.RowDefinition UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.RowDefinition.HeightProperty"/></summary>
        public Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.RowDefinition.HeightProperty;

        public static implicit operator Xaml.Controls.RowDefinition(RowDefinition view) => view?.UI;

        public static implicit operator RowDefinition(Xaml.Controls.RowDefinition ui) => RowDefinition.StartChain(ui);

        public RowDefinition Invoke(Action<Xaml.Controls.RowDefinition> action) { action?.Invoke(UI); return this; }

        protected RowDefinition() { }
    }

    public static partial class RowDefinitionExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.RowDefinition.MaxHeight"/></summary>
        public static TView MaxHeight<TView>(this TView view, double value) where TView : RowDefinition { view.UI.MaxHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.RowDefinition.MinHeight"/></summary>
        public static TView MinHeight<TView>(this TView view, double value) where TView : RowDefinition { view.UI.MinHeight = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RowDefinition.Height"/></summary>
        public static DependencyProperty<TTarget, Xaml.GridLength> Height<TTarget>(this TTarget target) where TTarget : RowDefinition
        => DependencyProperty<TTarget, Xaml.GridLength>.Get(target, Xaml.Controls.RowDefinition.HeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RowDefinition.MaxHeight"/></summary>
        public static DependencyProperty<TTarget, double> MaxHeight<TTarget>(this TTarget target) where TTarget : RowDefinition
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.RowDefinition.MaxHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.RowDefinition.MinHeight"/></summary>
        public static DependencyProperty<TTarget, double> MinHeight<TTarget>(this TTarget target) where TTarget : RowDefinition
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.RowDefinition.MinHeightProperty);
    }
}

namespace CSharpMarkup.WinUI // ScrollContentPresenter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ScrollContentPresenter"/></summary>
        public static ScrollContentPresenter ScrollContentPresenter(UIObject Content)
        {
            var ui = new Xaml.Controls.ScrollContentPresenter();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ScrollContentPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ScrollContentPresenter"/></summary>
        public static ScrollContentPresenter ScrollContentPresenter(bool? CanContentRenderOutsideBounds = default, bool? CanHorizontallyScroll = default, bool? CanVerticallyScroll = default, object ScrollOwner = default, bool? SizesContentToTemplatedParent = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.ScrollContentPresenter();
            if (CanContentRenderOutsideBounds is not null) ui.CanContentRenderOutsideBounds = CanContentRenderOutsideBounds.Value;
            if (CanHorizontallyScroll is not null) ui.CanHorizontallyScroll = CanHorizontallyScroll.Value;
            if (CanVerticallyScroll is not null) ui.CanVerticallyScroll = CanVerticallyScroll.Value;
            if (ScrollOwner is not null) ui.ScrollOwner = ScrollOwner;
            if (SizesContentToTemplatedParent is not null) ui.SizesContentToTemplatedParent = SizesContentToTemplatedParent.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ScrollContentPresenter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ScrollContentPresenter"/></summary>
        public static ScrollContentPresenter ScrollContentPresenter()
        {
            var ui = new Xaml.Controls.ScrollContentPresenter();
            return CSharpMarkup.WinUI.ScrollContentPresenter.StartChain(ui);
        }
    }

    public partial class ScrollContentPresenter : ContentPresenter, IUI<Xaml.Controls.ScrollContentPresenter>
    {
        static ScrollContentPresenter instance;

        internal static ScrollContentPresenter StartChain(Xaml.Controls.ScrollContentPresenter ui)
        {
            if (instance == null) instance = new ScrollContentPresenter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ScrollContentPresenter ui;

        public new Xaml.Controls.ScrollContentPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ScrollContentPresenter view) => view?.UI;

        public static implicit operator Xaml.Controls.ScrollContentPresenter(ScrollContentPresenter view) => view?.UI;

        public static implicit operator ScrollContentPresenter(Xaml.Controls.ScrollContentPresenter ui) => ScrollContentPresenter.StartChain(ui);

        public ScrollContentPresenter Invoke(Action<Xaml.Controls.ScrollContentPresenter> action) { action?.Invoke(UI); return this; }

        protected ScrollContentPresenter() { }
    }

    public static partial class ScrollContentPresenterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ScrollContentPresenter.CanContentRenderOutsideBounds"/></summary>
        public static TView CanContentRenderOutsideBounds<TView>(this TView view, bool value) where TView : ScrollContentPresenter { view.UI.CanContentRenderOutsideBounds = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollContentPresenter.CanHorizontallyScroll"/></summary>
        public static TView CanHorizontallyScroll<TView>(this TView view, bool value) where TView : ScrollContentPresenter { view.UI.CanHorizontallyScroll = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollContentPresenter.CanVerticallyScroll"/></summary>
        public static TView CanVerticallyScroll<TView>(this TView view, bool value) where TView : ScrollContentPresenter { view.UI.CanVerticallyScroll = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollContentPresenter.ScrollOwner"/></summary>
        public static TView ScrollOwner<TView>(this TView view, object value) where TView : ScrollContentPresenter { view.UI.ScrollOwner = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollContentPresenter.SizesContentToTemplatedParent"/></summary>
        public static TView SizesContentToTemplatedParent<TView>(this TView view, bool value) where TView : ScrollContentPresenter { view.UI.SizesContentToTemplatedParent = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollContentPresenter.CanContentRenderOutsideBounds"/></summary>
        public static DependencyProperty<TTarget, bool> CanContentRenderOutsideBounds<TTarget>(this TTarget target) where TTarget : ScrollContentPresenter
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollContentPresenter.CanContentRenderOutsideBoundsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollContentPresenter.SizesContentToTemplatedParent"/></summary>
        public static DependencyProperty<TTarget, bool> SizesContentToTemplatedParent<TTarget>(this TTarget target) where TTarget : ScrollContentPresenter
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollContentPresenter.SizesContentToTemplatedParentProperty);
    }
}

namespace CSharpMarkup.WinUI // ScrollView
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ScrollView"/></summary>
        public static ScrollView ScrollView(Xaml.UIElement Content)
        {
            var ui = new Xaml.Controls.ScrollView();
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.ScrollView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ScrollView"/></summary>
        public static ScrollView ScrollView(Xaml.Controls.ScrollingContentOrientation? ContentOrientation = default, double? HorizontalAnchorRatio = default, Xaml.Controls.ScrollingScrollBarVisibility? HorizontalScrollBarVisibility = default, Xaml.Controls.ScrollingChainMode? HorizontalScrollChainMode = default, Xaml.Controls.ScrollingScrollMode? HorizontalScrollMode = default, Xaml.Controls.ScrollingRailMode? HorizontalScrollRailMode = default, Xaml.Controls.ScrollingInputKinds? IgnoredInputKinds = default, double? MaxZoomFactor = default, double? MinZoomFactor = default, double? VerticalAnchorRatio = default, Xaml.Controls.ScrollingScrollBarVisibility? VerticalScrollBarVisibility = default, Xaml.Controls.ScrollingChainMode? VerticalScrollChainMode = default, Xaml.Controls.ScrollingScrollMode? VerticalScrollMode = default, Xaml.Controls.ScrollingRailMode? VerticalScrollRailMode = default, Xaml.Controls.ScrollingChainMode? ZoomChainMode = default, Xaml.Controls.ScrollingZoomMode? ZoomMode = default, Xaml.UIElement Content = default)
        {
            var ui = new Xaml.Controls.ScrollView();
            if (ContentOrientation is not null) ui.ContentOrientation = ContentOrientation.Value;
            if (HorizontalAnchorRatio is not null) ui.HorizontalAnchorRatio = HorizontalAnchorRatio.Value;
            if (HorizontalScrollBarVisibility is not null) ui.HorizontalScrollBarVisibility = HorizontalScrollBarVisibility.Value;
            if (HorizontalScrollChainMode is not null) ui.HorizontalScrollChainMode = HorizontalScrollChainMode.Value;
            if (HorizontalScrollMode is not null) ui.HorizontalScrollMode = HorizontalScrollMode.Value;
            if (HorizontalScrollRailMode is not null) ui.HorizontalScrollRailMode = HorizontalScrollRailMode.Value;
            if (IgnoredInputKinds is not null) ui.IgnoredInputKinds = IgnoredInputKinds.Value;
            if (MaxZoomFactor is not null) ui.MaxZoomFactor = MaxZoomFactor.Value;
            if (MinZoomFactor is not null) ui.MinZoomFactor = MinZoomFactor.Value;
            if (VerticalAnchorRatio is not null) ui.VerticalAnchorRatio = VerticalAnchorRatio.Value;
            if (VerticalScrollBarVisibility is not null) ui.VerticalScrollBarVisibility = VerticalScrollBarVisibility.Value;
            if (VerticalScrollChainMode is not null) ui.VerticalScrollChainMode = VerticalScrollChainMode.Value;
            if (VerticalScrollMode is not null) ui.VerticalScrollMode = VerticalScrollMode.Value;
            if (VerticalScrollRailMode is not null) ui.VerticalScrollRailMode = VerticalScrollRailMode.Value;
            if (ZoomChainMode is not null) ui.ZoomChainMode = ZoomChainMode.Value;
            if (ZoomMode is not null) ui.ZoomMode = ZoomMode.Value;
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.ScrollView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ScrollView"/></summary>
        public static ScrollView ScrollView()
        {
            var ui = new Xaml.Controls.ScrollView();
            return CSharpMarkup.WinUI.ScrollView.StartChain(ui);
        }
    }

    public partial class ScrollView : Control, IUI<Xaml.Controls.ScrollView>
    {
        static ScrollView instance;

        internal static ScrollView StartChain(Xaml.Controls.ScrollView ui)
        {
            if (instance == null) instance = new ScrollView();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ScrollView ui;

        public new Xaml.Controls.ScrollView UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ScrollView view) => view?.UI;

        public static implicit operator Xaml.Controls.ScrollView(ScrollView view) => view?.UI;

        public static implicit operator ScrollView(Xaml.Controls.ScrollView ui) => ScrollView.StartChain(ui);

        public ScrollView Invoke(Action<Xaml.Controls.ScrollView> action) { action?.Invoke(UI); return this; }

        protected ScrollView() { }
    }

    public static partial class ScrollViewExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ScrollView.ContentOrientation"/></summary>
        public static TView ContentOrientation<TView>(this TView view, Xaml.Controls.ScrollingContentOrientation value) where TView : ScrollView { view.UI.ContentOrientation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.HorizontalAnchorRatio"/></summary>
        public static TView HorizontalAnchorRatio<TView>(this TView view, double value) where TView : ScrollView { view.UI.HorizontalAnchorRatio = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.HorizontalScrollBarVisibility"/></summary>
        public static TView HorizontalScrollBarVisibility<TView>(this TView view, Xaml.Controls.ScrollingScrollBarVisibility value) where TView : ScrollView { view.UI.HorizontalScrollBarVisibility = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.HorizontalScrollChainMode"/></summary>
        public static TView HorizontalScrollChainMode<TView>(this TView view, Xaml.Controls.ScrollingChainMode value) where TView : ScrollView { view.UI.HorizontalScrollChainMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.HorizontalScrollMode"/></summary>
        public static TView HorizontalScrollMode<TView>(this TView view, Xaml.Controls.ScrollingScrollMode value) where TView : ScrollView { view.UI.HorizontalScrollMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.HorizontalScrollRailMode"/></summary>
        public static TView HorizontalScrollRailMode<TView>(this TView view, Xaml.Controls.ScrollingRailMode value) where TView : ScrollView { view.UI.HorizontalScrollRailMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.IgnoredInputKinds"/></summary>
        public static TView IgnoredInputKinds<TView>(this TView view, Xaml.Controls.ScrollingInputKinds value) where TView : ScrollView { view.UI.IgnoredInputKinds = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.MaxZoomFactor"/></summary>
        public static TView MaxZoomFactor<TView>(this TView view, double value) where TView : ScrollView { view.UI.MaxZoomFactor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.MinZoomFactor"/></summary>
        public static TView MinZoomFactor<TView>(this TView view, double value) where TView : ScrollView { view.UI.MinZoomFactor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.VerticalAnchorRatio"/></summary>
        public static TView VerticalAnchorRatio<TView>(this TView view, double value) where TView : ScrollView { view.UI.VerticalAnchorRatio = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.VerticalScrollBarVisibility"/></summary>
        public static TView VerticalScrollBarVisibility<TView>(this TView view, Xaml.Controls.ScrollingScrollBarVisibility value) where TView : ScrollView { view.UI.VerticalScrollBarVisibility = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.VerticalScrollChainMode"/></summary>
        public static TView VerticalScrollChainMode<TView>(this TView view, Xaml.Controls.ScrollingChainMode value) where TView : ScrollView { view.UI.VerticalScrollChainMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.VerticalScrollMode"/></summary>
        public static TView VerticalScrollMode<TView>(this TView view, Xaml.Controls.ScrollingScrollMode value) where TView : ScrollView { view.UI.VerticalScrollMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.VerticalScrollRailMode"/></summary>
        public static TView VerticalScrollRailMode<TView>(this TView view, Xaml.Controls.ScrollingRailMode value) where TView : ScrollView { view.UI.VerticalScrollRailMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.ZoomChainMode"/></summary>
        public static TView ZoomChainMode<TView>(this TView view, Xaml.Controls.ScrollingChainMode value) where TView : ScrollView { view.UI.ZoomChainMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollView.ZoomMode"/></summary>
        public static TView ZoomMode<TView>(this TView view, Xaml.Controls.ScrollingZoomMode value) where TView : ScrollView { view.UI.ZoomMode = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.ComputedHorizontalScrollBarVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Visibility> ComputedHorizontalScrollBarVisibility<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Visibility>.Get(target, Xaml.Controls.ScrollView.ComputedHorizontalScrollBarVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.ComputedHorizontalScrollMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode> ComputedHorizontalScrollMode<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode>.Get(target, Xaml.Controls.ScrollView.ComputedHorizontalScrollModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.ComputedVerticalScrollBarVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Visibility> ComputedVerticalScrollBarVisibility<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Visibility>.Get(target, Xaml.Controls.ScrollView.ComputedVerticalScrollBarVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.ComputedVerticalScrollMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode> ComputedVerticalScrollMode<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode>.Get(target, Xaml.Controls.ScrollView.ComputedVerticalScrollModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.ContentOrientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingContentOrientation> ContentOrientation<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingContentOrientation>.Get(target, Xaml.Controls.ScrollView.ContentOrientationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.Content"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Content<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.ScrollView.ContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.HorizontalAnchorRatio"/></summary>
        public static DependencyProperty<TTarget, double> HorizontalAnchorRatio<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ScrollView.HorizontalAnchorRatioProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.HorizontalScrollBarVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollBarVisibility> HorizontalScrollBarVisibility<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollBarVisibility>.Get(target, Xaml.Controls.ScrollView.HorizontalScrollBarVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.HorizontalScrollChainMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode> HorizontalScrollChainMode<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode>.Get(target, Xaml.Controls.ScrollView.HorizontalScrollChainModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.HorizontalScrollMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode> HorizontalScrollMode<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode>.Get(target, Xaml.Controls.ScrollView.HorizontalScrollModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.HorizontalScrollRailMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingRailMode> HorizontalScrollRailMode<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingRailMode>.Get(target, Xaml.Controls.ScrollView.HorizontalScrollRailModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.IgnoredInputKinds"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> IgnoredInputKinds<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds>.Get(target, Xaml.Controls.ScrollView.IgnoredInputKindsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.MaxZoomFactor"/></summary>
        public static DependencyProperty<TTarget, double> MaxZoomFactor<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ScrollView.MaxZoomFactorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.MinZoomFactor"/></summary>
        public static DependencyProperty<TTarget, double> MinZoomFactor<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ScrollView.MinZoomFactorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.ScrollPresenter"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.ScrollPresenter> ScrollPresenter<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.ScrollPresenter>.Get(target, Xaml.Controls.ScrollView.ScrollPresenterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.VerticalAnchorRatio"/></summary>
        public static DependencyProperty<TTarget, double> VerticalAnchorRatio<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ScrollView.VerticalAnchorRatioProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.VerticalScrollBarVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollBarVisibility> VerticalScrollBarVisibility<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollBarVisibility>.Get(target, Xaml.Controls.ScrollView.VerticalScrollBarVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.VerticalScrollChainMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode> VerticalScrollChainMode<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode>.Get(target, Xaml.Controls.ScrollView.VerticalScrollChainModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.VerticalScrollMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode> VerticalScrollMode<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode>.Get(target, Xaml.Controls.ScrollView.VerticalScrollModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.VerticalScrollRailMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingRailMode> VerticalScrollRailMode<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingRailMode>.Get(target, Xaml.Controls.ScrollView.VerticalScrollRailModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.ZoomChainMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode> ZoomChainMode<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode>.Get(target, Xaml.Controls.ScrollView.ZoomChainModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollView.ZoomMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollingZoomMode> ZoomMode<TTarget>(this TTarget target) where TTarget : ScrollView
        => DependencyProperty<TTarget, Xaml.Controls.ScrollingZoomMode>.Get(target, Xaml.Controls.ScrollView.ZoomModeProperty);
    }
}

namespace CSharpMarkup.WinUI // ScrollViewer
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ScrollViewer"/></summary>
        public static ScrollViewer ScrollViewer(UIObject Content)
        {
            var ui = new Xaml.Controls.ScrollViewer();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ScrollViewer.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ScrollViewer"/></summary>
        public static ScrollViewer ScrollViewer(bool? BringIntoViewOnFocusChange = default, bool? CanContentRenderOutsideBounds = default, double? HorizontalAnchorRatio = default, Xaml.Controls.ScrollBarVisibility? HorizontalScrollBarVisibility = default, Xaml.Controls.ScrollMode? HorizontalScrollMode = default, Xaml.Controls.Primitives.SnapPointsAlignment? HorizontalSnapPointsAlignment = default, Xaml.Controls.SnapPointsType? HorizontalSnapPointsType = default, bool? IsDeferredScrollingEnabled = default, bool? IsHorizontalRailEnabled = default, bool? IsHorizontalScrollChainingEnabled = default, bool? IsScrollInertiaEnabled = default, bool? IsVerticalRailEnabled = default, bool? IsVerticalScrollChainingEnabled = default, bool? IsZoomChainingEnabled = default, bool? IsZoomInertiaEnabled = default, Xaml.UIElement LeftHeader = default, float? MaxZoomFactor = default, float? MinZoomFactor = default, bool? ReduceViewportForCoreInputViewOcclusions = default, Xaml.UIElement TopHeader = default, Xaml.UIElement TopLeftHeader = default, double? VerticalAnchorRatio = default, Xaml.Controls.ScrollBarVisibility? VerticalScrollBarVisibility = default, Xaml.Controls.ScrollMode? VerticalScrollMode = default, Xaml.Controls.Primitives.SnapPointsAlignment? VerticalSnapPointsAlignment = default, Xaml.Controls.SnapPointsType? VerticalSnapPointsType = default, Xaml.Controls.ZoomMode? ZoomMode = default, Xaml.Controls.SnapPointsType? ZoomSnapPointsType = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.ScrollViewer();
            if (BringIntoViewOnFocusChange is not null) ui.BringIntoViewOnFocusChange = BringIntoViewOnFocusChange.Value;
            if (CanContentRenderOutsideBounds is not null) ui.CanContentRenderOutsideBounds = CanContentRenderOutsideBounds.Value;
            if (HorizontalAnchorRatio is not null) ui.HorizontalAnchorRatio = HorizontalAnchorRatio.Value;
            if (HorizontalScrollBarVisibility is not null) ui.HorizontalScrollBarVisibility = HorizontalScrollBarVisibility.Value;
            if (HorizontalScrollMode is not null) ui.HorizontalScrollMode = HorizontalScrollMode.Value;
            if (HorizontalSnapPointsAlignment is not null) ui.HorizontalSnapPointsAlignment = HorizontalSnapPointsAlignment.Value;
            if (HorizontalSnapPointsType is not null) ui.HorizontalSnapPointsType = HorizontalSnapPointsType.Value;
            if (IsDeferredScrollingEnabled is not null) ui.IsDeferredScrollingEnabled = IsDeferredScrollingEnabled.Value;
            if (IsHorizontalRailEnabled is not null) ui.IsHorizontalRailEnabled = IsHorizontalRailEnabled.Value;
            if (IsHorizontalScrollChainingEnabled is not null) ui.IsHorizontalScrollChainingEnabled = IsHorizontalScrollChainingEnabled.Value;
            if (IsScrollInertiaEnabled is not null) ui.IsScrollInertiaEnabled = IsScrollInertiaEnabled.Value;
            if (IsVerticalRailEnabled is not null) ui.IsVerticalRailEnabled = IsVerticalRailEnabled.Value;
            if (IsVerticalScrollChainingEnabled is not null) ui.IsVerticalScrollChainingEnabled = IsVerticalScrollChainingEnabled.Value;
            if (IsZoomChainingEnabled is not null) ui.IsZoomChainingEnabled = IsZoomChainingEnabled.Value;
            if (IsZoomInertiaEnabled is not null) ui.IsZoomInertiaEnabled = IsZoomInertiaEnabled.Value;
            if (LeftHeader is not null) ui.LeftHeader = LeftHeader;
            if (MaxZoomFactor is not null) ui.MaxZoomFactor = MaxZoomFactor.Value;
            if (MinZoomFactor is not null) ui.MinZoomFactor = MinZoomFactor.Value;
            if (ReduceViewportForCoreInputViewOcclusions is not null) ui.ReduceViewportForCoreInputViewOcclusions = ReduceViewportForCoreInputViewOcclusions.Value;
            if (TopHeader is not null) ui.TopHeader = TopHeader;
            if (TopLeftHeader is not null) ui.TopLeftHeader = TopLeftHeader;
            if (VerticalAnchorRatio is not null) ui.VerticalAnchorRatio = VerticalAnchorRatio.Value;
            if (VerticalScrollBarVisibility is not null) ui.VerticalScrollBarVisibility = VerticalScrollBarVisibility.Value;
            if (VerticalScrollMode is not null) ui.VerticalScrollMode = VerticalScrollMode.Value;
            if (VerticalSnapPointsAlignment is not null) ui.VerticalSnapPointsAlignment = VerticalSnapPointsAlignment.Value;
            if (VerticalSnapPointsType is not null) ui.VerticalSnapPointsType = VerticalSnapPointsType.Value;
            if (ZoomMode is not null) ui.ZoomMode = ZoomMode.Value;
            if (ZoomSnapPointsType is not null) ui.ZoomSnapPointsType = ZoomSnapPointsType.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ScrollViewer.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ScrollViewer"/></summary>
        public static ScrollViewer ScrollViewer()
        {
            var ui = new Xaml.Controls.ScrollViewer();
            return CSharpMarkup.WinUI.ScrollViewer.StartChain(ui);
        }
    }

    public partial class ScrollViewer : ContentControl, IUI<Xaml.Controls.ScrollViewer>
    {
        static ScrollViewer instance;

        internal static ScrollViewer StartChain(Xaml.Controls.ScrollViewer ui)
        {
            if (instance == null) instance = new ScrollViewer();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ScrollViewer ui;

        public new Xaml.Controls.ScrollViewer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ScrollViewer view) => view?.UI;

        public static implicit operator Xaml.Controls.ScrollViewer(ScrollViewer view) => view?.UI;

        public static implicit operator ScrollViewer(Xaml.Controls.ScrollViewer ui) => ScrollViewer.StartChain(ui);

        public ScrollViewer Invoke(Action<Xaml.Controls.ScrollViewer> action) { action?.Invoke(UI); return this; }

        protected ScrollViewer() { }
    }

    public static partial class ScrollViewerExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.BringIntoViewOnFocusChange"/></summary>
        public static TView BringIntoViewOnFocusChange<TView>(this TView view, bool value) where TView : ScrollViewer { view.UI.BringIntoViewOnFocusChange = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.CanContentRenderOutsideBounds"/></summary>
        public static TView CanContentRenderOutsideBounds<TView>(this TView view, bool value) where TView : ScrollViewer { view.UI.CanContentRenderOutsideBounds = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.HorizontalAnchorRatio"/></summary>
        public static TView HorizontalAnchorRatio<TView>(this TView view, double value) where TView : ScrollViewer { view.UI.HorizontalAnchorRatio = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.HorizontalScrollBarVisibility"/></summary>
        public static TView HorizontalScrollBarVisibility<TView>(this TView view, Xaml.Controls.ScrollBarVisibility value) where TView : ScrollViewer { view.UI.HorizontalScrollBarVisibility = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.HorizontalScrollMode"/></summary>
        public static TView HorizontalScrollMode<TView>(this TView view, Xaml.Controls.ScrollMode value) where TView : ScrollViewer { view.UI.HorizontalScrollMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.HorizontalSnapPointsAlignment"/></summary>
        public static TView HorizontalSnapPointsAlignment<TView>(this TView view, Xaml.Controls.Primitives.SnapPointsAlignment value) where TView : ScrollViewer { view.UI.HorizontalSnapPointsAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.HorizontalSnapPointsType"/></summary>
        public static TView HorizontalSnapPointsType<TView>(this TView view, Xaml.Controls.SnapPointsType value) where TView : ScrollViewer { view.UI.HorizontalSnapPointsType = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsDeferredScrollingEnabled"/></summary>
        public static TView IsDeferredScrollingEnabled<TView>(this TView view, bool value) where TView : ScrollViewer { view.UI.IsDeferredScrollingEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsHorizontalRailEnabled"/></summary>
        public static TView IsHorizontalRailEnabled<TView>(this TView view, bool value) where TView : ScrollViewer { view.UI.IsHorizontalRailEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsHorizontalScrollChainingEnabled"/></summary>
        public static TView IsHorizontalScrollChainingEnabled<TView>(this TView view, bool value) where TView : ScrollViewer { view.UI.IsHorizontalScrollChainingEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsScrollInertiaEnabled"/></summary>
        public static TView IsScrollInertiaEnabled<TView>(this TView view, bool value) where TView : ScrollViewer { view.UI.IsScrollInertiaEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsVerticalRailEnabled"/></summary>
        public static TView IsVerticalRailEnabled<TView>(this TView view, bool value) where TView : ScrollViewer { view.UI.IsVerticalRailEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsVerticalScrollChainingEnabled"/></summary>
        public static TView IsVerticalScrollChainingEnabled<TView>(this TView view, bool value) where TView : ScrollViewer { view.UI.IsVerticalScrollChainingEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsZoomChainingEnabled"/></summary>
        public static TView IsZoomChainingEnabled<TView>(this TView view, bool value) where TView : ScrollViewer { view.UI.IsZoomChainingEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsZoomInertiaEnabled"/></summary>
        public static TView IsZoomInertiaEnabled<TView>(this TView view, bool value) where TView : ScrollViewer { view.UI.IsZoomInertiaEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.LeftHeader"/></summary>
        public static TView LeftHeader<TView>(this TView view, Xaml.UIElement value) where TView : ScrollViewer { view.UI.LeftHeader = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.MaxZoomFactor"/></summary>
        public static TView MaxZoomFactor<TView>(this TView view, float value) where TView : ScrollViewer { view.UI.MaxZoomFactor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.MinZoomFactor"/></summary>
        public static TView MinZoomFactor<TView>(this TView view, float value) where TView : ScrollViewer { view.UI.MinZoomFactor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.ReduceViewportForCoreInputViewOcclusions"/></summary>
        public static TView ReduceViewportForCoreInputViewOcclusions<TView>(this TView view, bool value) where TView : ScrollViewer { view.UI.ReduceViewportForCoreInputViewOcclusions = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.TopHeader"/></summary>
        public static TView TopHeader<TView>(this TView view, Xaml.UIElement value) where TView : ScrollViewer { view.UI.TopHeader = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.TopLeftHeader"/></summary>
        public static TView TopLeftHeader<TView>(this TView view, Xaml.UIElement value) where TView : ScrollViewer { view.UI.TopLeftHeader = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.VerticalAnchorRatio"/></summary>
        public static TView VerticalAnchorRatio<TView>(this TView view, double value) where TView : ScrollViewer { view.UI.VerticalAnchorRatio = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.VerticalScrollBarVisibility"/></summary>
        public static TView VerticalScrollBarVisibility<TView>(this TView view, Xaml.Controls.ScrollBarVisibility value) where TView : ScrollViewer { view.UI.VerticalScrollBarVisibility = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.VerticalScrollMode"/></summary>
        public static TView VerticalScrollMode<TView>(this TView view, Xaml.Controls.ScrollMode value) where TView : ScrollViewer { view.UI.VerticalScrollMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.VerticalSnapPointsAlignment"/></summary>
        public static TView VerticalSnapPointsAlignment<TView>(this TView view, Xaml.Controls.Primitives.SnapPointsAlignment value) where TView : ScrollViewer { view.UI.VerticalSnapPointsAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.VerticalSnapPointsType"/></summary>
        public static TView VerticalSnapPointsType<TView>(this TView view, Xaml.Controls.SnapPointsType value) where TView : ScrollViewer { view.UI.VerticalSnapPointsType = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.ZoomMode"/></summary>
        public static TView ZoomMode<TView>(this TView view, Xaml.Controls.ZoomMode value) where TView : ScrollViewer { view.UI.ZoomMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.ZoomSnapPointsType"/></summary>
        public static TView ZoomSnapPointsType<TView>(this TView view, Xaml.Controls.SnapPointsType value) where TView : ScrollViewer { view.UI.ZoomSnapPointsType = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.BringIntoViewOnFocusChange"/></summary>
        public static DependencyProperty<TTarget, bool> BringIntoViewOnFocusChange<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.BringIntoViewOnFocusChangeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.CanContentRenderOutsideBounds"/></summary>
        public static DependencyProperty<TTarget, bool> CanContentRenderOutsideBounds<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.CanContentRenderOutsideBoundsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Visibility> ComputedHorizontalScrollBarVisibility<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.Visibility>.Get(target, Xaml.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.ComputedVerticalScrollBarVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Visibility> ComputedVerticalScrollBarVisibility<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.Visibility>.Get(target, Xaml.Controls.ScrollViewer.ComputedVerticalScrollBarVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.ExtentHeight"/></summary>
        public static DependencyProperty<TTarget, double> ExtentHeight<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ScrollViewer.ExtentHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.ExtentWidth"/></summary>
        public static DependencyProperty<TTarget, double> ExtentWidth<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ScrollViewer.ExtentWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.HorizontalAnchorRatio"/></summary>
        public static DependencyProperty<TTarget, double> HorizontalAnchorRatio<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ScrollViewer.HorizontalAnchorRatioProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.HorizontalOffset"/></summary>
        public static DependencyProperty<TTarget, double> HorizontalOffset<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ScrollViewer.HorizontalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.HorizontalScrollBarVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollBarVisibility> HorizontalScrollBarVisibility<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.Controls.ScrollBarVisibility>.Get(target, Xaml.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.HorizontalScrollMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollMode> HorizontalScrollMode<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.Controls.ScrollMode>.Get(target, Xaml.Controls.ScrollViewer.HorizontalScrollModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.HorizontalSnapPointsAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.SnapPointsAlignment> HorizontalSnapPointsAlignment<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.SnapPointsAlignment>.Get(target, Xaml.Controls.ScrollViewer.HorizontalSnapPointsAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.HorizontalSnapPointsType"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SnapPointsType> HorizontalSnapPointsType<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.Controls.SnapPointsType>.Get(target, Xaml.Controls.ScrollViewer.HorizontalSnapPointsTypeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsDeferredScrollingEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsDeferredScrollingEnabled<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsDeferredScrollingEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsHorizontalRailEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsHorizontalRailEnabled<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsHorizontalRailEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsHorizontalScrollChainingEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsHorizontalScrollChainingEnabled<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsHorizontalScrollChainingEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsScrollInertiaEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsScrollInertiaEnabled<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsScrollInertiaEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsVerticalRailEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsVerticalRailEnabled<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsVerticalRailEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsVerticalScrollChainingEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsVerticalScrollChainingEnabled<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsVerticalScrollChainingEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsZoomChainingEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsZoomChainingEnabled<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsZoomChainingEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsZoomInertiaEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsZoomInertiaEnabled<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsZoomInertiaEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.LeftHeader"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> LeftHeader<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.ScrollViewer.LeftHeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.MaxZoomFactor"/></summary>
        public static DependencyProperty<TTarget, float> MaxZoomFactor<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, float>.Get(target, Xaml.Controls.ScrollViewer.MaxZoomFactorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.MinZoomFactor"/></summary>
        public static DependencyProperty<TTarget, float> MinZoomFactor<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, float>.Get(target, Xaml.Controls.ScrollViewer.MinZoomFactorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.ReduceViewportForCoreInputViewOcclusions"/></summary>
        public static DependencyProperty<TTarget, bool> ReduceViewportForCoreInputViewOcclusions<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.ReduceViewportForCoreInputViewOcclusionsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.ScrollableHeight"/></summary>
        public static DependencyProperty<TTarget, double> ScrollableHeight<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ScrollViewer.ScrollableHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.ScrollableWidth"/></summary>
        public static DependencyProperty<TTarget, double> ScrollableWidth<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ScrollViewer.ScrollableWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.TopHeader"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> TopHeader<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.ScrollViewer.TopHeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.TopLeftHeader"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> TopLeftHeader<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.ScrollViewer.TopLeftHeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.VerticalAnchorRatio"/></summary>
        public static DependencyProperty<TTarget, double> VerticalAnchorRatio<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ScrollViewer.VerticalAnchorRatioProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.VerticalOffset"/></summary>
        public static DependencyProperty<TTarget, double> VerticalOffset<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ScrollViewer.VerticalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.VerticalScrollBarVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollBarVisibility> VerticalScrollBarVisibility<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.Controls.ScrollBarVisibility>.Get(target, Xaml.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.VerticalScrollMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollMode> VerticalScrollMode<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.Controls.ScrollMode>.Get(target, Xaml.Controls.ScrollViewer.VerticalScrollModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.VerticalSnapPointsAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.SnapPointsAlignment> VerticalSnapPointsAlignment<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.SnapPointsAlignment>.Get(target, Xaml.Controls.ScrollViewer.VerticalSnapPointsAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.VerticalSnapPointsType"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SnapPointsType> VerticalSnapPointsType<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.Controls.SnapPointsType>.Get(target, Xaml.Controls.ScrollViewer.VerticalSnapPointsTypeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.ViewportHeight"/></summary>
        public static DependencyProperty<TTarget, double> ViewportHeight<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ScrollViewer.ViewportHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.ViewportWidth"/></summary>
        public static DependencyProperty<TTarget, double> ViewportWidth<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ScrollViewer.ViewportWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.ZoomFactor"/></summary>
        public static DependencyProperty<TTarget, float> ZoomFactor<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, float>.Get(target, Xaml.Controls.ScrollViewer.ZoomFactorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.ZoomMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ZoomMode> ZoomMode<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.Controls.ZoomMode>.Get(target, Xaml.Controls.ScrollViewer.ZoomModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.ZoomSnapPoints"/></summary>
        public static DependencyProperty<TTarget, IList<float>> ZoomSnapPoints<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, IList<float>>.Get(target, Xaml.Controls.ScrollViewer.ZoomSnapPointsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.ZoomSnapPointsType"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SnapPointsType> ZoomSnapPointsType<TTarget>(this TTarget target) where TTarget : ScrollViewer
        => DependencyProperty<TTarget, Xaml.Controls.SnapPointsType>.Get(target, Xaml.Controls.ScrollViewer.ZoomSnapPointsTypeProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.BringIntoViewOnFocusChange"/></summary>
        public static TTarget ScrollViewer_BringIntoViewOnFocusChange<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetBringIntoViewOnFocusChange(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.BringIntoViewOnFocusChange"/></summary>
        public static DependencyProperty<TTarget, bool> ScrollViewer_BringIntoViewOnFocusChange<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.BringIntoViewOnFocusChangeProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.CanContentRenderOutsideBounds"/></summary>
        public static TTarget ScrollViewer_CanContentRenderOutsideBounds<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetCanContentRenderOutsideBounds(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.CanContentRenderOutsideBounds"/></summary>
        public static DependencyProperty<TTarget, bool> ScrollViewer_CanContentRenderOutsideBounds<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.CanContentRenderOutsideBoundsProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.HorizontalScrollBarVisibility"/></summary>
        public static TTarget ScrollViewer_HorizontalScrollBarVisibility<TTarget>(this TTarget target, Xaml.Controls.ScrollBarVisibility value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetHorizontalScrollBarVisibility(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.HorizontalScrollBarVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollBarVisibility> ScrollViewer_HorizontalScrollBarVisibility<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.Controls.ScrollBarVisibility>.Get(target, Xaml.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.HorizontalScrollMode"/></summary>
        public static TTarget ScrollViewer_HorizontalScrollMode<TTarget>(this TTarget target, Xaml.Controls.ScrollMode value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetHorizontalScrollMode(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.HorizontalScrollMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollMode> ScrollViewer_HorizontalScrollMode<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.Controls.ScrollMode>.Get(target, Xaml.Controls.ScrollViewer.HorizontalScrollModeProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsDeferredScrollingEnabled"/></summary>
        public static TTarget ScrollViewer_IsDeferredScrollingEnabled<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetIsDeferredScrollingEnabled(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsDeferredScrollingEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> ScrollViewer_IsDeferredScrollingEnabled<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsDeferredScrollingEnabledProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsHorizontalRailEnabled"/></summary>
        public static TTarget ScrollViewer_IsHorizontalRailEnabled<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetIsHorizontalRailEnabled(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsHorizontalRailEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> ScrollViewer_IsHorizontalRailEnabled<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsHorizontalRailEnabledProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsHorizontalScrollChainingEnabled"/></summary>
        public static TTarget ScrollViewer_IsHorizontalScrollChainingEnabled<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetIsHorizontalScrollChainingEnabled(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsHorizontalScrollChainingEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> ScrollViewer_IsHorizontalScrollChainingEnabled<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsHorizontalScrollChainingEnabledProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsScrollInertiaEnabled"/></summary>
        public static TTarget ScrollViewer_IsScrollInertiaEnabled<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetIsScrollInertiaEnabled(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsScrollInertiaEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> ScrollViewer_IsScrollInertiaEnabled<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsScrollInertiaEnabledProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsVerticalRailEnabled"/></summary>
        public static TTarget ScrollViewer_IsVerticalRailEnabled<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetIsVerticalRailEnabled(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsVerticalRailEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> ScrollViewer_IsVerticalRailEnabled<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsVerticalRailEnabledProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsVerticalScrollChainingEnabled"/></summary>
        public static TTarget ScrollViewer_IsVerticalScrollChainingEnabled<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetIsVerticalScrollChainingEnabled(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsVerticalScrollChainingEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> ScrollViewer_IsVerticalScrollChainingEnabled<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsVerticalScrollChainingEnabledProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsZoomChainingEnabled"/></summary>
        public static TTarget ScrollViewer_IsZoomChainingEnabled<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetIsZoomChainingEnabled(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsZoomChainingEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> ScrollViewer_IsZoomChainingEnabled<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsZoomChainingEnabledProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.IsZoomInertiaEnabled"/></summary>
        public static TTarget ScrollViewer_IsZoomInertiaEnabled<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetIsZoomInertiaEnabled(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.IsZoomInertiaEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> ScrollViewer_IsZoomInertiaEnabled<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ScrollViewer.IsZoomInertiaEnabledProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.VerticalScrollBarVisibility"/></summary>
        public static TTarget ScrollViewer_VerticalScrollBarVisibility<TTarget>(this TTarget target, Xaml.Controls.ScrollBarVisibility value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetVerticalScrollBarVisibility(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.VerticalScrollBarVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollBarVisibility> ScrollViewer_VerticalScrollBarVisibility<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.Controls.ScrollBarVisibility>.Get(target, Xaml.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.VerticalScrollMode"/></summary>
        public static TTarget ScrollViewer_VerticalScrollMode<TTarget>(this TTarget target, Xaml.Controls.ScrollMode value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetVerticalScrollMode(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.VerticalScrollMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ScrollMode> ScrollViewer_VerticalScrollMode<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.Controls.ScrollMode>.Get(target, Xaml.Controls.ScrollViewer.VerticalScrollModeProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer.ZoomMode"/></summary>
        public static TTarget ScrollViewer_ZoomMode<TTarget>(this TTarget target, Xaml.Controls.ZoomMode value) where TTarget : DependencyObject
        { Xaml.Controls.ScrollViewer.SetZoomMode(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ScrollViewer.ZoomMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ZoomMode> ScrollViewer_ZoomMode<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.Controls.ZoomMode>.Get(target, Xaml.Controls.ScrollViewer.ZoomModeProperty);

        /// <summary>Set <see cref="Xaml.Controls.ScrollViewer"/> attached properties</summary>
        public static TTarget ScrollViewer<TTarget>(this TTarget target

            , bool? BringIntoViewOnFocusChange = default

            , bool? CanContentRenderOutsideBounds = default

            , Xaml.Controls.ScrollBarVisibility? HorizontalScrollBarVisibility = default

            , Xaml.Controls.ScrollMode? HorizontalScrollMode = default

            , bool? IsDeferredScrollingEnabled = default

            , bool? IsHorizontalRailEnabled = default

            , bool? IsHorizontalScrollChainingEnabled = default

            , bool? IsScrollInertiaEnabled = default

            , bool? IsVerticalRailEnabled = default

            , bool? IsVerticalScrollChainingEnabled = default

            , bool? IsZoomChainingEnabled = default

            , bool? IsZoomInertiaEnabled = default

            , Xaml.Controls.ScrollBarVisibility? VerticalScrollBarVisibility = default

            , Xaml.Controls.ScrollMode? VerticalScrollMode = default

            , Xaml.Controls.ZoomMode? ZoomMode = default

        ) where TTarget : DependencyObject
        {
            if (BringIntoViewOnFocusChange is not null) Xaml.Controls.ScrollViewer.SetBringIntoViewOnFocusChange(target.UI, BringIntoViewOnFocusChange.Value);

            if (CanContentRenderOutsideBounds is not null) Xaml.Controls.ScrollViewer.SetCanContentRenderOutsideBounds(target.UI, CanContentRenderOutsideBounds.Value);

            if (HorizontalScrollBarVisibility is not null) Xaml.Controls.ScrollViewer.SetHorizontalScrollBarVisibility(target.UI, HorizontalScrollBarVisibility.Value);

            if (HorizontalScrollMode is not null) Xaml.Controls.ScrollViewer.SetHorizontalScrollMode(target.UI, HorizontalScrollMode.Value);

            if (IsDeferredScrollingEnabled is not null) Xaml.Controls.ScrollViewer.SetIsDeferredScrollingEnabled(target.UI, IsDeferredScrollingEnabled.Value);

            if (IsHorizontalRailEnabled is not null) Xaml.Controls.ScrollViewer.SetIsHorizontalRailEnabled(target.UI, IsHorizontalRailEnabled.Value);

            if (IsHorizontalScrollChainingEnabled is not null) Xaml.Controls.ScrollViewer.SetIsHorizontalScrollChainingEnabled(target.UI, IsHorizontalScrollChainingEnabled.Value);

            if (IsScrollInertiaEnabled is not null) Xaml.Controls.ScrollViewer.SetIsScrollInertiaEnabled(target.UI, IsScrollInertiaEnabled.Value);

            if (IsVerticalRailEnabled is not null) Xaml.Controls.ScrollViewer.SetIsVerticalRailEnabled(target.UI, IsVerticalRailEnabled.Value);

            if (IsVerticalScrollChainingEnabled is not null) Xaml.Controls.ScrollViewer.SetIsVerticalScrollChainingEnabled(target.UI, IsVerticalScrollChainingEnabled.Value);

            if (IsZoomChainingEnabled is not null) Xaml.Controls.ScrollViewer.SetIsZoomChainingEnabled(target.UI, IsZoomChainingEnabled.Value);

            if (IsZoomInertiaEnabled is not null) Xaml.Controls.ScrollViewer.SetIsZoomInertiaEnabled(target.UI, IsZoomInertiaEnabled.Value);

            if (VerticalScrollBarVisibility is not null) Xaml.Controls.ScrollViewer.SetVerticalScrollBarVisibility(target.UI, VerticalScrollBarVisibility.Value);

            if (VerticalScrollMode is not null) Xaml.Controls.ScrollViewer.SetVerticalScrollMode(target.UI, VerticalScrollMode.Value);

            if (ZoomMode is not null) Xaml.Controls.ScrollViewer.SetZoomMode(target.UI, ZoomMode.Value);

            return target;
        }
    }
}

namespace CSharpMarkup.WinUI // SelectorBar
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.SelectorBar"/></summary>
        public static SelectorBar SelectorBar(Xaml.Controls.SelectorBarItem SelectedItem = default)
        {
            var ui = new Xaml.Controls.SelectorBar();
            if (SelectedItem is not null) ui.SelectedItem = SelectedItem;
            return CSharpMarkup.WinUI.SelectorBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SelectorBar"/></summary>
        public static SelectorBar SelectorBar()
        {
            var ui = new Xaml.Controls.SelectorBar();
            return CSharpMarkup.WinUI.SelectorBar.StartChain(ui);
        }
    }

    public partial class SelectorBar : Control, IUI<Xaml.Controls.SelectorBar>
    {
        static SelectorBar instance;

        internal static SelectorBar StartChain(Xaml.Controls.SelectorBar ui)
        {
            if (instance == null) instance = new SelectorBar();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.SelectorBar ui;

        public new Xaml.Controls.SelectorBar UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(SelectorBar view) => view?.UI;

        public static implicit operator Xaml.Controls.SelectorBar(SelectorBar view) => view?.UI;

        public static implicit operator SelectorBar(Xaml.Controls.SelectorBar ui) => SelectorBar.StartChain(ui);

        public SelectorBar Invoke(Action<Xaml.Controls.SelectorBar> action) { action?.Invoke(UI); return this; }

        protected SelectorBar() { }
    }

    public static partial class SelectorBarExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.SelectorBar.SelectedItem"/></summary>
        public static TView SelectedItem<TView>(this TView view, Xaml.Controls.SelectorBarItem value) where TView : SelectorBar { view.UI.SelectedItem = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SelectorBar.Items"/></summary>
        public static DependencyProperty<TTarget, IList<Xaml.Controls.SelectorBarItem>> Items<TTarget>(this TTarget target) where TTarget : SelectorBar
        => DependencyProperty<TTarget, IList<Xaml.Controls.SelectorBarItem>>.Get(target, Xaml.Controls.SelectorBar.ItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SelectorBar.SelectedItem"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SelectorBarItem> SelectedItem<TTarget>(this TTarget target) where TTarget : SelectorBar
        => DependencyProperty<TTarget, Xaml.Controls.SelectorBarItem>.Get(target, Xaml.Controls.SelectorBar.SelectedItemProperty);
    }
}

namespace CSharpMarkup.WinUI // SelectorBarItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.SelectorBarItem"/></summary>
        public static SelectorBarItem SelectorBarItem(Xaml.UIElement Child)
        {
            var ui = new Xaml.Controls.SelectorBarItem();
            if (Child is not null) ui.Child = Child;
            return CSharpMarkup.WinUI.SelectorBarItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SelectorBarItem"/></summary>
        public static SelectorBarItem SelectorBarItem(Xaml.Controls.IconElement Icon = default, string Text = default, Xaml.UIElement Child = default)
        {
            var ui = new Xaml.Controls.SelectorBarItem();
            if (Icon is not null) ui.Icon = Icon;
            if (Text is not null) ui.Text = Text;
            if (Child is not null) ui.Child = Child;
            return CSharpMarkup.WinUI.SelectorBarItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SelectorBarItem"/></summary>
        public static SelectorBarItem SelectorBarItem()
        {
            var ui = new Xaml.Controls.SelectorBarItem();
            return CSharpMarkup.WinUI.SelectorBarItem.StartChain(ui);
        }
    }

    public partial class SelectorBarItem : ItemContainer, IUI<Xaml.Controls.SelectorBarItem>
    {
        static SelectorBarItem instance;

        internal static SelectorBarItem StartChain(Xaml.Controls.SelectorBarItem ui)
        {
            if (instance == null) instance = new SelectorBarItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.SelectorBarItem ui;

        public new Xaml.Controls.SelectorBarItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(SelectorBarItem view) => view?.UI;

        public static implicit operator Xaml.Controls.SelectorBarItem(SelectorBarItem view) => view?.UI;

        public static implicit operator SelectorBarItem(Xaml.Controls.SelectorBarItem ui) => SelectorBarItem.StartChain(ui);

        public SelectorBarItem Invoke(Action<Xaml.Controls.SelectorBarItem> action) { action?.Invoke(UI); return this; }

        protected SelectorBarItem() { }
    }

    public static partial class SelectorBarItemExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.SelectorBarItem.Icon"/></summary>
        public static TView Icon<TView>(this TView view, Xaml.Controls.IconElement value) where TView : SelectorBarItem { view.UI.Icon = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SelectorBarItem.Text"/></summary>
        public static TView Text<TView>(this TView view, string value) where TView : SelectorBarItem { view.UI.Text = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SelectorBarItem.Icon"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconElement> Icon<TTarget>(this TTarget target) where TTarget : SelectorBarItem
        => DependencyProperty<TTarget, Xaml.Controls.IconElement>.Get(target, Xaml.Controls.SelectorBarItem.IconProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SelectorBarItem.Text"/></summary>
        public static DependencyProperty<TTarget, string> Text<TTarget>(this TTarget target) where TTarget : SelectorBarItem
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.SelectorBarItem.TextProperty);
    }
}

namespace CSharpMarkup.WinUI // SemanticZoom
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.SemanticZoom"/></summary>
        public static SemanticZoom SemanticZoom(Xaml.Controls.ISemanticZoomInformation ZoomedInView)
        {
            var ui = new Xaml.Controls.SemanticZoom();
            if (ZoomedInView is not null) ui.ZoomedInView = ZoomedInView;
            return CSharpMarkup.WinUI.SemanticZoom.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SemanticZoom"/></summary>
        public static SemanticZoom SemanticZoom(bool? CanChangeViews = default, bool? IsZoomedInViewActive = default, bool? IsZoomOutButtonEnabled = default, Xaml.Controls.ISemanticZoomInformation ZoomedOutView = default, Xaml.Controls.ISemanticZoomInformation ZoomedInView = default)
        {
            var ui = new Xaml.Controls.SemanticZoom();
            if (CanChangeViews is not null) ui.CanChangeViews = CanChangeViews.Value;
            if (IsZoomedInViewActive is not null) ui.IsZoomedInViewActive = IsZoomedInViewActive.Value;
            if (IsZoomOutButtonEnabled is not null) ui.IsZoomOutButtonEnabled = IsZoomOutButtonEnabled.Value;
            if (ZoomedOutView is not null) ui.ZoomedOutView = ZoomedOutView;
            if (ZoomedInView is not null) ui.ZoomedInView = ZoomedInView;
            return CSharpMarkup.WinUI.SemanticZoom.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SemanticZoom"/></summary>
        public static SemanticZoom SemanticZoom()
        {
            var ui = new Xaml.Controls.SemanticZoom();
            return CSharpMarkup.WinUI.SemanticZoom.StartChain(ui);
        }
    }

    public partial class SemanticZoom : Control, IUI<Xaml.Controls.SemanticZoom>
    {
        static SemanticZoom instance;

        internal static SemanticZoom StartChain(Xaml.Controls.SemanticZoom ui)
        {
            if (instance == null) instance = new SemanticZoom();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.SemanticZoom ui;

        public new Xaml.Controls.SemanticZoom UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(SemanticZoom view) => view?.UI;

        public static implicit operator Xaml.Controls.SemanticZoom(SemanticZoom view) => view?.UI;

        public static implicit operator SemanticZoom(Xaml.Controls.SemanticZoom ui) => SemanticZoom.StartChain(ui);

        public SemanticZoom Invoke(Action<Xaml.Controls.SemanticZoom> action) { action?.Invoke(UI); return this; }

        protected SemanticZoom() { }
    }

    public static partial class SemanticZoomExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.SemanticZoom.CanChangeViews"/></summary>
        public static TView CanChangeViews<TView>(this TView view, bool value) where TView : SemanticZoom { view.UI.CanChangeViews = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SemanticZoom.IsZoomedInViewActive"/></summary>
        public static TView IsZoomedInViewActive<TView>(this TView view, bool value) where TView : SemanticZoom { view.UI.IsZoomedInViewActive = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SemanticZoom.IsZoomOutButtonEnabled"/></summary>
        public static TView IsZoomOutButtonEnabled<TView>(this TView view, bool value) where TView : SemanticZoom { view.UI.IsZoomOutButtonEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SemanticZoom.ZoomedOutView"/></summary>
        public static TView ZoomedOutView<TView>(this TView view, Xaml.Controls.ISemanticZoomInformation value) where TView : SemanticZoom { view.UI.ZoomedOutView = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SemanticZoom.CanChangeViews"/></summary>
        public static DependencyProperty<TTarget, bool> CanChangeViews<TTarget>(this TTarget target) where TTarget : SemanticZoom
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.SemanticZoom.CanChangeViewsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SemanticZoom.IsZoomedInViewActive"/></summary>
        public static DependencyProperty<TTarget, bool> IsZoomedInViewActive<TTarget>(this TTarget target) where TTarget : SemanticZoom
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.SemanticZoom.IsZoomedInViewActiveProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SemanticZoom.IsZoomOutButtonEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsZoomOutButtonEnabled<TTarget>(this TTarget target) where TTarget : SemanticZoom
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.SemanticZoom.IsZoomOutButtonEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SemanticZoom.ZoomedInView"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ISemanticZoomInformation> ZoomedInView<TTarget>(this TTarget target) where TTarget : SemanticZoom
        => DependencyProperty<TTarget, Xaml.Controls.ISemanticZoomInformation>.Get(target, Xaml.Controls.SemanticZoom.ZoomedInViewProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SemanticZoom.ZoomedOutView"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.ISemanticZoomInformation> ZoomedOutView<TTarget>(this TTarget target) where TTarget : SemanticZoom
        => DependencyProperty<TTarget, Xaml.Controls.ISemanticZoomInformation>.Get(target, Xaml.Controls.SemanticZoom.ZoomedOutViewProperty);
    }
}

namespace CSharpMarkup.WinUI // Slider
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Slider"/></summary>
        public static Slider Slider(object Header = default, Xaml.DataTemplate HeaderTemplate = default, double? IntermediateValue = default, bool? IsDirectionReversed = default, bool? IsThumbToolTipEnabled = default, Xaml.Controls.Orientation? Orientation = default, Xaml.Controls.Primitives.SliderSnapsTo? SnapsTo = default, double? StepFrequency = default, Xaml.Data.IValueConverter ThumbToolTipValueConverter = default, double? TickFrequency = default, Xaml.Controls.Primitives.TickPlacement? TickPlacement = default)
        {
            var ui = new Xaml.Controls.Slider();
            if (Header is not null) ui.Header = Header;
            if (HeaderTemplate is not null) ui.HeaderTemplate = HeaderTemplate;
            if (IntermediateValue is not null) ui.IntermediateValue = IntermediateValue.Value;
            if (IsDirectionReversed is not null) ui.IsDirectionReversed = IsDirectionReversed.Value;
            if (IsThumbToolTipEnabled is not null) ui.IsThumbToolTipEnabled = IsThumbToolTipEnabled.Value;
            if (Orientation is not null) ui.Orientation = Orientation.Value;
            if (SnapsTo is not null) ui.SnapsTo = SnapsTo.Value;
            if (StepFrequency is not null) ui.StepFrequency = StepFrequency.Value;
            if (ThumbToolTipValueConverter is not null) ui.ThumbToolTipValueConverter = ThumbToolTipValueConverter;
            if (TickFrequency is not null) ui.TickFrequency = TickFrequency.Value;
            if (TickPlacement is not null) ui.TickPlacement = TickPlacement.Value;
            return CSharpMarkup.WinUI.Slider.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Slider"/></summary>
        public static Slider Slider()
        {
            var ui = new Xaml.Controls.Slider();
            return CSharpMarkup.WinUI.Slider.StartChain(ui);
        }
    }

    public partial class Slider : RangeBase, IUI<Xaml.Controls.Slider>
    {
        static Slider instance;

        internal static Slider StartChain(Xaml.Controls.Slider ui)
        {
            if (instance == null) instance = new Slider();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Slider ui;

        public new Xaml.Controls.Slider UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Slider view) => view?.UI;

        public static implicit operator Xaml.Controls.Slider(Slider view) => view?.UI;

        public static implicit operator Slider(Xaml.Controls.Slider ui) => Slider.StartChain(ui);

        public Slider Invoke(Action<Xaml.Controls.Slider> action) { action?.Invoke(UI); return this; }

        protected Slider() { }
    }

    public static partial class SliderExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Slider.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : Slider { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Slider.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : Slider { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Slider.IntermediateValue"/></summary>
        public static TView IntermediateValue<TView>(this TView view, double value) where TView : Slider { view.UI.IntermediateValue = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Slider.IsDirectionReversed"/></summary>
        public static TView IsDirectionReversed<TView>(this TView view, bool value) where TView : Slider { view.UI.IsDirectionReversed = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Slider.IsThumbToolTipEnabled"/></summary>
        public static TView IsThumbToolTipEnabled<TView>(this TView view, bool value) where TView : Slider { view.UI.IsThumbToolTipEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Slider.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.Orientation value) where TView : Slider { view.UI.Orientation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Slider.SnapsTo"/></summary>
        public static TView SnapsTo<TView>(this TView view, Xaml.Controls.Primitives.SliderSnapsTo value) where TView : Slider { view.UI.SnapsTo = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Slider.StepFrequency"/></summary>
        public static TView StepFrequency<TView>(this TView view, double value) where TView : Slider { view.UI.StepFrequency = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Slider.ThumbToolTipValueConverter"/></summary>
        public static TView ThumbToolTipValueConverter<TView>(this TView view, Xaml.Data.IValueConverter value) where TView : Slider { view.UI.ThumbToolTipValueConverter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Slider.TickFrequency"/></summary>
        public static TView TickFrequency<TView>(this TView view, double value) where TView : Slider { view.UI.TickFrequency = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Slider.TickPlacement"/></summary>
        public static TView TickPlacement<TView>(this TView view, Xaml.Controls.Primitives.TickPlacement value) where TView : Slider { view.UI.TickPlacement = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Slider.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : Slider
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.Slider.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Slider.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : Slider
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.Slider.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Slider.IntermediateValue"/></summary>
        public static DependencyProperty<TTarget, double> IntermediateValue<TTarget>(this TTarget target) where TTarget : Slider
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Slider.IntermediateValueProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Slider.IsDirectionReversed"/></summary>
        public static DependencyProperty<TTarget, bool> IsDirectionReversed<TTarget>(this TTarget target) where TTarget : Slider
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Slider.IsDirectionReversedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Slider.IsThumbToolTipEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsThumbToolTipEnabled<TTarget>(this TTarget target) where TTarget : Slider
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.Slider.IsThumbToolTipEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Slider.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Orientation> Orientation<TTarget>(this TTarget target) where TTarget : Slider
        => DependencyProperty<TTarget, Xaml.Controls.Orientation>.Get(target, Xaml.Controls.Slider.OrientationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Slider.SnapsTo"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.SliderSnapsTo> SnapsTo<TTarget>(this TTarget target) where TTarget : Slider
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.SliderSnapsTo>.Get(target, Xaml.Controls.Slider.SnapsToProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Slider.StepFrequency"/></summary>
        public static DependencyProperty<TTarget, double> StepFrequency<TTarget>(this TTarget target) where TTarget : Slider
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Slider.StepFrequencyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Slider.ThumbToolTipValueConverter"/></summary>
        public static DependencyProperty<TTarget, Xaml.Data.IValueConverter> ThumbToolTipValueConverter<TTarget>(this TTarget target) where TTarget : Slider
        => DependencyProperty<TTarget, Xaml.Data.IValueConverter>.Get(target, Xaml.Controls.Slider.ThumbToolTipValueConverterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Slider.TickFrequency"/></summary>
        public static DependencyProperty<TTarget, double> TickFrequency<TTarget>(this TTarget target) where TTarget : Slider
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.Slider.TickFrequencyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Slider.TickPlacement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.TickPlacement> TickPlacement<TTarget>(this TTarget target) where TTarget : Slider
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.TickPlacement>.Get(target, Xaml.Controls.Slider.TickPlacementProperty);
    }
}

namespace CSharpMarkup.WinUI // SplitButton
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.SplitButton"/></summary>
        /// <remarks>Remark: SplitButton().Bind() binds to <see cref="Xaml.Controls.SplitButton.CommandProperty"/></remarks>
        public static SplitButton SplitButton(UIObject Content)
        {
            var ui = new Xaml.Controls.SplitButton();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.SplitButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SplitButton"/></summary>
        /// <remarks>Remark: SplitButton().Bind() binds to <see cref="Xaml.Controls.SplitButton.CommandProperty"/></remarks>
        public static SplitButton SplitButton(ICommand Command = default, object CommandParameter = default, Xaml.Controls.Primitives.FlyoutBase Flyout = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.SplitButton();
            if (Command is not null) ui.Command = Command;
            if (CommandParameter is not null) ui.CommandParameter = CommandParameter;
            if (Flyout is not null) ui.Flyout = Flyout;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.SplitButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SplitButton"/></summary>
        /// <remarks>Remark: SplitButton().Bind() binds to <see cref="Xaml.Controls.SplitButton.CommandProperty"/></remarks>
        public static SplitButton SplitButton()
        {
            var ui = new Xaml.Controls.SplitButton();
            return CSharpMarkup.WinUI.SplitButton.StartChain(ui);
        }
    }

    public partial class SplitButton : ContentControl, IUI<Xaml.Controls.SplitButton>, IDefaultBindProperty
    {
        static SplitButton instance;

        internal static SplitButton StartChain(Xaml.Controls.SplitButton ui)
        {
            if (instance == null) instance = new SplitButton();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.SplitButton ui;

        public new Xaml.Controls.SplitButton UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.SplitButton.CommandProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.SplitButton.CommandProperty;

        public static implicit operator Xaml.UIElement(SplitButton view) => view?.UI;

        public static implicit operator Xaml.Controls.SplitButton(SplitButton view) => view?.UI;

        public static implicit operator SplitButton(Xaml.Controls.SplitButton ui) => SplitButton.StartChain(ui);

        public SplitButton Invoke(Action<Xaml.Controls.SplitButton> action) { action?.Invoke(UI); return this; }

        protected SplitButton() { }
    }

    public static partial class SplitButtonExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.SplitButton.Command"/></summary>
        public static TView Command<TView>(this TView view, ICommand value) where TView : SplitButton { view.UI.Command = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SplitButton.CommandParameter"/></summary>
        public static TView CommandParameter<TView>(this TView view, object value) where TView : SplitButton { view.UI.CommandParameter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SplitButton.Flyout"/></summary>
        public static TView Flyout<TView>(this TView view, Xaml.Controls.Primitives.FlyoutBase value) where TView : SplitButton { view.UI.Flyout = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SplitButton.CommandParameter"/></summary>
        public static DependencyProperty<TTarget, object> CommandParameter<TTarget>(this TTarget target) where TTarget : SplitButton
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.SplitButton.CommandParameterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SplitButton.Command"/></summary>
        public static DependencyProperty<TTarget, ICommand> Command<TTarget>(this TTarget target) where TTarget : SplitButton
        => DependencyProperty<TTarget, ICommand>.Get(target, Xaml.Controls.SplitButton.CommandProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SplitButton.Flyout"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase> Flyout<TTarget>(this TTarget target) where TTarget : SplitButton
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase>.Get(target, Xaml.Controls.SplitButton.FlyoutProperty);
    }
}

namespace CSharpMarkup.WinUI // SplitView
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.SplitView"/></summary>
        public static SplitView SplitView(Xaml.UIElement Content)
        {
            var ui = new Xaml.Controls.SplitView();
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.SplitView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SplitView"/></summary>
        public static SplitView SplitView(double? CompactPaneLength = default, Xaml.Controls.SplitViewDisplayMode? DisplayMode = default, bool? IsPaneOpen = default, Xaml.Controls.LightDismissOverlayMode? LightDismissOverlayMode = default, double? OpenPaneLength = default, Xaml.UIElement Pane = default, Xaml.Media.Brush PaneBackground = default, Xaml.Controls.SplitViewPanePlacement? PanePlacement = default, Xaml.UIElement Content = default)
        {
            var ui = new Xaml.Controls.SplitView();
            if (CompactPaneLength is not null) ui.CompactPaneLength = CompactPaneLength.Value;
            if (DisplayMode is not null) ui.DisplayMode = DisplayMode.Value;
            if (IsPaneOpen is not null) ui.IsPaneOpen = IsPaneOpen.Value;
            if (LightDismissOverlayMode is not null) ui.LightDismissOverlayMode = LightDismissOverlayMode.Value;
            if (OpenPaneLength is not null) ui.OpenPaneLength = OpenPaneLength.Value;
            if (Pane is not null) ui.Pane = Pane;
            if (PaneBackground is not null) ui.PaneBackground = PaneBackground;
            if (PanePlacement is not null) ui.PanePlacement = PanePlacement.Value;
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.SplitView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SplitView"/></summary>
        public static SplitView SplitView()
        {
            var ui = new Xaml.Controls.SplitView();
            return CSharpMarkup.WinUI.SplitView.StartChain(ui);
        }
    }

    public partial class SplitView : Control, IUI<Xaml.Controls.SplitView>
    {
        static SplitView instance;

        internal static SplitView StartChain(Xaml.Controls.SplitView ui)
        {
            if (instance == null) instance = new SplitView();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.SplitView ui;

        public new Xaml.Controls.SplitView UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(SplitView view) => view?.UI;

        public static implicit operator Xaml.Controls.SplitView(SplitView view) => view?.UI;

        public static implicit operator SplitView(Xaml.Controls.SplitView ui) => SplitView.StartChain(ui);

        public SplitView Invoke(Action<Xaml.Controls.SplitView> action) { action?.Invoke(UI); return this; }

        protected SplitView() { }
    }

    public static partial class SplitViewExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.SplitView.CompactPaneLength"/></summary>
        public static TView CompactPaneLength<TView>(this TView view, double value) where TView : SplitView { view.UI.CompactPaneLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SplitView.DisplayMode"/></summary>
        public static TView DisplayMode<TView>(this TView view, Xaml.Controls.SplitViewDisplayMode value) where TView : SplitView { view.UI.DisplayMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SplitView.IsPaneOpen"/></summary>
        public static TView IsPaneOpen<TView>(this TView view, bool value) where TView : SplitView { view.UI.IsPaneOpen = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SplitView.LightDismissOverlayMode"/></summary>
        public static TView LightDismissOverlayMode<TView>(this TView view, Xaml.Controls.LightDismissOverlayMode value) where TView : SplitView { view.UI.LightDismissOverlayMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SplitView.OpenPaneLength"/></summary>
        public static TView OpenPaneLength<TView>(this TView view, double value) where TView : SplitView { view.UI.OpenPaneLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SplitView.Pane"/></summary>
        public static TView Pane<TView>(this TView view, Xaml.UIElement value) where TView : SplitView { view.UI.Pane = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SplitView.PaneBackground"/></summary>
        public static TView PaneBackground<TView>(this TView view, Xaml.Media.Brush value) where TView : SplitView { view.UI.PaneBackground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SplitView.PaneBackground"/></summary>
        public static TView PaneBackground<TView>(this TView view, Windows.UI.Color value) where TView : SplitView { view.UI.PaneBackground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.SplitView.PaneBackground"/></summary>
        public static TView PaneBackground<TView>(this TView view, string color) where TView : SplitView { view.UI.PaneBackground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.SplitView.PanePlacement"/></summary>
        public static TView PanePlacement<TView>(this TView view, Xaml.Controls.SplitViewPanePlacement value) where TView : SplitView { view.UI.PanePlacement = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SplitView.CompactPaneLength"/></summary>
        public static DependencyProperty<TTarget, double> CompactPaneLength<TTarget>(this TTarget target) where TTarget : SplitView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.SplitView.CompactPaneLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SplitView.Content"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Content<TTarget>(this TTarget target) where TTarget : SplitView
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.SplitView.ContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SplitView.DisplayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SplitViewDisplayMode> DisplayMode<TTarget>(this TTarget target) where TTarget : SplitView
        => DependencyProperty<TTarget, Xaml.Controls.SplitViewDisplayMode>.Get(target, Xaml.Controls.SplitView.DisplayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SplitView.IsPaneOpen"/></summary>
        public static DependencyProperty<TTarget, bool> IsPaneOpen<TTarget>(this TTarget target) where TTarget : SplitView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.SplitView.IsPaneOpenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SplitView.LightDismissOverlayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> LightDismissOverlayMode<TTarget>(this TTarget target) where TTarget : SplitView
        => DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode>.Get(target, Xaml.Controls.SplitView.LightDismissOverlayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SplitView.OpenPaneLength"/></summary>
        public static DependencyProperty<TTarget, double> OpenPaneLength<TTarget>(this TTarget target) where TTarget : SplitView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.SplitView.OpenPaneLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SplitView.PaneBackground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> PaneBackground<TTarget>(this TTarget target) where TTarget : SplitView
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.SplitView.PaneBackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SplitView.PanePlacement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SplitViewPanePlacement> PanePlacement<TTarget>(this TTarget target) where TTarget : SplitView
        => DependencyProperty<TTarget, Xaml.Controls.SplitViewPanePlacement>.Get(target, Xaml.Controls.SplitView.PanePlacementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SplitView.Pane"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Pane<TTarget>(this TTarget target) where TTarget : SplitView
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.SplitView.PaneProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SplitView.TemplateSettings"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.SplitViewTemplateSettings> TemplateSettings<TTarget>(this TTarget target) where TTarget : SplitView
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.SplitViewTemplateSettings>.Get(target, Xaml.Controls.SplitView.TemplateSettingsProperty);
    }
}

namespace CSharpMarkup.WinUI // StackLayout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.StackLayout"/></summary>
        public static StackLayout StackLayout(Xaml.Controls.Orientation? Orientation = default, double? Spacing = default)
        {
            var ui = new Xaml.Controls.StackLayout();
            if (Orientation is not null) ui.Orientation = Orientation.Value;
            if (Spacing is not null) ui.Spacing = Spacing.Value;
            return CSharpMarkup.WinUI.StackLayout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.StackLayout"/></summary>
        public static StackLayout StackLayout()
        {
            var ui = new Xaml.Controls.StackLayout();
            return CSharpMarkup.WinUI.StackLayout.StartChain(ui);
        }
    }

    public partial class StackLayout : VirtualizingLayout, IUI<Xaml.Controls.StackLayout>
    {
        static StackLayout instance;

        internal static StackLayout StartChain(Xaml.Controls.StackLayout ui)
        {
            if (instance == null) instance = new StackLayout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.StackLayout ui;

        public new Xaml.Controls.StackLayout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.StackLayout(StackLayout view) => view?.UI;

        public static implicit operator StackLayout(Xaml.Controls.StackLayout ui) => StackLayout.StartChain(ui);

        public StackLayout Invoke(Action<Xaml.Controls.StackLayout> action) { action?.Invoke(UI); return this; }

        protected StackLayout() { }
    }

    public static partial class StackLayoutExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.StackLayout.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.Orientation value) where TView : StackLayout { view.UI.Orientation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackLayout.Spacing"/></summary>
        public static TView Spacing<TView>(this TView view, double value) where TView : StackLayout { view.UI.Spacing = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.StackLayout.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Orientation> Orientation<TTarget>(this TTarget target) where TTarget : StackLayout
        => DependencyProperty<TTarget, Xaml.Controls.Orientation>.Get(target, Xaml.Controls.StackLayout.OrientationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.StackLayout.Spacing"/></summary>
        public static DependencyProperty<TTarget, double> Spacing<TTarget>(this TTarget target) where TTarget : StackLayout
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.StackLayout.SpacingProperty);
    }
}

namespace CSharpMarkup.WinUI // StackPanel
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.StackPanel"/></summary>
        public static StackPanel StackPanel(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.StackPanel();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.StackPanel.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.StackPanel"/></summary>
        public static StackPanel StackPanel()
        {
            var ui = new Xaml.Controls.StackPanel();
            return CSharpMarkup.WinUI.StackPanel.StartChain(ui);
        }
    }

    public partial class StackPanel : Panel, IUI<Xaml.Controls.StackPanel>
    {
        static StackPanel instance;

        internal static StackPanel StartChain(Xaml.Controls.StackPanel ui)
        {
            if (instance == null) instance = new StackPanel();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.StackPanel ui;

        public new Xaml.Controls.StackPanel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(StackPanel view) => view?.UI;

        public static implicit operator Xaml.Controls.StackPanel(StackPanel view) => view?.UI;

        public static implicit operator StackPanel(Xaml.Controls.StackPanel ui) => StackPanel.StartChain(ui);

        public StackPanel Invoke(Action<Xaml.Controls.StackPanel> action) { action?.Invoke(UI); return this; }

        protected StackPanel() { }
    }

    public static partial class StackPanelExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.StackPanel.AreScrollSnapPointsRegular"/></summary>
        public static TView AreScrollSnapPointsRegular<TView>(this TView view, bool value) where TView : StackPanel { view.UI.AreScrollSnapPointsRegular = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.BackgroundSizing"/></summary>
        public static TView BackgroundSizing<TView>(this TView view, Xaml.Controls.BackgroundSizing value) where TView : StackPanel { view.UI.BackgroundSizing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : StackPanel { view.UI.BorderBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, Windows.UI.Color value) where TView : StackPanel { view.UI.BorderBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.BorderBrush"/></summary>
        public static TView BorderBrush<TView>(this TView view, string color) where TView : StackPanel { view.UI.BorderBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, Xaml.Thickness value) where TView : StackPanel { view.UI.BorderThickness = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double uniform) where TView : StackPanel { view.UI.BorderThickness = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double horizontal, double vertical) where TView : StackPanel { view.UI.BorderThickness = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.BorderThickness"/></summary>
        public static TView BorderThickness<TView>(this TView view, double left, double top, double right, double bottom) where TView : StackPanel { view.UI.BorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.BorderThickness"/></summary>
        public static TView BorderThicknesses<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : StackPanel { view.UI.BorderThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.CornerRadius"/></summary>
        public static TView CornerRadius<TView>(this TView view, CSharpMarkup.WinUI.to.CornerRadius value) where TView : StackPanel { view.UI.CornerRadius = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.Orientation value) where TView : StackPanel { view.UI.Orientation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.Padding"/></summary>
        public static TView Padding<TView>(this TView view, Xaml.Thickness value) where TView : StackPanel { view.UI.Padding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double uniform) where TView : StackPanel { view.UI.Padding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double horizontal, double vertical) where TView : StackPanel { view.UI.Padding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double left, double top, double right, double bottom) where TView : StackPanel { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.Padding"/></summary>
        public static TView Paddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : StackPanel { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.StackPanel.Spacing"/></summary>
        public static TView Spacing<TView>(this TView view, double value) where TView : StackPanel { view.UI.Spacing = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.StackPanel.AreScrollSnapPointsRegular"/></summary>
        public static DependencyProperty<TTarget, bool> AreScrollSnapPointsRegular<TTarget>(this TTarget target) where TTarget : StackPanel
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.StackPanel.AreScrollSnapPointsRegularProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.StackPanel.BackgroundSizing"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> BackgroundSizing<TTarget>(this TTarget target) where TTarget : StackPanel
        => DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing>.Get(target, Xaml.Controls.StackPanel.BackgroundSizingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.StackPanel.BorderBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> BorderBrush<TTarget>(this TTarget target) where TTarget : StackPanel
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.StackPanel.BorderBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.StackPanel.BorderThickness"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> BorderThickness<TTarget>(this TTarget target) where TTarget : StackPanel
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.StackPanel.BorderThicknessProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.StackPanel.CornerRadius"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius> CornerRadius<TTarget>(this TTarget target) where TTarget : StackPanel
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.CornerRadius>.Get(target, Xaml.Controls.StackPanel.CornerRadiusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.StackPanel.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Orientation> Orientation<TTarget>(this TTarget target) where TTarget : StackPanel
        => DependencyProperty<TTarget, Xaml.Controls.Orientation>.Get(target, Xaml.Controls.StackPanel.OrientationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.StackPanel.Padding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> Padding<TTarget>(this TTarget target) where TTarget : StackPanel
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.StackPanel.PaddingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.StackPanel.Spacing"/></summary>
        public static DependencyProperty<TTarget, double> Spacing<TTarget>(this TTarget target) where TTarget : StackPanel
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.StackPanel.SpacingProperty);
    }
}

namespace CSharpMarkup.WinUI // SwapChainBackgroundPanel
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.SwapChainBackgroundPanel"/></summary>
        public static SwapChainBackgroundPanel SwapChainBackgroundPanel(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.SwapChainBackgroundPanel();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.SwapChainBackgroundPanel.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SwapChainBackgroundPanel"/></summary>
        public static SwapChainBackgroundPanel SwapChainBackgroundPanel()
        {
            var ui = new Xaml.Controls.SwapChainBackgroundPanel();
            return CSharpMarkup.WinUI.SwapChainBackgroundPanel.StartChain(ui);
        }
    }

    public partial class SwapChainBackgroundPanel : Grid, IUI<Xaml.Controls.SwapChainBackgroundPanel>
    {
        static SwapChainBackgroundPanel instance;

        internal static SwapChainBackgroundPanel StartChain(Xaml.Controls.SwapChainBackgroundPanel ui)
        {
            if (instance == null) instance = new SwapChainBackgroundPanel();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.SwapChainBackgroundPanel ui;

        public new Xaml.Controls.SwapChainBackgroundPanel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(SwapChainBackgroundPanel view) => view?.UI;

        public static implicit operator Xaml.Controls.SwapChainBackgroundPanel(SwapChainBackgroundPanel view) => view?.UI;

        public static implicit operator SwapChainBackgroundPanel(Xaml.Controls.SwapChainBackgroundPanel ui) => SwapChainBackgroundPanel.StartChain(ui);

        public SwapChainBackgroundPanel Invoke(Action<Xaml.Controls.SwapChainBackgroundPanel> action) { action?.Invoke(UI); return this; }

        protected SwapChainBackgroundPanel() { }
    }
}

namespace CSharpMarkup.WinUI // SwapChainPanel
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.SwapChainPanel"/></summary>
        public static SwapChainPanel SwapChainPanel(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.SwapChainPanel();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.SwapChainPanel.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SwapChainPanel"/></summary>
        public static SwapChainPanel SwapChainPanel()
        {
            var ui = new Xaml.Controls.SwapChainPanel();
            return CSharpMarkup.WinUI.SwapChainPanel.StartChain(ui);
        }
    }

    public partial class SwapChainPanel : Grid, IUI<Xaml.Controls.SwapChainPanel>
    {
        static SwapChainPanel instance;

        internal static SwapChainPanel StartChain(Xaml.Controls.SwapChainPanel ui)
        {
            if (instance == null) instance = new SwapChainPanel();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.SwapChainPanel ui;

        public new Xaml.Controls.SwapChainPanel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(SwapChainPanel view) => view?.UI;

        public static implicit operator Xaml.Controls.SwapChainPanel(SwapChainPanel view) => view?.UI;

        public static implicit operator SwapChainPanel(Xaml.Controls.SwapChainPanel ui) => SwapChainPanel.StartChain(ui);

        public SwapChainPanel Invoke(Action<Xaml.Controls.SwapChainPanel> action) { action?.Invoke(UI); return this; }

        protected SwapChainPanel() { }
    }

    public static partial class SwapChainPanelExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SwapChainPanel.CompositionScaleX"/></summary>
        public static DependencyProperty<TTarget, float> CompositionScaleX<TTarget>(this TTarget target) where TTarget : SwapChainPanel
        => DependencyProperty<TTarget, float>.Get(target, Xaml.Controls.SwapChainPanel.CompositionScaleXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SwapChainPanel.CompositionScaleY"/></summary>
        public static DependencyProperty<TTarget, float> CompositionScaleY<TTarget>(this TTarget target) where TTarget : SwapChainPanel
        => DependencyProperty<TTarget, float>.Get(target, Xaml.Controls.SwapChainPanel.CompositionScaleYProperty);
    }
}

namespace CSharpMarkup.WinUI // SwipeControl
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.SwipeControl"/></summary>
        public static SwipeControl SwipeControl(UIObject Content)
        {
            var ui = new Xaml.Controls.SwipeControl();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.SwipeControl.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SwipeControl"/></summary>
        public static SwipeControl SwipeControl(Xaml.Controls.SwipeItems BottomItems = default, Xaml.Controls.SwipeItems LeftItems = default, Xaml.Controls.SwipeItems RightItems = default, Xaml.Controls.SwipeItems TopItems = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.SwipeControl();
            if (BottomItems is not null) ui.BottomItems = BottomItems;
            if (LeftItems is not null) ui.LeftItems = LeftItems;
            if (RightItems is not null) ui.RightItems = RightItems;
            if (TopItems is not null) ui.TopItems = TopItems;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.SwipeControl.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SwipeControl"/></summary>
        public static SwipeControl SwipeControl()
        {
            var ui = new Xaml.Controls.SwipeControl();
            return CSharpMarkup.WinUI.SwipeControl.StartChain(ui);
        }
    }

    public partial class SwipeControl : ContentControl, IUI<Xaml.Controls.SwipeControl>
    {
        static SwipeControl instance;

        internal static SwipeControl StartChain(Xaml.Controls.SwipeControl ui)
        {
            if (instance == null) instance = new SwipeControl();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.SwipeControl ui;

        public new Xaml.Controls.SwipeControl UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(SwipeControl view) => view?.UI;

        public static implicit operator Xaml.Controls.SwipeControl(SwipeControl view) => view?.UI;

        public static implicit operator SwipeControl(Xaml.Controls.SwipeControl ui) => SwipeControl.StartChain(ui);

        public SwipeControl Invoke(Action<Xaml.Controls.SwipeControl> action) { action?.Invoke(UI); return this; }

        protected SwipeControl() { }
    }

    public static partial class SwipeControlExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.SwipeControl.BottomItems"/></summary>
        public static TView BottomItems<TView>(this TView view, Xaml.Controls.SwipeItems value) where TView : SwipeControl { view.UI.BottomItems = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SwipeControl.LeftItems"/></summary>
        public static TView LeftItems<TView>(this TView view, Xaml.Controls.SwipeItems value) where TView : SwipeControl { view.UI.LeftItems = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SwipeControl.RightItems"/></summary>
        public static TView RightItems<TView>(this TView view, Xaml.Controls.SwipeItems value) where TView : SwipeControl { view.UI.RightItems = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SwipeControl.TopItems"/></summary>
        public static TView TopItems<TView>(this TView view, Xaml.Controls.SwipeItems value) where TView : SwipeControl { view.UI.TopItems = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SwipeControl.BottomItems"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SwipeItems> BottomItems<TTarget>(this TTarget target) where TTarget : SwipeControl
        => DependencyProperty<TTarget, Xaml.Controls.SwipeItems>.Get(target, Xaml.Controls.SwipeControl.BottomItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SwipeControl.LeftItems"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SwipeItems> LeftItems<TTarget>(this TTarget target) where TTarget : SwipeControl
        => DependencyProperty<TTarget, Xaml.Controls.SwipeItems>.Get(target, Xaml.Controls.SwipeControl.LeftItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SwipeControl.RightItems"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SwipeItems> RightItems<TTarget>(this TTarget target) where TTarget : SwipeControl
        => DependencyProperty<TTarget, Xaml.Controls.SwipeItems>.Get(target, Xaml.Controls.SwipeControl.RightItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SwipeControl.TopItems"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SwipeItems> TopItems<TTarget>(this TTarget target) where TTarget : SwipeControl
        => DependencyProperty<TTarget, Xaml.Controls.SwipeItems>.Get(target, Xaml.Controls.SwipeControl.TopItemsProperty);
    }
}

namespace CSharpMarkup.WinUI // SwipeItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.SwipeItem"/></summary>
        /// <remarks>Remark: SwipeItem().Bind() binds to <see cref="Xaml.Controls.SwipeItem.CommandProperty"/></remarks>
        public static SwipeItem SwipeItem(Xaml.Media.Brush Background = default, Xaml.Controls.SwipeBehaviorOnInvoked? BehaviorOnInvoked = default, ICommand Command = default, object CommandParameter = default, Xaml.Media.Brush Foreground = default, Xaml.Controls.IconSource IconSource = default, string Text = default)
        {
            var ui = new Xaml.Controls.SwipeItem();
            if (Background is not null) ui.Background = Background;
            if (BehaviorOnInvoked is not null) ui.BehaviorOnInvoked = BehaviorOnInvoked.Value;
            if (Command is not null) ui.Command = Command;
            if (CommandParameter is not null) ui.CommandParameter = CommandParameter;
            if (Foreground is not null) ui.Foreground = Foreground;
            if (IconSource is not null) ui.IconSource = IconSource;
            if (Text is not null) ui.Text = Text;
            return CSharpMarkup.WinUI.SwipeItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SwipeItem"/></summary>
        /// <remarks>Remark: SwipeItem().Bind() binds to <see cref="Xaml.Controls.SwipeItem.CommandProperty"/></remarks>
        public static SwipeItem SwipeItem()
        {
            var ui = new Xaml.Controls.SwipeItem();
            return CSharpMarkup.WinUI.SwipeItem.StartChain(ui);
        }
    }

    public partial class SwipeItem : DependencyObject, IUI<Xaml.Controls.SwipeItem>, IDefaultBindProperty
    {
        static SwipeItem instance;

        internal static SwipeItem StartChain(Xaml.Controls.SwipeItem ui)
        {
            if (instance == null) instance = new SwipeItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.SwipeItem ui;

        public new Xaml.Controls.SwipeItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.SwipeItem.CommandProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.SwipeItem.CommandProperty;

        public static implicit operator Xaml.Controls.SwipeItem(SwipeItem view) => view?.UI;

        public static implicit operator SwipeItem(Xaml.Controls.SwipeItem ui) => SwipeItem.StartChain(ui);

        public SwipeItem Invoke(Action<Xaml.Controls.SwipeItem> action) { action?.Invoke(UI); return this; }

        protected SwipeItem() { }
    }

    public static partial class SwipeItemExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.SwipeItem.Background"/></summary>
        public static TView Background<TView>(this TView view, Xaml.Media.Brush value) where TView : SwipeItem { view.UI.Background = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SwipeItem.Background"/></summary>
        public static TView Background<TView>(this TView view, Windows.UI.Color value) where TView : SwipeItem { view.UI.Background = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.SwipeItem.Background"/></summary>
        public static TView Background<TView>(this TView view, string color) where TView : SwipeItem { view.UI.Background = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.SwipeItem.BehaviorOnInvoked"/></summary>
        public static TView BehaviorOnInvoked<TView>(this TView view, Xaml.Controls.SwipeBehaviorOnInvoked value) where TView : SwipeItem { view.UI.BehaviorOnInvoked = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SwipeItem.Command"/></summary>
        public static TView Command<TView>(this TView view, ICommand value) where TView : SwipeItem { view.UI.Command = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SwipeItem.CommandParameter"/></summary>
        public static TView CommandParameter<TView>(this TView view, object value) where TView : SwipeItem { view.UI.CommandParameter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SwipeItem.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Xaml.Media.Brush value) where TView : SwipeItem { view.UI.Foreground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SwipeItem.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Windows.UI.Color value) where TView : SwipeItem { view.UI.Foreground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.SwipeItem.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, string color) where TView : SwipeItem { view.UI.Foreground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.SwipeItem.IconSource"/></summary>
        public static TView IconSource<TView>(this TView view, Xaml.Controls.IconSource value) where TView : SwipeItem { view.UI.IconSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.SwipeItem.Text"/></summary>
        public static TView Text<TView>(this TView view, string value) where TView : SwipeItem { view.UI.Text = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SwipeItem.Background"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Background<TTarget>(this TTarget target) where TTarget : SwipeItem
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.SwipeItem.BackgroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SwipeItem.BehaviorOnInvoked"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SwipeBehaviorOnInvoked> BehaviorOnInvoked<TTarget>(this TTarget target) where TTarget : SwipeItem
        => DependencyProperty<TTarget, Xaml.Controls.SwipeBehaviorOnInvoked>.Get(target, Xaml.Controls.SwipeItem.BehaviorOnInvokedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SwipeItem.CommandParameter"/></summary>
        public static DependencyProperty<TTarget, object> CommandParameter<TTarget>(this TTarget target) where TTarget : SwipeItem
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.SwipeItem.CommandParameterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SwipeItem.Command"/></summary>
        public static DependencyProperty<TTarget, ICommand> Command<TTarget>(this TTarget target) where TTarget : SwipeItem
        => DependencyProperty<TTarget, ICommand>.Get(target, Xaml.Controls.SwipeItem.CommandProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SwipeItem.Foreground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Foreground<TTarget>(this TTarget target) where TTarget : SwipeItem
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.SwipeItem.ForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SwipeItem.IconSource"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconSource> IconSource<TTarget>(this TTarget target) where TTarget : SwipeItem
        => DependencyProperty<TTarget, Xaml.Controls.IconSource>.Get(target, Xaml.Controls.SwipeItem.IconSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SwipeItem.Text"/></summary>
        public static DependencyProperty<TTarget, string> Text<TTarget>(this TTarget target) where TTarget : SwipeItem
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.SwipeItem.TextProperty);
    }
}

namespace CSharpMarkup.WinUI // SwipeItems
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.SwipeItems"/></summary>
        public static SwipeItems SwipeItems(Xaml.Controls.SwipeMode? Mode = default)
        {
            var ui = new Xaml.Controls.SwipeItems();
            if (Mode is not null) ui.Mode = Mode.Value;
            return CSharpMarkup.WinUI.SwipeItems.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SwipeItems"/></summary>
        public static SwipeItems SwipeItems()
        {
            var ui = new Xaml.Controls.SwipeItems();
            return CSharpMarkup.WinUI.SwipeItems.StartChain(ui);
        }
    }

    public partial class SwipeItems : DependencyObject, IUI<Xaml.Controls.SwipeItems>
    {
        static SwipeItems instance;

        internal static SwipeItems StartChain(Xaml.Controls.SwipeItems ui)
        {
            if (instance == null) instance = new SwipeItems();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.SwipeItems ui;

        public new Xaml.Controls.SwipeItems UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.SwipeItems(SwipeItems view) => view?.UI;

        public static implicit operator SwipeItems(Xaml.Controls.SwipeItems ui) => SwipeItems.StartChain(ui);

        public SwipeItems Invoke(Action<Xaml.Controls.SwipeItems> action) { action?.Invoke(UI); return this; }

        protected SwipeItems() { }
    }

    public static partial class SwipeItemsExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.SwipeItems.Mode"/></summary>
        public static TView Mode<TView>(this TView view, Xaml.Controls.SwipeMode value) where TView : SwipeItems { view.UI.Mode = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SwipeItems.Mode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.SwipeMode> Mode<TTarget>(this TTarget target) where TTarget : SwipeItems
        => DependencyProperty<TTarget, Xaml.Controls.SwipeMode>.Get(target, Xaml.Controls.SwipeItems.ModeProperty);
    }
}

namespace CSharpMarkup.WinUI // SymbolIcon
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.SymbolIcon"/></summary>
        /// <remarks>Remark: SymbolIcon().Bind() binds to <see cref="Xaml.Controls.SymbolIcon.SymbolProperty"/></remarks>
        public static SymbolIcon SymbolIcon(Xaml.Controls.Symbol? Symbol = default)
        {
            var ui = new Xaml.Controls.SymbolIcon();
            if (Symbol is not null) ui.Symbol = Symbol.Value;
            return CSharpMarkup.WinUI.SymbolIcon.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SymbolIcon"/></summary>
        /// <remarks>Remark: SymbolIcon().Bind() binds to <see cref="Xaml.Controls.SymbolIcon.SymbolProperty"/></remarks>
        public static SymbolIcon SymbolIcon()
        {
            var ui = new Xaml.Controls.SymbolIcon();
            return CSharpMarkup.WinUI.SymbolIcon.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SymbolIcon"/></summary>
        /// <remarks>Remark: SymbolIcon().Bind() binds to <see cref="Xaml.Controls.SymbolIcon.SymbolProperty"/></remarks>
        public static SymbolIcon SymbolIcon(Xaml.Controls.Symbol symbol)
        {
            var ui = new Xaml.Controls.SymbolIcon(symbol);
            return CSharpMarkup.WinUI.SymbolIcon.StartChain(ui);
        }
    }

    public partial class SymbolIcon : IconElement, IUI<Xaml.Controls.SymbolIcon>, IDefaultBindProperty
    {
        static SymbolIcon instance;

        internal static SymbolIcon StartChain(Xaml.Controls.SymbolIcon ui)
        {
            if (instance == null) instance = new SymbolIcon();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.SymbolIcon ui;

        public new Xaml.Controls.SymbolIcon UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.SymbolIcon.SymbolProperty"/></summary>
        public Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.SymbolIcon.SymbolProperty;

        public static implicit operator Xaml.UIElement(SymbolIcon view) => view?.UI;

        public static implicit operator Xaml.Controls.SymbolIcon(SymbolIcon view) => view?.UI;

        public static implicit operator SymbolIcon(Xaml.Controls.SymbolIcon ui) => SymbolIcon.StartChain(ui);

        public SymbolIcon Invoke(Action<Xaml.Controls.SymbolIcon> action) { action?.Invoke(UI); return this; }

        protected SymbolIcon() { }
    }

    public static partial class SymbolIconExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.SymbolIcon.Symbol"/></summary>
        public static TView Symbol<TView>(this TView view, Xaml.Controls.Symbol value) where TView : SymbolIcon { view.UI.Symbol = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SymbolIcon.Symbol"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Symbol> Symbol<TTarget>(this TTarget target) where TTarget : SymbolIcon
        => DependencyProperty<TTarget, Xaml.Controls.Symbol>.Get(target, Xaml.Controls.SymbolIcon.SymbolProperty);
    }
}

namespace CSharpMarkup.WinUI // SymbolIconSource
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.SymbolIconSource"/></summary>
        /// <remarks>Remark: SymbolIconSource().Bind() binds to <see cref="Xaml.Controls.SymbolIconSource.SymbolProperty"/></remarks>
        public static SymbolIconSource SymbolIconSource(Xaml.Controls.Symbol? Symbol = default)
        {
            var ui = new Xaml.Controls.SymbolIconSource();
            if (Symbol is not null) ui.Symbol = Symbol.Value;
            return CSharpMarkup.WinUI.SymbolIconSource.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.SymbolIconSource"/></summary>
        /// <remarks>Remark: SymbolIconSource().Bind() binds to <see cref="Xaml.Controls.SymbolIconSource.SymbolProperty"/></remarks>
        public static SymbolIconSource SymbolIconSource()
        {
            var ui = new Xaml.Controls.SymbolIconSource();
            return CSharpMarkup.WinUI.SymbolIconSource.StartChain(ui);
        }
    }

    public partial class SymbolIconSource : IconSource, IUI<Xaml.Controls.SymbolIconSource>, IDefaultBindProperty
    {
        static SymbolIconSource instance;

        internal static SymbolIconSource StartChain(Xaml.Controls.SymbolIconSource ui)
        {
            if (instance == null) instance = new SymbolIconSource();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.SymbolIconSource ui;

        public new Xaml.Controls.SymbolIconSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.SymbolIconSource.SymbolProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.SymbolIconSource.SymbolProperty;

        public static implicit operator Xaml.Controls.SymbolIconSource(SymbolIconSource view) => view?.UI;

        public static implicit operator SymbolIconSource(Xaml.Controls.SymbolIconSource ui) => SymbolIconSource.StartChain(ui);

        public SymbolIconSource Invoke(Action<Xaml.Controls.SymbolIconSource> action) { action?.Invoke(UI); return this; }

        protected SymbolIconSource() { }
    }

    public static partial class SymbolIconSourceExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.SymbolIconSource.Symbol"/></summary>
        public static TView Symbol<TView>(this TView view, Xaml.Controls.Symbol value) where TView : SymbolIconSource { view.UI.Symbol = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.SymbolIconSource.Symbol"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Symbol> Symbol<TTarget>(this TTarget target) where TTarget : SymbolIconSource
        => DependencyProperty<TTarget, Xaml.Controls.Symbol>.Get(target, Xaml.Controls.SymbolIconSource.SymbolProperty);
    }
}

namespace CSharpMarkup.WinUI // TabView
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TabView"/></summary>
        public static TabView TabView(params UIObject[] TabItems)
        {
            var ui = new Xaml.Controls.TabView();
            for (int i = 0; i < TabItems.Length; i++)
            {
                var child = TabItems[i];
                if (child == null) continue;

                var subChildren = Spreader<UIObject>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.TabItems.Add(subChildren[j].UI);
                else
                    ui.TabItems.Add(child.UI);
            }
            return CSharpMarkup.WinUI.TabView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TabView"/></summary>
        public static TabView TabView()
        {
            var ui = new Xaml.Controls.TabView();
            return CSharpMarkup.WinUI.TabView.StartChain(ui);
        }
    }

    public partial class TabView : Control, IUI<Xaml.Controls.TabView>
    {
        static TabView instance;

        internal static TabView StartChain(Xaml.Controls.TabView ui)
        {
            if (instance == null) instance = new TabView();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TabView ui;

        public new Xaml.Controls.TabView UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(TabView view) => view?.UI;

        public static implicit operator Xaml.Controls.TabView(TabView view) => view?.UI;

        public static implicit operator TabView(Xaml.Controls.TabView ui) => TabView.StartChain(ui);

        public TabView Invoke(Action<Xaml.Controls.TabView> action) { action?.Invoke(UI); return this; }

        protected TabView() { }
    }

    public static partial class TabViewExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TabView.AddTabButtonCommand"/></summary>
        public static TView AddTabButtonCommand<TView>(this TView view, ICommand value) where TView : TabView { view.UI.AddTabButtonCommand = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.AddTabButtonCommandParameter"/></summary>
        public static TView AddTabButtonCommandParameter<TView>(this TView view, object value) where TView : TabView { view.UI.AddTabButtonCommandParameter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.AllowDropTabs"/></summary>
        public static TView AllowDropTabs<TView>(this TView view, bool value) where TView : TabView { view.UI.AllowDropTabs = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.CanDragTabs"/></summary>
        public static TView CanDragTabs<TView>(this TView view, bool value) where TView : TabView { view.UI.CanDragTabs = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.CanReorderTabs"/></summary>
        public static TView CanReorderTabs<TView>(this TView view, bool value) where TView : TabView { view.UI.CanReorderTabs = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.CanTearOutTabs"/></summary>
        public static TView CanTearOutTabs<TView>(this TView view, bool value) where TView : TabView { view.UI.CanTearOutTabs = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.CloseButtonOverlayMode"/></summary>
        public static TView CloseButtonOverlayMode<TView>(this TView view, Xaml.Controls.TabViewCloseButtonOverlayMode value) where TView : TabView { view.UI.CloseButtonOverlayMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.IsAddTabButtonVisible"/></summary>
        public static TView IsAddTabButtonVisible<TView>(this TView view, bool value) where TView : TabView { view.UI.IsAddTabButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.SelectedIndex"/></summary>
        public static TView SelectedIndex<TView>(this TView view, int value) where TView : TabView { view.UI.SelectedIndex = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.SelectedItem"/></summary>
        public static TView SelectedItem<TView>(this TView view, object value) where TView : TabView { view.UI.SelectedItem = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.TabItemsSource"/></summary>
        public static TView TabItemsSource<TView>(this TView view, object value) where TView : TabView { view.UI.TabItemsSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.TabItemTemplate"/></summary>
        public static TView TabItemTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : TabView { view.UI.TabItemTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.TabItemTemplateSelector"/></summary>
        public static TView TabItemTemplateSelector<TView>(this TView view, Xaml.Controls.DataTemplateSelector value) where TView : TabView { view.UI.TabItemTemplateSelector = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.TabStripFooter"/></summary>
        public static TView TabStripFooter<TView>(this TView view, object value) where TView : TabView { view.UI.TabStripFooter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.TabStripFooterTemplate"/></summary>
        public static TView TabStripFooterTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : TabView { view.UI.TabStripFooterTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.TabStripHeader"/></summary>
        public static TView TabStripHeader<TView>(this TView view, object value) where TView : TabView { view.UI.TabStripHeader = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.TabStripHeaderTemplate"/></summary>
        public static TView TabStripHeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : TabView { view.UI.TabStripHeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabView.TabWidthMode"/></summary>
        public static TView TabWidthMode<TView>(this TView view, Xaml.Controls.TabViewWidthMode value) where TView : TabView { view.UI.TabWidthMode = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.AddTabButtonCommandParameter"/></summary>
        public static DependencyProperty<TTarget, object> AddTabButtonCommandParameter<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TabView.AddTabButtonCommandParameterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.AddTabButtonCommand"/></summary>
        public static DependencyProperty<TTarget, ICommand> AddTabButtonCommand<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, ICommand>.Get(target, Xaml.Controls.TabView.AddTabButtonCommandProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.AllowDropTabs"/></summary>
        public static DependencyProperty<TTarget, bool> AllowDropTabs<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TabView.AllowDropTabsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.CanDragTabs"/></summary>
        public static DependencyProperty<TTarget, bool> CanDragTabs<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TabView.CanDragTabsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.CanReorderTabs"/></summary>
        public static DependencyProperty<TTarget, bool> CanReorderTabs<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TabView.CanReorderTabsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.CanTearOutTabs"/></summary>
        public static DependencyProperty<TTarget, bool> CanTearOutTabs<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TabView.CanTearOutTabsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.CloseButtonOverlayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.TabViewCloseButtonOverlayMode> CloseButtonOverlayMode<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, Xaml.Controls.TabViewCloseButtonOverlayMode>.Get(target, Xaml.Controls.TabView.CloseButtonOverlayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.IsAddTabButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsAddTabButtonVisible<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TabView.IsAddTabButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.SelectedIndex"/></summary>
        public static DependencyProperty<TTarget, int> SelectedIndex<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.TabView.SelectedIndexProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.SelectedItem"/></summary>
        public static DependencyProperty<TTarget, object> SelectedItem<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TabView.SelectedItemProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.TabItems"/></summary>
        public static DependencyProperty<TTarget, IList<object>> TabItems<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, IList<object>>.Get(target, Xaml.Controls.TabView.TabItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.TabItemsSource"/></summary>
        public static DependencyProperty<TTarget, object> TabItemsSource<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TabView.TabItemsSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.TabItemTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> TabItemTemplate<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.TabView.TabItemTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.TabItemTemplateSelector"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.DataTemplateSelector> TabItemTemplateSelector<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, Xaml.Controls.DataTemplateSelector>.Get(target, Xaml.Controls.TabView.TabItemTemplateSelectorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.TabStripFooter"/></summary>
        public static DependencyProperty<TTarget, object> TabStripFooter<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TabView.TabStripFooterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.TabStripFooterTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> TabStripFooterTemplate<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.TabView.TabStripFooterTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.TabStripHeader"/></summary>
        public static DependencyProperty<TTarget, object> TabStripHeader<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TabView.TabStripHeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.TabStripHeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> TabStripHeaderTemplate<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.TabView.TabStripHeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabView.TabWidthMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.TabViewWidthMode> TabWidthMode<TTarget>(this TTarget target) where TTarget : TabView
        => DependencyProperty<TTarget, Xaml.Controls.TabViewWidthMode>.Get(target, Xaml.Controls.TabView.TabWidthModeProperty);
    }
}

namespace CSharpMarkup.WinUI // TabViewItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TabViewItem"/></summary>
        public static TabViewItem TabViewItem(UIObject Content)
        {
            var ui = new Xaml.Controls.TabViewItem();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.TabViewItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TabViewItem"/></summary>
        public static TabViewItem TabViewItem(object Header = default, Xaml.DataTemplate HeaderTemplate = default, Xaml.Controls.IconSource IconSource = default, bool? IsClosable = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.TabViewItem();
            if (Header is not null) ui.Header = Header;
            if (HeaderTemplate is not null) ui.HeaderTemplate = HeaderTemplate;
            if (IconSource is not null) ui.IconSource = IconSource;
            if (IsClosable is not null) ui.IsClosable = IsClosable.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.TabViewItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TabViewItem"/></summary>
        public static TabViewItem TabViewItem()
        {
            var ui = new Xaml.Controls.TabViewItem();
            return CSharpMarkup.WinUI.TabViewItem.StartChain(ui);
        }
    }

    public partial class TabViewItem : ListViewItem, IUI<Xaml.Controls.TabViewItem>
    {
        static TabViewItem instance;

        internal static TabViewItem StartChain(Xaml.Controls.TabViewItem ui)
        {
            if (instance == null) instance = new TabViewItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TabViewItem ui;

        public new Xaml.Controls.TabViewItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(TabViewItem view) => view?.UI;

        public static implicit operator Xaml.Controls.TabViewItem(TabViewItem view) => view?.UI;

        public static implicit operator TabViewItem(Xaml.Controls.TabViewItem ui) => TabViewItem.StartChain(ui);

        public TabViewItem Invoke(Action<Xaml.Controls.TabViewItem> action) { action?.Invoke(UI); return this; }

        protected TabViewItem() { }
    }

    public static partial class TabViewItemExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TabViewItem.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : TabViewItem { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabViewItem.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : TabViewItem { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabViewItem.IconSource"/></summary>
        public static TView IconSource<TView>(this TView view, Xaml.Controls.IconSource value) where TView : TabViewItem { view.UI.IconSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabViewItem.IsClosable"/></summary>
        public static TView IsClosable<TView>(this TView view, bool value) where TView : TabViewItem { view.UI.IsClosable = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabViewItem.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : TabViewItem
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TabViewItem.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabViewItem.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : TabViewItem
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.TabViewItem.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabViewItem.IconSource"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconSource> IconSource<TTarget>(this TTarget target) where TTarget : TabViewItem
        => DependencyProperty<TTarget, Xaml.Controls.IconSource>.Get(target, Xaml.Controls.TabViewItem.IconSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabViewItem.IsClosable"/></summary>
        public static DependencyProperty<TTarget, bool> IsClosable<TTarget>(this TTarget target) where TTarget : TabViewItem
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TabViewItem.IsClosableProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabViewItem.TabViewTemplateSettings"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.TabViewItemTemplateSettings> TabViewTemplateSettings<TTarget>(this TTarget target) where TTarget : TabViewItem
        => DependencyProperty<TTarget, Xaml.Controls.TabViewItemTemplateSettings>.Get(target, Xaml.Controls.TabViewItem.TabViewTemplateSettingsProperty);
    }
}

namespace CSharpMarkup.WinUI // TabViewItemTemplateSettings
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TabViewItemTemplateSettings"/></summary>
        public static TabViewItemTemplateSettings TabViewItemTemplateSettings(Xaml.Controls.IconElement IconElement = default, CSharpMarkup.WinUI.to.Geometry? TabGeometry = default)
        {
            var ui = new Xaml.Controls.TabViewItemTemplateSettings();
            if (IconElement is not null) ui.IconElement = IconElement;
            if (TabGeometry is not null) ui.TabGeometry = TabGeometry.Value;
            return CSharpMarkup.WinUI.TabViewItemTemplateSettings.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TabViewItemTemplateSettings"/></summary>
        public static TabViewItemTemplateSettings TabViewItemTemplateSettings()
        {
            var ui = new Xaml.Controls.TabViewItemTemplateSettings();
            return CSharpMarkup.WinUI.TabViewItemTemplateSettings.StartChain(ui);
        }
    }

    public partial class TabViewItemTemplateSettings : DependencyObject, IUI<Xaml.Controls.TabViewItemTemplateSettings>
    {
        static TabViewItemTemplateSettings instance;

        internal static TabViewItemTemplateSettings StartChain(Xaml.Controls.TabViewItemTemplateSettings ui)
        {
            if (instance == null) instance = new TabViewItemTemplateSettings();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TabViewItemTemplateSettings ui;

        public new Xaml.Controls.TabViewItemTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.TabViewItemTemplateSettings(TabViewItemTemplateSettings view) => view?.UI;

        public static implicit operator TabViewItemTemplateSettings(Xaml.Controls.TabViewItemTemplateSettings ui) => TabViewItemTemplateSettings.StartChain(ui);

        public TabViewItemTemplateSettings Invoke(Action<Xaml.Controls.TabViewItemTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected TabViewItemTemplateSettings() { }
    }

    public static partial class TabViewItemTemplateSettingsExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TabViewItemTemplateSettings.IconElement"/></summary>
        public static TView IconElement<TView>(this TView view, Xaml.Controls.IconElement value) where TView : TabViewItemTemplateSettings { view.UI.IconElement = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TabViewItemTemplateSettings.TabGeometry"/></summary>
        public static TView TabGeometry<TView>(this TView view, CSharpMarkup.WinUI.to.Geometry value) where TView : TabViewItemTemplateSettings { view.UI.TabGeometry = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabViewItemTemplateSettings.IconElement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconElement> IconElement<TTarget>(this TTarget target) where TTarget : TabViewItemTemplateSettings
        => DependencyProperty<TTarget, Xaml.Controls.IconElement>.Get(target, Xaml.Controls.TabViewItemTemplateSettings.IconElementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TabViewItemTemplateSettings.TabGeometry"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Geometry> TabGeometry<TTarget>(this TTarget target) where TTarget : TabViewItemTemplateSettings
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Geometry>.Get(target, Xaml.Controls.TabViewItemTemplateSettings.TabGeometryProperty);
    }
}

namespace CSharpMarkup.WinUI // TeachingTip
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TeachingTip"/></summary>
        public static TeachingTip TeachingTip(UIObject Content)
        {
            var ui = new Xaml.Controls.TeachingTip();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.TeachingTip.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TeachingTip"/></summary>
        public static TeachingTip TeachingTip(ICommand ActionButtonCommand = default, object ActionButtonCommandParameter = default, object ActionButtonContent = default, Xaml.Style ActionButtonStyle = default, ICommand CloseButtonCommand = default, object CloseButtonCommandParameter = default, object CloseButtonContent = default, Xaml.Style CloseButtonStyle = default, Xaml.UIElement HeroContent = default, Xaml.Controls.TeachingTipHeroContentPlacementMode? HeroContentPlacement = default, Xaml.Controls.IconSource IconSource = default, bool? IsLightDismissEnabled = default, bool? IsOpen = default, Xaml.Thickness? PlacementMargin = default, Xaml.Controls.TeachingTipPlacementMode? PreferredPlacement = default, bool? ShouldConstrainToRootBounds = default, string Subtitle = default, Xaml.Controls.TeachingTipTailVisibility? TailVisibility = default, Xaml.FrameworkElement Target = default, string Title = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.TeachingTip();
            if (ActionButtonCommand is not null) ui.ActionButtonCommand = ActionButtonCommand;
            if (ActionButtonCommandParameter is not null) ui.ActionButtonCommandParameter = ActionButtonCommandParameter;
            if (ActionButtonContent is not null) ui.ActionButtonContent = ActionButtonContent;
            if (ActionButtonStyle is not null) ui.ActionButtonStyle = ActionButtonStyle;
            if (CloseButtonCommand is not null) ui.CloseButtonCommand = CloseButtonCommand;
            if (CloseButtonCommandParameter is not null) ui.CloseButtonCommandParameter = CloseButtonCommandParameter;
            if (CloseButtonContent is not null) ui.CloseButtonContent = CloseButtonContent;
            if (CloseButtonStyle is not null) ui.CloseButtonStyle = CloseButtonStyle;
            if (HeroContent is not null) ui.HeroContent = HeroContent;
            if (HeroContentPlacement is not null) ui.HeroContentPlacement = HeroContentPlacement.Value;
            if (IconSource is not null) ui.IconSource = IconSource;
            if (IsLightDismissEnabled is not null) ui.IsLightDismissEnabled = IsLightDismissEnabled.Value;
            if (IsOpen is not null) ui.IsOpen = IsOpen.Value;
            if (PlacementMargin is not null) ui.PlacementMargin = PlacementMargin.Value;
            if (PreferredPlacement is not null) ui.PreferredPlacement = PreferredPlacement.Value;
            if (ShouldConstrainToRootBounds is not null) ui.ShouldConstrainToRootBounds = ShouldConstrainToRootBounds.Value;
            if (Subtitle is not null) ui.Subtitle = Subtitle;
            if (TailVisibility is not null) ui.TailVisibility = TailVisibility.Value;
            if (Target is not null) ui.Target = Target;
            if (Title is not null) ui.Title = Title;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.TeachingTip.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TeachingTip"/></summary>
        public static TeachingTip TeachingTip()
        {
            var ui = new Xaml.Controls.TeachingTip();
            return CSharpMarkup.WinUI.TeachingTip.StartChain(ui);
        }
    }

    public partial class TeachingTip : ContentControl, IUI<Xaml.Controls.TeachingTip>
    {
        static TeachingTip instance;

        internal static TeachingTip StartChain(Xaml.Controls.TeachingTip ui)
        {
            if (instance == null) instance = new TeachingTip();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TeachingTip ui;

        public new Xaml.Controls.TeachingTip UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(TeachingTip view) => view?.UI;

        public static implicit operator Xaml.Controls.TeachingTip(TeachingTip view) => view?.UI;

        public static implicit operator TeachingTip(Xaml.Controls.TeachingTip ui) => TeachingTip.StartChain(ui);

        public TeachingTip Invoke(Action<Xaml.Controls.TeachingTip> action) { action?.Invoke(UI); return this; }

        protected TeachingTip() { }
    }

    public static partial class TeachingTipExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.ActionButtonCommand"/></summary>
        public static TView ActionButtonCommand<TView>(this TView view, ICommand value) where TView : TeachingTip { view.UI.ActionButtonCommand = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.ActionButtonCommandParameter"/></summary>
        public static TView ActionButtonCommandParameter<TView>(this TView view, object value) where TView : TeachingTip { view.UI.ActionButtonCommandParameter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.ActionButtonContent"/></summary>
        public static TView ActionButtonContent<TView>(this TView view, object value) where TView : TeachingTip { view.UI.ActionButtonContent = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.ActionButtonStyle"/></summary>
        public static TView ActionButtonStyle<TView>(this TView view, Xaml.Style value) where TView : TeachingTip { view.UI.ActionButtonStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.CloseButtonCommand"/></summary>
        public static TView CloseButtonCommand<TView>(this TView view, ICommand value) where TView : TeachingTip { view.UI.CloseButtonCommand = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.CloseButtonCommandParameter"/></summary>
        public static TView CloseButtonCommandParameter<TView>(this TView view, object value) where TView : TeachingTip { view.UI.CloseButtonCommandParameter = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.CloseButtonContent"/></summary>
        public static TView CloseButtonContent<TView>(this TView view, object value) where TView : TeachingTip { view.UI.CloseButtonContent = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.CloseButtonStyle"/></summary>
        public static TView CloseButtonStyle<TView>(this TView view, Xaml.Style value) where TView : TeachingTip { view.UI.CloseButtonStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.HeroContent"/></summary>
        public static TView HeroContent<TView>(this TView view, Xaml.UIElement value) where TView : TeachingTip { view.UI.HeroContent = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.HeroContentPlacement"/></summary>
        public static TView HeroContentPlacement<TView>(this TView view, Xaml.Controls.TeachingTipHeroContentPlacementMode value) where TView : TeachingTip { view.UI.HeroContentPlacement = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.IconSource"/></summary>
        public static TView IconSource<TView>(this TView view, Xaml.Controls.IconSource value) where TView : TeachingTip { view.UI.IconSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.IsLightDismissEnabled"/></summary>
        public static TView IsLightDismissEnabled<TView>(this TView view, bool value) where TView : TeachingTip { view.UI.IsLightDismissEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.IsOpen"/></summary>
        public static TView IsOpen<TView>(this TView view, bool value) where TView : TeachingTip { view.UI.IsOpen = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.PlacementMargin"/></summary>
        public static TView PlacementMargin<TView>(this TView view, Xaml.Thickness value) where TView : TeachingTip { view.UI.PlacementMargin = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.PlacementMargin"/></summary>
        public static TView PlacementMargin<TView>(this TView view, double uniform) where TView : TeachingTip { view.UI.PlacementMargin = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.PlacementMargin"/></summary>
        public static TView PlacementMargin<TView>(this TView view, double horizontal, double vertical) where TView : TeachingTip { view.UI.PlacementMargin = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.PlacementMargin"/></summary>
        public static TView PlacementMargin<TView>(this TView view, double left, double top, double right, double bottom) where TView : TeachingTip { view.UI.PlacementMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.PlacementMargin"/></summary>
        public static TView PlacementMargins<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : TeachingTip { view.UI.PlacementMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.PreferredPlacement"/></summary>
        public static TView PreferredPlacement<TView>(this TView view, Xaml.Controls.TeachingTipPlacementMode value) where TView : TeachingTip { view.UI.PreferredPlacement = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.ShouldConstrainToRootBounds"/></summary>
        public static TView ShouldConstrainToRootBounds<TView>(this TView view, bool value) where TView : TeachingTip { view.UI.ShouldConstrainToRootBounds = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.Subtitle"/></summary>
        public static TView Subtitle<TView>(this TView view, string value) where TView : TeachingTip { view.UI.Subtitle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.TailVisibility"/></summary>
        public static TView TailVisibility<TView>(this TView view, Xaml.Controls.TeachingTipTailVisibility value) where TView : TeachingTip { view.UI.TailVisibility = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.Target"/></summary>
        public static TView Target<TView>(this TView view, Xaml.FrameworkElement value) where TView : TeachingTip { view.UI.Target = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTip.Title"/></summary>
        public static TView Title<TView>(this TView view, string value) where TView : TeachingTip { view.UI.Title = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.ActionButtonCommandParameter"/></summary>
        public static DependencyProperty<TTarget, object> ActionButtonCommandParameter<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TeachingTip.ActionButtonCommandParameterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.ActionButtonCommand"/></summary>
        public static DependencyProperty<TTarget, ICommand> ActionButtonCommand<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, ICommand>.Get(target, Xaml.Controls.TeachingTip.ActionButtonCommandProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.ActionButtonContent"/></summary>
        public static DependencyProperty<TTarget, object> ActionButtonContent<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TeachingTip.ActionButtonContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.ActionButtonStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> ActionButtonStyle<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.TeachingTip.ActionButtonStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.CloseButtonCommandParameter"/></summary>
        public static DependencyProperty<TTarget, object> CloseButtonCommandParameter<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TeachingTip.CloseButtonCommandParameterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.CloseButtonCommand"/></summary>
        public static DependencyProperty<TTarget, ICommand> CloseButtonCommand<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, ICommand>.Get(target, Xaml.Controls.TeachingTip.CloseButtonCommandProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.CloseButtonContent"/></summary>
        public static DependencyProperty<TTarget, object> CloseButtonContent<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TeachingTip.CloseButtonContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.CloseButtonStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> CloseButtonStyle<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.TeachingTip.CloseButtonStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.HeroContentPlacement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.TeachingTipHeroContentPlacementMode> HeroContentPlacement<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, Xaml.Controls.TeachingTipHeroContentPlacementMode>.Get(target, Xaml.Controls.TeachingTip.HeroContentPlacementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.HeroContent"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> HeroContent<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.TeachingTip.HeroContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.IconSource"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconSource> IconSource<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, Xaml.Controls.IconSource>.Get(target, Xaml.Controls.TeachingTip.IconSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.IsLightDismissEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsLightDismissEnabled<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TeachingTip.IsLightDismissEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.IsOpen"/></summary>
        public static DependencyProperty<TTarget, bool> IsOpen<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TeachingTip.IsOpenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.PlacementMargin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> PlacementMargin<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.TeachingTip.PlacementMarginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.PreferredPlacement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> PreferredPlacement<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode>.Get(target, Xaml.Controls.TeachingTip.PreferredPlacementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.ShouldConstrainToRootBounds"/></summary>
        public static DependencyProperty<TTarget, bool> ShouldConstrainToRootBounds<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TeachingTip.ShouldConstrainToRootBoundsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.Subtitle"/></summary>
        public static DependencyProperty<TTarget, string> Subtitle<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.TeachingTip.SubtitleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.TailVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.TeachingTipTailVisibility> TailVisibility<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, Xaml.Controls.TeachingTipTailVisibility>.Get(target, Xaml.Controls.TeachingTip.TailVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.Target"/></summary>
        public static DependencyProperty<TTarget, Xaml.FrameworkElement> Target<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, Xaml.FrameworkElement>.Get(target, Xaml.Controls.TeachingTip.TargetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.TemplateSettings"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.TeachingTipTemplateSettings> TemplateSettings<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, Xaml.Controls.TeachingTipTemplateSettings>.Get(target, Xaml.Controls.TeachingTip.TemplateSettingsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTip.Title"/></summary>
        public static DependencyProperty<TTarget, string> Title<TTarget>(this TTarget target) where TTarget : TeachingTip
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.TeachingTip.TitleProperty);
    }
}

namespace CSharpMarkup.WinUI // TeachingTipTemplateSettings
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TeachingTipTemplateSettings"/></summary>
        public static TeachingTipTemplateSettings TeachingTipTemplateSettings(Xaml.Controls.IconElement IconElement = default, Xaml.Thickness? TopLeftHighlightMargin = default, Xaml.Thickness? TopRightHighlightMargin = default)
        {
            var ui = new Xaml.Controls.TeachingTipTemplateSettings();
            if (IconElement is not null) ui.IconElement = IconElement;
            if (TopLeftHighlightMargin is not null) ui.TopLeftHighlightMargin = TopLeftHighlightMargin.Value;
            if (TopRightHighlightMargin is not null) ui.TopRightHighlightMargin = TopRightHighlightMargin.Value;
            return CSharpMarkup.WinUI.TeachingTipTemplateSettings.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TeachingTipTemplateSettings"/></summary>
        public static TeachingTipTemplateSettings TeachingTipTemplateSettings()
        {
            var ui = new Xaml.Controls.TeachingTipTemplateSettings();
            return CSharpMarkup.WinUI.TeachingTipTemplateSettings.StartChain(ui);
        }
    }

    public partial class TeachingTipTemplateSettings : DependencyObject, IUI<Xaml.Controls.TeachingTipTemplateSettings>
    {
        static TeachingTipTemplateSettings instance;

        internal static TeachingTipTemplateSettings StartChain(Xaml.Controls.TeachingTipTemplateSettings ui)
        {
            if (instance == null) instance = new TeachingTipTemplateSettings();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TeachingTipTemplateSettings ui;

        public new Xaml.Controls.TeachingTipTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.TeachingTipTemplateSettings(TeachingTipTemplateSettings view) => view?.UI;

        public static implicit operator TeachingTipTemplateSettings(Xaml.Controls.TeachingTipTemplateSettings ui) => TeachingTipTemplateSettings.StartChain(ui);

        public TeachingTipTemplateSettings Invoke(Action<Xaml.Controls.TeachingTipTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected TeachingTipTemplateSettings() { }
    }

    public static partial class TeachingTipTemplateSettingsExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TeachingTipTemplateSettings.IconElement"/></summary>
        public static TView IconElement<TView>(this TView view, Xaml.Controls.IconElement value) where TView : TeachingTipTemplateSettings { view.UI.IconElement = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTipTemplateSettings.TopLeftHighlightMargin"/></summary>
        public static TView TopLeftHighlightMargin<TView>(this TView view, Xaml.Thickness value) where TView : TeachingTipTemplateSettings { view.UI.TopLeftHighlightMargin = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTipTemplateSettings.TopLeftHighlightMargin"/></summary>
        public static TView TopLeftHighlightMargin<TView>(this TView view, double uniform) where TView : TeachingTipTemplateSettings { view.UI.TopLeftHighlightMargin = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTipTemplateSettings.TopLeftHighlightMargin"/></summary>
        public static TView TopLeftHighlightMargin<TView>(this TView view, double horizontal, double vertical) where TView : TeachingTipTemplateSettings { view.UI.TopLeftHighlightMargin = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTipTemplateSettings.TopLeftHighlightMargin"/></summary>
        public static TView TopLeftHighlightMargin<TView>(this TView view, double left, double top, double right, double bottom) where TView : TeachingTipTemplateSettings { view.UI.TopLeftHighlightMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTipTemplateSettings.TopLeftHighlightMargin"/></summary>
        public static TView TopLeftHighlightMargins<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : TeachingTipTemplateSettings { view.UI.TopLeftHighlightMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTipTemplateSettings.TopRightHighlightMargin"/></summary>
        public static TView TopRightHighlightMargin<TView>(this TView view, Xaml.Thickness value) where TView : TeachingTipTemplateSettings { view.UI.TopRightHighlightMargin = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTipTemplateSettings.TopRightHighlightMargin"/></summary>
        public static TView TopRightHighlightMargin<TView>(this TView view, double uniform) where TView : TeachingTipTemplateSettings { view.UI.TopRightHighlightMargin = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTipTemplateSettings.TopRightHighlightMargin"/></summary>
        public static TView TopRightHighlightMargin<TView>(this TView view, double horizontal, double vertical) where TView : TeachingTipTemplateSettings { view.UI.TopRightHighlightMargin = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTipTemplateSettings.TopRightHighlightMargin"/></summary>
        public static TView TopRightHighlightMargin<TView>(this TView view, double left, double top, double right, double bottom) where TView : TeachingTipTemplateSettings { view.UI.TopRightHighlightMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TeachingTipTemplateSettings.TopRightHighlightMargin"/></summary>
        public static TView TopRightHighlightMargins<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : TeachingTipTemplateSettings { view.UI.TopRightHighlightMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTipTemplateSettings.IconElement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconElement> IconElement<TTarget>(this TTarget target) where TTarget : TeachingTipTemplateSettings
        => DependencyProperty<TTarget, Xaml.Controls.IconElement>.Get(target, Xaml.Controls.TeachingTipTemplateSettings.IconElementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTipTemplateSettings.TopLeftHighlightMargin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> TopLeftHighlightMargin<TTarget>(this TTarget target) where TTarget : TeachingTipTemplateSettings
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.TeachingTipTemplateSettings.TopLeftHighlightMarginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TeachingTipTemplateSettings.TopRightHighlightMargin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> TopRightHighlightMargin<TTarget>(this TTarget target) where TTarget : TeachingTipTemplateSettings
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.TeachingTipTemplateSettings.TopRightHighlightMarginProperty);
    }
}

namespace CSharpMarkup.WinUI // TextBlock
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TextBlock"/></summary>
        /// <remarks>Remark: TextBlock().Bind() binds to <see cref="Xaml.Controls.TextBlock.TextProperty"/></remarks>
        public static TextBlock TextBlock(params InlineCollectionItem[] Inlines)
        {
            var ui = new Xaml.Controls.TextBlock();
            for (int i = 0; i < Inlines.Length; i++)
            {
                var child = Inlines[i];
                if (child == null) continue;

                var subChildren = Spreader<InlineCollectionItem>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Inlines.Add(subChildren[j]);
                else
                    ui.Inlines.Add(child);
            }
            return CSharpMarkup.WinUI.TextBlock.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TextBlock"/></summary>
        /// <remarks>Remark: TextBlock().Bind() binds to <see cref="Xaml.Controls.TextBlock.TextProperty"/></remarks>
        public static TextBlock TextBlock()
        {
            var ui = new Xaml.Controls.TextBlock();
            return CSharpMarkup.WinUI.TextBlock.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TextBlock"/></summary>
        /// <remarks>Remark: TextBlock().Bind() binds to <see cref="Xaml.Controls.TextBlock.TextProperty"/></remarks>
        public static partial TextBlock TextBlock(string Text)
        {
            var ui = new Xaml.Controls.TextBlock();
            ui.Text = Text;
            return CSharpMarkup.WinUI.TextBlock.StartChain(ui);
        }
    }

    public partial class TextBlock : FrameworkElement, IUI<Xaml.Controls.TextBlock>, IDefaultBindProperty
    {
        static TextBlock instance;

        internal static TextBlock StartChain(Xaml.Controls.TextBlock ui)
        {
            if (instance == null) instance = new TextBlock();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TextBlock ui;

        public new Xaml.Controls.TextBlock UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.TextBlock.TextProperty"/></summary>
        public Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.TextBlock.TextProperty;

        public static implicit operator Xaml.UIElement(TextBlock view) => view?.UI;

        public static implicit operator Xaml.Controls.TextBlock(TextBlock view) => view?.UI;

        public static implicit operator TextBlock(Xaml.Controls.TextBlock ui) => TextBlock.StartChain(ui);

        public TextBlock Invoke(Action<Xaml.Controls.TextBlock> action) { action?.Invoke(UI); return this; }

        protected TextBlock() { }
    }

    public static partial class TextBlockExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TextBlock.CharacterSpacing"/></summary>
        public static TView CharacterSpacing<TView>(this TView view, int value) where TView : TextBlock { view.UI.CharacterSpacing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.FontFamily"/></summary>
        public static TView FontFamily<TView>(this TView view, Xaml.Media.FontFamily value) where TView : TextBlock { view.UI.FontFamily = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.FontSize"/></summary>
        public static TView FontSize<TView>(this TView view, double value) where TView : TextBlock { view.UI.FontSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.FontStretch"/></summary>
        public static TView FontStretch<TView>(this TView view, Windows.UI.Text.FontStretch value) where TView : TextBlock { view.UI.FontStretch = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.FontStyle"/></summary>
        public static TView FontStyle<TView>(this TView view, Windows.UI.Text.FontStyle value) where TView : TextBlock { view.UI.FontStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.FontWeight"/></summary>
        public static TView FontWeight<TView>(this TView view, Windows.UI.Text.FontWeight value) where TView : TextBlock { view.UI.FontWeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Xaml.Media.Brush value) where TView : TextBlock { view.UI.Foreground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Windows.UI.Color value) where TView : TextBlock { view.UI.Foreground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, string color) where TView : TextBlock { view.UI.Foreground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.HorizontalTextAlignment"/></summary>
        public static TView HorizontalTextAlignment<TView>(this TView view, Xaml.TextAlignment value) where TView : TextBlock { view.UI.HorizontalTextAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.IsColorFontEnabled"/></summary>
        public static TView IsColorFontEnabled<TView>(this TView view, bool value) where TView : TextBlock { view.UI.IsColorFontEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.IsTextScaleFactorEnabled"/></summary>
        public static TView IsTextScaleFactorEnabled<TView>(this TView view, bool value) where TView : TextBlock { view.UI.IsTextScaleFactorEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.IsTextSelectionEnabled"/></summary>
        public static TView IsTextSelectionEnabled<TView>(this TView view, bool value) where TView : TextBlock { view.UI.IsTextSelectionEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.LineHeight"/></summary>
        public static TView LineHeight<TView>(this TView view, double value) where TView : TextBlock { view.UI.LineHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.LineStackingStrategy"/></summary>
        public static TView LineStackingStrategy<TView>(this TView view, Xaml.LineStackingStrategy value) where TView : TextBlock { view.UI.LineStackingStrategy = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.MaxLines"/></summary>
        public static TView MaxLines<TView>(this TView view, int value) where TView : TextBlock { view.UI.MaxLines = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.OpticalMarginAlignment"/></summary>
        public static TView OpticalMarginAlignment<TView>(this TView view, Xaml.OpticalMarginAlignment value) where TView : TextBlock { view.UI.OpticalMarginAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.Padding"/></summary>
        public static TView Padding<TView>(this TView view, Xaml.Thickness value) where TView : TextBlock { view.UI.Padding = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double uniform) where TView : TextBlock { view.UI.Padding = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double horizontal, double vertical) where TView : TextBlock { view.UI.Padding = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.Padding"/></summary>
        public static TView Padding<TView>(this TView view, double left, double top, double right, double bottom) where TView : TextBlock { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.Padding"/></summary>
        public static TView Paddings<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : TextBlock { view.UI.Padding = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.SelectionFlyout"/></summary>
        public static TView SelectionFlyout<TView>(this TView view, Xaml.Controls.Primitives.FlyoutBase value) where TView : TextBlock { view.UI.SelectionFlyout = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.SelectionHighlightColor"/></summary>
        public static TView SelectionHighlightColor<TView>(this TView view, Xaml.Media.SolidColorBrush value) where TView : TextBlock { view.UI.SelectionHighlightColor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.Text"/></summary>
        public static TView Text<TView>(this TView view, string value) where TView : TextBlock { view.UI.Text = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.TextAlignment"/></summary>
        public static TView TextAlignment<TView>(this TView view, Xaml.TextAlignment value) where TView : TextBlock { view.UI.TextAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.TextDecorations"/></summary>
        public static TView TextDecorations<TView>(this TView view, Windows.UI.Text.TextDecorations value) where TView : TextBlock { view.UI.TextDecorations = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.TextLineBounds"/></summary>
        public static TView TextLineBounds<TView>(this TView view, Xaml.TextLineBounds value) where TView : TextBlock { view.UI.TextLineBounds = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.TextReadingOrder"/></summary>
        public static TView TextReadingOrder<TView>(this TView view, Xaml.TextReadingOrder value) where TView : TextBlock { view.UI.TextReadingOrder = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.TextTrimming"/></summary>
        public static TView TextTrimming<TView>(this TView view, Xaml.TextTrimming value) where TView : TextBlock { view.UI.TextTrimming = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBlock.TextWrapping"/></summary>
        public static TView TextWrapping<TView>(this TView view, Xaml.TextWrapping value) where TView : TextBlock { view.UI.TextWrapping = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.CharacterSpacing"/></summary>
        public static DependencyProperty<TTarget, int> CharacterSpacing<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.TextBlock.CharacterSpacingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.FontFamily"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FontFamily> FontFamily<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Xaml.Media.FontFamily>.Get(target, Xaml.Controls.TextBlock.FontFamilyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.FontSize"/></summary>
        public static DependencyProperty<TTarget, double> FontSize<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.TextBlock.FontSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.FontStretch"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStretch> FontStretch<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Windows.UI.Text.FontStretch>.Get(target, Xaml.Controls.TextBlock.FontStretchProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.FontStyle"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStyle> FontStyle<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Windows.UI.Text.FontStyle>.Get(target, Xaml.Controls.TextBlock.FontStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.FontWeight"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontWeight> FontWeight<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Windows.UI.Text.FontWeight>.Get(target, Xaml.Controls.TextBlock.FontWeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.Foreground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Foreground<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.TextBlock.ForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.HorizontalTextAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextAlignment> HorizontalTextAlignment<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Xaml.TextAlignment>.Get(target, Xaml.Controls.TextBlock.HorizontalTextAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.IsColorFontEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsColorFontEnabled<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TextBlock.IsColorFontEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.IsTextScaleFactorEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextScaleFactorEnabled<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TextBlock.IsTextScaleFactorEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.IsTextSelectionEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextSelectionEnabled<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TextBlock.IsTextSelectionEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.IsTextTrimmed"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextTrimmed<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TextBlock.IsTextTrimmedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.LineHeight"/></summary>
        public static DependencyProperty<TTarget, double> LineHeight<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.TextBlock.LineHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.LineStackingStrategy"/></summary>
        public static DependencyProperty<TTarget, Xaml.LineStackingStrategy> LineStackingStrategy<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Xaml.LineStackingStrategy>.Get(target, Xaml.Controls.TextBlock.LineStackingStrategyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.MaxLines"/></summary>
        public static DependencyProperty<TTarget, int> MaxLines<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.TextBlock.MaxLinesProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.OpticalMarginAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.OpticalMarginAlignment> OpticalMarginAlignment<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Xaml.OpticalMarginAlignment>.Get(target, Xaml.Controls.TextBlock.OpticalMarginAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.Padding"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> Padding<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.TextBlock.PaddingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.SelectedText"/></summary>
        public static DependencyProperty<TTarget, string> SelectedText<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.TextBlock.SelectedTextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.SelectionFlyout"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase> SelectionFlyout<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase>.Get(target, Xaml.Controls.TextBlock.SelectionFlyoutProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.SelectionHighlightColor"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.SolidColorBrush> SelectionHighlightColor<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Xaml.Media.SolidColorBrush>.Get(target, Xaml.Controls.TextBlock.SelectionHighlightColorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.TextAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextAlignment> TextAlignment<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Xaml.TextAlignment>.Get(target, Xaml.Controls.TextBlock.TextAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.TextDecorations"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.TextDecorations> TextDecorations<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Windows.UI.Text.TextDecorations>.Get(target, Xaml.Controls.TextBlock.TextDecorationsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.TextLineBounds"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextLineBounds> TextLineBounds<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Xaml.TextLineBounds>.Get(target, Xaml.Controls.TextBlock.TextLineBoundsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.Text"/></summary>
        public static DependencyProperty<TTarget, string> Text<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.TextBlock.TextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.TextReadingOrder"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextReadingOrder> TextReadingOrder<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Xaml.TextReadingOrder>.Get(target, Xaml.Controls.TextBlock.TextReadingOrderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.TextTrimming"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextTrimming> TextTrimming<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Xaml.TextTrimming>.Get(target, Xaml.Controls.TextBlock.TextTrimmingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBlock.TextWrapping"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextWrapping> TextWrapping<TTarget>(this TTarget target) where TTarget : TextBlock
        => DependencyProperty<TTarget, Xaml.TextWrapping>.Get(target, Xaml.Controls.TextBlock.TextWrappingProperty);
    }
}

namespace CSharpMarkup.WinUI // TextBox
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TextBox"/></summary>
        /// <remarks>Remark: TextBox().Bind() binds to <see cref="Xaml.Controls.TextBox.TextProperty"/></remarks>
        public static TextBox TextBox(bool? AcceptsReturn = default, Xaml.Controls.CharacterCasing? CharacterCasing = default, object Description = default, Xaml.Controls.CandidateWindowAlignment? DesiredCandidateWindowAlignment = default, object Header = default, Xaml.DataTemplate HeaderTemplate = default, Xaml.TextAlignment? HorizontalTextAlignment = default, Xaml.Input.InputScope InputScope = default, bool? IsColorFontEnabled = default, bool? IsReadOnly = default, bool? IsSpellCheckEnabled = default, bool? IsTextPredictionEnabled = default, int? MaxLength = default, Xaml.Media.Brush PlaceholderForeground = default, string PlaceholderText = default, bool? PreventKeyboardDisplayOnProgrammaticFocus = default, string SelectedText = default, Xaml.Controls.Primitives.FlyoutBase SelectionFlyout = default, Xaml.Media.SolidColorBrush SelectionHighlightColor = default, Xaml.Media.SolidColorBrush SelectionHighlightColorWhenNotFocused = default, int? SelectionLength = default, int? SelectionStart = default, string Text = default, Xaml.TextAlignment? TextAlignment = default, Xaml.TextReadingOrder? TextReadingOrder = default, Xaml.TextWrapping? TextWrapping = default)
        {
            var ui = new Xaml.Controls.TextBox();
            if (AcceptsReturn is not null) ui.AcceptsReturn = AcceptsReturn.Value;
            if (CharacterCasing is not null) ui.CharacterCasing = CharacterCasing.Value;
            if (Description is not null) ui.Description = Description;
            if (DesiredCandidateWindowAlignment is not null) ui.DesiredCandidateWindowAlignment = DesiredCandidateWindowAlignment.Value;
            if (Header is not null) ui.Header = Header;
            if (HeaderTemplate is not null) ui.HeaderTemplate = HeaderTemplate;
            if (HorizontalTextAlignment is not null) ui.HorizontalTextAlignment = HorizontalTextAlignment.Value;
            if (InputScope is not null) ui.InputScope = InputScope;
            if (IsColorFontEnabled is not null) ui.IsColorFontEnabled = IsColorFontEnabled.Value;
            if (IsReadOnly is not null) ui.IsReadOnly = IsReadOnly.Value;
            if (IsSpellCheckEnabled is not null) ui.IsSpellCheckEnabled = IsSpellCheckEnabled.Value;
            if (IsTextPredictionEnabled is not null) ui.IsTextPredictionEnabled = IsTextPredictionEnabled.Value;
            if (MaxLength is not null) ui.MaxLength = MaxLength.Value;
            if (PlaceholderForeground is not null) ui.PlaceholderForeground = PlaceholderForeground;
            if (PlaceholderText is not null) ui.PlaceholderText = PlaceholderText;
            if (PreventKeyboardDisplayOnProgrammaticFocus is not null) ui.PreventKeyboardDisplayOnProgrammaticFocus = PreventKeyboardDisplayOnProgrammaticFocus.Value;
            if (SelectedText is not null) ui.SelectedText = SelectedText;
            if (SelectionFlyout is not null) ui.SelectionFlyout = SelectionFlyout;
            if (SelectionHighlightColor is not null) ui.SelectionHighlightColor = SelectionHighlightColor;
            if (SelectionHighlightColorWhenNotFocused is not null) ui.SelectionHighlightColorWhenNotFocused = SelectionHighlightColorWhenNotFocused;
            if (SelectionLength is not null) ui.SelectionLength = SelectionLength.Value;
            if (SelectionStart is not null) ui.SelectionStart = SelectionStart.Value;
            if (Text is not null) ui.Text = Text;
            if (TextAlignment is not null) ui.TextAlignment = TextAlignment.Value;
            if (TextReadingOrder is not null) ui.TextReadingOrder = TextReadingOrder.Value;
            if (TextWrapping is not null) ui.TextWrapping = TextWrapping.Value;
            return CSharpMarkup.WinUI.TextBox.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TextBox"/></summary>
        /// <remarks>Remark: TextBox().Bind() binds to <see cref="Xaml.Controls.TextBox.TextProperty"/></remarks>
        public static TextBox TextBox()
        {
            var ui = new Xaml.Controls.TextBox();
            return CSharpMarkup.WinUI.TextBox.StartChain(ui);
        }
    }

    public partial class TextBox : Control, IUI<Xaml.Controls.TextBox>, IDefaultBindProperty
    {
        static TextBox instance;

        internal static TextBox StartChain(Xaml.Controls.TextBox ui)
        {
            if (instance == null) instance = new TextBox();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TextBox ui;

        public new Xaml.Controls.TextBox UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.TextBox.TextProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.TextBox.TextProperty;

        public static implicit operator Xaml.UIElement(TextBox view) => view?.UI;

        public static implicit operator Xaml.Controls.TextBox(TextBox view) => view?.UI;

        public static implicit operator TextBox(Xaml.Controls.TextBox ui) => TextBox.StartChain(ui);

        public TextBox Invoke(Action<Xaml.Controls.TextBox> action) { action?.Invoke(UI); return this; }

        protected TextBox() { }
    }

    public static partial class TextBoxExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TextBox.AcceptsReturn"/></summary>
        public static TView AcceptsReturn<TView>(this TView view, bool value) where TView : TextBox { view.UI.AcceptsReturn = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.CharacterCasing"/></summary>
        public static TView CharacterCasing<TView>(this TView view, Xaml.Controls.CharacterCasing value) where TView : TextBox { view.UI.CharacterCasing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.Description"/></summary>
        public static TView Description<TView>(this TView view, object value) where TView : TextBox { view.UI.Description = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.DesiredCandidateWindowAlignment"/></summary>
        public static TView DesiredCandidateWindowAlignment<TView>(this TView view, Xaml.Controls.CandidateWindowAlignment value) where TView : TextBox { view.UI.DesiredCandidateWindowAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.Header"/></summary>
        public static TView Header<TView>(this TView view, object value) where TView : TextBox { view.UI.Header = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : TextBox { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.HorizontalTextAlignment"/></summary>
        public static TView HorizontalTextAlignment<TView>(this TView view, Xaml.TextAlignment value) where TView : TextBox { view.UI.HorizontalTextAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.InputScope"/></summary>
        public static TView InputScope<TView>(this TView view, Xaml.Input.InputScope value) where TView : TextBox { view.UI.InputScope = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.IsColorFontEnabled"/></summary>
        public static TView IsColorFontEnabled<TView>(this TView view, bool value) where TView : TextBox { view.UI.IsColorFontEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.IsReadOnly"/></summary>
        public static TView IsReadOnly<TView>(this TView view, bool value) where TView : TextBox { view.UI.IsReadOnly = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.IsSpellCheckEnabled"/></summary>
        public static TView IsSpellCheckEnabled<TView>(this TView view, bool value) where TView : TextBox { view.UI.IsSpellCheckEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.IsTextPredictionEnabled"/></summary>
        public static TView IsTextPredictionEnabled<TView>(this TView view, bool value) where TView : TextBox { view.UI.IsTextPredictionEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.MaxLength"/></summary>
        public static TView MaxLength<TView>(this TView view, int value) where TView : TextBox { view.UI.MaxLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.PlaceholderForeground"/></summary>
        public static TView PlaceholderForeground<TView>(this TView view, Xaml.Media.Brush value) where TView : TextBox { view.UI.PlaceholderForeground = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.PlaceholderForeground"/></summary>
        public static TView PlaceholderForeground<TView>(this TView view, Windows.UI.Color value) where TView : TextBox { view.UI.PlaceholderForeground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.PlaceholderForeground"/></summary>
        public static TView PlaceholderForeground<TView>(this TView view, string color) where TView : TextBox { view.UI.PlaceholderForeground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.PlaceholderText"/></summary>
        public static TView PlaceholderText<TView>(this TView view, string value) where TView : TextBox { view.UI.PlaceholderText = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.PreventKeyboardDisplayOnProgrammaticFocus"/></summary>
        public static TView PreventKeyboardDisplayOnProgrammaticFocus<TView>(this TView view, bool value) where TView : TextBox { view.UI.PreventKeyboardDisplayOnProgrammaticFocus = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.SelectedText"/></summary>
        public static TView SelectedText<TView>(this TView view, string value) where TView : TextBox { view.UI.SelectedText = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.SelectionFlyout"/></summary>
        public static TView SelectionFlyout<TView>(this TView view, Xaml.Controls.Primitives.FlyoutBase value) where TView : TextBox { view.UI.SelectionFlyout = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.SelectionHighlightColor"/></summary>
        public static TView SelectionHighlightColor<TView>(this TView view, Xaml.Media.SolidColorBrush value) where TView : TextBox { view.UI.SelectionHighlightColor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.SelectionHighlightColorWhenNotFocused"/></summary>
        public static TView SelectionHighlightColorWhenNotFocused<TView>(this TView view, Xaml.Media.SolidColorBrush value) where TView : TextBox { view.UI.SelectionHighlightColorWhenNotFocused = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.SelectionLength"/></summary>
        public static TView SelectionLength<TView>(this TView view, int value) where TView : TextBox { view.UI.SelectionLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.SelectionStart"/></summary>
        public static TView SelectionStart<TView>(this TView view, int value) where TView : TextBox { view.UI.SelectionStart = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.Text"/></summary>
        public static TView Text<TView>(this TView view, string value) where TView : TextBox { view.UI.Text = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.TextAlignment"/></summary>
        public static TView TextAlignment<TView>(this TView view, Xaml.TextAlignment value) where TView : TextBox { view.UI.TextAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.TextReadingOrder"/></summary>
        public static TView TextReadingOrder<TView>(this TView view, Xaml.TextReadingOrder value) where TView : TextBox { view.UI.TextReadingOrder = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TextBox.TextWrapping"/></summary>
        public static TView TextWrapping<TView>(this TView view, Xaml.TextWrapping value) where TView : TextBox { view.UI.TextWrapping = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.AcceptsReturn"/></summary>
        public static DependencyProperty<TTarget, bool> AcceptsReturn<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TextBox.AcceptsReturnProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.CanPasteClipboardContent"/></summary>
        public static DependencyProperty<TTarget, bool> CanPasteClipboardContent<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TextBox.CanPasteClipboardContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.CanRedo"/></summary>
        public static DependencyProperty<TTarget, bool> CanRedo<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TextBox.CanRedoProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.CanUndo"/></summary>
        public static DependencyProperty<TTarget, bool> CanUndo<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TextBox.CanUndoProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.CharacterCasing"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.CharacterCasing> CharacterCasing<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, Xaml.Controls.CharacterCasing>.Get(target, Xaml.Controls.TextBox.CharacterCasingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.Description"/></summary>
        public static DependencyProperty<TTarget, object> Description<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TextBox.DescriptionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.DesiredCandidateWindowAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.CandidateWindowAlignment> DesiredCandidateWindowAlignment<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, Xaml.Controls.CandidateWindowAlignment>.Get(target, Xaml.Controls.TextBox.DesiredCandidateWindowAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TextBox.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.TextBox.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.HorizontalTextAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextAlignment> HorizontalTextAlignment<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, Xaml.TextAlignment>.Get(target, Xaml.Controls.TextBox.HorizontalTextAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.InputScope"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.InputScope> InputScope<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, Xaml.Input.InputScope>.Get(target, Xaml.Controls.TextBox.InputScopeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.IsColorFontEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsColorFontEnabled<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TextBox.IsColorFontEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.IsReadOnly"/></summary>
        public static DependencyProperty<TTarget, bool> IsReadOnly<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TextBox.IsReadOnlyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.IsSpellCheckEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsSpellCheckEnabled<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TextBox.IsSpellCheckEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.IsTextPredictionEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextPredictionEnabled<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TextBox.IsTextPredictionEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.MaxLength"/></summary>
        public static DependencyProperty<TTarget, int> MaxLength<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.TextBox.MaxLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.PlaceholderForeground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> PlaceholderForeground<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.TextBox.PlaceholderForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.PlaceholderText"/></summary>
        public static DependencyProperty<TTarget, string> PlaceholderText<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.TextBox.PlaceholderTextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.PreventKeyboardDisplayOnProgrammaticFocus"/></summary>
        public static DependencyProperty<TTarget, bool> PreventKeyboardDisplayOnProgrammaticFocus<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TextBox.PreventKeyboardDisplayOnProgrammaticFocusProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.ProofingMenuFlyout"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase> ProofingMenuFlyout<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase>.Get(target, Xaml.Controls.TextBox.ProofingMenuFlyoutProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.SelectionFlyout"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase> SelectionFlyout<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase>.Get(target, Xaml.Controls.TextBox.SelectionFlyoutProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.SelectionHighlightColor"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.SolidColorBrush> SelectionHighlightColor<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, Xaml.Media.SolidColorBrush>.Get(target, Xaml.Controls.TextBox.SelectionHighlightColorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.SelectionHighlightColorWhenNotFocused"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.SolidColorBrush> SelectionHighlightColorWhenNotFocused<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, Xaml.Media.SolidColorBrush>.Get(target, Xaml.Controls.TextBox.SelectionHighlightColorWhenNotFocusedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.TextAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextAlignment> TextAlignment<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, Xaml.TextAlignment>.Get(target, Xaml.Controls.TextBox.TextAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.Text"/></summary>
        public static DependencyProperty<TTarget, string> Text<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.TextBox.TextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.TextReadingOrder"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextReadingOrder> TextReadingOrder<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, Xaml.TextReadingOrder>.Get(target, Xaml.Controls.TextBox.TextReadingOrderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TextBox.TextWrapping"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextWrapping> TextWrapping<TTarget>(this TTarget target) where TTarget : TextBox
        => DependencyProperty<TTarget, Xaml.TextWrapping>.Get(target, Xaml.Controls.TextBox.TextWrappingProperty);
    }
}

namespace CSharpMarkup.WinUI // TextCommandBarFlyout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TextCommandBarFlyout"/></summary>
        public static TextCommandBarFlyout TextCommandBarFlyout(params CommandBarElement[] PrimaryCommands)
        {
            var ui = new Xaml.Controls.TextCommandBarFlyout();
            for (int i = 0; i < PrimaryCommands.Length; i++)
            {
                var child = PrimaryCommands[i];
                if (child == null) continue;

                var subChildren = Spreader<CommandBarElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.PrimaryCommands.Add(subChildren[j].UI);
                else
                    ui.PrimaryCommands.Add(child.UI);
            }
            return CSharpMarkup.WinUI.TextCommandBarFlyout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TextCommandBarFlyout"/></summary>
        public static TextCommandBarFlyout TextCommandBarFlyout()
        {
            var ui = new Xaml.Controls.TextCommandBarFlyout();
            return CSharpMarkup.WinUI.TextCommandBarFlyout.StartChain(ui);
        }
    }

    public partial class TextCommandBarFlyout : CommandBarFlyout, IUI<Xaml.Controls.TextCommandBarFlyout>
    {
        static TextCommandBarFlyout instance;

        internal static TextCommandBarFlyout StartChain(Xaml.Controls.TextCommandBarFlyout ui)
        {
            if (instance == null) instance = new TextCommandBarFlyout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TextCommandBarFlyout ui;

        public new Xaml.Controls.TextCommandBarFlyout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.TextCommandBarFlyout(TextCommandBarFlyout view) => view?.UI;

        public static implicit operator TextCommandBarFlyout(Xaml.Controls.TextCommandBarFlyout ui) => TextCommandBarFlyout.StartChain(ui);

        public TextCommandBarFlyout Invoke(Action<Xaml.Controls.TextCommandBarFlyout> action) { action?.Invoke(UI); return this; }

        protected TextCommandBarFlyout() { }
    }
}

namespace CSharpMarkup.WinUI // TimePickedEventArgs
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TimePickedEventArgs"/></summary>
        public static TimePickedEventArgs TimePickedEventArgs()
        {
            var ui = new Xaml.Controls.TimePickedEventArgs();
            return CSharpMarkup.WinUI.TimePickedEventArgs.StartChain(ui);
        }
    }

    public partial class TimePickedEventArgs : DependencyObject, IUI<Xaml.Controls.TimePickedEventArgs>
    {
        static TimePickedEventArgs instance;

        internal static TimePickedEventArgs StartChain(Xaml.Controls.TimePickedEventArgs ui)
        {
            if (instance == null) instance = new TimePickedEventArgs();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TimePickedEventArgs ui;

        public new Xaml.Controls.TimePickedEventArgs UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.TimePickedEventArgs(TimePickedEventArgs view) => view?.UI;

        public static implicit operator TimePickedEventArgs(Xaml.Controls.TimePickedEventArgs ui) => TimePickedEventArgs.StartChain(ui);

        public TimePickedEventArgs Invoke(Action<Xaml.Controls.TimePickedEventArgs> action) { action?.Invoke(UI); return this; }

        protected TimePickedEventArgs() { }
    }
}

namespace CSharpMarkup.WinUI // TimePicker
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TimePicker"/></summary>
        /// <remarks>Remark: TimePicker().Bind() binds to <see cref="Xaml.Controls.TimePicker.TimeProperty"/></remarks>
        public static TimePicker TimePicker(UIObject Header)
        {
            var ui = new Xaml.Controls.TimePicker();
            if (Header is not null) ui.Header = Header.UI;
            return CSharpMarkup.WinUI.TimePicker.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TimePicker"/></summary>
        /// <remarks>Remark: TimePicker().Bind() binds to <see cref="Xaml.Controls.TimePicker.TimeProperty"/></remarks>
        public static TimePicker TimePicker(string ClockIdentifier = default, Xaml.DataTemplate HeaderTemplate = default, Xaml.Controls.LightDismissOverlayMode? LightDismissOverlayMode = default, int? MinuteIncrement = default, CSharpMarkup.WinUI.to.TimeSpan? SelectedTime = default, CSharpMarkup.WinUI.to.TimeSpan? Time = default, UIObject Header = default)
        {
            var ui = new Xaml.Controls.TimePicker();
            if (ClockIdentifier is not null) ui.ClockIdentifier = ClockIdentifier;
            if (HeaderTemplate is not null) ui.HeaderTemplate = HeaderTemplate;
            if (LightDismissOverlayMode is not null) ui.LightDismissOverlayMode = LightDismissOverlayMode.Value;
            if (MinuteIncrement is not null) ui.MinuteIncrement = MinuteIncrement.Value;
            if (SelectedTime is not null) ui.SelectedTime = SelectedTime.Value;
            if (Time is not null) ui.Time = Time.Value;
            if (Header is not null) ui.Header = Header.UI;
            return CSharpMarkup.WinUI.TimePicker.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TimePicker"/></summary>
        /// <remarks>Remark: TimePicker().Bind() binds to <see cref="Xaml.Controls.TimePicker.TimeProperty"/></remarks>
        public static TimePicker TimePicker()
        {
            var ui = new Xaml.Controls.TimePicker();
            return CSharpMarkup.WinUI.TimePicker.StartChain(ui);
        }
    }

    public partial class TimePicker : Control, IUI<Xaml.Controls.TimePicker>, IDefaultBindProperty
    {
        static TimePicker instance;

        internal static TimePicker StartChain(Xaml.Controls.TimePicker ui)
        {
            if (instance == null) instance = new TimePicker();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TimePicker ui;

        public new Xaml.Controls.TimePicker UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.TimePicker.TimeProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.TimePicker.TimeProperty;

        public static implicit operator Xaml.UIElement(TimePicker view) => view?.UI;

        public static implicit operator Xaml.Controls.TimePicker(TimePicker view) => view?.UI;

        public static implicit operator TimePicker(Xaml.Controls.TimePicker ui) => TimePicker.StartChain(ui);

        public TimePicker Invoke(Action<Xaml.Controls.TimePicker> action) { action?.Invoke(UI); return this; }

        protected TimePicker() { }
    }

    public static partial class TimePickerExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TimePicker.ClockIdentifier"/></summary>
        public static TView ClockIdentifier<TView>(this TView view, string value) where TView : TimePicker { view.UI.ClockIdentifier = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TimePicker.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : TimePicker { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TimePicker.LightDismissOverlayMode"/></summary>
        public static TView LightDismissOverlayMode<TView>(this TView view, Xaml.Controls.LightDismissOverlayMode value) where TView : TimePicker { view.UI.LightDismissOverlayMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TimePicker.MinuteIncrement"/></summary>
        public static TView MinuteIncrement<TView>(this TView view, int value) where TView : TimePicker { view.UI.MinuteIncrement = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TimePicker.SelectedTime"/></summary>
        public static TView SelectedTime<TView>(this TView view, CSharpMarkup.WinUI.to.TimeSpan value) where TView : TimePicker { view.UI.SelectedTime = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TimePicker.Time"/></summary>
        public static TView Time<TView>(this TView view, CSharpMarkup.WinUI.to.TimeSpan value) where TView : TimePicker { view.UI.Time = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TimePicker.ClockIdentifier"/></summary>
        public static DependencyProperty<TTarget, string> ClockIdentifier<TTarget>(this TTarget target) where TTarget : TimePicker
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.TimePicker.ClockIdentifierProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TimePicker.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : TimePicker
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TimePicker.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TimePicker.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : TimePicker
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.TimePicker.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TimePicker.LightDismissOverlayMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> LightDismissOverlayMode<TTarget>(this TTarget target) where TTarget : TimePicker
        => DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode>.Get(target, Xaml.Controls.TimePicker.LightDismissOverlayModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TimePicker.MinuteIncrement"/></summary>
        public static DependencyProperty<TTarget, int> MinuteIncrement<TTarget>(this TTarget target) where TTarget : TimePicker
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.TimePicker.MinuteIncrementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TimePicker.SelectedTime"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.TimeSpan> SelectedTime<TTarget>(this TTarget target) where TTarget : TimePicker
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.TimeSpan>.Get(target, Xaml.Controls.TimePicker.SelectedTimeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TimePicker.Time"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.TimeSpan> Time<TTarget>(this TTarget target) where TTarget : TimePicker
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.TimeSpan>.Get(target, Xaml.Controls.TimePicker.TimeProperty);
    }
}

namespace CSharpMarkup.WinUI // TimePickerFlyout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TimePickerFlyout"/></summary>
        /// <remarks>Remark: TimePickerFlyout().Bind() binds to <see cref="Xaml.Controls.TimePickerFlyout.TimeProperty"/></remarks>
        public static TimePickerFlyout TimePickerFlyout(string ClockIdentifier = default, int? MinuteIncrement = default, CSharpMarkup.WinUI.to.TimeSpan? Time = default)
        {
            var ui = new Xaml.Controls.TimePickerFlyout();
            if (ClockIdentifier is not null) ui.ClockIdentifier = ClockIdentifier;
            if (MinuteIncrement is not null) ui.MinuteIncrement = MinuteIncrement.Value;
            if (Time is not null) ui.Time = Time.Value;
            return CSharpMarkup.WinUI.TimePickerFlyout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TimePickerFlyout"/></summary>
        /// <remarks>Remark: TimePickerFlyout().Bind() binds to <see cref="Xaml.Controls.TimePickerFlyout.TimeProperty"/></remarks>
        public static TimePickerFlyout TimePickerFlyout()
        {
            var ui = new Xaml.Controls.TimePickerFlyout();
            return CSharpMarkup.WinUI.TimePickerFlyout.StartChain(ui);
        }
    }

    public partial class TimePickerFlyout : PickerFlyoutBase, IUI<Xaml.Controls.TimePickerFlyout>, IDefaultBindProperty
    {
        static TimePickerFlyout instance;

        internal static TimePickerFlyout StartChain(Xaml.Controls.TimePickerFlyout ui)
        {
            if (instance == null) instance = new TimePickerFlyout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TimePickerFlyout ui;

        public new Xaml.Controls.TimePickerFlyout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.TimePickerFlyout.TimeProperty"/></summary>
        public Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.TimePickerFlyout.TimeProperty;

        public static implicit operator Xaml.Controls.TimePickerFlyout(TimePickerFlyout view) => view?.UI;

        public static implicit operator TimePickerFlyout(Xaml.Controls.TimePickerFlyout ui) => TimePickerFlyout.StartChain(ui);

        public TimePickerFlyout Invoke(Action<Xaml.Controls.TimePickerFlyout> action) { action?.Invoke(UI); return this; }

        protected TimePickerFlyout() { }
    }

    public static partial class TimePickerFlyoutExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TimePickerFlyout.ClockIdentifier"/></summary>
        public static TView ClockIdentifier<TView>(this TView view, string value) where TView : TimePickerFlyout { view.UI.ClockIdentifier = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TimePickerFlyout.MinuteIncrement"/></summary>
        public static TView MinuteIncrement<TView>(this TView view, int value) where TView : TimePickerFlyout { view.UI.MinuteIncrement = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TimePickerFlyout.Time"/></summary>
        public static TView Time<TView>(this TView view, CSharpMarkup.WinUI.to.TimeSpan value) where TView : TimePickerFlyout { view.UI.Time = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TimePickerFlyout.ClockIdentifier"/></summary>
        public static DependencyProperty<TTarget, string> ClockIdentifier<TTarget>(this TTarget target) where TTarget : TimePickerFlyout
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.TimePickerFlyout.ClockIdentifierProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TimePickerFlyout.MinuteIncrement"/></summary>
        public static DependencyProperty<TTarget, int> MinuteIncrement<TTarget>(this TTarget target) where TTarget : TimePickerFlyout
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.TimePickerFlyout.MinuteIncrementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TimePickerFlyout.Time"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.TimeSpan> Time<TTarget>(this TTarget target) where TTarget : TimePickerFlyout
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.TimeSpan>.Get(target, Xaml.Controls.TimePickerFlyout.TimeProperty);
    }
}

namespace CSharpMarkup.WinUI // TimePickerFlyoutPresenter
{
    public partial class TimePickerFlyoutPresenter : Control, IUI<Xaml.Controls.TimePickerFlyoutPresenter>
    {
        Xaml.Controls.TimePickerFlyoutPresenter ui;

        public new Xaml.Controls.TimePickerFlyoutPresenter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TimePickerFlyoutPresenter Invoke(Action<Xaml.Controls.TimePickerFlyoutPresenter> action) { action?.Invoke(UI); return this; }

        protected TimePickerFlyoutPresenter() { }
    }

    public static partial class TimePickerFlyoutPresenterExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TimePickerFlyoutPresenter.IsDefaultShadowEnabled"/></summary>
        public static TView IsDefaultShadowEnabled<TView>(this TView view, bool value) where TView : TimePickerFlyoutPresenter { view.UI.IsDefaultShadowEnabled = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TimePickerFlyoutPresenter.IsDefaultShadowEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsDefaultShadowEnabled<TTarget>(this TTarget target) where TTarget : TimePickerFlyoutPresenter
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TimePickerFlyoutPresenter.IsDefaultShadowEnabledProperty);
    }
}

namespace CSharpMarkup.WinUI // TitleBar
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TitleBar"/></summary>
        public static TitleBar TitleBar(Xaml.UIElement Content)
        {
            var ui = new Xaml.Controls.TitleBar();
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.TitleBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TitleBar"/></summary>
        public static TitleBar TitleBar(Xaml.Controls.IconSource IconSource = default, bool? IsBackButtonEnabled = default, bool? IsBackButtonVisible = default, bool? IsPaneToggleButtonVisible = default, Xaml.UIElement LeftHeader = default, Xaml.UIElement RightHeader = default, string Subtitle = default, string Title = default, Xaml.UIElement Content = default)
        {
            var ui = new Xaml.Controls.TitleBar();
            if (IconSource is not null) ui.IconSource = IconSource;
            if (IsBackButtonEnabled is not null) ui.IsBackButtonEnabled = IsBackButtonEnabled.Value;
            if (IsBackButtonVisible is not null) ui.IsBackButtonVisible = IsBackButtonVisible.Value;
            if (IsPaneToggleButtonVisible is not null) ui.IsPaneToggleButtonVisible = IsPaneToggleButtonVisible.Value;
            if (LeftHeader is not null) ui.LeftHeader = LeftHeader;
            if (RightHeader is not null) ui.RightHeader = RightHeader;
            if (Subtitle is not null) ui.Subtitle = Subtitle;
            if (Title is not null) ui.Title = Title;
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.TitleBar.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TitleBar"/></summary>
        public static TitleBar TitleBar()
        {
            var ui = new Xaml.Controls.TitleBar();
            return CSharpMarkup.WinUI.TitleBar.StartChain(ui);
        }
    }

    public partial class TitleBar : Control, IUI<Xaml.Controls.TitleBar>
    {
        static TitleBar instance;

        internal static TitleBar StartChain(Xaml.Controls.TitleBar ui)
        {
            if (instance == null) instance = new TitleBar();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TitleBar ui;

        public new Xaml.Controls.TitleBar UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(TitleBar view) => view?.UI;

        public static implicit operator Xaml.Controls.TitleBar(TitleBar view) => view?.UI;

        public static implicit operator TitleBar(Xaml.Controls.TitleBar ui) => TitleBar.StartChain(ui);

        public TitleBar Invoke(Action<Xaml.Controls.TitleBar> action) { action?.Invoke(UI); return this; }

        protected TitleBar() { }
    }

    public static partial class TitleBarExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TitleBar.IconSource"/></summary>
        public static TView IconSource<TView>(this TView view, Xaml.Controls.IconSource value) where TView : TitleBar { view.UI.IconSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TitleBar.IsBackButtonEnabled"/></summary>
        public static TView IsBackButtonEnabled<TView>(this TView view, bool value) where TView : TitleBar { view.UI.IsBackButtonEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TitleBar.IsBackButtonVisible"/></summary>
        public static TView IsBackButtonVisible<TView>(this TView view, bool value) where TView : TitleBar { view.UI.IsBackButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TitleBar.IsPaneToggleButtonVisible"/></summary>
        public static TView IsPaneToggleButtonVisible<TView>(this TView view, bool value) where TView : TitleBar { view.UI.IsPaneToggleButtonVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TitleBar.LeftHeader"/></summary>
        public static TView LeftHeader<TView>(this TView view, Xaml.UIElement value) where TView : TitleBar { view.UI.LeftHeader = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TitleBar.RightHeader"/></summary>
        public static TView RightHeader<TView>(this TView view, Xaml.UIElement value) where TView : TitleBar { view.UI.RightHeader = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TitleBar.Subtitle"/></summary>
        public static TView Subtitle<TView>(this TView view, string value) where TView : TitleBar { view.UI.Subtitle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TitleBar.Title"/></summary>
        public static TView Title<TView>(this TView view, string value) where TView : TitleBar { view.UI.Title = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TitleBar.Content"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Content<TTarget>(this TTarget target) where TTarget : TitleBar
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.TitleBar.ContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TitleBar.IconSource"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconSource> IconSource<TTarget>(this TTarget target) where TTarget : TitleBar
        => DependencyProperty<TTarget, Xaml.Controls.IconSource>.Get(target, Xaml.Controls.TitleBar.IconSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TitleBar.IsBackButtonEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsBackButtonEnabled<TTarget>(this TTarget target) where TTarget : TitleBar
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TitleBar.IsBackButtonEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TitleBar.IsBackButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsBackButtonVisible<TTarget>(this TTarget target) where TTarget : TitleBar
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TitleBar.IsBackButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TitleBar.IsPaneToggleButtonVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsPaneToggleButtonVisible<TTarget>(this TTarget target) where TTarget : TitleBar
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TitleBar.IsPaneToggleButtonVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TitleBar.LeftHeader"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> LeftHeader<TTarget>(this TTarget target) where TTarget : TitleBar
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.TitleBar.LeftHeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TitleBar.RightHeader"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> RightHeader<TTarget>(this TTarget target) where TTarget : TitleBar
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.TitleBar.RightHeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TitleBar.Subtitle"/></summary>
        public static DependencyProperty<TTarget, string> Subtitle<TTarget>(this TTarget target) where TTarget : TitleBar
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.TitleBar.SubtitleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TitleBar.TemplateSettings"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.TitleBarTemplateSettings> TemplateSettings<TTarget>(this TTarget target) where TTarget : TitleBar
        => DependencyProperty<TTarget, Xaml.Controls.TitleBarTemplateSettings>.Get(target, Xaml.Controls.TitleBar.TemplateSettingsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TitleBar.Title"/></summary>
        public static DependencyProperty<TTarget, string> Title<TTarget>(this TTarget target) where TTarget : TitleBar
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.TitleBar.TitleProperty);
    }
}

namespace CSharpMarkup.WinUI // TitleBarAutomationPeer
{
    public partial class TitleBarAutomationPeer : FrameworkElementAutomationPeer, IUI<Xaml.Controls.TitleBarAutomationPeer>
    {
        Xaml.Controls.TitleBarAutomationPeer ui;

        public new Xaml.Controls.TitleBarAutomationPeer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TitleBarAutomationPeer Invoke(Action<Xaml.Controls.TitleBarAutomationPeer> action) { action?.Invoke(UI); return this; }

        protected TitleBarAutomationPeer() { }
    }
}

namespace CSharpMarkup.WinUI // TitleBarTemplateSettings
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TitleBarTemplateSettings"/></summary>
        public static TitleBarTemplateSettings TitleBarTemplateSettings(Xaml.Controls.IconElement IconElement = default)
        {
            var ui = new Xaml.Controls.TitleBarTemplateSettings();
            if (IconElement is not null) ui.IconElement = IconElement;
            return CSharpMarkup.WinUI.TitleBarTemplateSettings.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TitleBarTemplateSettings"/></summary>
        public static TitleBarTemplateSettings TitleBarTemplateSettings()
        {
            var ui = new Xaml.Controls.TitleBarTemplateSettings();
            return CSharpMarkup.WinUI.TitleBarTemplateSettings.StartChain(ui);
        }
    }

    public partial class TitleBarTemplateSettings : DependencyObject, IUI<Xaml.Controls.TitleBarTemplateSettings>
    {
        static TitleBarTemplateSettings instance;

        internal static TitleBarTemplateSettings StartChain(Xaml.Controls.TitleBarTemplateSettings ui)
        {
            if (instance == null) instance = new TitleBarTemplateSettings();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TitleBarTemplateSettings ui;

        public new Xaml.Controls.TitleBarTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.TitleBarTemplateSettings(TitleBarTemplateSettings view) => view?.UI;

        public static implicit operator TitleBarTemplateSettings(Xaml.Controls.TitleBarTemplateSettings ui) => TitleBarTemplateSettings.StartChain(ui);

        public TitleBarTemplateSettings Invoke(Action<Xaml.Controls.TitleBarTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected TitleBarTemplateSettings() { }
    }

    public static partial class TitleBarTemplateSettingsExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TitleBarTemplateSettings.IconElement"/></summary>
        public static TView IconElement<TView>(this TView view, Xaml.Controls.IconElement value) where TView : TitleBarTemplateSettings { view.UI.IconElement = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TitleBarTemplateSettings.IconElement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconElement> IconElement<TTarget>(this TTarget target) where TTarget : TitleBarTemplateSettings
        => DependencyProperty<TTarget, Xaml.Controls.IconElement>.Get(target, Xaml.Controls.TitleBarTemplateSettings.IconElementProperty);
    }
}

namespace CSharpMarkup.WinUI // ToggleMenuFlyoutItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ToggleMenuFlyoutItem"/></summary>
        /// <remarks>Remark: ToggleMenuFlyoutItem().Bind() binds to <see cref="Xaml.Controls.ToggleMenuFlyoutItem.IsCheckedProperty"/></remarks>
        public static ToggleMenuFlyoutItem ToggleMenuFlyoutItem(string Text)
        {
            var ui = new Xaml.Controls.ToggleMenuFlyoutItem();
            if (Text is not null) ui.Text = Text;
            return CSharpMarkup.WinUI.ToggleMenuFlyoutItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ToggleMenuFlyoutItem"/></summary>
        /// <remarks>Remark: ToggleMenuFlyoutItem().Bind() binds to <see cref="Xaml.Controls.ToggleMenuFlyoutItem.IsCheckedProperty"/></remarks>
        public static ToggleMenuFlyoutItem ToggleMenuFlyoutItem(bool? IsChecked = default, string Text = default)
        {
            var ui = new Xaml.Controls.ToggleMenuFlyoutItem();
            if (IsChecked is not null) ui.IsChecked = IsChecked.Value;
            if (Text is not null) ui.Text = Text;
            return CSharpMarkup.WinUI.ToggleMenuFlyoutItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ToggleMenuFlyoutItem"/></summary>
        /// <remarks>Remark: ToggleMenuFlyoutItem().Bind() binds to <see cref="Xaml.Controls.ToggleMenuFlyoutItem.IsCheckedProperty"/></remarks>
        public static ToggleMenuFlyoutItem ToggleMenuFlyoutItem()
        {
            var ui = new Xaml.Controls.ToggleMenuFlyoutItem();
            return CSharpMarkup.WinUI.ToggleMenuFlyoutItem.StartChain(ui);
        }
    }

    public partial class ToggleMenuFlyoutItem : MenuFlyoutItem, IUI<Xaml.Controls.ToggleMenuFlyoutItem>, IDefaultBindProperty
    {
        static ToggleMenuFlyoutItem instance;

        internal static ToggleMenuFlyoutItem StartChain(Xaml.Controls.ToggleMenuFlyoutItem ui)
        {
            if (instance == null) instance = new ToggleMenuFlyoutItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ToggleMenuFlyoutItem ui;

        public new Xaml.Controls.ToggleMenuFlyoutItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.ToggleMenuFlyoutItem.IsCheckedProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.ToggleMenuFlyoutItem.IsCheckedProperty;

        public static implicit operator Xaml.UIElement(ToggleMenuFlyoutItem view) => view?.UI;

        public static implicit operator Xaml.Controls.ToggleMenuFlyoutItem(ToggleMenuFlyoutItem view) => view?.UI;

        public static implicit operator ToggleMenuFlyoutItem(Xaml.Controls.ToggleMenuFlyoutItem ui) => ToggleMenuFlyoutItem.StartChain(ui);

        public ToggleMenuFlyoutItem Invoke(Action<Xaml.Controls.ToggleMenuFlyoutItem> action) { action?.Invoke(UI); return this; }

        protected ToggleMenuFlyoutItem() { }
    }

    public static partial class ToggleMenuFlyoutItemExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ToggleMenuFlyoutItem.IsChecked"/></summary>
        public static TView IsChecked<TView>(this TView view, bool value) where TView : ToggleMenuFlyoutItem { view.UI.IsChecked = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToggleMenuFlyoutItem.IsChecked"/></summary>
        public static DependencyProperty<TTarget, bool> IsChecked<TTarget>(this TTarget target) where TTarget : ToggleMenuFlyoutItem
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ToggleMenuFlyoutItem.IsCheckedProperty);
    }
}

namespace CSharpMarkup.WinUI // ToggleSplitButton
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ToggleSplitButton"/></summary>
        public static ToggleSplitButton ToggleSplitButton(UIObject Content)
        {
            var ui = new Xaml.Controls.ToggleSplitButton();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ToggleSplitButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ToggleSplitButton"/></summary>
        public static ToggleSplitButton ToggleSplitButton(bool? IsChecked = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.ToggleSplitButton();
            if (IsChecked is not null) ui.IsChecked = IsChecked.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ToggleSplitButton.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ToggleSplitButton"/></summary>
        public static ToggleSplitButton ToggleSplitButton()
        {
            var ui = new Xaml.Controls.ToggleSplitButton();
            return CSharpMarkup.WinUI.ToggleSplitButton.StartChain(ui);
        }
    }

    public partial class ToggleSplitButton : SplitButton, IUI<Xaml.Controls.ToggleSplitButton>
    {
        static ToggleSplitButton instance;

        internal static ToggleSplitButton StartChain(Xaml.Controls.ToggleSplitButton ui)
        {
            if (instance == null) instance = new ToggleSplitButton();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ToggleSplitButton ui;

        public new Xaml.Controls.ToggleSplitButton UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ToggleSplitButton view) => view?.UI;

        public static implicit operator Xaml.Controls.ToggleSplitButton(ToggleSplitButton view) => view?.UI;

        public static implicit operator ToggleSplitButton(Xaml.Controls.ToggleSplitButton ui) => ToggleSplitButton.StartChain(ui);

        public ToggleSplitButton Invoke(Action<Xaml.Controls.ToggleSplitButton> action) { action?.Invoke(UI); return this; }

        protected ToggleSplitButton() { }
    }

    public static partial class ToggleSplitButtonExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ToggleSplitButton.IsChecked"/></summary>
        public static TView IsChecked<TView>(this TView view, bool value) where TView : ToggleSplitButton { view.UI.IsChecked = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToggleSplitButton.IsChecked"/></summary>
        public static DependencyProperty<TTarget, bool> IsChecked<TTarget>(this TTarget target) where TTarget : ToggleSplitButton
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ToggleSplitButton.IsCheckedProperty);
    }
}

namespace CSharpMarkup.WinUI // ToggleSwitch
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ToggleSwitch"/></summary>
        /// <remarks>Remark: ToggleSwitch().Bind() binds to <see cref="Xaml.Controls.ToggleSwitch.IsOnProperty"/></remarks>
        public static ToggleSwitch ToggleSwitch(UIObject Header)
        {
            var ui = new Xaml.Controls.ToggleSwitch();
            if (Header is not null) ui.Header = Header.UI;
            return CSharpMarkup.WinUI.ToggleSwitch.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ToggleSwitch"/></summary>
        /// <remarks>Remark: ToggleSwitch().Bind() binds to <see cref="Xaml.Controls.ToggleSwitch.IsOnProperty"/></remarks>
        public static ToggleSwitch ToggleSwitch(Xaml.DataTemplate HeaderTemplate = default, bool? IsOn = default, object OffContent = default, Xaml.DataTemplate OffContentTemplate = default, object OnContent = default, Xaml.DataTemplate OnContentTemplate = default, UIObject Header = default)
        {
            var ui = new Xaml.Controls.ToggleSwitch();
            if (HeaderTemplate is not null) ui.HeaderTemplate = HeaderTemplate;
            if (IsOn is not null) ui.IsOn = IsOn.Value;
            if (OffContent is not null) ui.OffContent = OffContent;
            if (OffContentTemplate is not null) ui.OffContentTemplate = OffContentTemplate;
            if (OnContent is not null) ui.OnContent = OnContent;
            if (OnContentTemplate is not null) ui.OnContentTemplate = OnContentTemplate;
            if (Header is not null) ui.Header = Header.UI;
            return CSharpMarkup.WinUI.ToggleSwitch.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ToggleSwitch"/></summary>
        /// <remarks>Remark: ToggleSwitch().Bind() binds to <see cref="Xaml.Controls.ToggleSwitch.IsOnProperty"/></remarks>
        public static ToggleSwitch ToggleSwitch()
        {
            var ui = new Xaml.Controls.ToggleSwitch();
            return CSharpMarkup.WinUI.ToggleSwitch.StartChain(ui);
        }
    }

    public partial class ToggleSwitch : Control, IUI<Xaml.Controls.ToggleSwitch>, IDefaultBindProperty
    {
        static ToggleSwitch instance;

        internal static ToggleSwitch StartChain(Xaml.Controls.ToggleSwitch ui)
        {
            if (instance == null) instance = new ToggleSwitch();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ToggleSwitch ui;

        public new Xaml.Controls.ToggleSwitch UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.ToggleSwitch.IsOnProperty"/></summary>
        public Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.ToggleSwitch.IsOnProperty;

        public static implicit operator Xaml.UIElement(ToggleSwitch view) => view?.UI;

        public static implicit operator Xaml.Controls.ToggleSwitch(ToggleSwitch view) => view?.UI;

        public static implicit operator ToggleSwitch(Xaml.Controls.ToggleSwitch ui) => ToggleSwitch.StartChain(ui);

        public ToggleSwitch Invoke(Action<Xaml.Controls.ToggleSwitch> action) { action?.Invoke(UI); return this; }

        protected ToggleSwitch() { }
    }

    public static partial class ToggleSwitchExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ToggleSwitch.HeaderTemplate"/></summary>
        public static TView HeaderTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : ToggleSwitch { view.UI.HeaderTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ToggleSwitch.IsOn"/></summary>
        public static TView IsOn<TView>(this TView view, bool value) where TView : ToggleSwitch { view.UI.IsOn = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ToggleSwitch.OffContent"/></summary>
        public static TView OffContent<TView>(this TView view, object value) where TView : ToggleSwitch { view.UI.OffContent = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ToggleSwitch.OffContentTemplate"/></summary>
        public static TView OffContentTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : ToggleSwitch { view.UI.OffContentTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ToggleSwitch.OnContent"/></summary>
        public static TView OnContent<TView>(this TView view, object value) where TView : ToggleSwitch { view.UI.OnContent = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ToggleSwitch.OnContentTemplate"/></summary>
        public static TView OnContentTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : ToggleSwitch { view.UI.OnContentTemplate = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToggleSwitch.Header"/></summary>
        public static DependencyProperty<TTarget, object> Header<TTarget>(this TTarget target) where TTarget : ToggleSwitch
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ToggleSwitch.HeaderProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToggleSwitch.HeaderTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> HeaderTemplate<TTarget>(this TTarget target) where TTarget : ToggleSwitch
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.ToggleSwitch.HeaderTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToggleSwitch.IsOn"/></summary>
        public static DependencyProperty<TTarget, bool> IsOn<TTarget>(this TTarget target) where TTarget : ToggleSwitch
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ToggleSwitch.IsOnProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToggleSwitch.OffContent"/></summary>
        public static DependencyProperty<TTarget, object> OffContent<TTarget>(this TTarget target) where TTarget : ToggleSwitch
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ToggleSwitch.OffContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToggleSwitch.OffContentTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> OffContentTemplate<TTarget>(this TTarget target) where TTarget : ToggleSwitch
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.ToggleSwitch.OffContentTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToggleSwitch.OnContent"/></summary>
        public static DependencyProperty<TTarget, object> OnContent<TTarget>(this TTarget target) where TTarget : ToggleSwitch
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ToggleSwitch.OnContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToggleSwitch.OnContentTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> OnContentTemplate<TTarget>(this TTarget target) where TTarget : ToggleSwitch
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.ToggleSwitch.OnContentTemplateProperty);
    }
}

namespace CSharpMarkup.WinUI // ToolTip
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.ToolTip"/></summary>
        public static ToolTip ToolTip(UIObject Content)
        {
            var ui = new Xaml.Controls.ToolTip();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ToolTip.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ToolTip"/></summary>
        public static ToolTip ToolTip(double? HorizontalOffset = default, bool? IsOpen = default, Xaml.Controls.Primitives.PlacementMode? Placement = default, Windows.Foundation.Rect? PlacementRect = default, Xaml.UIElement PlacementTarget = default, double? VerticalOffset = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.ToolTip();
            if (HorizontalOffset is not null) ui.HorizontalOffset = HorizontalOffset.Value;
            if (IsOpen is not null) ui.IsOpen = IsOpen.Value;
            if (Placement is not null) ui.Placement = Placement.Value;
            if (PlacementRect is not null) ui.PlacementRect = PlacementRect.Value;
            if (PlacementTarget is not null) ui.PlacementTarget = PlacementTarget;
            if (VerticalOffset is not null) ui.VerticalOffset = VerticalOffset.Value;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.ToolTip.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.ToolTip"/></summary>
        public static ToolTip ToolTip()
        {
            var ui = new Xaml.Controls.ToolTip();
            return CSharpMarkup.WinUI.ToolTip.StartChain(ui);
        }
    }

    public partial class ToolTip : ContentControl, IUI<Xaml.Controls.ToolTip>
    {
        static ToolTip instance;

        internal static ToolTip StartChain(Xaml.Controls.ToolTip ui)
        {
            if (instance == null) instance = new ToolTip();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.ToolTip ui;

        public new Xaml.Controls.ToolTip UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(ToolTip view) => view?.UI;

        public static implicit operator Xaml.Controls.ToolTip(ToolTip view) => view?.UI;

        public static implicit operator ToolTip(Xaml.Controls.ToolTip ui) => ToolTip.StartChain(ui);

        public ToolTip Invoke(Action<Xaml.Controls.ToolTip> action) { action?.Invoke(UI); return this; }

        protected ToolTip() { }
    }

    public static partial class ToolTipExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ToolTip.HorizontalOffset"/></summary>
        public static TView HorizontalOffset<TView>(this TView view, double value) where TView : ToolTip { view.UI.HorizontalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ToolTip.IsOpen"/></summary>
        public static TView IsOpen<TView>(this TView view, bool value) where TView : ToolTip { view.UI.IsOpen = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ToolTip.Placement"/></summary>
        public static TView Placement<TView>(this TView view, Xaml.Controls.Primitives.PlacementMode value) where TView : ToolTip { view.UI.Placement = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ToolTip.PlacementRect"/></summary>
        public static TView PlacementRect<TView>(this TView view, Windows.Foundation.Rect? value) where TView : ToolTip { view.UI.PlacementRect = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ToolTip.PlacementTarget"/></summary>
        public static TView PlacementTarget<TView>(this TView view, Xaml.UIElement value) where TView : ToolTip { view.UI.PlacementTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.ToolTip.VerticalOffset"/></summary>
        public static TView VerticalOffset<TView>(this TView view, double value) where TView : ToolTip { view.UI.VerticalOffset = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToolTip.HorizontalOffset"/></summary>
        public static DependencyProperty<TTarget, double> HorizontalOffset<TTarget>(this TTarget target) where TTarget : ToolTip
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ToolTip.HorizontalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToolTip.IsOpen"/></summary>
        public static DependencyProperty<TTarget, bool> IsOpen<TTarget>(this TTarget target) where TTarget : ToolTip
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.ToolTip.IsOpenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToolTip.Placement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.PlacementMode> Placement<TTarget>(this TTarget target) where TTarget : ToolTip
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.PlacementMode>.Get(target, Xaml.Controls.ToolTip.PlacementProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToolTip.PlacementRect"/></summary>
        public static DependencyProperty<TTarget, Windows.Foundation.Rect?> PlacementRect<TTarget>(this TTarget target) where TTarget : ToolTip
        => DependencyProperty<TTarget, Windows.Foundation.Rect?>.Get(target, Xaml.Controls.ToolTip.PlacementRectProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToolTip.PlacementTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> PlacementTarget<TTarget>(this TTarget target) where TTarget : ToolTip
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.ToolTip.PlacementTargetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToolTip.VerticalOffset"/></summary>
        public static DependencyProperty<TTarget, double> VerticalOffset<TTarget>(this TTarget target) where TTarget : ToolTip
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.ToolTip.VerticalOffsetProperty);
    }
}

namespace CSharpMarkup.WinUI // ToolTipService
{
    public static partial class ToolTipServiceExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.ToolTipService.Placement"/></summary>
        public static TTarget ToolTipService_Placement<TTarget>(this TTarget target, Xaml.Controls.Primitives.PlacementMode value) where TTarget : DependencyObject
        { Xaml.Controls.ToolTipService.SetPlacement(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToolTipService.Placement"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.PlacementMode> ToolTipService_Placement<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.PlacementMode>.Get(target, Xaml.Controls.ToolTipService.PlacementProperty);

        /// <summary>Set <see cref="Xaml.Controls.ToolTipService.PlacementTarget"/></summary>
        public static TTarget ToolTipService_PlacementTarget<TTarget>(this TTarget target, Xaml.UIElement value) where TTarget : DependencyObject
        { Xaml.Controls.ToolTipService.SetPlacementTarget(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToolTipService.PlacementTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> ToolTipService_PlacementTarget<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.ToolTipService.PlacementTargetProperty);

        /// <summary>Set <see cref="Xaml.Controls.ToolTipService.ToolTip"/></summary>
        public static TTarget ToolTipService_ToolTip<TTarget>(this TTarget target, object value) where TTarget : DependencyObject
        { Xaml.Controls.ToolTipService.SetToolTip(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.ToolTipService.ToolTip"/></summary>
        public static DependencyProperty<TTarget, object> ToolTipService_ToolTip<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.ToolTipService.ToolTipProperty);

        /// <summary>Set <see cref="Xaml.Controls.ToolTipService"/> attached properties</summary>
        public static TTarget ToolTipService<TTarget>(this TTarget target

            , Xaml.Controls.Primitives.PlacementMode? Placement = default

            , Xaml.UIElement PlacementTarget = default

            , object ToolTip = default

        ) where TTarget : DependencyObject
        {
            if (Placement is not null) Xaml.Controls.ToolTipService.SetPlacement(target.UI, Placement.Value);

            if (PlacementTarget is not null) Xaml.Controls.ToolTipService.SetPlacementTarget(target.UI, PlacementTarget);

            if (ToolTip is not null) Xaml.Controls.ToolTipService.SetToolTip(target.UI, ToolTip);

            return target;
        }
    }
}

namespace CSharpMarkup.WinUI // TreeView
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TreeView"/></summary>
        /// <remarks>Remark: TreeView().Bind() binds to <see cref="Xaml.Controls.TreeView.ItemsSourceProperty"/></remarks>
        public static TreeView TreeView(bool? CanDragItems = default, bool? CanReorderItems = default, Xaml.Style ItemContainerStyle = default, Xaml.Controls.StyleSelector ItemContainerStyleSelector = default, Xaml.Media.Animation.TransitionCollection ItemContainerTransitions = default, object ItemsSource = default, Xaml.DataTemplate ItemTemplate = default, Xaml.Controls.DataTemplateSelector ItemTemplateSelector = default, object SelectedItem = default, Xaml.Controls.TreeViewNode SelectedNode = default, Xaml.Controls.TreeViewSelectionMode? SelectionMode = default)
        {
            var ui = new Xaml.Controls.TreeView();
            if (CanDragItems is not null) ui.CanDragItems = CanDragItems.Value;
            if (CanReorderItems is not null) ui.CanReorderItems = CanReorderItems.Value;
            if (ItemContainerStyle is not null) ui.ItemContainerStyle = ItemContainerStyle;
            if (ItemContainerStyleSelector is not null) ui.ItemContainerStyleSelector = ItemContainerStyleSelector;
            if (ItemContainerTransitions is not null) ui.ItemContainerTransitions = ItemContainerTransitions;
            if (ItemsSource is not null) ui.ItemsSource = ItemsSource;
            if (ItemTemplate is not null) ui.ItemTemplate = ItemTemplate;
            if (ItemTemplateSelector is not null) ui.ItemTemplateSelector = ItemTemplateSelector;
            if (SelectedItem is not null) ui.SelectedItem = SelectedItem;
            if (SelectedNode is not null) ui.SelectedNode = SelectedNode;
            if (SelectionMode is not null) ui.SelectionMode = SelectionMode.Value;
            return CSharpMarkup.WinUI.TreeView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TreeView"/></summary>
        /// <remarks>Remark: TreeView().Bind() binds to <see cref="Xaml.Controls.TreeView.ItemsSourceProperty"/></remarks>
        public static TreeView TreeView()
        {
            var ui = new Xaml.Controls.TreeView();
            return CSharpMarkup.WinUI.TreeView.StartChain(ui);
        }
    }

    public partial class TreeView : Control, IUI<Xaml.Controls.TreeView>, IDefaultBindProperty
    {
        static TreeView instance;

        internal static TreeView StartChain(Xaml.Controls.TreeView ui)
        {
            if (instance == null) instance = new TreeView();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TreeView ui;

        public new Xaml.Controls.TreeView UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.TreeView.ItemsSourceProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.TreeView.ItemsSourceProperty;

        public static implicit operator Xaml.UIElement(TreeView view) => view?.UI;

        public static implicit operator Xaml.Controls.TreeView(TreeView view) => view?.UI;

        public static implicit operator TreeView(Xaml.Controls.TreeView ui) => TreeView.StartChain(ui);

        public TreeView Invoke(Action<Xaml.Controls.TreeView> action) { action?.Invoke(UI); return this; }

        protected TreeView() { }
    }

    public static partial class TreeViewExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TreeView.CanDragItems"/></summary>
        public static TView CanDragItems<TView>(this TView view, bool value) where TView : TreeView { view.UI.CanDragItems = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeView.CanReorderItems"/></summary>
        public static TView CanReorderItems<TView>(this TView view, bool value) where TView : TreeView { view.UI.CanReorderItems = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeView.ItemContainerStyle"/></summary>
        public static TView ItemContainerStyle<TView>(this TView view, Xaml.Style value) where TView : TreeView { view.UI.ItemContainerStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeView.ItemContainerStyleSelector"/></summary>
        public static TView ItemContainerStyleSelector<TView>(this TView view, Xaml.Controls.StyleSelector value) where TView : TreeView { view.UI.ItemContainerStyleSelector = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeView.ItemContainerTransitions"/></summary>
        public static TView ItemContainerTransitions<TView>(this TView view, Xaml.Media.Animation.TransitionCollection value) where TView : TreeView { view.UI.ItemContainerTransitions = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeView.ItemsSource"/></summary>
        public static TView ItemsSource<TView>(this TView view, object value) where TView : TreeView { view.UI.ItemsSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeView.ItemTemplate"/></summary>
        public static TView ItemTemplate<TView>(this TView view, Xaml.DataTemplate value) where TView : TreeView { view.UI.ItemTemplate = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeView.ItemTemplateSelector"/></summary>
        public static TView ItemTemplateSelector<TView>(this TView view, Xaml.Controls.DataTemplateSelector value) where TView : TreeView { view.UI.ItemTemplateSelector = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeView.SelectedItem"/></summary>
        public static TView SelectedItem<TView>(this TView view, object value) where TView : TreeView { view.UI.SelectedItem = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeView.SelectedNode"/></summary>
        public static TView SelectedNode<TView>(this TView view, Xaml.Controls.TreeViewNode value) where TView : TreeView { view.UI.SelectedNode = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeView.SelectionMode"/></summary>
        public static TView SelectionMode<TView>(this TView view, Xaml.Controls.TreeViewSelectionMode value) where TView : TreeView { view.UI.SelectionMode = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeView.CanDragItems"/></summary>
        public static DependencyProperty<TTarget, bool> CanDragItems<TTarget>(this TTarget target) where TTarget : TreeView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TreeView.CanDragItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeView.CanReorderItems"/></summary>
        public static DependencyProperty<TTarget, bool> CanReorderItems<TTarget>(this TTarget target) where TTarget : TreeView
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TreeView.CanReorderItemsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeView.ItemContainerStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> ItemContainerStyle<TTarget>(this TTarget target) where TTarget : TreeView
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.Controls.TreeView.ItemContainerStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeView.ItemContainerStyleSelector"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.StyleSelector> ItemContainerStyleSelector<TTarget>(this TTarget target) where TTarget : TreeView
        => DependencyProperty<TTarget, Xaml.Controls.StyleSelector>.Get(target, Xaml.Controls.TreeView.ItemContainerStyleSelectorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeView.ItemContainerTransitions"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection> ItemContainerTransitions<TTarget>(this TTarget target) where TTarget : TreeView
        => DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection>.Get(target, Xaml.Controls.TreeView.ItemContainerTransitionsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeView.ItemsSource"/></summary>
        public static DependencyProperty<TTarget, object> ItemsSource<TTarget>(this TTarget target) where TTarget : TreeView
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TreeView.ItemsSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeView.ItemTemplate"/></summary>
        public static DependencyProperty<TTarget, Xaml.DataTemplate> ItemTemplate<TTarget>(this TTarget target) where TTarget : TreeView
        => DependencyProperty<TTarget, Xaml.DataTemplate>.Get(target, Xaml.Controls.TreeView.ItemTemplateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeView.ItemTemplateSelector"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.DataTemplateSelector> ItemTemplateSelector<TTarget>(this TTarget target) where TTarget : TreeView
        => DependencyProperty<TTarget, Xaml.Controls.DataTemplateSelector>.Get(target, Xaml.Controls.TreeView.ItemTemplateSelectorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeView.SelectedItem"/></summary>
        public static DependencyProperty<TTarget, object> SelectedItem<TTarget>(this TTarget target) where TTarget : TreeView
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TreeView.SelectedItemProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeView.SelectionMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.TreeViewSelectionMode> SelectionMode<TTarget>(this TTarget target) where TTarget : TreeView
        => DependencyProperty<TTarget, Xaml.Controls.TreeViewSelectionMode>.Get(target, Xaml.Controls.TreeView.SelectionModeProperty);
    }
}

namespace CSharpMarkup.WinUI // TreeViewItem
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TreeViewItem"/></summary>
        /// <remarks>Remark: TreeViewItem().Bind() binds to <see cref="Xaml.Controls.TreeViewItem.ItemsSourceProperty"/></remarks>
        public static TreeViewItem TreeViewItem(UIObject Content)
        {
            var ui = new Xaml.Controls.TreeViewItem();
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.TreeViewItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TreeViewItem"/></summary>
        /// <remarks>Remark: TreeViewItem().Bind() binds to <see cref="Xaml.Controls.TreeViewItem.ItemsSourceProperty"/></remarks>
        public static TreeViewItem TreeViewItem(string CollapsedGlyph = default, string ExpandedGlyph = default, Xaml.Media.Brush GlyphBrush = default, double? GlyphOpacity = default, double? GlyphSize = default, bool? HasUnrealizedChildren = default, bool? IsExpanded = default, object ItemsSource = default, UIObject Content = default)
        {
            var ui = new Xaml.Controls.TreeViewItem();
            if (CollapsedGlyph is not null) ui.CollapsedGlyph = CollapsedGlyph;
            if (ExpandedGlyph is not null) ui.ExpandedGlyph = ExpandedGlyph;
            if (GlyphBrush is not null) ui.GlyphBrush = GlyphBrush;
            if (GlyphOpacity is not null) ui.GlyphOpacity = GlyphOpacity.Value;
            if (GlyphSize is not null) ui.GlyphSize = GlyphSize.Value;
            if (HasUnrealizedChildren is not null) ui.HasUnrealizedChildren = HasUnrealizedChildren.Value;
            if (IsExpanded is not null) ui.IsExpanded = IsExpanded.Value;
            if (ItemsSource is not null) ui.ItemsSource = ItemsSource;
            if (Content is not null) ui.Content = Content.UI;
            return CSharpMarkup.WinUI.TreeViewItem.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TreeViewItem"/></summary>
        /// <remarks>Remark: TreeViewItem().Bind() binds to <see cref="Xaml.Controls.TreeViewItem.ItemsSourceProperty"/></remarks>
        public static TreeViewItem TreeViewItem()
        {
            var ui = new Xaml.Controls.TreeViewItem();
            return CSharpMarkup.WinUI.TreeViewItem.StartChain(ui);
        }
    }

    public partial class TreeViewItem : ListViewItem, IUI<Xaml.Controls.TreeViewItem>, IDefaultBindProperty
    {
        static TreeViewItem instance;

        internal static TreeViewItem StartChain(Xaml.Controls.TreeViewItem ui)
        {
            if (instance == null) instance = new TreeViewItem();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TreeViewItem ui;

        public new Xaml.Controls.TreeViewItem UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.TreeViewItem.ItemsSourceProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.TreeViewItem.ItemsSourceProperty;

        public static implicit operator Xaml.UIElement(TreeViewItem view) => view?.UI;

        public static implicit operator Xaml.Controls.TreeViewItem(TreeViewItem view) => view?.UI;

        public static implicit operator TreeViewItem(Xaml.Controls.TreeViewItem ui) => TreeViewItem.StartChain(ui);

        public TreeViewItem Invoke(Action<Xaml.Controls.TreeViewItem> action) { action?.Invoke(UI); return this; }

        protected TreeViewItem() { }
    }

    public static partial class TreeViewItemExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TreeViewItem.CollapsedGlyph"/></summary>
        public static TView CollapsedGlyph<TView>(this TView view, string value) where TView : TreeViewItem { view.UI.CollapsedGlyph = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeViewItem.ExpandedGlyph"/></summary>
        public static TView ExpandedGlyph<TView>(this TView view, string value) where TView : TreeViewItem { view.UI.ExpandedGlyph = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeViewItem.GlyphBrush"/></summary>
        public static TView GlyphBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : TreeViewItem { view.UI.GlyphBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeViewItem.GlyphBrush"/></summary>
        public static TView GlyphBrush<TView>(this TView view, Windows.UI.Color value) where TView : TreeViewItem { view.UI.GlyphBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeViewItem.GlyphBrush"/></summary>
        public static TView GlyphBrush<TView>(this TView view, string color) where TView : TreeViewItem { view.UI.GlyphBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeViewItem.GlyphOpacity"/></summary>
        public static TView GlyphOpacity<TView>(this TView view, double value) where TView : TreeViewItem { view.UI.GlyphOpacity = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeViewItem.GlyphSize"/></summary>
        public static TView GlyphSize<TView>(this TView view, double value) where TView : TreeViewItem { view.UI.GlyphSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeViewItem.HasUnrealizedChildren"/></summary>
        public static TView HasUnrealizedChildren<TView>(this TView view, bool value) where TView : TreeViewItem { view.UI.HasUnrealizedChildren = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeViewItem.IsExpanded"/></summary>
        public static TView IsExpanded<TView>(this TView view, bool value) where TView : TreeViewItem { view.UI.IsExpanded = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeViewItem.ItemsSource"/></summary>
        public static TView ItemsSource<TView>(this TView view, object value) where TView : TreeViewItem { view.UI.ItemsSource = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewItem.CollapsedGlyph"/></summary>
        public static DependencyProperty<TTarget, string> CollapsedGlyph<TTarget>(this TTarget target) where TTarget : TreeViewItem
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.TreeViewItem.CollapsedGlyphProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewItem.ExpandedGlyph"/></summary>
        public static DependencyProperty<TTarget, string> ExpandedGlyph<TTarget>(this TTarget target) where TTarget : TreeViewItem
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Controls.TreeViewItem.ExpandedGlyphProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewItem.GlyphBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> GlyphBrush<TTarget>(this TTarget target) where TTarget : TreeViewItem
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Controls.TreeViewItem.GlyphBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewItem.GlyphOpacity"/></summary>
        public static DependencyProperty<TTarget, double> GlyphOpacity<TTarget>(this TTarget target) where TTarget : TreeViewItem
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.TreeViewItem.GlyphOpacityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewItem.GlyphSize"/></summary>
        public static DependencyProperty<TTarget, double> GlyphSize<TTarget>(this TTarget target) where TTarget : TreeViewItem
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.TreeViewItem.GlyphSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewItem.HasUnrealizedChildren"/></summary>
        public static DependencyProperty<TTarget, bool> HasUnrealizedChildren<TTarget>(this TTarget target) where TTarget : TreeViewItem
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TreeViewItem.HasUnrealizedChildrenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewItem.IsExpanded"/></summary>
        public static DependencyProperty<TTarget, bool> IsExpanded<TTarget>(this TTarget target) where TTarget : TreeViewItem
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TreeViewItem.IsExpandedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewItem.ItemsSource"/></summary>
        public static DependencyProperty<TTarget, object> ItemsSource<TTarget>(this TTarget target) where TTarget : TreeViewItem
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TreeViewItem.ItemsSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewItem.TreeViewItemTemplateSettings"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.TreeViewItemTemplateSettings> TreeViewItemTemplateSettings<TTarget>(this TTarget target) where TTarget : TreeViewItem
        => DependencyProperty<TTarget, Xaml.Controls.TreeViewItemTemplateSettings>.Get(target, Xaml.Controls.TreeViewItem.TreeViewItemTemplateSettingsProperty);
    }
}

namespace CSharpMarkup.WinUI // TreeViewItemTemplateSettings
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TreeViewItemTemplateSettings"/></summary>
        public static TreeViewItemTemplateSettings TreeViewItemTemplateSettings()
        {
            var ui = new Xaml.Controls.TreeViewItemTemplateSettings();
            return CSharpMarkup.WinUI.TreeViewItemTemplateSettings.StartChain(ui);
        }
    }

    public partial class TreeViewItemTemplateSettings : DependencyObject, IUI<Xaml.Controls.TreeViewItemTemplateSettings>
    {
        static TreeViewItemTemplateSettings instance;

        internal static TreeViewItemTemplateSettings StartChain(Xaml.Controls.TreeViewItemTemplateSettings ui)
        {
            if (instance == null) instance = new TreeViewItemTemplateSettings();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TreeViewItemTemplateSettings ui;

        public new Xaml.Controls.TreeViewItemTemplateSettings UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.TreeViewItemTemplateSettings(TreeViewItemTemplateSettings view) => view?.UI;

        public static implicit operator TreeViewItemTemplateSettings(Xaml.Controls.TreeViewItemTemplateSettings ui) => TreeViewItemTemplateSettings.StartChain(ui);

        public TreeViewItemTemplateSettings Invoke(Action<Xaml.Controls.TreeViewItemTemplateSettings> action) { action?.Invoke(UI); return this; }

        protected TreeViewItemTemplateSettings() { }
    }

    public static partial class TreeViewItemTemplateSettingsExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewItemTemplateSettings.CollapsedGlyphVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Visibility> CollapsedGlyphVisibility<TTarget>(this TTarget target) where TTarget : TreeViewItemTemplateSettings
        => DependencyProperty<TTarget, Xaml.Visibility>.Get(target, Xaml.Controls.TreeViewItemTemplateSettings.CollapsedGlyphVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewItemTemplateSettings.DragItemsCount"/></summary>
        public static DependencyProperty<TTarget, int> DragItemsCount<TTarget>(this TTarget target) where TTarget : TreeViewItemTemplateSettings
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.TreeViewItemTemplateSettings.DragItemsCountProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewItemTemplateSettings.ExpandedGlyphVisibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Visibility> ExpandedGlyphVisibility<TTarget>(this TTarget target) where TTarget : TreeViewItemTemplateSettings
        => DependencyProperty<TTarget, Xaml.Visibility>.Get(target, Xaml.Controls.TreeViewItemTemplateSettings.ExpandedGlyphVisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewItemTemplateSettings.Indentation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> Indentation<TTarget>(this TTarget target) where TTarget : TreeViewItemTemplateSettings
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Controls.TreeViewItemTemplateSettings.IndentationProperty);
    }
}

namespace CSharpMarkup.WinUI // TreeViewList
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TreeViewList"/></summary>
        public static TreeViewList TreeViewList(params UIObject[] Items)
        {
            var ui = new Xaml.Controls.TreeViewList();
            for (int i = 0; i < Items.Length; i++)
            {
                var child = Items[i];
                if (child == null) continue;

                var subChildren = Spreader<UIObject>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Items.Add(subChildren[j].UI);
                else
                    ui.Items.Add(child.UI);
            }
            return CSharpMarkup.WinUI.TreeViewList.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TreeViewList"/></summary>
        public static TreeViewList TreeViewList()
        {
            var ui = new Xaml.Controls.TreeViewList();
            return CSharpMarkup.WinUI.TreeViewList.StartChain(ui);
        }
    }

    public partial class TreeViewList : ListView, IUI<Xaml.Controls.TreeViewList>
    {
        static TreeViewList instance;

        internal static TreeViewList StartChain(Xaml.Controls.TreeViewList ui)
        {
            if (instance == null) instance = new TreeViewList();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TreeViewList ui;

        public new Xaml.Controls.TreeViewList UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(TreeViewList view) => view?.UI;

        public static implicit operator Xaml.Controls.TreeViewList(TreeViewList view) => view?.UI;

        public static implicit operator TreeViewList(Xaml.Controls.TreeViewList ui) => TreeViewList.StartChain(ui);

        public TreeViewList Invoke(Action<Xaml.Controls.TreeViewList> action) { action?.Invoke(UI); return this; }

        protected TreeViewList() { }
    }
}

namespace CSharpMarkup.WinUI // TreeViewNode
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TreeViewNode"/></summary>
        /// <remarks>Remark: TreeViewNode().Bind() binds to <see cref="Xaml.Controls.TreeViewNode.ContentProperty"/></remarks>
        public static TreeViewNode TreeViewNode(object Content = default, bool? HasUnrealizedChildren = default, bool? IsExpanded = default)
        {
            var ui = new Xaml.Controls.TreeViewNode();
            if (Content is not null) ui.Content = Content;
            if (HasUnrealizedChildren is not null) ui.HasUnrealizedChildren = HasUnrealizedChildren.Value;
            if (IsExpanded is not null) ui.IsExpanded = IsExpanded.Value;
            return CSharpMarkup.WinUI.TreeViewNode.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TreeViewNode"/></summary>
        /// <remarks>Remark: TreeViewNode().Bind() binds to <see cref="Xaml.Controls.TreeViewNode.ContentProperty"/></remarks>
        public static TreeViewNode TreeViewNode()
        {
            var ui = new Xaml.Controls.TreeViewNode();
            return CSharpMarkup.WinUI.TreeViewNode.StartChain(ui);
        }
    }

    public partial class TreeViewNode : DependencyObject, IUI<Xaml.Controls.TreeViewNode>, IDefaultBindProperty
    {
        static TreeViewNode instance;

        internal static TreeViewNode StartChain(Xaml.Controls.TreeViewNode ui)
        {
            if (instance == null) instance = new TreeViewNode();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TreeViewNode ui;

        public new Xaml.Controls.TreeViewNode UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Controls.TreeViewNode.ContentProperty"/></summary>
        public virtual Xaml.DependencyProperty DefaultBindProperty => Xaml.Controls.TreeViewNode.ContentProperty;

        public static implicit operator Xaml.Controls.TreeViewNode(TreeViewNode view) => view?.UI;

        public static implicit operator TreeViewNode(Xaml.Controls.TreeViewNode ui) => TreeViewNode.StartChain(ui);

        public TreeViewNode Invoke(Action<Xaml.Controls.TreeViewNode> action) { action?.Invoke(UI); return this; }

        protected TreeViewNode() { }
    }

    public static partial class TreeViewNodeExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TreeViewNode.Content"/></summary>
        public static TView Content<TView>(this TView view, object value) where TView : TreeViewNode { view.UI.Content = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeViewNode.HasUnrealizedChildren"/></summary>
        public static TView HasUnrealizedChildren<TView>(this TView view, bool value) where TView : TreeViewNode { view.UI.HasUnrealizedChildren = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TreeViewNode.IsExpanded"/></summary>
        public static TView IsExpanded<TView>(this TView view, bool value) where TView : TreeViewNode { view.UI.IsExpanded = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewNode.Content"/></summary>
        public static DependencyProperty<TTarget, object> Content<TTarget>(this TTarget target) where TTarget : TreeViewNode
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Controls.TreeViewNode.ContentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewNode.Depth"/></summary>
        public static DependencyProperty<TTarget, int> Depth<TTarget>(this TTarget target) where TTarget : TreeViewNode
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.TreeViewNode.DepthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewNode.HasChildren"/></summary>
        public static DependencyProperty<TTarget, bool> HasChildren<TTarget>(this TTarget target) where TTarget : TreeViewNode
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TreeViewNode.HasChildrenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TreeViewNode.IsExpanded"/></summary>
        public static DependencyProperty<TTarget, bool> IsExpanded<TTarget>(this TTarget target) where TTarget : TreeViewNode
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.TreeViewNode.IsExpandedProperty);
    }
}

namespace CSharpMarkup.WinUI // TwoPaneView
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.TwoPaneView"/></summary>
        public static TwoPaneView TwoPaneView(double? MinTallModeHeight = default, double? MinWideModeWidth = default, Xaml.UIElement Pane1 = default, Xaml.GridLength? Pane1Length = default, Xaml.UIElement Pane2 = default, Xaml.GridLength? Pane2Length = default, Xaml.Controls.TwoPaneViewPriority? PanePriority = default, Xaml.Controls.TwoPaneViewTallModeConfiguration? TallModeConfiguration = default, Xaml.Controls.TwoPaneViewWideModeConfiguration? WideModeConfiguration = default)
        {
            var ui = new Xaml.Controls.TwoPaneView();
            if (MinTallModeHeight is not null) ui.MinTallModeHeight = MinTallModeHeight.Value;
            if (MinWideModeWidth is not null) ui.MinWideModeWidth = MinWideModeWidth.Value;
            if (Pane1 is not null) ui.Pane1 = Pane1;
            if (Pane1Length is not null) ui.Pane1Length = Pane1Length.Value;
            if (Pane2 is not null) ui.Pane2 = Pane2;
            if (Pane2Length is not null) ui.Pane2Length = Pane2Length.Value;
            if (PanePriority is not null) ui.PanePriority = PanePriority.Value;
            if (TallModeConfiguration is not null) ui.TallModeConfiguration = TallModeConfiguration.Value;
            if (WideModeConfiguration is not null) ui.WideModeConfiguration = WideModeConfiguration.Value;
            return CSharpMarkup.WinUI.TwoPaneView.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.TwoPaneView"/></summary>
        public static TwoPaneView TwoPaneView()
        {
            var ui = new Xaml.Controls.TwoPaneView();
            return CSharpMarkup.WinUI.TwoPaneView.StartChain(ui);
        }
    }

    public partial class TwoPaneView : Control, IUI<Xaml.Controls.TwoPaneView>
    {
        static TwoPaneView instance;

        internal static TwoPaneView StartChain(Xaml.Controls.TwoPaneView ui)
        {
            if (instance == null) instance = new TwoPaneView();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.TwoPaneView ui;

        public new Xaml.Controls.TwoPaneView UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(TwoPaneView view) => view?.UI;

        public static implicit operator Xaml.Controls.TwoPaneView(TwoPaneView view) => view?.UI;

        public static implicit operator TwoPaneView(Xaml.Controls.TwoPaneView ui) => TwoPaneView.StartChain(ui);

        public TwoPaneView Invoke(Action<Xaml.Controls.TwoPaneView> action) { action?.Invoke(UI); return this; }

        protected TwoPaneView() { }
    }

    public static partial class TwoPaneViewExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.TwoPaneView.MinTallModeHeight"/></summary>
        public static TView MinTallModeHeight<TView>(this TView view, double value) where TView : TwoPaneView { view.UI.MinTallModeHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TwoPaneView.MinWideModeWidth"/></summary>
        public static TView MinWideModeWidth<TView>(this TView view, double value) where TView : TwoPaneView { view.UI.MinWideModeWidth = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TwoPaneView.Pane1"/></summary>
        public static TView Pane1<TView>(this TView view, Xaml.UIElement value) where TView : TwoPaneView { view.UI.Pane1 = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TwoPaneView.Pane1Length"/></summary>
        public static TView Pane1Length<TView>(this TView view, Xaml.GridLength value) where TView : TwoPaneView { view.UI.Pane1Length = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TwoPaneView.Pane2"/></summary>
        public static TView Pane2<TView>(this TView view, Xaml.UIElement value) where TView : TwoPaneView { view.UI.Pane2 = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TwoPaneView.Pane2Length"/></summary>
        public static TView Pane2Length<TView>(this TView view, Xaml.GridLength value) where TView : TwoPaneView { view.UI.Pane2Length = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TwoPaneView.PanePriority"/></summary>
        public static TView PanePriority<TView>(this TView view, Xaml.Controls.TwoPaneViewPriority value) where TView : TwoPaneView { view.UI.PanePriority = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TwoPaneView.TallModeConfiguration"/></summary>
        public static TView TallModeConfiguration<TView>(this TView view, Xaml.Controls.TwoPaneViewTallModeConfiguration value) where TView : TwoPaneView { view.UI.TallModeConfiguration = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.TwoPaneView.WideModeConfiguration"/></summary>
        public static TView WideModeConfiguration<TView>(this TView view, Xaml.Controls.TwoPaneViewWideModeConfiguration value) where TView : TwoPaneView { view.UI.WideModeConfiguration = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TwoPaneView.MinTallModeHeight"/></summary>
        public static DependencyProperty<TTarget, double> MinTallModeHeight<TTarget>(this TTarget target) where TTarget : TwoPaneView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.TwoPaneView.MinTallModeHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TwoPaneView.MinWideModeWidth"/></summary>
        public static DependencyProperty<TTarget, double> MinWideModeWidth<TTarget>(this TTarget target) where TTarget : TwoPaneView
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.TwoPaneView.MinWideModeWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TwoPaneView.Mode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewMode> Mode<TTarget>(this TTarget target) where TTarget : TwoPaneView
        => DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewMode>.Get(target, Xaml.Controls.TwoPaneView.ModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TwoPaneView.Pane1Length"/></summary>
        public static DependencyProperty<TTarget, Xaml.GridLength> Pane1Length<TTarget>(this TTarget target) where TTarget : TwoPaneView
        => DependencyProperty<TTarget, Xaml.GridLength>.Get(target, Xaml.Controls.TwoPaneView.Pane1LengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TwoPaneView.Pane1"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Pane1<TTarget>(this TTarget target) where TTarget : TwoPaneView
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.TwoPaneView.Pane1Property);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TwoPaneView.Pane2Length"/></summary>
        public static DependencyProperty<TTarget, Xaml.GridLength> Pane2Length<TTarget>(this TTarget target) where TTarget : TwoPaneView
        => DependencyProperty<TTarget, Xaml.GridLength>.Get(target, Xaml.Controls.TwoPaneView.Pane2LengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TwoPaneView.Pane2"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Pane2<TTarget>(this TTarget target) where TTarget : TwoPaneView
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.TwoPaneView.Pane2Property);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TwoPaneView.PanePriority"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewPriority> PanePriority<TTarget>(this TTarget target) where TTarget : TwoPaneView
        => DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewPriority>.Get(target, Xaml.Controls.TwoPaneView.PanePriorityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TwoPaneView.TallModeConfiguration"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewTallModeConfiguration> TallModeConfiguration<TTarget>(this TTarget target) where TTarget : TwoPaneView
        => DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewTallModeConfiguration>.Get(target, Xaml.Controls.TwoPaneView.TallModeConfigurationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.TwoPaneView.WideModeConfiguration"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewWideModeConfiguration> WideModeConfiguration<TTarget>(this TTarget target) where TTarget : TwoPaneView
        => DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewWideModeConfiguration>.Get(target, Xaml.Controls.TwoPaneView.WideModeConfigurationProperty);
    }
}

namespace CSharpMarkup.WinUI // UniformGridLayout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.UniformGridLayout"/></summary>
        public static UniformGridLayout UniformGridLayout(Xaml.Controls.UniformGridLayoutItemsJustification? ItemsJustification = default, Xaml.Controls.UniformGridLayoutItemsStretch? ItemsStretch = default, int? MaximumRowsOrColumns = default, double? MinColumnSpacing = default, double? MinItemHeight = default, double? MinItemWidth = default, double? MinRowSpacing = default, Xaml.Controls.Orientation? Orientation = default)
        {
            var ui = new Xaml.Controls.UniformGridLayout();
            if (ItemsJustification is not null) ui.ItemsJustification = ItemsJustification.Value;
            if (ItemsStretch is not null) ui.ItemsStretch = ItemsStretch.Value;
            if (MaximumRowsOrColumns is not null) ui.MaximumRowsOrColumns = MaximumRowsOrColumns.Value;
            if (MinColumnSpacing is not null) ui.MinColumnSpacing = MinColumnSpacing.Value;
            if (MinItemHeight is not null) ui.MinItemHeight = MinItemHeight.Value;
            if (MinItemWidth is not null) ui.MinItemWidth = MinItemWidth.Value;
            if (MinRowSpacing is not null) ui.MinRowSpacing = MinRowSpacing.Value;
            if (Orientation is not null) ui.Orientation = Orientation.Value;
            return CSharpMarkup.WinUI.UniformGridLayout.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.UniformGridLayout"/></summary>
        public static UniformGridLayout UniformGridLayout()
        {
            var ui = new Xaml.Controls.UniformGridLayout();
            return CSharpMarkup.WinUI.UniformGridLayout.StartChain(ui);
        }
    }

    public partial class UniformGridLayout : VirtualizingLayout, IUI<Xaml.Controls.UniformGridLayout>
    {
        static UniformGridLayout instance;

        internal static UniformGridLayout StartChain(Xaml.Controls.UniformGridLayout ui)
        {
            if (instance == null) instance = new UniformGridLayout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.UniformGridLayout ui;

        public new Xaml.Controls.UniformGridLayout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.UniformGridLayout(UniformGridLayout view) => view?.UI;

        public static implicit operator UniformGridLayout(Xaml.Controls.UniformGridLayout ui) => UniformGridLayout.StartChain(ui);

        public UniformGridLayout Invoke(Action<Xaml.Controls.UniformGridLayout> action) { action?.Invoke(UI); return this; }

        protected UniformGridLayout() { }
    }

    public static partial class UniformGridLayoutExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.UniformGridLayout.ItemsJustification"/></summary>
        public static TView ItemsJustification<TView>(this TView view, Xaml.Controls.UniformGridLayoutItemsJustification value) where TView : UniformGridLayout { view.UI.ItemsJustification = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.UniformGridLayout.ItemsStretch"/></summary>
        public static TView ItemsStretch<TView>(this TView view, Xaml.Controls.UniformGridLayoutItemsStretch value) where TView : UniformGridLayout { view.UI.ItemsStretch = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.UniformGridLayout.MaximumRowsOrColumns"/></summary>
        public static TView MaximumRowsOrColumns<TView>(this TView view, int value) where TView : UniformGridLayout { view.UI.MaximumRowsOrColumns = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.UniformGridLayout.MinColumnSpacing"/></summary>
        public static TView MinColumnSpacing<TView>(this TView view, double value) where TView : UniformGridLayout { view.UI.MinColumnSpacing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.UniformGridLayout.MinItemHeight"/></summary>
        public static TView MinItemHeight<TView>(this TView view, double value) where TView : UniformGridLayout { view.UI.MinItemHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.UniformGridLayout.MinItemWidth"/></summary>
        public static TView MinItemWidth<TView>(this TView view, double value) where TView : UniformGridLayout { view.UI.MinItemWidth = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.UniformGridLayout.MinRowSpacing"/></summary>
        public static TView MinRowSpacing<TView>(this TView view, double value) where TView : UniformGridLayout { view.UI.MinRowSpacing = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.UniformGridLayout.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.Orientation value) where TView : UniformGridLayout { view.UI.Orientation = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.UniformGridLayout.ItemsJustification"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.UniformGridLayoutItemsJustification> ItemsJustification<TTarget>(this TTarget target) where TTarget : UniformGridLayout
        => DependencyProperty<TTarget, Xaml.Controls.UniformGridLayoutItemsJustification>.Get(target, Xaml.Controls.UniformGridLayout.ItemsJustificationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.UniformGridLayout.ItemsStretch"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.UniformGridLayoutItemsStretch> ItemsStretch<TTarget>(this TTarget target) where TTarget : UniformGridLayout
        => DependencyProperty<TTarget, Xaml.Controls.UniformGridLayoutItemsStretch>.Get(target, Xaml.Controls.UniformGridLayout.ItemsStretchProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.UniformGridLayout.MaximumRowsOrColumns"/></summary>
        public static DependencyProperty<TTarget, int> MaximumRowsOrColumns<TTarget>(this TTarget target) where TTarget : UniformGridLayout
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.UniformGridLayout.MaximumRowsOrColumnsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.UniformGridLayout.MinColumnSpacing"/></summary>
        public static DependencyProperty<TTarget, double> MinColumnSpacing<TTarget>(this TTarget target) where TTarget : UniformGridLayout
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.UniformGridLayout.MinColumnSpacingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.UniformGridLayout.MinItemHeight"/></summary>
        public static DependencyProperty<TTarget, double> MinItemHeight<TTarget>(this TTarget target) where TTarget : UniformGridLayout
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.UniformGridLayout.MinItemHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.UniformGridLayout.MinItemWidth"/></summary>
        public static DependencyProperty<TTarget, double> MinItemWidth<TTarget>(this TTarget target) where TTarget : UniformGridLayout
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.UniformGridLayout.MinItemWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.UniformGridLayout.MinRowSpacing"/></summary>
        public static DependencyProperty<TTarget, double> MinRowSpacing<TTarget>(this TTarget target) where TTarget : UniformGridLayout
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.UniformGridLayout.MinRowSpacingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.UniformGridLayout.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Orientation> Orientation<TTarget>(this TTarget target) where TTarget : UniformGridLayout
        => DependencyProperty<TTarget, Xaml.Controls.Orientation>.Get(target, Xaml.Controls.UniformGridLayout.OrientationProperty);
    }
}

namespace CSharpMarkup.WinUI // UserControl
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.UserControl"/></summary>
        public static UserControl UserControl(Xaml.UIElement Content)
        {
            var ui = new Xaml.Controls.UserControl();
            if (Content is not null) ui.Content = Content;
            return CSharpMarkup.WinUI.UserControl.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.UserControl"/></summary>
        public static UserControl UserControl()
        {
            var ui = new Xaml.Controls.UserControl();
            return CSharpMarkup.WinUI.UserControl.StartChain(ui);
        }
    }

    public partial class UserControl : Control, IUI<Xaml.Controls.UserControl>
    {
        static UserControl instance;

        internal static UserControl StartChain(Xaml.Controls.UserControl ui)
        {
            if (instance == null) instance = new UserControl();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.UserControl ui;

        public new Xaml.Controls.UserControl UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(UserControl view) => view?.UI;

        public static implicit operator Xaml.Controls.UserControl(UserControl view) => view?.UI;

        public static implicit operator UserControl(Xaml.Controls.UserControl ui) => UserControl.StartChain(ui);

        public UserControl Invoke(Action<Xaml.Controls.UserControl> action) { action?.Invoke(UI); return this; }

        protected UserControl() { }
    }

    public static partial class UserControlExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.UserControl.Content"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> Content<TTarget>(this TTarget target) where TTarget : UserControl
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Controls.UserControl.ContentProperty);
    }
}

namespace CSharpMarkup.WinUI // VariableSizedWrapGrid
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.VariableSizedWrapGrid"/></summary>
        public static VariableSizedWrapGrid VariableSizedWrapGrid(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.VariableSizedWrapGrid();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.VariableSizedWrapGrid.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.VariableSizedWrapGrid"/></summary>
        public static VariableSizedWrapGrid VariableSizedWrapGrid()
        {
            var ui = new Xaml.Controls.VariableSizedWrapGrid();
            return CSharpMarkup.WinUI.VariableSizedWrapGrid.StartChain(ui);
        }
    }

    public partial class VariableSizedWrapGrid : Panel, IUI<Xaml.Controls.VariableSizedWrapGrid>
    {
        static VariableSizedWrapGrid instance;

        internal static VariableSizedWrapGrid StartChain(Xaml.Controls.VariableSizedWrapGrid ui)
        {
            if (instance == null) instance = new VariableSizedWrapGrid();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.VariableSizedWrapGrid ui;

        public new Xaml.Controls.VariableSizedWrapGrid UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(VariableSizedWrapGrid view) => view?.UI;

        public static implicit operator Xaml.Controls.VariableSizedWrapGrid(VariableSizedWrapGrid view) => view?.UI;

        public static implicit operator VariableSizedWrapGrid(Xaml.Controls.VariableSizedWrapGrid ui) => VariableSizedWrapGrid.StartChain(ui);

        public VariableSizedWrapGrid Invoke(Action<Xaml.Controls.VariableSizedWrapGrid> action) { action?.Invoke(UI); return this; }

        protected VariableSizedWrapGrid() { }
    }

    public static partial class VariableSizedWrapGridExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.VariableSizedWrapGrid.HorizontalChildrenAlignment"/></summary>
        public static TView HorizontalChildrenAlignment<TView>(this TView view, Xaml.HorizontalAlignment value) where TView : VariableSizedWrapGrid { view.UI.HorizontalChildrenAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.VariableSizedWrapGrid.ItemHeight"/></summary>
        public static TView ItemHeight<TView>(this TView view, double value) where TView : VariableSizedWrapGrid { view.UI.ItemHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.VariableSizedWrapGrid.ItemWidth"/></summary>
        public static TView ItemWidth<TView>(this TView view, double value) where TView : VariableSizedWrapGrid { view.UI.ItemWidth = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.VariableSizedWrapGrid.MaximumRowsOrColumns"/></summary>
        public static TView MaximumRowsOrColumns<TView>(this TView view, int value) where TView : VariableSizedWrapGrid { view.UI.MaximumRowsOrColumns = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.VariableSizedWrapGrid.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.Orientation value) where TView : VariableSizedWrapGrid { view.UI.Orientation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.VariableSizedWrapGrid.VerticalChildrenAlignment"/></summary>
        public static TView VerticalChildrenAlignment<TView>(this TView view, Xaml.VerticalAlignment value) where TView : VariableSizedWrapGrid { view.UI.VerticalChildrenAlignment = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.VariableSizedWrapGrid.HorizontalChildrenAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.HorizontalAlignment> HorizontalChildrenAlignment<TTarget>(this TTarget target) where TTarget : VariableSizedWrapGrid
        => DependencyProperty<TTarget, Xaml.HorizontalAlignment>.Get(target, Xaml.Controls.VariableSizedWrapGrid.HorizontalChildrenAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.VariableSizedWrapGrid.ItemHeight"/></summary>
        public static DependencyProperty<TTarget, double> ItemHeight<TTarget>(this TTarget target) where TTarget : VariableSizedWrapGrid
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.VariableSizedWrapGrid.ItemHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.VariableSizedWrapGrid.ItemWidth"/></summary>
        public static DependencyProperty<TTarget, double> ItemWidth<TTarget>(this TTarget target) where TTarget : VariableSizedWrapGrid
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.VariableSizedWrapGrid.ItemWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.VariableSizedWrapGrid.MaximumRowsOrColumns"/></summary>
        public static DependencyProperty<TTarget, int> MaximumRowsOrColumns<TTarget>(this TTarget target) where TTarget : VariableSizedWrapGrid
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.VariableSizedWrapGrid.MaximumRowsOrColumnsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.VariableSizedWrapGrid.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Orientation> Orientation<TTarget>(this TTarget target) where TTarget : VariableSizedWrapGrid
        => DependencyProperty<TTarget, Xaml.Controls.Orientation>.Get(target, Xaml.Controls.VariableSizedWrapGrid.OrientationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.VariableSizedWrapGrid.VerticalChildrenAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.VerticalAlignment> VerticalChildrenAlignment<TTarget>(this TTarget target) where TTarget : VariableSizedWrapGrid
        => DependencyProperty<TTarget, Xaml.VerticalAlignment>.Get(target, Xaml.Controls.VariableSizedWrapGrid.VerticalChildrenAlignmentProperty);

        /// <summary>Set <see cref="Xaml.Controls.VariableSizedWrapGrid.ColumnSpan"/></summary>
        public static TTarget VariableSizedWrapGrid_ColumnSpan<TTarget>(this TTarget target, int value) where TTarget : UIElement
        { Xaml.Controls.VariableSizedWrapGrid.SetColumnSpan(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.VariableSizedWrapGrid.ColumnSpan"/></summary>
        public static DependencyProperty<TTarget, int> VariableSizedWrapGrid_ColumnSpan<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.VariableSizedWrapGrid.ColumnSpanProperty);

        /// <summary>Set <see cref="Xaml.Controls.VariableSizedWrapGrid.RowSpan"/></summary>
        public static TTarget VariableSizedWrapGrid_RowSpan<TTarget>(this TTarget target, int value) where TTarget : UIElement
        { Xaml.Controls.VariableSizedWrapGrid.SetRowSpan(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.VariableSizedWrapGrid.RowSpan"/></summary>
        public static DependencyProperty<TTarget, int> VariableSizedWrapGrid_RowSpan<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.VariableSizedWrapGrid.RowSpanProperty);

        /// <summary>Set <see cref="Xaml.Controls.VariableSizedWrapGrid"/> attached properties</summary>
        public static TTarget VariableSizedWrapGrid<TTarget>(this TTarget target

            , int? ColumnSpan = default

            , int? RowSpan = default

        ) where TTarget : UIElement
        {
            if (ColumnSpan is not null) Xaml.Controls.VariableSizedWrapGrid.SetColumnSpan(target.UI, ColumnSpan.Value);

            if (RowSpan is not null) Xaml.Controls.VariableSizedWrapGrid.SetRowSpan(target.UI, RowSpan.Value);

            return target;
        }
    }
}

namespace CSharpMarkup.WinUI // Viewbox
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.Viewbox"/></summary>
        public static Viewbox Viewbox(Xaml.UIElement Child)
        {
            var ui = new Xaml.Controls.Viewbox();
            if (Child is not null) ui.Child = Child;
            return CSharpMarkup.WinUI.Viewbox.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Viewbox"/></summary>
        public static Viewbox Viewbox(Xaml.Media.Stretch? Stretch = default, Xaml.Controls.StretchDirection? StretchDirection = default, Xaml.UIElement Child = default)
        {
            var ui = new Xaml.Controls.Viewbox();
            if (Stretch is not null) ui.Stretch = Stretch.Value;
            if (StretchDirection is not null) ui.StretchDirection = StretchDirection.Value;
            if (Child is not null) ui.Child = Child;
            return CSharpMarkup.WinUI.Viewbox.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.Viewbox"/></summary>
        public static Viewbox Viewbox()
        {
            var ui = new Xaml.Controls.Viewbox();
            return CSharpMarkup.WinUI.Viewbox.StartChain(ui);
        }
    }

    public partial class Viewbox : FrameworkElement, IUI<Xaml.Controls.Viewbox>
    {
        static Viewbox instance;

        internal static Viewbox StartChain(Xaml.Controls.Viewbox ui)
        {
            if (instance == null) instance = new Viewbox();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.Viewbox ui;

        public new Xaml.Controls.Viewbox UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Viewbox view) => view?.UI;

        public static implicit operator Xaml.Controls.Viewbox(Viewbox view) => view?.UI;

        public static implicit operator Viewbox(Xaml.Controls.Viewbox ui) => Viewbox.StartChain(ui);

        public Viewbox Invoke(Action<Xaml.Controls.Viewbox> action) { action?.Invoke(UI); return this; }

        protected Viewbox() { }
    }

    public static partial class ViewboxExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.Viewbox.Stretch"/></summary>
        public static TView Stretch<TView>(this TView view, Xaml.Media.Stretch value) where TView : Viewbox { view.UI.Stretch = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.Viewbox.StretchDirection"/></summary>
        public static TView StretchDirection<TView>(this TView view, Xaml.Controls.StretchDirection value) where TView : Viewbox { view.UI.StretchDirection = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Viewbox.StretchDirection"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.StretchDirection> StretchDirection<TTarget>(this TTarget target) where TTarget : Viewbox
        => DependencyProperty<TTarget, Xaml.Controls.StretchDirection>.Get(target, Xaml.Controls.Viewbox.StretchDirectionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.Viewbox.Stretch"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Stretch> Stretch<TTarget>(this TTarget target) where TTarget : Viewbox
        => DependencyProperty<TTarget, Xaml.Media.Stretch>.Get(target, Xaml.Controls.Viewbox.StretchProperty);
    }
}

namespace CSharpMarkup.WinUI // VirtualizingLayout
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.VirtualizingLayout"/></summary>
        public static VirtualizingLayout VirtualizingLayout()
        {
            var ui = new Xaml.Controls.VirtualizingLayout();
            return CSharpMarkup.WinUI.VirtualizingLayout.StartChain(ui);
        }
    }

    public partial class VirtualizingLayout : Layout, IUI<Xaml.Controls.VirtualizingLayout>
    {
        static VirtualizingLayout instance;

        internal static VirtualizingLayout StartChain(Xaml.Controls.VirtualizingLayout ui)
        {
            if (instance == null) instance = new VirtualizingLayout();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.VirtualizingLayout ui;

        public new Xaml.Controls.VirtualizingLayout UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.VirtualizingLayout(VirtualizingLayout view) => view?.UI;

        public static implicit operator VirtualizingLayout(Xaml.Controls.VirtualizingLayout ui) => VirtualizingLayout.StartChain(ui);

        public VirtualizingLayout Invoke(Action<Xaml.Controls.VirtualizingLayout> action) { action?.Invoke(UI); return this; }

        protected VirtualizingLayout() { }
    }
}

namespace CSharpMarkup.WinUI // VirtualizingLayoutContext
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.VirtualizingLayoutContext"/></summary>
        public static VirtualizingLayoutContext VirtualizingLayoutContext(CSharpMarkup.WinUI.to.Point? LayoutOrigin = default)
        {
            var ui = new Xaml.Controls.VirtualizingLayoutContext();
            if (LayoutOrigin is not null) ui.LayoutOrigin = LayoutOrigin.Value;
            return CSharpMarkup.WinUI.VirtualizingLayoutContext.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.VirtualizingLayoutContext"/></summary>
        public static VirtualizingLayoutContext VirtualizingLayoutContext()
        {
            var ui = new Xaml.Controls.VirtualizingLayoutContext();
            return CSharpMarkup.WinUI.VirtualizingLayoutContext.StartChain(ui);
        }
    }

    public partial class VirtualizingLayoutContext : LayoutContext, IUI<Xaml.Controls.VirtualizingLayoutContext>
    {
        static VirtualizingLayoutContext instance;

        internal static VirtualizingLayoutContext StartChain(Xaml.Controls.VirtualizingLayoutContext ui)
        {
            if (instance == null) instance = new VirtualizingLayoutContext();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.VirtualizingLayoutContext ui;

        public new Xaml.Controls.VirtualizingLayoutContext UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.VirtualizingLayoutContext(VirtualizingLayoutContext view) => view?.UI;

        public static implicit operator VirtualizingLayoutContext(Xaml.Controls.VirtualizingLayoutContext ui) => VirtualizingLayoutContext.StartChain(ui);

        public VirtualizingLayoutContext Invoke(Action<Xaml.Controls.VirtualizingLayoutContext> action) { action?.Invoke(UI); return this; }

        protected VirtualizingLayoutContext() { }
    }

    public static partial class VirtualizingLayoutContextExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.VirtualizingLayoutContext.LayoutOrigin"/></summary>
        public static TView LayoutOrigin<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : VirtualizingLayoutContext { view.UI.LayoutOrigin = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // VirtualizingPanel
{
    public partial class VirtualizingPanel : Panel, IUI<Xaml.Controls.VirtualizingPanel>
    {
        Xaml.Controls.VirtualizingPanel ui;

        public new Xaml.Controls.VirtualizingPanel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public VirtualizingPanel Invoke(Action<Xaml.Controls.VirtualizingPanel> action) { action?.Invoke(UI); return this; }

        protected VirtualizingPanel() { }
    }
}

namespace CSharpMarkup.WinUI // VirtualizingStackPanel
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.VirtualizingStackPanel"/></summary>
        public static VirtualizingStackPanel VirtualizingStackPanel(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.VirtualizingStackPanel();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.VirtualizingStackPanel.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.VirtualizingStackPanel"/></summary>
        public static VirtualizingStackPanel VirtualizingStackPanel()
        {
            var ui = new Xaml.Controls.VirtualizingStackPanel();
            return CSharpMarkup.WinUI.VirtualizingStackPanel.StartChain(ui);
        }
    }

    public partial class VirtualizingStackPanel : OrientedVirtualizingPanel, IUI<Xaml.Controls.VirtualizingStackPanel>
    {
        static VirtualizingStackPanel instance;

        internal static VirtualizingStackPanel StartChain(Xaml.Controls.VirtualizingStackPanel ui)
        {
            if (instance == null) instance = new VirtualizingStackPanel();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.VirtualizingStackPanel ui;

        public new Xaml.Controls.VirtualizingStackPanel UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(VirtualizingStackPanel view) => view?.UI;

        public static implicit operator Xaml.Controls.VirtualizingStackPanel(VirtualizingStackPanel view) => view?.UI;

        public static implicit operator VirtualizingStackPanel(Xaml.Controls.VirtualizingStackPanel ui) => VirtualizingStackPanel.StartChain(ui);

        public VirtualizingStackPanel Invoke(Action<Xaml.Controls.VirtualizingStackPanel> action) { action?.Invoke(UI); return this; }

        protected VirtualizingStackPanel() { }
    }

    public static partial class VirtualizingStackPanelExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.VirtualizingStackPanel.AreScrollSnapPointsRegular"/></summary>
        public static TView AreScrollSnapPointsRegular<TView>(this TView view, bool value) where TView : VirtualizingStackPanel { view.UI.AreScrollSnapPointsRegular = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.VirtualizingStackPanel.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.Orientation value) where TView : VirtualizingStackPanel { view.UI.Orientation = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.VirtualizingStackPanel.AreScrollSnapPointsRegular"/></summary>
        public static DependencyProperty<TTarget, bool> AreScrollSnapPointsRegular<TTarget>(this TTarget target) where TTarget : VirtualizingStackPanel
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.VirtualizingStackPanel.AreScrollSnapPointsRegularProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.VirtualizingStackPanel.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Orientation> Orientation<TTarget>(this TTarget target) where TTarget : VirtualizingStackPanel
        => DependencyProperty<TTarget, Xaml.Controls.Orientation>.Get(target, Xaml.Controls.VirtualizingStackPanel.OrientationProperty);

        /// <summary>Set <see cref="Xaml.Controls.VirtualizingStackPanel.VirtualizationMode"/></summary>
        public static TTarget VirtualizingStackPanel_VirtualizationMode<TTarget>(this TTarget target, Xaml.Controls.VirtualizationMode value) where TTarget : DependencyObject
        { Xaml.Controls.VirtualizingStackPanel.SetVirtualizationMode(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.VirtualizingStackPanel.VirtualizationMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.VirtualizationMode> VirtualizingStackPanel_VirtualizationMode<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.Controls.VirtualizationMode>.Get(target, Xaml.Controls.VirtualizingStackPanel.VirtualizationModeProperty);
    }
}

namespace CSharpMarkup.WinUI // WebView2
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.WebView2"/></summary>
        public static WebView2 WebView2(bool? CanGoBack = default, bool? CanGoForward = default, Windows.UI.Color? DefaultBackgroundColor = default, Uri Source = default)
        {
            var ui = new Xaml.Controls.WebView2();
            if (CanGoBack is not null) ui.CanGoBack = CanGoBack.Value;
            if (CanGoForward is not null) ui.CanGoForward = CanGoForward.Value;
            if (DefaultBackgroundColor is not null) ui.DefaultBackgroundColor = DefaultBackgroundColor.Value;
            if (Source is not null) ui.Source = Source;
            return CSharpMarkup.WinUI.WebView2.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.WebView2"/></summary>
        public static WebView2 WebView2()
        {
            var ui = new Xaml.Controls.WebView2();
            return CSharpMarkup.WinUI.WebView2.StartChain(ui);
        }
    }

    public partial class WebView2 : FrameworkElement, IUI<Xaml.Controls.WebView2>
    {
        static WebView2 instance;

        internal static WebView2 StartChain(Xaml.Controls.WebView2 ui)
        {
            if (instance == null) instance = new WebView2();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.WebView2 ui;

        public new Xaml.Controls.WebView2 UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(WebView2 view) => view?.UI;

        public static implicit operator Xaml.Controls.WebView2(WebView2 view) => view?.UI;

        public static implicit operator WebView2(Xaml.Controls.WebView2 ui) => WebView2.StartChain(ui);

        public WebView2 Invoke(Action<Xaml.Controls.WebView2> action) { action?.Invoke(UI); return this; }

        protected WebView2() { }
    }

    public static partial class WebView2Extensions
    {
        /// <summary>Set <see cref="Xaml.Controls.WebView2.CanGoBack"/></summary>
        public static TView CanGoBack<TView>(this TView view, bool value) where TView : WebView2 { view.UI.CanGoBack = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.WebView2.CanGoForward"/></summary>
        public static TView CanGoForward<TView>(this TView view, bool value) where TView : WebView2 { view.UI.CanGoForward = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.WebView2.DefaultBackgroundColor"/></summary>
        public static TView DefaultBackgroundColor<TView>(this TView view, Windows.UI.Color value) where TView : WebView2 { view.UI.DefaultBackgroundColor = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.WebView2.Source"/></summary>
        public static TView Source<TView>(this TView view, Uri value) where TView : WebView2 { view.UI.Source = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.WebView2.CanGoBack"/></summary>
        public static DependencyProperty<TTarget, bool> CanGoBack<TTarget>(this TTarget target) where TTarget : WebView2
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.WebView2.CanGoBackProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.WebView2.CanGoForward"/></summary>
        public static DependencyProperty<TTarget, bool> CanGoForward<TTarget>(this TTarget target) where TTarget : WebView2
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.WebView2.CanGoForwardProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.WebView2.DefaultBackgroundColor"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Color> DefaultBackgroundColor<TTarget>(this TTarget target) where TTarget : WebView2
        => DependencyProperty<TTarget, Windows.UI.Color>.Get(target, Xaml.Controls.WebView2.DefaultBackgroundColorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.WebView2.Source"/></summary>
        public static DependencyProperty<TTarget, Uri> Source<TTarget>(this TTarget target) where TTarget : WebView2
        => DependencyProperty<TTarget, Uri>.Get(target, Xaml.Controls.WebView2.SourceProperty);
    }
}

namespace CSharpMarkup.WinUI // WrapGrid
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.WrapGrid"/></summary>
        public static WrapGrid WrapGrid(params Xaml.UIElement[] Children)
        {
            var ui = new Xaml.Controls.WrapGrid();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.UIElement>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.WrapGrid.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.WrapGrid"/></summary>
        public static WrapGrid WrapGrid()
        {
            var ui = new Xaml.Controls.WrapGrid();
            return CSharpMarkup.WinUI.WrapGrid.StartChain(ui);
        }
    }

    public partial class WrapGrid : OrientedVirtualizingPanel, IUI<Xaml.Controls.WrapGrid>
    {
        static WrapGrid instance;

        internal static WrapGrid StartChain(Xaml.Controls.WrapGrid ui)
        {
            if (instance == null) instance = new WrapGrid();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.WrapGrid ui;

        public new Xaml.Controls.WrapGrid UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(WrapGrid view) => view?.UI;

        public static implicit operator Xaml.Controls.WrapGrid(WrapGrid view) => view?.UI;

        public static implicit operator WrapGrid(Xaml.Controls.WrapGrid ui) => WrapGrid.StartChain(ui);

        public WrapGrid Invoke(Action<Xaml.Controls.WrapGrid> action) { action?.Invoke(UI); return this; }

        protected WrapGrid() { }
    }

    public static partial class WrapGridExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.WrapGrid.HorizontalChildrenAlignment"/></summary>
        public static TView HorizontalChildrenAlignment<TView>(this TView view, Xaml.HorizontalAlignment value) where TView : WrapGrid { view.UI.HorizontalChildrenAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.WrapGrid.ItemHeight"/></summary>
        public static TView ItemHeight<TView>(this TView view, double value) where TView : WrapGrid { view.UI.ItemHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.WrapGrid.ItemWidth"/></summary>
        public static TView ItemWidth<TView>(this TView view, double value) where TView : WrapGrid { view.UI.ItemWidth = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.WrapGrid.MaximumRowsOrColumns"/></summary>
        public static TView MaximumRowsOrColumns<TView>(this TView view, int value) where TView : WrapGrid { view.UI.MaximumRowsOrColumns = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.WrapGrid.Orientation"/></summary>
        public static TView Orientation<TView>(this TView view, Xaml.Controls.Orientation value) where TView : WrapGrid { view.UI.Orientation = value; return view; }

        /// <summary>Set <see cref="Xaml.Controls.WrapGrid.VerticalChildrenAlignment"/></summary>
        public static TView VerticalChildrenAlignment<TView>(this TView view, Xaml.VerticalAlignment value) where TView : WrapGrid { view.UI.VerticalChildrenAlignment = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.WrapGrid.HorizontalChildrenAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.HorizontalAlignment> HorizontalChildrenAlignment<TTarget>(this TTarget target) where TTarget : WrapGrid
        => DependencyProperty<TTarget, Xaml.HorizontalAlignment>.Get(target, Xaml.Controls.WrapGrid.HorizontalChildrenAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.WrapGrid.ItemHeight"/></summary>
        public static DependencyProperty<TTarget, double> ItemHeight<TTarget>(this TTarget target) where TTarget : WrapGrid
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.WrapGrid.ItemHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.WrapGrid.ItemWidth"/></summary>
        public static DependencyProperty<TTarget, double> ItemWidth<TTarget>(this TTarget target) where TTarget : WrapGrid
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Controls.WrapGrid.ItemWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.WrapGrid.MaximumRowsOrColumns"/></summary>
        public static DependencyProperty<TTarget, int> MaximumRowsOrColumns<TTarget>(this TTarget target) where TTarget : WrapGrid
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Controls.WrapGrid.MaximumRowsOrColumnsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.WrapGrid.Orientation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Orientation> Orientation<TTarget>(this TTarget target) where TTarget : WrapGrid
        => DependencyProperty<TTarget, Xaml.Controls.Orientation>.Get(target, Xaml.Controls.WrapGrid.OrientationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.WrapGrid.VerticalChildrenAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.VerticalAlignment> VerticalChildrenAlignment<TTarget>(this TTarget target) where TTarget : WrapGrid
        => DependencyProperty<TTarget, Xaml.VerticalAlignment>.Get(target, Xaml.Controls.WrapGrid.VerticalChildrenAlignmentProperty);
    }
}

namespace CSharpMarkup.WinUI // XamlControlsResources
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Controls.XamlControlsResources"/></summary>
        public static XamlControlsResources XamlControlsResources(bool? UseCompactResources = default)
        {
            var ui = new Xaml.Controls.XamlControlsResources();
            if (UseCompactResources is not null) ui.UseCompactResources = UseCompactResources.Value;
            return CSharpMarkup.WinUI.XamlControlsResources.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Controls.XamlControlsResources"/></summary>
        public static XamlControlsResources XamlControlsResources()
        {
            var ui = new Xaml.Controls.XamlControlsResources();
            return CSharpMarkup.WinUI.XamlControlsResources.StartChain(ui);
        }
    }

    public partial class XamlControlsResources : ResourceDictionary, IUI<Xaml.Controls.XamlControlsResources>
    {
        static XamlControlsResources instance;

        internal static XamlControlsResources StartChain(Xaml.Controls.XamlControlsResources ui)
        {
            if (instance == null) instance = new XamlControlsResources();
            instance.UI = ui;
            return instance;
        }

        Xaml.Controls.XamlControlsResources ui;

        public new Xaml.Controls.XamlControlsResources UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Controls.XamlControlsResources(XamlControlsResources view) => view?.UI;

        public static implicit operator XamlControlsResources(Xaml.Controls.XamlControlsResources ui) => XamlControlsResources.StartChain(ui);

        public XamlControlsResources Invoke(Action<Xaml.Controls.XamlControlsResources> action) { action?.Invoke(UI); return this; }

        protected XamlControlsResources() { }
    }

    public static partial class XamlControlsResourcesExtensions
    {
        /// <summary>Set <see cref="Xaml.Controls.XamlControlsResources.UseCompactResources"/></summary>
        public static TView UseCompactResources<TView>(this TView view, bool value) where TView : XamlControlsResources { view.UI.UseCompactResources = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Controls.XamlControlsResources.UseCompactResources"/></summary>
        public static DependencyProperty<TTarget, bool> UseCompactResources<TTarget>(this TTarget target) where TTarget : XamlControlsResources
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Controls.XamlControlsResources.UseCompactResourcesProperty);
    }
}

namespace CSharpMarkup.WinUI // Binding
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Data.Binding"/></summary>
        public static Binding Binding(Xaml.Data.IValueConverter Converter = default, string ConverterLanguage = default, object ConverterParameter = default, string ElementName = default, object FallbackValue = default, Xaml.Data.BindingMode? Mode = default, Xaml.PropertyPath Path = default, Xaml.Data.RelativeSource RelativeSource = default, object Source = default, object TargetNullValue = default, Xaml.Data.UpdateSourceTrigger? UpdateSourceTrigger = default)
        {
            var ui = new Xaml.Data.Binding();
            if (Converter is not null) ui.Converter = Converter;
            if (ConverterLanguage is not null) ui.ConverterLanguage = ConverterLanguage;
            if (ConverterParameter is not null) ui.ConverterParameter = ConverterParameter;
            if (ElementName is not null) ui.ElementName = ElementName;
            if (FallbackValue is not null) ui.FallbackValue = FallbackValue;
            if (Mode is not null) ui.Mode = Mode.Value;
            if (Path is not null) ui.Path = Path;
            if (RelativeSource is not null) ui.RelativeSource = RelativeSource;
            if (Source is not null) ui.Source = Source;
            if (TargetNullValue is not null) ui.TargetNullValue = TargetNullValue;
            if (UpdateSourceTrigger is not null) ui.UpdateSourceTrigger = UpdateSourceTrigger.Value;
            return CSharpMarkup.WinUI.Binding.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Data.Binding"/></summary>
        public static Binding Binding()
        {
            var ui = new Xaml.Data.Binding();
            return CSharpMarkup.WinUI.Binding.StartChain(ui);
        }
    }

    public partial class Binding : BindingBase, IUI<Xaml.Data.Binding>
    {
        static Binding instance;

        internal static Binding StartChain(Xaml.Data.Binding ui)
        {
            if (instance == null) instance = new Binding();
            instance.UI = ui;
            return instance;
        }

        Xaml.Data.Binding ui;

        public new Xaml.Data.Binding UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Data.Binding(Binding view) => view?.UI;

        public static implicit operator Binding(Xaml.Data.Binding ui) => Binding.StartChain(ui);

        public Binding Invoke(Action<Xaml.Data.Binding> action) { action?.Invoke(UI); return this; }

        protected Binding() { }
    }

    public static partial class BindingExtensions
    {
        /// <summary>Set <see cref="Xaml.Data.Binding.Converter"/></summary>
        public static TView Converter<TView>(this TView view, Xaml.Data.IValueConverter value) where TView : Binding { view.UI.Converter = value; return view; }

        /// <summary>Set <see cref="Xaml.Data.Binding.ConverterLanguage"/></summary>
        public static TView ConverterLanguage<TView>(this TView view, string value) where TView : Binding { view.UI.ConverterLanguage = value; return view; }

        /// <summary>Set <see cref="Xaml.Data.Binding.ConverterParameter"/></summary>
        public static TView ConverterParameter<TView>(this TView view, object value) where TView : Binding { view.UI.ConverterParameter = value; return view; }

        /// <summary>Set <see cref="Xaml.Data.Binding.ElementName"/></summary>
        public static TView ElementName<TView>(this TView view, string value) where TView : Binding { view.UI.ElementName = value; return view; }

        /// <summary>Set <see cref="Xaml.Data.Binding.FallbackValue"/></summary>
        public static TView FallbackValue<TView>(this TView view, object value) where TView : Binding { view.UI.FallbackValue = value; return view; }

        /// <summary>Set <see cref="Xaml.Data.Binding.Mode"/></summary>
        public static TView Mode<TView>(this TView view, Xaml.Data.BindingMode value) where TView : Binding { view.UI.Mode = value; return view; }

        /// <summary>Set <see cref="Xaml.Data.Binding.Path"/></summary>
        public static TView Path<TView>(this TView view, Xaml.PropertyPath value) where TView : Binding { view.UI.Path = value; return view; }

        /// <summary>Set <see cref="Xaml.Data.Binding.RelativeSource"/></summary>
        public static TView RelativeSource<TView>(this TView view, Xaml.Data.RelativeSource value) where TView : Binding { view.UI.RelativeSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Data.Binding.Source"/></summary>
        public static TView Source<TView>(this TView view, object value) where TView : Binding { view.UI.Source = value; return view; }

        /// <summary>Set <see cref="Xaml.Data.Binding.TargetNullValue"/></summary>
        public static TView TargetNullValue<TView>(this TView view, object value) where TView : Binding { view.UI.TargetNullValue = value; return view; }

        /// <summary>Set <see cref="Xaml.Data.Binding.UpdateSourceTrigger"/></summary>
        public static TView UpdateSourceTrigger<TView>(this TView view, Xaml.Data.UpdateSourceTrigger value) where TView : Binding { view.UI.UpdateSourceTrigger = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // BindingBase
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Data.BindingBase"/></summary>
        public static BindingBase BindingBase()
        {
            var ui = new Xaml.Data.BindingBase();
            return CSharpMarkup.WinUI.BindingBase.StartChain(ui);
        }
    }

    public partial class BindingBase : DependencyObject, IUI<Xaml.Data.BindingBase>
    {
        static BindingBase instance;

        internal static BindingBase StartChain(Xaml.Data.BindingBase ui)
        {
            if (instance == null) instance = new BindingBase();
            instance.UI = ui;
            return instance;
        }

        Xaml.Data.BindingBase ui;

        public new Xaml.Data.BindingBase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Data.BindingBase(BindingBase view) => view?.UI;

        public static implicit operator BindingBase(Xaml.Data.BindingBase ui) => BindingBase.StartChain(ui);

        public BindingBase Invoke(Action<Xaml.Data.BindingBase> action) { action?.Invoke(UI); return this; }

        protected BindingBase() { }
    }
}

namespace CSharpMarkup.WinUI // CollectionViewSource
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Data.CollectionViewSource"/></summary>
        public static CollectionViewSource CollectionViewSource(bool? IsSourceGrouped = default, Xaml.PropertyPath ItemsPath = default, object Source = default)
        {
            var ui = new Xaml.Data.CollectionViewSource();
            if (IsSourceGrouped is not null) ui.IsSourceGrouped = IsSourceGrouped.Value;
            if (ItemsPath is not null) ui.ItemsPath = ItemsPath;
            if (Source is not null) ui.Source = Source;
            return CSharpMarkup.WinUI.CollectionViewSource.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Data.CollectionViewSource"/></summary>
        public static CollectionViewSource CollectionViewSource()
        {
            var ui = new Xaml.Data.CollectionViewSource();
            return CSharpMarkup.WinUI.CollectionViewSource.StartChain(ui);
        }
    }

    public partial class CollectionViewSource : DependencyObject, IUI<Xaml.Data.CollectionViewSource>
    {
        static CollectionViewSource instance;

        internal static CollectionViewSource StartChain(Xaml.Data.CollectionViewSource ui)
        {
            if (instance == null) instance = new CollectionViewSource();
            instance.UI = ui;
            return instance;
        }

        Xaml.Data.CollectionViewSource ui;

        public new Xaml.Data.CollectionViewSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Data.CollectionViewSource(CollectionViewSource view) => view?.UI;

        public static implicit operator CollectionViewSource(Xaml.Data.CollectionViewSource ui) => CollectionViewSource.StartChain(ui);

        public CollectionViewSource Invoke(Action<Xaml.Data.CollectionViewSource> action) { action?.Invoke(UI); return this; }

        protected CollectionViewSource() { }
    }

    public static partial class CollectionViewSourceExtensions
    {
        /// <summary>Set <see cref="Xaml.Data.CollectionViewSource.IsSourceGrouped"/></summary>
        public static TView IsSourceGrouped<TView>(this TView view, bool value) where TView : CollectionViewSource { view.UI.IsSourceGrouped = value; return view; }

        /// <summary>Set <see cref="Xaml.Data.CollectionViewSource.ItemsPath"/></summary>
        public static TView ItemsPath<TView>(this TView view, Xaml.PropertyPath value) where TView : CollectionViewSource { view.UI.ItemsPath = value; return view; }

        /// <summary>Set <see cref="Xaml.Data.CollectionViewSource.Source"/></summary>
        public static TView Source<TView>(this TView view, object value) where TView : CollectionViewSource { view.UI.Source = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Data.CollectionViewSource.IsSourceGrouped"/></summary>
        public static DependencyProperty<TTarget, bool> IsSourceGrouped<TTarget>(this TTarget target) where TTarget : CollectionViewSource
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Data.CollectionViewSource.IsSourceGroupedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Data.CollectionViewSource.ItemsPath"/></summary>
        public static DependencyProperty<TTarget, Xaml.PropertyPath> ItemsPath<TTarget>(this TTarget target) where TTarget : CollectionViewSource
        => DependencyProperty<TTarget, Xaml.PropertyPath>.Get(target, Xaml.Data.CollectionViewSource.ItemsPathProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Data.CollectionViewSource.Source"/></summary>
        public static DependencyProperty<TTarget, object> Source<TTarget>(this TTarget target) where TTarget : CollectionViewSource
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Data.CollectionViewSource.SourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Data.CollectionViewSource.View"/></summary>
        public static DependencyProperty<TTarget, Xaml.Data.ICollectionView> View<TTarget>(this TTarget target) where TTarget : CollectionViewSource
        => DependencyProperty<TTarget, Xaml.Data.ICollectionView>.Get(target, Xaml.Data.CollectionViewSource.ViewProperty);
    }
}

namespace CSharpMarkup.WinUI // RelativeSource
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Data.RelativeSource"/></summary>
        public static RelativeSource RelativeSource(Xaml.Data.RelativeSourceMode? Mode = default)
        {
            var ui = new Xaml.Data.RelativeSource();
            if (Mode is not null) ui.Mode = Mode.Value;
            return CSharpMarkup.WinUI.RelativeSource.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Data.RelativeSource"/></summary>
        public static RelativeSource RelativeSource()
        {
            var ui = new Xaml.Data.RelativeSource();
            return CSharpMarkup.WinUI.RelativeSource.StartChain(ui);
        }
    }

    public partial class RelativeSource : DependencyObject, IUI<Xaml.Data.RelativeSource>
    {
        static RelativeSource instance;

        internal static RelativeSource StartChain(Xaml.Data.RelativeSource ui)
        {
            if (instance == null) instance = new RelativeSource();
            instance.UI = ui;
            return instance;
        }

        Xaml.Data.RelativeSource ui;

        public new Xaml.Data.RelativeSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Data.RelativeSource(RelativeSource view) => view?.UI;

        public static implicit operator RelativeSource(Xaml.Data.RelativeSource ui) => RelativeSource.StartChain(ui);

        public RelativeSource Invoke(Action<Xaml.Data.RelativeSource> action) { action?.Invoke(UI); return this; }

        protected RelativeSource() { }
    }

    public static partial class RelativeSourceExtensions
    {
        /// <summary>Set <see cref="Xaml.Data.RelativeSource.Mode"/></summary>
        public static TView Mode<TView>(this TView view, Xaml.Data.RelativeSourceMode value) where TView : RelativeSource { view.UI.Mode = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // DataTemplate
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.DataTemplate"/></summary>
        public static DataTemplate DataTemplate()
        {
            var ui = new Xaml.DataTemplate();
            return CSharpMarkup.WinUI.DataTemplate.StartChain(ui);
        }
    }

    public partial class DataTemplate : FrameworkTemplate, IUI<Xaml.DataTemplate>
    {
        static DataTemplate instance;

        internal static DataTemplate StartChain(Xaml.DataTemplate ui)
        {
            if (instance == null) instance = new DataTemplate();
            instance.UI = ui;
            return instance;
        }

        Xaml.DataTemplate ui;

        public new Xaml.DataTemplate UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.DataTemplate(DataTemplate view) => view?.UI;

        public static implicit operator DataTemplate(Xaml.DataTemplate ui) => DataTemplate.StartChain(ui);

        public DataTemplate Invoke(Action<Xaml.DataTemplate> action) { action?.Invoke(UI); return this; }

        protected DataTemplate() { }
    }

    public static partial class DataTemplateExtensions
    {
        /// <summary>Set <see cref="Xaml.DataTemplate.ExtensionInstance"/></summary>
        public static TTarget DataTemplate_ExtensionInstance<TTarget>(this TTarget target, Xaml.IDataTemplateExtension value) where TTarget : FrameworkElement
        { Xaml.DataTemplate.SetExtensionInstance(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.DataTemplate.ExtensionInstance"/></summary>
        public static DependencyProperty<TTarget, Xaml.IDataTemplateExtension> DataTemplate_ExtensionInstance<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.IDataTemplateExtension>.Get(target, Xaml.DataTemplate.ExtensionInstanceProperty);
    }
}

namespace CSharpMarkup.WinUI // DependencyObject
{
    public partial class DependencyObject: IUI<Xaml.DependencyObject>
    {
        public Xaml.DependencyObject UI { get; protected set; }

        public DependencyObject Invoke(Action<Xaml.DependencyObject> action) { action?.Invoke(UI); return this; }

        protected DependencyObject() { }
    }
}

namespace CSharpMarkup.WinUI // DependencyObjectCollection
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.DependencyObjectCollection"/></summary>
        public static DependencyObjectCollection DependencyObjectCollection()
        {
            var ui = new Xaml.DependencyObjectCollection();
            return CSharpMarkup.WinUI.DependencyObjectCollection.StartChain(ui);
        }
    }

    public partial class DependencyObjectCollection : DependencyObject, IUI<Xaml.DependencyObjectCollection>
    {
        static DependencyObjectCollection instance;

        internal static DependencyObjectCollection StartChain(Xaml.DependencyObjectCollection ui)
        {
            if (instance == null) instance = new DependencyObjectCollection();
            instance.UI = ui;
            return instance;
        }

        Xaml.DependencyObjectCollection ui;

        public new Xaml.DependencyObjectCollection UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.DependencyObjectCollection(DependencyObjectCollection view) => view?.UI;

        public static implicit operator DependencyObjectCollection(Xaml.DependencyObjectCollection ui) => DependencyObjectCollection.StartChain(ui);

        public DependencyObjectCollection Invoke(Action<Xaml.DependencyObjectCollection> action) { action?.Invoke(UI); return this; }

        protected DependencyObjectCollection() { }
    }
}

namespace CSharpMarkup.WinUI // Block
{
    public partial class Block : TextElement, IUI<Xaml.Documents.Block>
    {
        Xaml.Documents.Block ui;

        public new Xaml.Documents.Block UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Block Invoke(Action<Xaml.Documents.Block> action) { action?.Invoke(UI); return this; }

        protected Block() { }
    }

    public static partial class BlockExtensions
    {
        /// <summary>Set <see cref="Xaml.Documents.Block.HorizontalTextAlignment"/></summary>
        public static TView HorizontalTextAlignment<TView>(this TView view, Xaml.TextAlignment value) where TView : Block { view.UI.HorizontalTextAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Block.LineHeight"/></summary>
        public static TView LineHeight<TView>(this TView view, double value) where TView : Block { view.UI.LineHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Block.LineStackingStrategy"/></summary>
        public static TView LineStackingStrategy<TView>(this TView view, Xaml.LineStackingStrategy value) where TView : Block { view.UI.LineStackingStrategy = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Block.Margin"/></summary>
        public static TView Margin<TView>(this TView view, Xaml.Thickness value) where TView : Block { view.UI.Margin = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Block.Margin"/></summary>
        public static TView Margin<TView>(this TView view, double uniform) where TView : Block { view.UI.Margin = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.Documents.Block.Margin"/></summary>
        public static TView Margin<TView>(this TView view, double horizontal, double vertical) where TView : Block { view.UI.Margin = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.Documents.Block.Margin"/></summary>
        public static TView Margin<TView>(this TView view, double left, double top, double right, double bottom) where TView : Block { view.UI.Margin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Documents.Block.Margin"/></summary>
        public static TView Margins<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : Block { view.UI.Margin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.Documents.Block.TextAlignment"/></summary>
        public static TView TextAlignment<TView>(this TView view, Xaml.TextAlignment value) where TView : Block { view.UI.TextAlignment = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Block.HorizontalTextAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextAlignment> HorizontalTextAlignment<TTarget>(this TTarget target) where TTarget : Block
        => DependencyProperty<TTarget, Xaml.TextAlignment>.Get(target, Xaml.Documents.Block.HorizontalTextAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Block.LineHeight"/></summary>
        public static DependencyProperty<TTarget, double> LineHeight<TTarget>(this TTarget target) where TTarget : Block
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Documents.Block.LineHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Block.LineStackingStrategy"/></summary>
        public static DependencyProperty<TTarget, Xaml.LineStackingStrategy> LineStackingStrategy<TTarget>(this TTarget target) where TTarget : Block
        => DependencyProperty<TTarget, Xaml.LineStackingStrategy>.Get(target, Xaml.Documents.Block.LineStackingStrategyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Block.Margin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> Margin<TTarget>(this TTarget target) where TTarget : Block
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.Documents.Block.MarginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Block.TextAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.TextAlignment> TextAlignment<TTarget>(this TTarget target) where TTarget : Block
        => DependencyProperty<TTarget, Xaml.TextAlignment>.Get(target, Xaml.Documents.Block.TextAlignmentProperty);
    }
}

namespace CSharpMarkup.WinUI // Bold
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Documents.Bold"/></summary>
        public static Bold Bold(params InlineCollectionItem[] Inlines)
        {
            var ui = new Xaml.Documents.Bold();
            for (int i = 0; i < Inlines.Length; i++)
            {
                var child = Inlines[i];
                if (child == null) continue;

                var subChildren = Spreader<InlineCollectionItem>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Inlines.Add(subChildren[j]);
                else
                    ui.Inlines.Add(child);
            }
            return CSharpMarkup.WinUI.Bold.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Documents.Bold"/></summary>
        public static Bold Bold()
        {
            var ui = new Xaml.Documents.Bold();
            return CSharpMarkup.WinUI.Bold.StartChain(ui);
        }
    }

    public partial class Bold : Span, IUI<Xaml.Documents.Bold>
    {
        static Bold instance;

        internal static Bold StartChain(Xaml.Documents.Bold ui)
        {
            if (instance == null) instance = new Bold();
            instance.UI = ui;
            return instance;
        }

        Xaml.Documents.Bold ui;

        public new Xaml.Documents.Bold UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Documents.Inline(Bold view) => view?.UI;

        public static implicit operator Xaml.Documents.Bold(Bold view) => view?.UI;

        public static implicit operator Bold(Xaml.Documents.Bold ui) => Bold.StartChain(ui);

        public Bold Invoke(Action<Xaml.Documents.Bold> action) { action?.Invoke(UI); return this; }

        protected Bold() { }
    }
}

namespace CSharpMarkup.WinUI // Glyphs
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Documents.Glyphs"/></summary>
        public static Glyphs Glyphs(int? ColorFontPaletteIndex = default, Xaml.Media.Brush Fill = default, double? FontRenderingEmSize = default, Uri FontUri = default, string Indices = default, bool? IsColorFontEnabled = default, double? OriginX = default, double? OriginY = default, Xaml.Media.StyleSimulations? StyleSimulations = default, string UnicodeString = default)
        {
            var ui = new Xaml.Documents.Glyphs();
            if (ColorFontPaletteIndex is not null) ui.ColorFontPaletteIndex = ColorFontPaletteIndex.Value;
            if (Fill is not null) ui.Fill = Fill;
            if (FontRenderingEmSize is not null) ui.FontRenderingEmSize = FontRenderingEmSize.Value;
            if (FontUri is not null) ui.FontUri = FontUri;
            if (Indices is not null) ui.Indices = Indices;
            if (IsColorFontEnabled is not null) ui.IsColorFontEnabled = IsColorFontEnabled.Value;
            if (OriginX is not null) ui.OriginX = OriginX.Value;
            if (OriginY is not null) ui.OriginY = OriginY.Value;
            if (StyleSimulations is not null) ui.StyleSimulations = StyleSimulations.Value;
            if (UnicodeString is not null) ui.UnicodeString = UnicodeString;
            return CSharpMarkup.WinUI.Glyphs.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Documents.Glyphs"/></summary>
        public static Glyphs Glyphs()
        {
            var ui = new Xaml.Documents.Glyphs();
            return CSharpMarkup.WinUI.Glyphs.StartChain(ui);
        }
    }

    public partial class Glyphs : FrameworkElement, IUI<Xaml.Documents.Glyphs>
    {
        static Glyphs instance;

        internal static Glyphs StartChain(Xaml.Documents.Glyphs ui)
        {
            if (instance == null) instance = new Glyphs();
            instance.UI = ui;
            return instance;
        }

        Xaml.Documents.Glyphs ui;

        public new Xaml.Documents.Glyphs UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Glyphs view) => view?.UI;

        public static implicit operator Xaml.Documents.Glyphs(Glyphs view) => view?.UI;

        public static implicit operator Glyphs(Xaml.Documents.Glyphs ui) => Glyphs.StartChain(ui);

        public Glyphs Invoke(Action<Xaml.Documents.Glyphs> action) { action?.Invoke(UI); return this; }

        protected Glyphs() { }
    }

    public static partial class GlyphsExtensions
    {
        /// <summary>Set <see cref="Xaml.Documents.Glyphs.ColorFontPaletteIndex"/></summary>
        public static TView ColorFontPaletteIndex<TView>(this TView view, int value) where TView : Glyphs { view.UI.ColorFontPaletteIndex = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Glyphs.Fill"/></summary>
        public static TView Fill<TView>(this TView view, Xaml.Media.Brush value) where TView : Glyphs { view.UI.Fill = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Glyphs.Fill"/></summary>
        public static TView Fill<TView>(this TView view, Windows.UI.Color value) where TView : Glyphs { view.UI.Fill = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Documents.Glyphs.Fill"/></summary>
        public static TView Fill<TView>(this TView view, string color) where TView : Glyphs { view.UI.Fill = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Documents.Glyphs.FontRenderingEmSize"/></summary>
        public static TView FontRenderingEmSize<TView>(this TView view, double value) where TView : Glyphs { view.UI.FontRenderingEmSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Glyphs.FontUri"/></summary>
        public static TView FontUri<TView>(this TView view, Uri value) where TView : Glyphs { view.UI.FontUri = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Glyphs.Indices"/></summary>
        public static TView Indices<TView>(this TView view, string value) where TView : Glyphs { view.UI.Indices = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Glyphs.IsColorFontEnabled"/></summary>
        public static TView IsColorFontEnabled<TView>(this TView view, bool value) where TView : Glyphs { view.UI.IsColorFontEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Glyphs.OriginX"/></summary>
        public static TView OriginX<TView>(this TView view, double value) where TView : Glyphs { view.UI.OriginX = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Glyphs.OriginY"/></summary>
        public static TView OriginY<TView>(this TView view, double value) where TView : Glyphs { view.UI.OriginY = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Glyphs.StyleSimulations"/></summary>
        public static TView StyleSimulations<TView>(this TView view, Xaml.Media.StyleSimulations value) where TView : Glyphs { view.UI.StyleSimulations = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Glyphs.UnicodeString"/></summary>
        public static TView UnicodeString<TView>(this TView view, string value) where TView : Glyphs { view.UI.UnicodeString = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Glyphs.ColorFontPaletteIndex"/></summary>
        public static DependencyProperty<TTarget, int> ColorFontPaletteIndex<TTarget>(this TTarget target) where TTarget : Glyphs
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Documents.Glyphs.ColorFontPaletteIndexProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Glyphs.Fill"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Fill<TTarget>(this TTarget target) where TTarget : Glyphs
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Documents.Glyphs.FillProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Glyphs.FontRenderingEmSize"/></summary>
        public static DependencyProperty<TTarget, double> FontRenderingEmSize<TTarget>(this TTarget target) where TTarget : Glyphs
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Documents.Glyphs.FontRenderingEmSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Glyphs.FontUri"/></summary>
        public static DependencyProperty<TTarget, Uri> FontUri<TTarget>(this TTarget target) where TTarget : Glyphs
        => DependencyProperty<TTarget, Uri>.Get(target, Xaml.Documents.Glyphs.FontUriProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Glyphs.Indices"/></summary>
        public static DependencyProperty<TTarget, string> Indices<TTarget>(this TTarget target) where TTarget : Glyphs
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Documents.Glyphs.IndicesProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Glyphs.IsColorFontEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsColorFontEnabled<TTarget>(this TTarget target) where TTarget : Glyphs
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Glyphs.IsColorFontEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Glyphs.OriginX"/></summary>
        public static DependencyProperty<TTarget, double> OriginX<TTarget>(this TTarget target) where TTarget : Glyphs
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Documents.Glyphs.OriginXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Glyphs.OriginY"/></summary>
        public static DependencyProperty<TTarget, double> OriginY<TTarget>(this TTarget target) where TTarget : Glyphs
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Documents.Glyphs.OriginYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Glyphs.StyleSimulations"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.StyleSimulations> StyleSimulations<TTarget>(this TTarget target) where TTarget : Glyphs
        => DependencyProperty<TTarget, Xaml.Media.StyleSimulations>.Get(target, Xaml.Documents.Glyphs.StyleSimulationsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Glyphs.UnicodeString"/></summary>
        public static DependencyProperty<TTarget, string> UnicodeString<TTarget>(this TTarget target) where TTarget : Glyphs
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Documents.Glyphs.UnicodeStringProperty);
    }
}

namespace CSharpMarkup.WinUI // Hyperlink
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Documents.Hyperlink"/></summary>
        public static Hyperlink Hyperlink(params InlineCollectionItem[] Inlines)
        {
            var ui = new Xaml.Documents.Hyperlink();
            for (int i = 0; i < Inlines.Length; i++)
            {
                var child = Inlines[i];
                if (child == null) continue;

                var subChildren = Spreader<InlineCollectionItem>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Inlines.Add(subChildren[j]);
                else
                    ui.Inlines.Add(child);
            }
            return CSharpMarkup.WinUI.Hyperlink.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Documents.Hyperlink"/></summary>
        public static Hyperlink Hyperlink()
        {
            var ui = new Xaml.Documents.Hyperlink();
            return CSharpMarkup.WinUI.Hyperlink.StartChain(ui);
        }
    }

    public partial class Hyperlink : Span, IUI<Xaml.Documents.Hyperlink>
    {
        static Hyperlink instance;

        internal static Hyperlink StartChain(Xaml.Documents.Hyperlink ui)
        {
            if (instance == null) instance = new Hyperlink();
            instance.UI = ui;
            return instance;
        }

        Xaml.Documents.Hyperlink ui;

        public new Xaml.Documents.Hyperlink UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Documents.Inline(Hyperlink view) => view?.UI;

        public static implicit operator Xaml.Documents.Hyperlink(Hyperlink view) => view?.UI;

        public static implicit operator Hyperlink(Xaml.Documents.Hyperlink ui) => Hyperlink.StartChain(ui);

        public Hyperlink Invoke(Action<Xaml.Documents.Hyperlink> action) { action?.Invoke(UI); return this; }

        protected Hyperlink() { }
    }

    public static partial class HyperlinkExtensions
    {
        /// <summary>Set <see cref="Xaml.Documents.Hyperlink.ElementSoundMode"/></summary>
        public static TView ElementSoundMode<TView>(this TView view, Xaml.ElementSoundMode value) where TView : Hyperlink { view.UI.ElementSoundMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Hyperlink.IsTabStop"/></summary>
        public static TView IsTabStop<TView>(this TView view, bool value) where TView : Hyperlink { view.UI.IsTabStop = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Hyperlink.NavigateUri"/></summary>
        public static TView NavigateUri<TView>(this TView view, Uri value) where TView : Hyperlink { view.UI.NavigateUri = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Hyperlink.TabIndex"/></summary>
        public static TView TabIndex<TView>(this TView view, int value) where TView : Hyperlink { view.UI.TabIndex = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Hyperlink.UnderlineStyle"/></summary>
        public static TView UnderlineStyle<TView>(this TView view, Xaml.Documents.UnderlineStyle value) where TView : Hyperlink { view.UI.UnderlineStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Hyperlink.XYFocusDown"/></summary>
        public static TView XYFocusDown<TView>(this TView view, Xaml.DependencyObject value) where TView : Hyperlink { view.UI.XYFocusDown = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Hyperlink.XYFocusDownNavigationStrategy"/></summary>
        public static TView XYFocusDownNavigationStrategy<TView>(this TView view, Xaml.Input.XYFocusNavigationStrategy value) where TView : Hyperlink { view.UI.XYFocusDownNavigationStrategy = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Hyperlink.XYFocusLeft"/></summary>
        public static TView XYFocusLeft<TView>(this TView view, Xaml.DependencyObject value) where TView : Hyperlink { view.UI.XYFocusLeft = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Hyperlink.XYFocusLeftNavigationStrategy"/></summary>
        public static TView XYFocusLeftNavigationStrategy<TView>(this TView view, Xaml.Input.XYFocusNavigationStrategy value) where TView : Hyperlink { view.UI.XYFocusLeftNavigationStrategy = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Hyperlink.XYFocusRight"/></summary>
        public static TView XYFocusRight<TView>(this TView view, Xaml.DependencyObject value) where TView : Hyperlink { view.UI.XYFocusRight = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Hyperlink.XYFocusRightNavigationStrategy"/></summary>
        public static TView XYFocusRightNavigationStrategy<TView>(this TView view, Xaml.Input.XYFocusNavigationStrategy value) where TView : Hyperlink { view.UI.XYFocusRightNavigationStrategy = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Hyperlink.XYFocusUp"/></summary>
        public static TView XYFocusUp<TView>(this TView view, Xaml.DependencyObject value) where TView : Hyperlink { view.UI.XYFocusUp = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.Hyperlink.XYFocusUpNavigationStrategy"/></summary>
        public static TView XYFocusUpNavigationStrategy<TView>(this TView view, Xaml.Input.XYFocusNavigationStrategy value) where TView : Hyperlink { view.UI.XYFocusUpNavigationStrategy = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Hyperlink.ElementSoundMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.ElementSoundMode> ElementSoundMode<TTarget>(this TTarget target) where TTarget : Hyperlink
        => DependencyProperty<TTarget, Xaml.ElementSoundMode>.Get(target, Xaml.Documents.Hyperlink.ElementSoundModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Hyperlink.FocusState"/></summary>
        public static DependencyProperty<TTarget, Xaml.FocusState> FocusState<TTarget>(this TTarget target) where TTarget : Hyperlink
        => DependencyProperty<TTarget, Xaml.FocusState>.Get(target, Xaml.Documents.Hyperlink.FocusStateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Hyperlink.IsTabStop"/></summary>
        public static DependencyProperty<TTarget, bool> IsTabStop<TTarget>(this TTarget target) where TTarget : Hyperlink
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Hyperlink.IsTabStopProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Hyperlink.NavigateUri"/></summary>
        public static DependencyProperty<TTarget, Uri> NavigateUri<TTarget>(this TTarget target) where TTarget : Hyperlink
        => DependencyProperty<TTarget, Uri>.Get(target, Xaml.Documents.Hyperlink.NavigateUriProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Hyperlink.TabIndex"/></summary>
        public static DependencyProperty<TTarget, int> TabIndex<TTarget>(this TTarget target) where TTarget : Hyperlink
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Documents.Hyperlink.TabIndexProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Hyperlink.UnderlineStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.Documents.UnderlineStyle> UnderlineStyle<TTarget>(this TTarget target) where TTarget : Hyperlink
        => DependencyProperty<TTarget, Xaml.Documents.UnderlineStyle>.Get(target, Xaml.Documents.Hyperlink.UnderlineStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Hyperlink.XYFocusDownNavigationStrategy"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> XYFocusDownNavigationStrategy<TTarget>(this TTarget target) where TTarget : Hyperlink
        => DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy>.Get(target, Xaml.Documents.Hyperlink.XYFocusDownNavigationStrategyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Hyperlink.XYFocusDown"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> XYFocusDown<TTarget>(this TTarget target) where TTarget : Hyperlink
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Documents.Hyperlink.XYFocusDownProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Hyperlink.XYFocusLeftNavigationStrategy"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> XYFocusLeftNavigationStrategy<TTarget>(this TTarget target) where TTarget : Hyperlink
        => DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy>.Get(target, Xaml.Documents.Hyperlink.XYFocusLeftNavigationStrategyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Hyperlink.XYFocusLeft"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> XYFocusLeft<TTarget>(this TTarget target) where TTarget : Hyperlink
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Documents.Hyperlink.XYFocusLeftProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Hyperlink.XYFocusRightNavigationStrategy"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> XYFocusRightNavigationStrategy<TTarget>(this TTarget target) where TTarget : Hyperlink
        => DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy>.Get(target, Xaml.Documents.Hyperlink.XYFocusRightNavigationStrategyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Hyperlink.XYFocusRight"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> XYFocusRight<TTarget>(this TTarget target) where TTarget : Hyperlink
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Documents.Hyperlink.XYFocusRightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Hyperlink.XYFocusUpNavigationStrategy"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> XYFocusUpNavigationStrategy<TTarget>(this TTarget target) where TTarget : Hyperlink
        => DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy>.Get(target, Xaml.Documents.Hyperlink.XYFocusUpNavigationStrategyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Hyperlink.XYFocusUp"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> XYFocusUp<TTarget>(this TTarget target) where TTarget : Hyperlink
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Documents.Hyperlink.XYFocusUpProperty);
    }
}

namespace CSharpMarkup.WinUI // Inline
{
    public partial class Inline : TextElement, IUI<Xaml.Documents.Inline>
    {
        Xaml.Documents.Inline ui;

        public new Xaml.Documents.Inline UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Inline Invoke(Action<Xaml.Documents.Inline> action) { action?.Invoke(UI); return this; }

        protected Inline() { }
    }
}

namespace CSharpMarkup.WinUI // InlineUIContainer
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Documents.InlineUIContainer"/></summary>
        public static InlineUIContainer InlineUIContainer(Xaml.UIElement Child)
        {
            var ui = new Xaml.Documents.InlineUIContainer();
            if (Child is not null) ui.Child = Child;
            return CSharpMarkup.WinUI.InlineUIContainer.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Documents.InlineUIContainer"/></summary>
        public static InlineUIContainer InlineUIContainer()
        {
            var ui = new Xaml.Documents.InlineUIContainer();
            return CSharpMarkup.WinUI.InlineUIContainer.StartChain(ui);
        }
    }

    public partial class InlineUIContainer : Inline, IUI<Xaml.Documents.InlineUIContainer>
    {
        static InlineUIContainer instance;

        internal static InlineUIContainer StartChain(Xaml.Documents.InlineUIContainer ui)
        {
            if (instance == null) instance = new InlineUIContainer();
            instance.UI = ui;
            return instance;
        }

        Xaml.Documents.InlineUIContainer ui;

        public new Xaml.Documents.InlineUIContainer UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Documents.Inline(InlineUIContainer view) => view?.UI;

        public static implicit operator Xaml.Documents.InlineUIContainer(InlineUIContainer view) => view?.UI;

        public static implicit operator InlineUIContainer(Xaml.Documents.InlineUIContainer ui) => InlineUIContainer.StartChain(ui);

        public InlineUIContainer Invoke(Action<Xaml.Documents.InlineUIContainer> action) { action?.Invoke(UI); return this; }

        protected InlineUIContainer() { }
    }
}

namespace CSharpMarkup.WinUI // Italic
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Documents.Italic"/></summary>
        public static Italic Italic(params InlineCollectionItem[] Inlines)
        {
            var ui = new Xaml.Documents.Italic();
            for (int i = 0; i < Inlines.Length; i++)
            {
                var child = Inlines[i];
                if (child == null) continue;

                var subChildren = Spreader<InlineCollectionItem>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Inlines.Add(subChildren[j]);
                else
                    ui.Inlines.Add(child);
            }
            return CSharpMarkup.WinUI.Italic.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Documents.Italic"/></summary>
        public static Italic Italic()
        {
            var ui = new Xaml.Documents.Italic();
            return CSharpMarkup.WinUI.Italic.StartChain(ui);
        }
    }

    public partial class Italic : Span, IUI<Xaml.Documents.Italic>
    {
        static Italic instance;

        internal static Italic StartChain(Xaml.Documents.Italic ui)
        {
            if (instance == null) instance = new Italic();
            instance.UI = ui;
            return instance;
        }

        Xaml.Documents.Italic ui;

        public new Xaml.Documents.Italic UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Documents.Inline(Italic view) => view?.UI;

        public static implicit operator Xaml.Documents.Italic(Italic view) => view?.UI;

        public static implicit operator Italic(Xaml.Documents.Italic ui) => Italic.StartChain(ui);

        public Italic Invoke(Action<Xaml.Documents.Italic> action) { action?.Invoke(UI); return this; }

        protected Italic() { }
    }
}

namespace CSharpMarkup.WinUI // LineBreak
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Documents.LineBreak"/></summary>
        public static LineBreak LineBreak()
        {
            var ui = new Xaml.Documents.LineBreak();
            return CSharpMarkup.WinUI.LineBreak.StartChain(ui);
        }
    }

    public partial class LineBreak : Inline, IUI<Xaml.Documents.LineBreak>
    {
        static LineBreak instance;

        internal static LineBreak StartChain(Xaml.Documents.LineBreak ui)
        {
            if (instance == null) instance = new LineBreak();
            instance.UI = ui;
            return instance;
        }

        Xaml.Documents.LineBreak ui;

        public new Xaml.Documents.LineBreak UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Documents.Inline(LineBreak view) => view?.UI;

        public static implicit operator Xaml.Documents.LineBreak(LineBreak view) => view?.UI;

        public static implicit operator LineBreak(Xaml.Documents.LineBreak ui) => LineBreak.StartChain(ui);

        public LineBreak Invoke(Action<Xaml.Documents.LineBreak> action) { action?.Invoke(UI); return this; }

        protected LineBreak() { }
    }
}

namespace CSharpMarkup.WinUI // Paragraph
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Documents.Paragraph"/></summary>
        public static Paragraph Paragraph(params InlineCollectionItem[] Inlines)
        {
            var ui = new Xaml.Documents.Paragraph();
            for (int i = 0; i < Inlines.Length; i++)
            {
                var child = Inlines[i];
                if (child == null) continue;

                var subChildren = Spreader<InlineCollectionItem>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Inlines.Add(subChildren[j]);
                else
                    ui.Inlines.Add(child);
            }
            return CSharpMarkup.WinUI.Paragraph.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Documents.Paragraph"/></summary>
        public static Paragraph Paragraph()
        {
            var ui = new Xaml.Documents.Paragraph();
            return CSharpMarkup.WinUI.Paragraph.StartChain(ui);
        }
    }

    public partial class Paragraph : Block, IUI<Xaml.Documents.Paragraph>
    {
        static Paragraph instance;

        internal static Paragraph StartChain(Xaml.Documents.Paragraph ui)
        {
            if (instance == null) instance = new Paragraph();
            instance.UI = ui;
            return instance;
        }

        Xaml.Documents.Paragraph ui;

        public new Xaml.Documents.Paragraph UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Documents.Paragraph(Paragraph view) => view?.UI;

        public static implicit operator Paragraph(Xaml.Documents.Paragraph ui) => Paragraph.StartChain(ui);

        public Paragraph Invoke(Action<Xaml.Documents.Paragraph> action) { action?.Invoke(UI); return this; }

        protected Paragraph() { }
    }

    public static partial class ParagraphExtensions
    {
        /// <summary>Set <see cref="Xaml.Documents.Paragraph.TextIndent"/></summary>
        public static TView TextIndent<TView>(this TView view, double value) where TView : Paragraph { view.UI.TextIndent = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Paragraph.TextIndent"/></summary>
        public static DependencyProperty<TTarget, double> TextIndent<TTarget>(this TTarget target) where TTarget : Paragraph
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Documents.Paragraph.TextIndentProperty);
    }
}

namespace CSharpMarkup.WinUI // Run
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Documents.Run"/></summary>
        public static Run Run(string Text)
        {
            var ui = new Xaml.Documents.Run();
            if (Text is not null) ui.Text = Text;
            return CSharpMarkup.WinUI.Run.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Documents.Run"/></summary>
        public static Run Run(Xaml.FlowDirection? FlowDirection = default, string Text = default)
        {
            var ui = new Xaml.Documents.Run();
            if (FlowDirection is not null) ui.FlowDirection = FlowDirection.Value;
            if (Text is not null) ui.Text = Text;
            return CSharpMarkup.WinUI.Run.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Documents.Run"/></summary>
        public static Run Run()
        {
            var ui = new Xaml.Documents.Run();
            return CSharpMarkup.WinUI.Run.StartChain(ui);
        }
    }

    public partial class Run : Inline, IUI<Xaml.Documents.Run>
    {
        static Run instance;

        internal static Run StartChain(Xaml.Documents.Run ui)
        {
            if (instance == null) instance = new Run();
            instance.UI = ui;
            return instance;
        }

        Xaml.Documents.Run ui;

        public new Xaml.Documents.Run UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Documents.Inline(Run view) => view?.UI;

        public static implicit operator Xaml.Documents.Run(Run view) => view?.UI;

        public static implicit operator Run(Xaml.Documents.Run ui) => Run.StartChain(ui);

        public Run Invoke(Action<Xaml.Documents.Run> action) { action?.Invoke(UI); return this; }

        protected Run() { }
    }

    public static partial class RunExtensions
    {
        /// <summary>Set <see cref="Xaml.Documents.Run.FlowDirection"/></summary>
        public static TView FlowDirection<TView>(this TView view, Xaml.FlowDirection value) where TView : Run { view.UI.FlowDirection = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Run.FlowDirection"/></summary>
        public static DependencyProperty<TTarget, Xaml.FlowDirection> FlowDirection<TTarget>(this TTarget target) where TTarget : Run
        => DependencyProperty<TTarget, Xaml.FlowDirection>.Get(target, Xaml.Documents.Run.FlowDirectionProperty);
    }
}

namespace CSharpMarkup.WinUI // Span
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Documents.Span"/></summary>
        public static Span Span(params InlineCollectionItem[] Inlines)
        {
            var ui = new Xaml.Documents.Span();
            for (int i = 0; i < Inlines.Length; i++)
            {
                var child = Inlines[i];
                if (child == null) continue;

                var subChildren = Spreader<InlineCollectionItem>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Inlines.Add(subChildren[j]);
                else
                    ui.Inlines.Add(child);
            }
            return CSharpMarkup.WinUI.Span.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Documents.Span"/></summary>
        public static Span Span()
        {
            var ui = new Xaml.Documents.Span();
            return CSharpMarkup.WinUI.Span.StartChain(ui);
        }
    }

    public partial class Span : Inline, IUI<Xaml.Documents.Span>
    {
        static Span instance;

        internal static Span StartChain(Xaml.Documents.Span ui)
        {
            if (instance == null) instance = new Span();
            instance.UI = ui;
            return instance;
        }

        Xaml.Documents.Span ui;

        public new Xaml.Documents.Span UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Documents.Inline(Span view) => view?.UI;

        public static implicit operator Xaml.Documents.Span(Span view) => view?.UI;

        public static implicit operator Span(Xaml.Documents.Span ui) => Span.StartChain(ui);

        public Span Invoke(Action<Xaml.Documents.Span> action) { action?.Invoke(UI); return this; }

        protected Span() { }
    }
}

namespace CSharpMarkup.WinUI // TextElement
{
    public partial class TextElement : DependencyObject, IUI<Xaml.Documents.TextElement>
    {
        Xaml.Documents.TextElement ui;

        public new Xaml.Documents.TextElement UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TextElement Invoke(Action<Xaml.Documents.TextElement> action) { action?.Invoke(UI); return this; }

        protected TextElement() { }
    }

    public static partial class TextElementExtensions
    {
        /// <summary>Set <see cref="Xaml.Documents.TextElement.AccessKey"/></summary>
        public static TView AccessKey<TView>(this TView view, string value) where TView : TextElement { view.UI.AccessKey = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.AccessKeyScopeOwner"/></summary>
        public static TView AccessKeyScopeOwner<TView>(this TView view, Xaml.DependencyObject value) where TView : TextElement { view.UI.AccessKeyScopeOwner = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.AllowFocusOnInteraction"/></summary>
        public static TView AllowFocusOnInteraction<TView>(this TView view, bool value) where TView : TextElement { view.UI.AllowFocusOnInteraction = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.CharacterSpacing"/></summary>
        public static TView CharacterSpacing<TView>(this TView view, int value) where TView : TextElement { view.UI.CharacterSpacing = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.ExitDisplayModeOnAccessKeyInvoked"/></summary>
        public static TView ExitDisplayModeOnAccessKeyInvoked<TView>(this TView view, bool value) where TView : TextElement { view.UI.ExitDisplayModeOnAccessKeyInvoked = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.FontFamily"/></summary>
        public static TView FontFamily<TView>(this TView view, Xaml.Media.FontFamily value) where TView : TextElement { view.UI.FontFamily = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.FontSize"/></summary>
        public static TView FontSize<TView>(this TView view, double value) where TView : TextElement { view.UI.FontSize = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.FontStretch"/></summary>
        public static TView FontStretch<TView>(this TView view, Windows.UI.Text.FontStretch value) where TView : TextElement { view.UI.FontStretch = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.FontStyle"/></summary>
        public static TView FontStyle<TView>(this TView view, Windows.UI.Text.FontStyle value) where TView : TextElement { view.UI.FontStyle = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.FontWeight"/></summary>
        public static TView FontWeight<TView>(this TView view, Windows.UI.Text.FontWeight value) where TView : TextElement { view.UI.FontWeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Xaml.Media.Brush value) where TView : TextElement { view.UI.Foreground = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, Windows.UI.Color value) where TView : TextElement { view.UI.Foreground = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.Foreground"/></summary>
        public static TView Foreground<TView>(this TView view, string color) where TView : TextElement { view.UI.Foreground = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.IsAccessKeyScope"/></summary>
        public static TView IsAccessKeyScope<TView>(this TView view, bool value) where TView : TextElement { view.UI.IsAccessKeyScope = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.IsTextScaleFactorEnabled"/></summary>
        public static TView IsTextScaleFactorEnabled<TView>(this TView view, bool value) where TView : TextElement { view.UI.IsTextScaleFactorEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.KeyTipHorizontalOffset"/></summary>
        public static TView KeyTipHorizontalOffset<TView>(this TView view, double value) where TView : TextElement { view.UI.KeyTipHorizontalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.KeyTipPlacementMode"/></summary>
        public static TView KeyTipPlacementMode<TView>(this TView view, Xaml.Input.KeyTipPlacementMode value) where TView : TextElement { view.UI.KeyTipPlacementMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.KeyTipVerticalOffset"/></summary>
        public static TView KeyTipVerticalOffset<TView>(this TView view, double value) where TView : TextElement { view.UI.KeyTipVerticalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.Language"/></summary>
        public static TView Language<TView>(this TView view, string value) where TView : TextElement { view.UI.Language = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.TextDecorations"/></summary>
        public static TView TextDecorations<TView>(this TView view, Windows.UI.Text.TextDecorations value) where TView : TextElement { view.UI.TextDecorations = value; return view; }

        /// <summary>Set <see cref="Xaml.Documents.TextElement.XamlRoot"/></summary>
        public static TView XamlRoot<TView>(this TView view, Xaml.XamlRoot value) where TView : TextElement { view.UI.XamlRoot = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.AccessKey"/></summary>
        public static DependencyProperty<TTarget, string> AccessKey<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Documents.TextElement.AccessKeyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.AccessKeyScopeOwner"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> AccessKeyScopeOwner<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Documents.TextElement.AccessKeyScopeOwnerProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.AllowFocusOnInteraction"/></summary>
        public static DependencyProperty<TTarget, bool> AllowFocusOnInteraction<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.TextElement.AllowFocusOnInteractionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.CharacterSpacing"/></summary>
        public static DependencyProperty<TTarget, int> CharacterSpacing<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Documents.TextElement.CharacterSpacingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.ExitDisplayModeOnAccessKeyInvoked"/></summary>
        public static DependencyProperty<TTarget, bool> ExitDisplayModeOnAccessKeyInvoked<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.TextElement.ExitDisplayModeOnAccessKeyInvokedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.FontFamily"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FontFamily> FontFamily<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, Xaml.Media.FontFamily>.Get(target, Xaml.Documents.TextElement.FontFamilyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.FontSize"/></summary>
        public static DependencyProperty<TTarget, double> FontSize<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Documents.TextElement.FontSizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.FontStretch"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStretch> FontStretch<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, Windows.UI.Text.FontStretch>.Get(target, Xaml.Documents.TextElement.FontStretchProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.FontStyle"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontStyle> FontStyle<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, Windows.UI.Text.FontStyle>.Get(target, Xaml.Documents.TextElement.FontStyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.FontWeight"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.FontWeight> FontWeight<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, Windows.UI.Text.FontWeight>.Get(target, Xaml.Documents.TextElement.FontWeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.Foreground"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Foreground<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Documents.TextElement.ForegroundProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.IsAccessKeyScope"/></summary>
        public static DependencyProperty<TTarget, bool> IsAccessKeyScope<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.TextElement.IsAccessKeyScopeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.IsTextScaleFactorEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsTextScaleFactorEnabled<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.TextElement.IsTextScaleFactorEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.KeyTipHorizontalOffset"/></summary>
        public static DependencyProperty<TTarget, double> KeyTipHorizontalOffset<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Documents.TextElement.KeyTipHorizontalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.KeyTipPlacementMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> KeyTipPlacementMode<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode>.Get(target, Xaml.Documents.TextElement.KeyTipPlacementModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.KeyTipVerticalOffset"/></summary>
        public static DependencyProperty<TTarget, double> KeyTipVerticalOffset<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Documents.TextElement.KeyTipVerticalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.Language"/></summary>
        public static DependencyProperty<TTarget, string> Language<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Documents.TextElement.LanguageProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.TextElement.TextDecorations"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Text.TextDecorations> TextDecorations<TTarget>(this TTarget target) where TTarget : TextElement
        => DependencyProperty<TTarget, Windows.UI.Text.TextDecorations>.Get(target, Xaml.Documents.TextElement.TextDecorationsProperty);
    }
}

namespace CSharpMarkup.WinUI // TextHighlighterBase
{
    public partial class TextHighlighterBase : DependencyObject, IUI<Xaml.Documents.TextHighlighterBase>
    {
        Xaml.Documents.TextHighlighterBase ui;

        public new Xaml.Documents.TextHighlighterBase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TextHighlighterBase Invoke(Action<Xaml.Documents.TextHighlighterBase> action) { action?.Invoke(UI); return this; }

        protected TextHighlighterBase() { }
    }
}

namespace CSharpMarkup.WinUI // Typography
{
    public static partial class TypographyExtensions
    {
        /// <summary>Set <see cref="Xaml.Documents.Typography.AnnotationAlternates"/></summary>
        public static TTarget Typography_AnnotationAlternates<TTarget>(this TTarget target, int value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetAnnotationAlternates(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.AnnotationAlternates"/></summary>
        public static DependencyProperty<TTarget, int> Typography_AnnotationAlternates<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Documents.Typography.AnnotationAlternatesProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.CapitalSpacing"/></summary>
        public static TTarget Typography_CapitalSpacing<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetCapitalSpacing(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.CapitalSpacing"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_CapitalSpacing<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.CapitalSpacingProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.Capitals"/></summary>
        public static TTarget Typography_Capitals<TTarget>(this TTarget target, Xaml.FontCapitals value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetCapitals(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.Capitals"/></summary>
        public static DependencyProperty<TTarget, Xaml.FontCapitals> Typography_Capitals<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.FontCapitals>.Get(target, Xaml.Documents.Typography.CapitalsProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.CaseSensitiveForms"/></summary>
        public static TTarget Typography_CaseSensitiveForms<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetCaseSensitiveForms(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.CaseSensitiveForms"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_CaseSensitiveForms<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.CaseSensitiveFormsProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.ContextualAlternates"/></summary>
        public static TTarget Typography_ContextualAlternates<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetContextualAlternates(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.ContextualAlternates"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_ContextualAlternates<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.ContextualAlternatesProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.ContextualLigatures"/></summary>
        public static TTarget Typography_ContextualLigatures<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetContextualLigatures(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.ContextualLigatures"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_ContextualLigatures<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.ContextualLigaturesProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.ContextualSwashes"/></summary>
        public static TTarget Typography_ContextualSwashes<TTarget>(this TTarget target, int value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetContextualSwashes(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.ContextualSwashes"/></summary>
        public static DependencyProperty<TTarget, int> Typography_ContextualSwashes<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Documents.Typography.ContextualSwashesProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.DiscretionaryLigatures"/></summary>
        public static TTarget Typography_DiscretionaryLigatures<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetDiscretionaryLigatures(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.DiscretionaryLigatures"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_DiscretionaryLigatures<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.DiscretionaryLigaturesProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.EastAsianExpertForms"/></summary>
        public static TTarget Typography_EastAsianExpertForms<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetEastAsianExpertForms(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.EastAsianExpertForms"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_EastAsianExpertForms<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.EastAsianExpertFormsProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.EastAsianLanguage"/></summary>
        public static TTarget Typography_EastAsianLanguage<TTarget>(this TTarget target, Xaml.FontEastAsianLanguage value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetEastAsianLanguage(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.EastAsianLanguage"/></summary>
        public static DependencyProperty<TTarget, Xaml.FontEastAsianLanguage> Typography_EastAsianLanguage<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.FontEastAsianLanguage>.Get(target, Xaml.Documents.Typography.EastAsianLanguageProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.EastAsianWidths"/></summary>
        public static TTarget Typography_EastAsianWidths<TTarget>(this TTarget target, Xaml.FontEastAsianWidths value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetEastAsianWidths(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.EastAsianWidths"/></summary>
        public static DependencyProperty<TTarget, Xaml.FontEastAsianWidths> Typography_EastAsianWidths<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.FontEastAsianWidths>.Get(target, Xaml.Documents.Typography.EastAsianWidthsProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.Fraction"/></summary>
        public static TTarget Typography_Fraction<TTarget>(this TTarget target, Xaml.FontFraction value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetFraction(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.Fraction"/></summary>
        public static DependencyProperty<TTarget, Xaml.FontFraction> Typography_Fraction<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.FontFraction>.Get(target, Xaml.Documents.Typography.FractionProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.HistoricalForms"/></summary>
        public static TTarget Typography_HistoricalForms<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetHistoricalForms(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.HistoricalForms"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_HistoricalForms<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.HistoricalFormsProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.HistoricalLigatures"/></summary>
        public static TTarget Typography_HistoricalLigatures<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetHistoricalLigatures(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.HistoricalLigatures"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_HistoricalLigatures<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.HistoricalLigaturesProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.Kerning"/></summary>
        public static TTarget Typography_Kerning<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetKerning(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.Kerning"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_Kerning<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.KerningProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.MathematicalGreek"/></summary>
        public static TTarget Typography_MathematicalGreek<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetMathematicalGreek(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.MathematicalGreek"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_MathematicalGreek<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.MathematicalGreekProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.NumeralAlignment"/></summary>
        public static TTarget Typography_NumeralAlignment<TTarget>(this TTarget target, Xaml.FontNumeralAlignment value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetNumeralAlignment(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.NumeralAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.FontNumeralAlignment> Typography_NumeralAlignment<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.FontNumeralAlignment>.Get(target, Xaml.Documents.Typography.NumeralAlignmentProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.NumeralStyle"/></summary>
        public static TTarget Typography_NumeralStyle<TTarget>(this TTarget target, Xaml.FontNumeralStyle value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetNumeralStyle(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.NumeralStyle"/></summary>
        public static DependencyProperty<TTarget, Xaml.FontNumeralStyle> Typography_NumeralStyle<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.FontNumeralStyle>.Get(target, Xaml.Documents.Typography.NumeralStyleProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.SlashedZero"/></summary>
        public static TTarget Typography_SlashedZero<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetSlashedZero(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.SlashedZero"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_SlashedZero<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.SlashedZeroProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StandardLigatures"/></summary>
        public static TTarget Typography_StandardLigatures<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStandardLigatures(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StandardLigatures"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StandardLigatures<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StandardLigaturesProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StandardSwashes"/></summary>
        public static TTarget Typography_StandardSwashes<TTarget>(this TTarget target, int value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStandardSwashes(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StandardSwashes"/></summary>
        public static DependencyProperty<TTarget, int> Typography_StandardSwashes<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Documents.Typography.StandardSwashesProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticAlternates"/></summary>
        public static TTarget Typography_StylisticAlternates<TTarget>(this TTarget target, int value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticAlternates(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticAlternates"/></summary>
        public static DependencyProperty<TTarget, int> Typography_StylisticAlternates<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Documents.Typography.StylisticAlternatesProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet10"/></summary>
        public static TTarget Typography_StylisticSet10<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet10(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet10"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet10<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet10Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet11"/></summary>
        public static TTarget Typography_StylisticSet11<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet11(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet11"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet11<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet11Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet12"/></summary>
        public static TTarget Typography_StylisticSet12<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet12(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet12"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet12<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet12Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet13"/></summary>
        public static TTarget Typography_StylisticSet13<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet13(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet13"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet13<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet13Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet14"/></summary>
        public static TTarget Typography_StylisticSet14<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet14(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet14"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet14<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet14Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet15"/></summary>
        public static TTarget Typography_StylisticSet15<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet15(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet15"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet15<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet15Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet16"/></summary>
        public static TTarget Typography_StylisticSet16<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet16(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet16"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet16<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet16Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet17"/></summary>
        public static TTarget Typography_StylisticSet17<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet17(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet17"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet17<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet17Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet18"/></summary>
        public static TTarget Typography_StylisticSet18<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet18(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet18"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet18<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet18Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet19"/></summary>
        public static TTarget Typography_StylisticSet19<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet19(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet19"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet19<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet19Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet1"/></summary>
        public static TTarget Typography_StylisticSet1<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet1(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet1"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet1<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet1Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet20"/></summary>
        public static TTarget Typography_StylisticSet20<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet20(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet20"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet20<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet20Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet2"/></summary>
        public static TTarget Typography_StylisticSet2<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet2(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet2"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet2<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet2Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet3"/></summary>
        public static TTarget Typography_StylisticSet3<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet3(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet3"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet3<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet3Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet4"/></summary>
        public static TTarget Typography_StylisticSet4<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet4(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet4"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet4<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet4Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet5"/></summary>
        public static TTarget Typography_StylisticSet5<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet5(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet5"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet5<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet5Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet6"/></summary>
        public static TTarget Typography_StylisticSet6<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet6(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet6"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet6<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet6Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet7"/></summary>
        public static TTarget Typography_StylisticSet7<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet7(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet7"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet7<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet7Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet8"/></summary>
        public static TTarget Typography_StylisticSet8<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet8(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet8"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet8<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet8Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.StylisticSet9"/></summary>
        public static TTarget Typography_StylisticSet9<TTarget>(this TTarget target, bool value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetStylisticSet9(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.StylisticSet9"/></summary>
        public static DependencyProperty<TTarget, bool> Typography_StylisticSet9<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Documents.Typography.StylisticSet9Property);

        /// <summary>Set <see cref="Xaml.Documents.Typography.Variants"/></summary>
        public static TTarget Typography_Variants<TTarget>(this TTarget target, Xaml.FontVariants value) where TTarget : DependencyObject
        { Xaml.Documents.Typography.SetVariants(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Documents.Typography.Variants"/></summary>
        public static DependencyProperty<TTarget, Xaml.FontVariants> Typography_Variants<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.FontVariants>.Get(target, Xaml.Documents.Typography.VariantsProperty);

        /// <summary>Set <see cref="Xaml.Documents.Typography"/> attached properties</summary>
        public static TTarget Typography<TTarget>(this TTarget target

            , int? AnnotationAlternates = default

            , bool? CapitalSpacing = default

            , Xaml.FontCapitals? Capitals = default

            , bool? CaseSensitiveForms = default

            , bool? ContextualAlternates = default

            , bool? ContextualLigatures = default

            , int? ContextualSwashes = default

            , bool? DiscretionaryLigatures = default

            , bool? EastAsianExpertForms = default

            , Xaml.FontEastAsianLanguage? EastAsianLanguage = default

            , Xaml.FontEastAsianWidths? EastAsianWidths = default

            , Xaml.FontFraction? Fraction = default

            , bool? HistoricalForms = default

            , bool? HistoricalLigatures = default

            , bool? Kerning = default

            , bool? MathematicalGreek = default

            , Xaml.FontNumeralAlignment? NumeralAlignment = default

            , Xaml.FontNumeralStyle? NumeralStyle = default

            , bool? SlashedZero = default

            , bool? StandardLigatures = default

            , int? StandardSwashes = default

            , int? StylisticAlternates = default

            , bool? StylisticSet10 = default

            , bool? StylisticSet11 = default

            , bool? StylisticSet12 = default

            , bool? StylisticSet13 = default

            , bool? StylisticSet14 = default

            , bool? StylisticSet15 = default

            , bool? StylisticSet16 = default

            , bool? StylisticSet17 = default

            , bool? StylisticSet18 = default

            , bool? StylisticSet19 = default

            , bool? StylisticSet1 = default

            , bool? StylisticSet20 = default

            , bool? StylisticSet2 = default

            , bool? StylisticSet3 = default

            , bool? StylisticSet4 = default

            , bool? StylisticSet5 = default

            , bool? StylisticSet6 = default

            , bool? StylisticSet7 = default

            , bool? StylisticSet8 = default

            , bool? StylisticSet9 = default

            , Xaml.FontVariants? Variants = default

        ) where TTarget : DependencyObject
        {
            if (AnnotationAlternates is not null) Xaml.Documents.Typography.SetAnnotationAlternates(target.UI, AnnotationAlternates.Value);

            if (CapitalSpacing is not null) Xaml.Documents.Typography.SetCapitalSpacing(target.UI, CapitalSpacing.Value);

            if (Capitals is not null) Xaml.Documents.Typography.SetCapitals(target.UI, Capitals.Value);

            if (CaseSensitiveForms is not null) Xaml.Documents.Typography.SetCaseSensitiveForms(target.UI, CaseSensitiveForms.Value);

            if (ContextualAlternates is not null) Xaml.Documents.Typography.SetContextualAlternates(target.UI, ContextualAlternates.Value);

            if (ContextualLigatures is not null) Xaml.Documents.Typography.SetContextualLigatures(target.UI, ContextualLigatures.Value);

            if (ContextualSwashes is not null) Xaml.Documents.Typography.SetContextualSwashes(target.UI, ContextualSwashes.Value);

            if (DiscretionaryLigatures is not null) Xaml.Documents.Typography.SetDiscretionaryLigatures(target.UI, DiscretionaryLigatures.Value);

            if (EastAsianExpertForms is not null) Xaml.Documents.Typography.SetEastAsianExpertForms(target.UI, EastAsianExpertForms.Value);

            if (EastAsianLanguage is not null) Xaml.Documents.Typography.SetEastAsianLanguage(target.UI, EastAsianLanguage.Value);

            if (EastAsianWidths is not null) Xaml.Documents.Typography.SetEastAsianWidths(target.UI, EastAsianWidths.Value);

            if (Fraction is not null) Xaml.Documents.Typography.SetFraction(target.UI, Fraction.Value);

            if (HistoricalForms is not null) Xaml.Documents.Typography.SetHistoricalForms(target.UI, HistoricalForms.Value);

            if (HistoricalLigatures is not null) Xaml.Documents.Typography.SetHistoricalLigatures(target.UI, HistoricalLigatures.Value);

            if (Kerning is not null) Xaml.Documents.Typography.SetKerning(target.UI, Kerning.Value);

            if (MathematicalGreek is not null) Xaml.Documents.Typography.SetMathematicalGreek(target.UI, MathematicalGreek.Value);

            if (NumeralAlignment is not null) Xaml.Documents.Typography.SetNumeralAlignment(target.UI, NumeralAlignment.Value);

            if (NumeralStyle is not null) Xaml.Documents.Typography.SetNumeralStyle(target.UI, NumeralStyle.Value);

            if (SlashedZero is not null) Xaml.Documents.Typography.SetSlashedZero(target.UI, SlashedZero.Value);

            if (StandardLigatures is not null) Xaml.Documents.Typography.SetStandardLigatures(target.UI, StandardLigatures.Value);

            if (StandardSwashes is not null) Xaml.Documents.Typography.SetStandardSwashes(target.UI, StandardSwashes.Value);

            if (StylisticAlternates is not null) Xaml.Documents.Typography.SetStylisticAlternates(target.UI, StylisticAlternates.Value);

            if (StylisticSet10 is not null) Xaml.Documents.Typography.SetStylisticSet10(target.UI, StylisticSet10.Value);

            if (StylisticSet11 is not null) Xaml.Documents.Typography.SetStylisticSet11(target.UI, StylisticSet11.Value);

            if (StylisticSet12 is not null) Xaml.Documents.Typography.SetStylisticSet12(target.UI, StylisticSet12.Value);

            if (StylisticSet13 is not null) Xaml.Documents.Typography.SetStylisticSet13(target.UI, StylisticSet13.Value);

            if (StylisticSet14 is not null) Xaml.Documents.Typography.SetStylisticSet14(target.UI, StylisticSet14.Value);

            if (StylisticSet15 is not null) Xaml.Documents.Typography.SetStylisticSet15(target.UI, StylisticSet15.Value);

            if (StylisticSet16 is not null) Xaml.Documents.Typography.SetStylisticSet16(target.UI, StylisticSet16.Value);

            if (StylisticSet17 is not null) Xaml.Documents.Typography.SetStylisticSet17(target.UI, StylisticSet17.Value);

            if (StylisticSet18 is not null) Xaml.Documents.Typography.SetStylisticSet18(target.UI, StylisticSet18.Value);

            if (StylisticSet19 is not null) Xaml.Documents.Typography.SetStylisticSet19(target.UI, StylisticSet19.Value);

            if (StylisticSet1 is not null) Xaml.Documents.Typography.SetStylisticSet1(target.UI, StylisticSet1.Value);

            if (StylisticSet20 is not null) Xaml.Documents.Typography.SetStylisticSet20(target.UI, StylisticSet20.Value);

            if (StylisticSet2 is not null) Xaml.Documents.Typography.SetStylisticSet2(target.UI, StylisticSet2.Value);

            if (StylisticSet3 is not null) Xaml.Documents.Typography.SetStylisticSet3(target.UI, StylisticSet3.Value);

            if (StylisticSet4 is not null) Xaml.Documents.Typography.SetStylisticSet4(target.UI, StylisticSet4.Value);

            if (StylisticSet5 is not null) Xaml.Documents.Typography.SetStylisticSet5(target.UI, StylisticSet5.Value);

            if (StylisticSet6 is not null) Xaml.Documents.Typography.SetStylisticSet6(target.UI, StylisticSet6.Value);

            if (StylisticSet7 is not null) Xaml.Documents.Typography.SetStylisticSet7(target.UI, StylisticSet7.Value);

            if (StylisticSet8 is not null) Xaml.Documents.Typography.SetStylisticSet8(target.UI, StylisticSet8.Value);

            if (StylisticSet9 is not null) Xaml.Documents.Typography.SetStylisticSet9(target.UI, StylisticSet9.Value);

            if (Variants is not null) Xaml.Documents.Typography.SetVariants(target.UI, Variants.Value);

            return target;
        }
    }
}

namespace CSharpMarkup.WinUI // Underline
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Documents.Underline"/></summary>
        public static Underline Underline(params InlineCollectionItem[] Inlines)
        {
            var ui = new Xaml.Documents.Underline();
            for (int i = 0; i < Inlines.Length; i++)
            {
                var child = Inlines[i];
                if (child == null) continue;

                var subChildren = Spreader<InlineCollectionItem>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Inlines.Add(subChildren[j]);
                else
                    ui.Inlines.Add(child);
            }
            return CSharpMarkup.WinUI.Underline.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Documents.Underline"/></summary>
        public static Underline Underline()
        {
            var ui = new Xaml.Documents.Underline();
            return CSharpMarkup.WinUI.Underline.StartChain(ui);
        }
    }

    public partial class Underline : Span, IUI<Xaml.Documents.Underline>
    {
        static Underline instance;

        internal static Underline StartChain(Xaml.Documents.Underline ui)
        {
            if (instance == null) instance = new Underline();
            instance.UI = ui;
            return instance;
        }

        Xaml.Documents.Underline ui;

        public new Xaml.Documents.Underline UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Documents.Inline(Underline view) => view?.UI;

        public static implicit operator Xaml.Documents.Underline(Underline view) => view?.UI;

        public static implicit operator Underline(Xaml.Documents.Underline ui) => Underline.StartChain(ui);

        public Underline Invoke(Action<Xaml.Documents.Underline> action) { action?.Invoke(UI); return this; }

        protected Underline() { }
    }
}

namespace CSharpMarkup.WinUI // EventTrigger
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.EventTrigger"/></summary>
        public static EventTrigger EventTrigger(params Xaml.TriggerAction[] Actions)
        {
            var ui = new Xaml.EventTrigger();
            for (int i = 0; i < Actions.Length; i++)
            {
                var child = Actions[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.TriggerAction>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Actions.Add(subChildren[j]);
                else
                    ui.Actions.Add(child);
            }
            return CSharpMarkup.WinUI.EventTrigger.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.EventTrigger"/></summary>
        public static EventTrigger EventTrigger()
        {
            var ui = new Xaml.EventTrigger();
            return CSharpMarkup.WinUI.EventTrigger.StartChain(ui);
        }
    }

    public partial class EventTrigger : TriggerBase, IUI<Xaml.EventTrigger>
    {
        static EventTrigger instance;

        internal static EventTrigger StartChain(Xaml.EventTrigger ui)
        {
            if (instance == null) instance = new EventTrigger();
            instance.UI = ui;
            return instance;
        }

        Xaml.EventTrigger ui;

        public new Xaml.EventTrigger UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.EventTrigger(EventTrigger view) => view?.UI;

        public static implicit operator EventTrigger(Xaml.EventTrigger ui) => EventTrigger.StartChain(ui);

        public EventTrigger Invoke(Action<Xaml.EventTrigger> action) { action?.Invoke(UI); return this; }

        protected EventTrigger() { }
    }

    public static partial class EventTriggerExtensions
    {
        /// <summary>Set <see cref="Xaml.EventTrigger.RoutedEvent"/></summary>
        public static TView RoutedEvent<TView>(this TView view, Xaml.RoutedEvent value) where TView : EventTrigger { view.UI.RoutedEvent = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // FrameworkElement
{
    public partial class FrameworkElement : UIElement, IUI<Xaml.FrameworkElement>
    {
        Xaml.FrameworkElement ui;

        public new Xaml.FrameworkElement UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public FrameworkElement Invoke(Action<Xaml.FrameworkElement> action) { action?.Invoke(UI); return this; }

        protected FrameworkElement() { }
    }

    public static partial class FrameworkElementExtensions
    {
        /// <summary>Set <see cref="Xaml.FrameworkElement.AllowFocusOnInteraction"/></summary>
        public static TView AllowFocusOnInteraction<TView>(this TView view, bool value) where TView : FrameworkElement { view.UI.AllowFocusOnInteraction = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.AllowFocusWhenDisabled"/></summary>
        public static TView AllowFocusWhenDisabled<TView>(this TView view, bool value) where TView : FrameworkElement { view.UI.AllowFocusWhenDisabled = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.DataContext"/></summary>
        public static TView DataContext<TView>(this TView view, object value) where TView : FrameworkElement { view.UI.DataContext = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FlowDirection"/></summary>
        public static TView FlowDirection<TView>(this TView view, Xaml.FlowDirection value) where TView : FrameworkElement { view.UI.FlowDirection = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualMargin"/></summary>
        public static TView FocusVisualMargin<TView>(this TView view, Xaml.Thickness value) where TView : FrameworkElement { view.UI.FocusVisualMargin = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualMargin"/></summary>
        public static TView FocusVisualMargin<TView>(this TView view, double uniform) where TView : FrameworkElement { view.UI.FocusVisualMargin = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualMargin"/></summary>
        public static TView FocusVisualMargin<TView>(this TView view, double horizontal, double vertical) where TView : FrameworkElement { view.UI.FocusVisualMargin = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualMargin"/></summary>
        public static TView FocusVisualMargin<TView>(this TView view, double left, double top, double right, double bottom) where TView : FrameworkElement { view.UI.FocusVisualMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualMargin"/></summary>
        public static TView FocusVisualMargins<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : FrameworkElement { view.UI.FocusVisualMargin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualPrimaryBrush"/></summary>
        public static TView FocusVisualPrimaryBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : FrameworkElement { view.UI.FocusVisualPrimaryBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualPrimaryBrush"/></summary>
        public static TView FocusVisualPrimaryBrush<TView>(this TView view, Windows.UI.Color value) where TView : FrameworkElement { view.UI.FocusVisualPrimaryBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualPrimaryBrush"/></summary>
        public static TView FocusVisualPrimaryBrush<TView>(this TView view, string color) where TView : FrameworkElement { view.UI.FocusVisualPrimaryBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualPrimaryThickness"/></summary>
        public static TView FocusVisualPrimaryThickness<TView>(this TView view, Xaml.Thickness value) where TView : FrameworkElement { view.UI.FocusVisualPrimaryThickness = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualPrimaryThickness"/></summary>
        public static TView FocusVisualPrimaryThickness<TView>(this TView view, double uniform) where TView : FrameworkElement { view.UI.FocusVisualPrimaryThickness = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualPrimaryThickness"/></summary>
        public static TView FocusVisualPrimaryThickness<TView>(this TView view, double horizontal, double vertical) where TView : FrameworkElement { view.UI.FocusVisualPrimaryThickness = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualPrimaryThickness"/></summary>
        public static TView FocusVisualPrimaryThickness<TView>(this TView view, double left, double top, double right, double bottom) where TView : FrameworkElement { view.UI.FocusVisualPrimaryThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualPrimaryThickness"/></summary>
        public static TView FocusVisualPrimaryThicknesses<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : FrameworkElement { view.UI.FocusVisualPrimaryThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualSecondaryBrush"/></summary>
        public static TView FocusVisualSecondaryBrush<TView>(this TView view, Xaml.Media.Brush value) where TView : FrameworkElement { view.UI.FocusVisualSecondaryBrush = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualSecondaryBrush"/></summary>
        public static TView FocusVisualSecondaryBrush<TView>(this TView view, Windows.UI.Color value) where TView : FrameworkElement { view.UI.FocusVisualSecondaryBrush = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualSecondaryBrush"/></summary>
        public static TView FocusVisualSecondaryBrush<TView>(this TView view, string color) where TView : FrameworkElement { view.UI.FocusVisualSecondaryBrush = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualSecondaryThickness"/></summary>
        public static TView FocusVisualSecondaryThickness<TView>(this TView view, Xaml.Thickness value) where TView : FrameworkElement { view.UI.FocusVisualSecondaryThickness = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualSecondaryThickness"/></summary>
        public static TView FocusVisualSecondaryThickness<TView>(this TView view, double uniform) where TView : FrameworkElement { view.UI.FocusVisualSecondaryThickness = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualSecondaryThickness"/></summary>
        public static TView FocusVisualSecondaryThickness<TView>(this TView view, double horizontal, double vertical) where TView : FrameworkElement { view.UI.FocusVisualSecondaryThickness = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualSecondaryThickness"/></summary>
        public static TView FocusVisualSecondaryThickness<TView>(this TView view, double left, double top, double right, double bottom) where TView : FrameworkElement { view.UI.FocusVisualSecondaryThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.FocusVisualSecondaryThickness"/></summary>
        public static TView FocusVisualSecondaryThicknesses<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : FrameworkElement { view.UI.FocusVisualSecondaryThickness = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.Height"/></summary>
        public static TView Height<TView>(this TView view, double value) where TView : FrameworkElement { view.UI.Height = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.HorizontalAlignment"/></summary>
        public static TView HorizontalAlignment<TView>(this TView view, Xaml.HorizontalAlignment value) where TView : FrameworkElement { view.UI.HorizontalAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.Language"/></summary>
        public static TView Language<TView>(this TView view, string value) where TView : FrameworkElement { view.UI.Language = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.Margin"/></summary>
        public static TView Margin<TView>(this TView view, Xaml.Thickness value) where TView : FrameworkElement { view.UI.Margin = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.Margin"/></summary>
        public static TView Margin<TView>(this TView view, double uniform) where TView : FrameworkElement { view.UI.Margin = Helpers.Thickness(uniform); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.Margin"/></summary>
        public static TView Margin<TView>(this TView view, double horizontal, double vertical) where TView : FrameworkElement { view.UI.Margin = Helpers.Thickness(horizontal, vertical); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.Margin"/></summary>
        public static TView Margin<TView>(this TView view, double left, double top, double right, double bottom) where TView : FrameworkElement { view.UI.Margin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.Margin"/></summary>
        public static TView Margins<TView>(this TView view, double left = 0, double top = 0, double right = 0, double bottom = 0) where TView : FrameworkElement { view.UI.Margin = Helpers.Thickness(left, top, right, bottom); return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.MaxHeight"/></summary>
        public static TView MaxHeight<TView>(this TView view, double value) where TView : FrameworkElement { view.UI.MaxHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.MaxWidth"/></summary>
        public static TView MaxWidth<TView>(this TView view, double value) where TView : FrameworkElement { view.UI.MaxWidth = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.MinHeight"/></summary>
        public static TView MinHeight<TView>(this TView view, double value) where TView : FrameworkElement { view.UI.MinHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.MinWidth"/></summary>
        public static TView MinWidth<TView>(this TView view, double value) where TView : FrameworkElement { view.UI.MinWidth = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.Name"/></summary>
        public static TView Name<TView>(this TView view, string value) where TView : FrameworkElement { view.UI.Name = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.RequestedTheme"/></summary>
        public static TView RequestedTheme<TView>(this TView view, Xaml.ElementTheme value) where TView : FrameworkElement { view.UI.RequestedTheme = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.Resources"/></summary>
        public static TView Resources<TView>(this TView view, Xaml.ResourceDictionary value) where TView : FrameworkElement { view.UI.Resources = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.Style"/></summary>
        public static TView Style<TView>(this TView view, Xaml.Style value) where TView : FrameworkElement { view.UI.Style = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.Tag"/></summary>
        public static TView Tag<TView>(this TView view, object value) where TView : FrameworkElement { view.UI.Tag = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.VerticalAlignment"/></summary>
        public static TView VerticalAlignment<TView>(this TView view, Xaml.VerticalAlignment value) where TView : FrameworkElement { view.UI.VerticalAlignment = value; return view; }

        /// <summary>Set <see cref="Xaml.FrameworkElement.Width"/></summary>
        public static TView Width<TView>(this TView view, double value) where TView : FrameworkElement { view.UI.Width = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.ActualHeight"/></summary>
        public static DependencyProperty<TTarget, double> ActualHeight<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.FrameworkElement.ActualHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.ActualTheme"/></summary>
        public static DependencyProperty<TTarget, Xaml.ElementTheme> ActualTheme<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.ElementTheme>.Get(target, Xaml.FrameworkElement.ActualThemeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.ActualWidth"/></summary>
        public static DependencyProperty<TTarget, double> ActualWidth<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.FrameworkElement.ActualWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.AllowFocusOnInteraction"/></summary>
        public static DependencyProperty<TTarget, bool> AllowFocusOnInteraction<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.FrameworkElement.AllowFocusOnInteractionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.AllowFocusWhenDisabled"/></summary>
        public static DependencyProperty<TTarget, bool> AllowFocusWhenDisabled<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.FrameworkElement.AllowFocusWhenDisabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.DataContext"/></summary>
        public static DependencyProperty<TTarget, object> DataContext<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, object>.Get(target, Xaml.FrameworkElement.DataContextProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.FlowDirection"/></summary>
        public static DependencyProperty<TTarget, Xaml.FlowDirection> FlowDirection<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.FlowDirection>.Get(target, Xaml.FrameworkElement.FlowDirectionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.FocusVisualMargin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> FocusVisualMargin<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.FrameworkElement.FocusVisualMarginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.FocusVisualPrimaryBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> FocusVisualPrimaryBrush<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.FrameworkElement.FocusVisualPrimaryBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.FocusVisualPrimaryThickness"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> FocusVisualPrimaryThickness<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.FrameworkElement.FocusVisualPrimaryThicknessProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.FocusVisualSecondaryBrush"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> FocusVisualSecondaryBrush<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.FrameworkElement.FocusVisualSecondaryBrushProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.FocusVisualSecondaryThickness"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> FocusVisualSecondaryThickness<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.FrameworkElement.FocusVisualSecondaryThicknessProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.Height"/></summary>
        public static DependencyProperty<TTarget, double> Height<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.FrameworkElement.HeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.HorizontalAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.HorizontalAlignment> HorizontalAlignment<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.HorizontalAlignment>.Get(target, Xaml.FrameworkElement.HorizontalAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.Language"/></summary>
        public static DependencyProperty<TTarget, string> Language<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, string>.Get(target, Xaml.FrameworkElement.LanguageProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.Margin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Thickness> Margin<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.Thickness>.Get(target, Xaml.FrameworkElement.MarginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.MaxHeight"/></summary>
        public static DependencyProperty<TTarget, double> MaxHeight<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.FrameworkElement.MaxHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.MaxWidth"/></summary>
        public static DependencyProperty<TTarget, double> MaxWidth<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.FrameworkElement.MaxWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.MinHeight"/></summary>
        public static DependencyProperty<TTarget, double> MinHeight<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.FrameworkElement.MinHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.MinWidth"/></summary>
        public static DependencyProperty<TTarget, double> MinWidth<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.FrameworkElement.MinWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.Name"/></summary>
        public static DependencyProperty<TTarget, string> Name<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, string>.Get(target, Xaml.FrameworkElement.NameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.RequestedTheme"/></summary>
        public static DependencyProperty<TTarget, Xaml.ElementTheme> RequestedTheme<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.ElementTheme>.Get(target, Xaml.FrameworkElement.RequestedThemeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.Style"/></summary>
        public static DependencyProperty<TTarget, Xaml.Style> Style<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.Style>.Get(target, Xaml.FrameworkElement.StyleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.Tag"/></summary>
        public static DependencyProperty<TTarget, object> Tag<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, object>.Get(target, Xaml.FrameworkElement.TagProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.VerticalAlignment"/></summary>
        public static DependencyProperty<TTarget, Xaml.VerticalAlignment> VerticalAlignment<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.VerticalAlignment>.Get(target, Xaml.FrameworkElement.VerticalAlignmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.FrameworkElement.Width"/></summary>
        public static DependencyProperty<TTarget, double> Width<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.FrameworkElement.WidthProperty);
    }
}

namespace CSharpMarkup.WinUI // FrameworkTemplate
{
    public partial class FrameworkTemplate : DependencyObject, IUI<Xaml.FrameworkTemplate>
    {
        Xaml.FrameworkTemplate ui;

        public new Xaml.FrameworkTemplate UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public FrameworkTemplate Invoke(Action<Xaml.FrameworkTemplate> action) { action?.Invoke(UI); return this; }

        protected FrameworkTemplate() { }
    }
}

namespace CSharpMarkup.WinUI // InputScope
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Input.InputScope"/></summary>
        public static InputScope InputScope()
        {
            var ui = new Xaml.Input.InputScope();
            return CSharpMarkup.WinUI.InputScope.StartChain(ui);
        }
    }

    public partial class InputScope : DependencyObject, IUI<Xaml.Input.InputScope>
    {
        static InputScope instance;

        internal static InputScope StartChain(Xaml.Input.InputScope ui)
        {
            if (instance == null) instance = new InputScope();
            instance.UI = ui;
            return instance;
        }

        Xaml.Input.InputScope ui;

        public new Xaml.Input.InputScope UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Input.InputScope(InputScope view) => view?.UI;

        public static implicit operator InputScope(Xaml.Input.InputScope ui) => InputScope.StartChain(ui);

        public InputScope Invoke(Action<Xaml.Input.InputScope> action) { action?.Invoke(UI); return this; }

        protected InputScope() { }
    }
}

namespace CSharpMarkup.WinUI // InputScopeName
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Input.InputScopeName"/></summary>
        public static InputScopeName InputScopeName()
        {
            var ui = new Xaml.Input.InputScopeName();
            return CSharpMarkup.WinUI.InputScopeName.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Input.InputScopeName"/></summary>
        public static InputScopeName InputScopeName(Xaml.Input.InputScopeNameValue nameValue)
        {
            var ui = new Xaml.Input.InputScopeName(nameValue);
            return CSharpMarkup.WinUI.InputScopeName.StartChain(ui);
        }
    }

    public partial class InputScopeName : DependencyObject, IUI<Xaml.Input.InputScopeName>
    {
        static InputScopeName instance;

        internal static InputScopeName StartChain(Xaml.Input.InputScopeName ui)
        {
            if (instance == null) instance = new InputScopeName();
            instance.UI = ui;
            return instance;
        }

        Xaml.Input.InputScopeName ui;

        public new Xaml.Input.InputScopeName UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Input.InputScopeName(InputScopeName view) => view?.UI;

        public static implicit operator InputScopeName(Xaml.Input.InputScopeName ui) => InputScopeName.StartChain(ui);

        public InputScopeName Invoke(Action<Xaml.Input.InputScopeName> action) { action?.Invoke(UI); return this; }

        protected InputScopeName() { }
    }
}

namespace CSharpMarkup.WinUI // KeyboardAccelerator
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Input.KeyboardAccelerator"/></summary>
        public static KeyboardAccelerator KeyboardAccelerator(bool? IsEnabled = default, VirtualKey? Key = default, VirtualKeyModifiers? Modifiers = default, Xaml.DependencyObject ScopeOwner = default)
        {
            var ui = new Xaml.Input.KeyboardAccelerator();
            if (IsEnabled is not null) ui.IsEnabled = IsEnabled.Value;
            if (Key is not null) ui.Key = Key.Value;
            if (Modifiers is not null) ui.Modifiers = Modifiers.Value;
            if (ScopeOwner is not null) ui.ScopeOwner = ScopeOwner;
            return CSharpMarkup.WinUI.KeyboardAccelerator.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Input.KeyboardAccelerator"/></summary>
        public static KeyboardAccelerator KeyboardAccelerator()
        {
            var ui = new Xaml.Input.KeyboardAccelerator();
            return CSharpMarkup.WinUI.KeyboardAccelerator.StartChain(ui);
        }
    }

    public partial class KeyboardAccelerator : DependencyObject, IUI<Xaml.Input.KeyboardAccelerator>
    {
        static KeyboardAccelerator instance;

        internal static KeyboardAccelerator StartChain(Xaml.Input.KeyboardAccelerator ui)
        {
            if (instance == null) instance = new KeyboardAccelerator();
            instance.UI = ui;
            return instance;
        }

        Xaml.Input.KeyboardAccelerator ui;

        public new Xaml.Input.KeyboardAccelerator UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Input.KeyboardAccelerator(KeyboardAccelerator view) => view?.UI;

        public static implicit operator KeyboardAccelerator(Xaml.Input.KeyboardAccelerator ui) => KeyboardAccelerator.StartChain(ui);

        public KeyboardAccelerator Invoke(Action<Xaml.Input.KeyboardAccelerator> action) { action?.Invoke(UI); return this; }

        protected KeyboardAccelerator() { }
    }

    public static partial class KeyboardAcceleratorExtensions
    {
        /// <summary>Set <see cref="Xaml.Input.KeyboardAccelerator.IsEnabled"/></summary>
        public static TView IsEnabled<TView>(this TView view, bool value) where TView : KeyboardAccelerator { view.UI.IsEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.Input.KeyboardAccelerator.Key"/></summary>
        public static TView Key<TView>(this TView view, VirtualKey value) where TView : KeyboardAccelerator { view.UI.Key = value; return view; }

        /// <summary>Set <see cref="Xaml.Input.KeyboardAccelerator.Modifiers"/></summary>
        public static TView Modifiers<TView>(this TView view, VirtualKeyModifiers value) where TView : KeyboardAccelerator { view.UI.Modifiers = value; return view; }

        /// <summary>Set <see cref="Xaml.Input.KeyboardAccelerator.ScopeOwner"/></summary>
        public static TView ScopeOwner<TView>(this TView view, Xaml.DependencyObject value) where TView : KeyboardAccelerator { view.UI.ScopeOwner = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Input.KeyboardAccelerator.IsEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsEnabled<TTarget>(this TTarget target) where TTarget : KeyboardAccelerator
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Input.KeyboardAccelerator.IsEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Input.KeyboardAccelerator.Key"/></summary>
        public static DependencyProperty<TTarget, VirtualKey> Key<TTarget>(this TTarget target) where TTarget : KeyboardAccelerator
        => DependencyProperty<TTarget, VirtualKey>.Get(target, Xaml.Input.KeyboardAccelerator.KeyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Input.KeyboardAccelerator.Modifiers"/></summary>
        public static DependencyProperty<TTarget, VirtualKeyModifiers> Modifiers<TTarget>(this TTarget target) where TTarget : KeyboardAccelerator
        => DependencyProperty<TTarget, VirtualKeyModifiers>.Get(target, Xaml.Input.KeyboardAccelerator.ModifiersProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Input.KeyboardAccelerator.ScopeOwner"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> ScopeOwner<TTarget>(this TTarget target) where TTarget : KeyboardAccelerator
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Input.KeyboardAccelerator.ScopeOwnerProperty);
    }
}

namespace CSharpMarkup.WinUI // StandardUICommand
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Input.StandardUICommand"/></summary>
        public static StandardUICommand StandardUICommand(Xaml.Input.StandardUICommandKind? Kind = default)
        {
            var ui = new Xaml.Input.StandardUICommand();
            if (Kind is not null) ui.Kind = Kind.Value;
            return CSharpMarkup.WinUI.StandardUICommand.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Input.StandardUICommand"/></summary>
        public static StandardUICommand StandardUICommand()
        {
            var ui = new Xaml.Input.StandardUICommand();
            return CSharpMarkup.WinUI.StandardUICommand.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Input.StandardUICommand"/></summary>
        public static StandardUICommand StandardUICommand(Xaml.Input.StandardUICommandKind kind)
        {
            var ui = new Xaml.Input.StandardUICommand(kind);
            return CSharpMarkup.WinUI.StandardUICommand.StartChain(ui);
        }
    }

    public partial class StandardUICommand : XamlUICommand, IUI<Xaml.Input.StandardUICommand>
    {
        static StandardUICommand instance;

        internal static StandardUICommand StartChain(Xaml.Input.StandardUICommand ui)
        {
            if (instance == null) instance = new StandardUICommand();
            instance.UI = ui;
            return instance;
        }

        Xaml.Input.StandardUICommand ui;

        public new Xaml.Input.StandardUICommand UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Input.StandardUICommand(StandardUICommand view) => view?.UI;

        public static implicit operator StandardUICommand(Xaml.Input.StandardUICommand ui) => StandardUICommand.StartChain(ui);

        public StandardUICommand Invoke(Action<Xaml.Input.StandardUICommand> action) { action?.Invoke(UI); return this; }

        protected StandardUICommand() { }
    }

    public static partial class StandardUICommandExtensions
    {
        /// <summary>Set <see cref="Xaml.Input.StandardUICommand.Kind"/></summary>
        public static TView Kind<TView>(this TView view, Xaml.Input.StandardUICommandKind value) where TView : StandardUICommand { view.UI.Kind = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Input.StandardUICommand.Kind"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> Kind<TTarget>(this TTarget target) where TTarget : StandardUICommand
        => DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind>.Get(target, Xaml.Input.StandardUICommand.KindProperty);
    }
}

namespace CSharpMarkup.WinUI // XamlUICommand
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Input.XamlUICommand"/></summary>
        public static XamlUICommand XamlUICommand(string AccessKey = default, ICommand Command = default, string Description = default, Xaml.Controls.IconSource IconSource = default, string Label = default)
        {
            var ui = new Xaml.Input.XamlUICommand();
            if (AccessKey is not null) ui.AccessKey = AccessKey;
            if (Command is not null) ui.Command = Command;
            if (Description is not null) ui.Description = Description;
            if (IconSource is not null) ui.IconSource = IconSource;
            if (Label is not null) ui.Label = Label;
            return CSharpMarkup.WinUI.XamlUICommand.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Input.XamlUICommand"/></summary>
        public static XamlUICommand XamlUICommand()
        {
            var ui = new Xaml.Input.XamlUICommand();
            return CSharpMarkup.WinUI.XamlUICommand.StartChain(ui);
        }
    }

    public partial class XamlUICommand : DependencyObject, IUI<Xaml.Input.XamlUICommand>
    {
        static XamlUICommand instance;

        internal static XamlUICommand StartChain(Xaml.Input.XamlUICommand ui)
        {
            if (instance == null) instance = new XamlUICommand();
            instance.UI = ui;
            return instance;
        }

        Xaml.Input.XamlUICommand ui;

        public new Xaml.Input.XamlUICommand UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Input.XamlUICommand(XamlUICommand view) => view?.UI;

        public static implicit operator XamlUICommand(Xaml.Input.XamlUICommand ui) => XamlUICommand.StartChain(ui);

        public XamlUICommand Invoke(Action<Xaml.Input.XamlUICommand> action) { action?.Invoke(UI); return this; }

        protected XamlUICommand() { }
    }

    public static partial class XamlUICommandExtensions
    {
        /// <summary>Set <see cref="Xaml.Input.XamlUICommand.AccessKey"/></summary>
        public static TView AccessKey<TView>(this TView view, string value) where TView : XamlUICommand { view.UI.AccessKey = value; return view; }

        /// <summary>Set <see cref="Xaml.Input.XamlUICommand.Command"/></summary>
        public static TView Command<TView>(this TView view, ICommand value) where TView : XamlUICommand { view.UI.Command = value; return view; }

        /// <summary>Set <see cref="Xaml.Input.XamlUICommand.Description"/></summary>
        public static TView Description<TView>(this TView view, string value) where TView : XamlUICommand { view.UI.Description = value; return view; }

        /// <summary>Set <see cref="Xaml.Input.XamlUICommand.IconSource"/></summary>
        public static TView IconSource<TView>(this TView view, Xaml.Controls.IconSource value) where TView : XamlUICommand { view.UI.IconSource = value; return view; }

        /// <summary>Set <see cref="Xaml.Input.XamlUICommand.Label"/></summary>
        public static TView Label<TView>(this TView view, string value) where TView : XamlUICommand { view.UI.Label = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Input.XamlUICommand.AccessKey"/></summary>
        public static DependencyProperty<TTarget, string> AccessKey<TTarget>(this TTarget target) where TTarget : XamlUICommand
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Input.XamlUICommand.AccessKeyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Input.XamlUICommand.Command"/></summary>
        public static DependencyProperty<TTarget, ICommand> Command<TTarget>(this TTarget target) where TTarget : XamlUICommand
        => DependencyProperty<TTarget, ICommand>.Get(target, Xaml.Input.XamlUICommand.CommandProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Input.XamlUICommand.Description"/></summary>
        public static DependencyProperty<TTarget, string> Description<TTarget>(this TTarget target) where TTarget : XamlUICommand
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Input.XamlUICommand.DescriptionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Input.XamlUICommand.IconSource"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.IconSource> IconSource<TTarget>(this TTarget target) where TTarget : XamlUICommand
        => DependencyProperty<TTarget, Xaml.Controls.IconSource>.Get(target, Xaml.Input.XamlUICommand.IconSourceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Input.XamlUICommand.KeyboardAccelerators"/></summary>
        public static DependencyProperty<TTarget, IList<Xaml.Input.KeyboardAccelerator>> KeyboardAccelerators<TTarget>(this TTarget target) where TTarget : XamlUICommand
        => DependencyProperty<TTarget, IList<Xaml.Input.KeyboardAccelerator>>.Get(target, Xaml.Input.XamlUICommand.KeyboardAcceleratorsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Input.XamlUICommand.Label"/></summary>
        public static DependencyProperty<TTarget, string> Label<TTarget>(this TTarget target) where TTarget : XamlUICommand
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Input.XamlUICommand.LabelProperty);
    }
}

namespace CSharpMarkup.WinUI // XamlBindingHelper
{
    public static partial class XamlBindingHelperExtensions
    {
        /// <summary>Set <see cref="Xaml.Markup.XamlBindingHelper.DataTemplateComponent"/></summary>
        public static TTarget XamlBindingHelper_DataTemplateComponent<TTarget>(this TTarget target, Xaml.Markup.IDataTemplateComponent value) where TTarget : DependencyObject
        { Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Markup.XamlBindingHelper.DataTemplateComponent"/></summary>
        public static DependencyProperty<TTarget, Xaml.Markup.IDataTemplateComponent> XamlBindingHelper_DataTemplateComponent<TTarget>(this TTarget target) where TTarget : DependencyObject
        => DependencyProperty<TTarget, Xaml.Markup.IDataTemplateComponent>.Get(target, Xaml.Markup.XamlBindingHelper.DataTemplateComponentProperty);
    }
}

namespace CSharpMarkup.WinUI // AcrylicBrush
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.AcrylicBrush"/></summary>
        public static AcrylicBrush AcrylicBrush(bool? AlwaysUseFallback = default, Windows.UI.Color? TintColor = default, double? TintLuminosityOpacity = default, double? TintOpacity = default, CSharpMarkup.WinUI.to.TimeSpan? TintTransitionDuration = default)
        {
            var ui = new Xaml.Media.AcrylicBrush();
            if (AlwaysUseFallback is not null) ui.AlwaysUseFallback = AlwaysUseFallback.Value;
            if (TintColor is not null) ui.TintColor = TintColor.Value;
            if (TintLuminosityOpacity is not null) ui.TintLuminosityOpacity = TintLuminosityOpacity.Value;
            if (TintOpacity is not null) ui.TintOpacity = TintOpacity.Value;
            if (TintTransitionDuration is not null) ui.TintTransitionDuration = TintTransitionDuration.Value;
            return CSharpMarkup.WinUI.AcrylicBrush.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.AcrylicBrush"/></summary>
        public static AcrylicBrush AcrylicBrush()
        {
            var ui = new Xaml.Media.AcrylicBrush();
            return CSharpMarkup.WinUI.AcrylicBrush.StartChain(ui);
        }
    }

    public partial class AcrylicBrush : XamlCompositionBrushBase, IUI<Xaml.Media.AcrylicBrush>
    {
        static AcrylicBrush instance;

        internal static AcrylicBrush StartChain(Xaml.Media.AcrylicBrush ui)
        {
            if (instance == null) instance = new AcrylicBrush();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.AcrylicBrush ui;

        public new Xaml.Media.AcrylicBrush UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.AcrylicBrush(AcrylicBrush view) => view?.UI;

        public static implicit operator AcrylicBrush(Xaml.Media.AcrylicBrush ui) => AcrylicBrush.StartChain(ui);

        public AcrylicBrush Invoke(Action<Xaml.Media.AcrylicBrush> action) { action?.Invoke(UI); return this; }

        protected AcrylicBrush() { }
    }

    public static partial class AcrylicBrushExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.AcrylicBrush.AlwaysUseFallback"/></summary>
        public static TView AlwaysUseFallback<TView>(this TView view, bool value) where TView : AcrylicBrush { view.UI.AlwaysUseFallback = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.AcrylicBrush.TintColor"/></summary>
        public static TView TintColor<TView>(this TView view, Windows.UI.Color value) where TView : AcrylicBrush { view.UI.TintColor = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.AcrylicBrush.TintLuminosityOpacity"/></summary>
        public static TView TintLuminosityOpacity<TView>(this TView view, double? value) where TView : AcrylicBrush { view.UI.TintLuminosityOpacity = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.AcrylicBrush.TintOpacity"/></summary>
        public static TView TintOpacity<TView>(this TView view, double value) where TView : AcrylicBrush { view.UI.TintOpacity = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.AcrylicBrush.TintTransitionDuration"/></summary>
        public static TView TintTransitionDuration<TView>(this TView view, CSharpMarkup.WinUI.to.TimeSpan value) where TView : AcrylicBrush { view.UI.TintTransitionDuration = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.AcrylicBrush.AlwaysUseFallback"/></summary>
        public static DependencyProperty<TTarget, bool> AlwaysUseFallback<TTarget>(this TTarget target) where TTarget : AcrylicBrush
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.AcrylicBrush.AlwaysUseFallbackProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.AcrylicBrush.TintColor"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Color> TintColor<TTarget>(this TTarget target) where TTarget : AcrylicBrush
        => DependencyProperty<TTarget, Windows.UI.Color>.Get(target, Xaml.Media.AcrylicBrush.TintColorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.AcrylicBrush.TintLuminosityOpacity"/></summary>
        public static DependencyProperty<TTarget, double?> TintLuminosityOpacity<TTarget>(this TTarget target) where TTarget : AcrylicBrush
        => DependencyProperty<TTarget, double?>.Get(target, Xaml.Media.AcrylicBrush.TintLuminosityOpacityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.AcrylicBrush.TintOpacity"/></summary>
        public static DependencyProperty<TTarget, double> TintOpacity<TTarget>(this TTarget target) where TTarget : AcrylicBrush
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.AcrylicBrush.TintOpacityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.AcrylicBrush.TintTransitionDuration"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.TimeSpan> TintTransitionDuration<TTarget>(this TTarget target) where TTarget : AcrylicBrush
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.TimeSpan>.Get(target, Xaml.Media.AcrylicBrush.TintTransitionDurationProperty);
    }
}

namespace CSharpMarkup.WinUI // AddDeleteThemeTransition
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.AddDeleteThemeTransition"/></summary>
        public static AddDeleteThemeTransition AddDeleteThemeTransition()
        {
            var ui = new Xaml.Media.Animation.AddDeleteThemeTransition();
            return CSharpMarkup.WinUI.AddDeleteThemeTransition.StartChain(ui);
        }
    }

    public partial class AddDeleteThemeTransition : Transition, IUI<Xaml.Media.Animation.AddDeleteThemeTransition>
    {
        static AddDeleteThemeTransition instance;

        internal static AddDeleteThemeTransition StartChain(Xaml.Media.Animation.AddDeleteThemeTransition ui)
        {
            if (instance == null) instance = new AddDeleteThemeTransition();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.AddDeleteThemeTransition ui;

        public new Xaml.Media.Animation.AddDeleteThemeTransition UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.AddDeleteThemeTransition(AddDeleteThemeTransition view) => view?.UI;

        public static implicit operator AddDeleteThemeTransition(Xaml.Media.Animation.AddDeleteThemeTransition ui) => AddDeleteThemeTransition.StartChain(ui);

        public AddDeleteThemeTransition Invoke(Action<Xaml.Media.Animation.AddDeleteThemeTransition> action) { action?.Invoke(UI); return this; }

        protected AddDeleteThemeTransition() { }
    }
}

namespace CSharpMarkup.WinUI // BackEase
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.BackEase"/></summary>
        public static BackEase BackEase(double? Amplitude = default)
        {
            var ui = new Xaml.Media.Animation.BackEase();
            if (Amplitude is not null) ui.Amplitude = Amplitude.Value;
            return CSharpMarkup.WinUI.BackEase.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.BackEase"/></summary>
        public static BackEase BackEase()
        {
            var ui = new Xaml.Media.Animation.BackEase();
            return CSharpMarkup.WinUI.BackEase.StartChain(ui);
        }
    }

    public partial class BackEase : EasingFunctionBase, IUI<Xaml.Media.Animation.BackEase>
    {
        static BackEase instance;

        internal static BackEase StartChain(Xaml.Media.Animation.BackEase ui)
        {
            if (instance == null) instance = new BackEase();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.BackEase ui;

        public new Xaml.Media.Animation.BackEase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.BackEase(BackEase view) => view?.UI;

        public static implicit operator BackEase(Xaml.Media.Animation.BackEase ui) => BackEase.StartChain(ui);

        public BackEase Invoke(Action<Xaml.Media.Animation.BackEase> action) { action?.Invoke(UI); return this; }

        protected BackEase() { }
    }

    public static partial class BackEaseExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.BackEase.Amplitude"/></summary>
        public static TView Amplitude<TView>(this TView view, double value) where TView : BackEase { view.UI.Amplitude = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.BackEase.Amplitude"/></summary>
        public static DependencyProperty<TTarget, double> Amplitude<TTarget>(this TTarget target) where TTarget : BackEase
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.BackEase.AmplitudeProperty);
    }
}

namespace CSharpMarkup.WinUI // BeginStoryboard
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.BeginStoryboard"/></summary>
        public static BeginStoryboard BeginStoryboard(Xaml.Media.Animation.Storyboard Storyboard)
        {
            var ui = new Xaml.Media.Animation.BeginStoryboard();
            if (Storyboard is not null) ui.Storyboard = Storyboard;
            return CSharpMarkup.WinUI.BeginStoryboard.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.BeginStoryboard"/></summary>
        public static BeginStoryboard BeginStoryboard()
        {
            var ui = new Xaml.Media.Animation.BeginStoryboard();
            return CSharpMarkup.WinUI.BeginStoryboard.StartChain(ui);
        }
    }

    public partial class BeginStoryboard : TriggerAction, IUI<Xaml.Media.Animation.BeginStoryboard>
    {
        static BeginStoryboard instance;

        internal static BeginStoryboard StartChain(Xaml.Media.Animation.BeginStoryboard ui)
        {
            if (instance == null) instance = new BeginStoryboard();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.BeginStoryboard ui;

        public new Xaml.Media.Animation.BeginStoryboard UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.BeginStoryboard(BeginStoryboard view) => view?.UI;

        public static implicit operator BeginStoryboard(Xaml.Media.Animation.BeginStoryboard ui) => BeginStoryboard.StartChain(ui);

        public BeginStoryboard Invoke(Action<Xaml.Media.Animation.BeginStoryboard> action) { action?.Invoke(UI); return this; }

        protected BeginStoryboard() { }
    }

    public static partial class BeginStoryboardExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.BeginStoryboard.Storyboard"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.Storyboard> Storyboard<TTarget>(this TTarget target) where TTarget : BeginStoryboard
        => DependencyProperty<TTarget, Xaml.Media.Animation.Storyboard>.Get(target, Xaml.Media.Animation.BeginStoryboard.StoryboardProperty);
    }
}

namespace CSharpMarkup.WinUI // BounceEase
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.BounceEase"/></summary>
        public static BounceEase BounceEase(int? Bounces = default, double? Bounciness = default)
        {
            var ui = new Xaml.Media.Animation.BounceEase();
            if (Bounces is not null) ui.Bounces = Bounces.Value;
            if (Bounciness is not null) ui.Bounciness = Bounciness.Value;
            return CSharpMarkup.WinUI.BounceEase.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.BounceEase"/></summary>
        public static BounceEase BounceEase()
        {
            var ui = new Xaml.Media.Animation.BounceEase();
            return CSharpMarkup.WinUI.BounceEase.StartChain(ui);
        }
    }

    public partial class BounceEase : EasingFunctionBase, IUI<Xaml.Media.Animation.BounceEase>
    {
        static BounceEase instance;

        internal static BounceEase StartChain(Xaml.Media.Animation.BounceEase ui)
        {
            if (instance == null) instance = new BounceEase();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.BounceEase ui;

        public new Xaml.Media.Animation.BounceEase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.BounceEase(BounceEase view) => view?.UI;

        public static implicit operator BounceEase(Xaml.Media.Animation.BounceEase ui) => BounceEase.StartChain(ui);

        public BounceEase Invoke(Action<Xaml.Media.Animation.BounceEase> action) { action?.Invoke(UI); return this; }

        protected BounceEase() { }
    }

    public static partial class BounceEaseExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.BounceEase.Bounces"/></summary>
        public static TView Bounces<TView>(this TView view, int value) where TView : BounceEase { view.UI.Bounces = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.BounceEase.Bounciness"/></summary>
        public static TView Bounciness<TView>(this TView view, double value) where TView : BounceEase { view.UI.Bounciness = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.BounceEase.Bounces"/></summary>
        public static DependencyProperty<TTarget, int> Bounces<TTarget>(this TTarget target) where TTarget : BounceEase
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Media.Animation.BounceEase.BouncesProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.BounceEase.Bounciness"/></summary>
        public static DependencyProperty<TTarget, double> Bounciness<TTarget>(this TTarget target) where TTarget : BounceEase
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.BounceEase.BouncinessProperty);
    }
}

namespace CSharpMarkup.WinUI // CircleEase
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.CircleEase"/></summary>
        public static CircleEase CircleEase()
        {
            var ui = new Xaml.Media.Animation.CircleEase();
            return CSharpMarkup.WinUI.CircleEase.StartChain(ui);
        }
    }

    public partial class CircleEase : EasingFunctionBase, IUI<Xaml.Media.Animation.CircleEase>
    {
        static CircleEase instance;

        internal static CircleEase StartChain(Xaml.Media.Animation.CircleEase ui)
        {
            if (instance == null) instance = new CircleEase();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.CircleEase ui;

        public new Xaml.Media.Animation.CircleEase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.CircleEase(CircleEase view) => view?.UI;

        public static implicit operator CircleEase(Xaml.Media.Animation.CircleEase ui) => CircleEase.StartChain(ui);

        public CircleEase Invoke(Action<Xaml.Media.Animation.CircleEase> action) { action?.Invoke(UI); return this; }

        protected CircleEase() { }
    }
}

namespace CSharpMarkup.WinUI // ColorAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.ColorAnimation"/></summary>
        public static ColorAnimation ColorAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, Windows.UI.Color? By = default, Xaml.Media.Animation.EasingFunctionBase EasingFunction = default, bool? EnableDependentAnimation = default, Windows.UI.Color? From = default, Windows.UI.Color? To = default)
        {
            var ui = new Xaml.Media.Animation.ColorAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (By is not null) ui.By = By.Value;
            if (EasingFunction is not null) ui.EasingFunction = EasingFunction;
            if (EnableDependentAnimation is not null) ui.EnableDependentAnimation = EnableDependentAnimation.Value;
            if (From is not null) ui.From = From.Value;
            if (To is not null) ui.To = To.Value;
            return CSharpMarkup.WinUI.ColorAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.ColorAnimation"/></summary>
        public static ColorAnimation ColorAnimation()
        {
            var ui = new Xaml.Media.Animation.ColorAnimation();
            return CSharpMarkup.WinUI.ColorAnimation.StartChain(ui);
        }
    }

    public partial class ColorAnimation : Timeline, IUI<Xaml.Media.Animation.ColorAnimation>
    {
        static ColorAnimation instance;

        internal static ColorAnimation StartChain(Xaml.Media.Animation.ColorAnimation ui)
        {
            if (instance == null) instance = new ColorAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.ColorAnimation ui;

        public new Xaml.Media.Animation.ColorAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.ColorAnimation(ColorAnimation view) => view?.UI;

        public static implicit operator ColorAnimation(Xaml.Media.Animation.ColorAnimation ui) => ColorAnimation.StartChain(ui);

        public ColorAnimation Invoke(Action<Xaml.Media.Animation.ColorAnimation> action) { action?.Invoke(UI); return this; }

        protected ColorAnimation() { }
    }

    public static partial class ColorAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.ColorAnimation.By"/></summary>
        public static TView By<TView>(this TView view, Windows.UI.Color? value) where TView : ColorAnimation { view.UI.By = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.ColorAnimation.EasingFunction"/></summary>
        public static TView EasingFunction<TView>(this TView view, Xaml.Media.Animation.EasingFunctionBase value) where TView : ColorAnimation { view.UI.EasingFunction = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.ColorAnimation.EnableDependentAnimation"/></summary>
        public static TView EnableDependentAnimation<TView>(this TView view, bool value) where TView : ColorAnimation { view.UI.EnableDependentAnimation = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.ColorAnimation.From"/></summary>
        public static TView From<TView>(this TView view, Windows.UI.Color? value) where TView : ColorAnimation { view.UI.From = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.ColorAnimation.To"/></summary>
        public static TView To<TView>(this TView view, Windows.UI.Color? value) where TView : ColorAnimation { view.UI.To = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ColorAnimation.By"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Color?> By<TTarget>(this TTarget target) where TTarget : ColorAnimation
        => DependencyProperty<TTarget, Windows.UI.Color?>.Get(target, Xaml.Media.Animation.ColorAnimation.ByProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ColorAnimation.EasingFunction"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.EasingFunctionBase> EasingFunction<TTarget>(this TTarget target) where TTarget : ColorAnimation
        => DependencyProperty<TTarget, Xaml.Media.Animation.EasingFunctionBase>.Get(target, Xaml.Media.Animation.ColorAnimation.EasingFunctionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ColorAnimation.EnableDependentAnimation"/></summary>
        public static DependencyProperty<TTarget, bool> EnableDependentAnimation<TTarget>(this TTarget target) where TTarget : ColorAnimation
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.ColorAnimation.EnableDependentAnimationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ColorAnimation.From"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Color?> From<TTarget>(this TTarget target) where TTarget : ColorAnimation
        => DependencyProperty<TTarget, Windows.UI.Color?>.Get(target, Xaml.Media.Animation.ColorAnimation.FromProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ColorAnimation.To"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Color?> To<TTarget>(this TTarget target) where TTarget : ColorAnimation
        => DependencyProperty<TTarget, Windows.UI.Color?>.Get(target, Xaml.Media.Animation.ColorAnimation.ToProperty);
    }
}

namespace CSharpMarkup.WinUI // ColorAnimationUsingKeyFrames
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.ColorAnimationUsingKeyFrames"/></summary>
        public static ColorAnimationUsingKeyFrames ColorAnimationUsingKeyFrames(params Xaml.Media.Animation.ColorKeyFrame[] KeyFrames)
        {
            var ui = new Xaml.Media.Animation.ColorAnimationUsingKeyFrames();
            for (int i = 0; i < KeyFrames.Length; i++)
            {
                var child = KeyFrames[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Media.Animation.ColorKeyFrame>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.KeyFrames.Add(subChildren[j]);
                else
                    ui.KeyFrames.Add(child);
            }
            return CSharpMarkup.WinUI.ColorAnimationUsingKeyFrames.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.ColorAnimationUsingKeyFrames"/></summary>
        public static ColorAnimationUsingKeyFrames ColorAnimationUsingKeyFrames()
        {
            var ui = new Xaml.Media.Animation.ColorAnimationUsingKeyFrames();
            return CSharpMarkup.WinUI.ColorAnimationUsingKeyFrames.StartChain(ui);
        }
    }

    public partial class ColorAnimationUsingKeyFrames : Timeline, IUI<Xaml.Media.Animation.ColorAnimationUsingKeyFrames>
    {
        static ColorAnimationUsingKeyFrames instance;

        internal static ColorAnimationUsingKeyFrames StartChain(Xaml.Media.Animation.ColorAnimationUsingKeyFrames ui)
        {
            if (instance == null) instance = new ColorAnimationUsingKeyFrames();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.ColorAnimationUsingKeyFrames ui;

        public new Xaml.Media.Animation.ColorAnimationUsingKeyFrames UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.ColorAnimationUsingKeyFrames(ColorAnimationUsingKeyFrames view) => view?.UI;

        public static implicit operator ColorAnimationUsingKeyFrames(Xaml.Media.Animation.ColorAnimationUsingKeyFrames ui) => ColorAnimationUsingKeyFrames.StartChain(ui);

        public ColorAnimationUsingKeyFrames Invoke(Action<Xaml.Media.Animation.ColorAnimationUsingKeyFrames> action) { action?.Invoke(UI); return this; }

        protected ColorAnimationUsingKeyFrames() { }
    }

    public static partial class ColorAnimationUsingKeyFramesExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.ColorAnimationUsingKeyFrames.EnableDependentAnimation"/></summary>
        public static TView EnableDependentAnimation<TView>(this TView view, bool value) where TView : ColorAnimationUsingKeyFrames { view.UI.EnableDependentAnimation = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ColorAnimationUsingKeyFrames.EnableDependentAnimation"/></summary>
        public static DependencyProperty<TTarget, bool> EnableDependentAnimation<TTarget>(this TTarget target) where TTarget : ColorAnimationUsingKeyFrames
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.ColorAnimationUsingKeyFrames.EnableDependentAnimationProperty);
    }
}

namespace CSharpMarkup.WinUI // ColorKeyFrame
{
    public partial class ColorKeyFrame : DependencyObject, IUI<Xaml.Media.Animation.ColorKeyFrame>
    {
        Xaml.Media.Animation.ColorKeyFrame ui;

        public new Xaml.Media.Animation.ColorKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ColorKeyFrame Invoke(Action<Xaml.Media.Animation.ColorKeyFrame> action) { action?.Invoke(UI); return this; }

        protected ColorKeyFrame() { }
    }

    public static partial class ColorKeyFrameExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.ColorKeyFrame.KeyTime"/></summary>
        public static TView KeyTime<TView>(this TView view, CSharpMarkup.WinUI.to.KeyTime value) where TView : ColorKeyFrame { view.UI.KeyTime = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.ColorKeyFrame.Value"/></summary>
        public static TView Value<TView>(this TView view, Windows.UI.Color value) where TView : ColorKeyFrame { view.UI.Value = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ColorKeyFrame.KeyTime"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.KeyTime> KeyTime<TTarget>(this TTarget target) where TTarget : ColorKeyFrame
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.KeyTime>.Get(target, Xaml.Media.Animation.ColorKeyFrame.KeyTimeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ColorKeyFrame.Value"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Color> Value<TTarget>(this TTarget target) where TTarget : ColorKeyFrame
        => DependencyProperty<TTarget, Windows.UI.Color>.Get(target, Xaml.Media.Animation.ColorKeyFrame.ValueProperty);
    }
}

namespace CSharpMarkup.WinUI // CommonNavigationTransitionInfo
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.CommonNavigationTransitionInfo"/></summary>
        public static CommonNavigationTransitionInfo CommonNavigationTransitionInfo(bool? IsStaggeringEnabled = default)
        {
            var ui = new Xaml.Media.Animation.CommonNavigationTransitionInfo();
            if (IsStaggeringEnabled is not null) ui.IsStaggeringEnabled = IsStaggeringEnabled.Value;
            return CSharpMarkup.WinUI.CommonNavigationTransitionInfo.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.CommonNavigationTransitionInfo"/></summary>
        public static CommonNavigationTransitionInfo CommonNavigationTransitionInfo()
        {
            var ui = new Xaml.Media.Animation.CommonNavigationTransitionInfo();
            return CSharpMarkup.WinUI.CommonNavigationTransitionInfo.StartChain(ui);
        }
    }

    public partial class CommonNavigationTransitionInfo : NavigationTransitionInfo, IUI<Xaml.Media.Animation.CommonNavigationTransitionInfo>
    {
        static CommonNavigationTransitionInfo instance;

        internal static CommonNavigationTransitionInfo StartChain(Xaml.Media.Animation.CommonNavigationTransitionInfo ui)
        {
            if (instance == null) instance = new CommonNavigationTransitionInfo();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.CommonNavigationTransitionInfo ui;

        public new Xaml.Media.Animation.CommonNavigationTransitionInfo UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.CommonNavigationTransitionInfo(CommonNavigationTransitionInfo view) => view?.UI;

        public static implicit operator CommonNavigationTransitionInfo(Xaml.Media.Animation.CommonNavigationTransitionInfo ui) => CommonNavigationTransitionInfo.StartChain(ui);

        public CommonNavigationTransitionInfo Invoke(Action<Xaml.Media.Animation.CommonNavigationTransitionInfo> action) { action?.Invoke(UI); return this; }

        protected CommonNavigationTransitionInfo() { }
    }

    public static partial class CommonNavigationTransitionInfoExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.CommonNavigationTransitionInfo.IsStaggeringEnabled"/></summary>
        public static TView IsStaggeringEnabled<TView>(this TView view, bool value) where TView : CommonNavigationTransitionInfo { view.UI.IsStaggeringEnabled = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.CommonNavigationTransitionInfo.IsStaggeringEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsStaggeringEnabled<TTarget>(this TTarget target) where TTarget : CommonNavigationTransitionInfo
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.CommonNavigationTransitionInfo.IsStaggeringEnabledProperty);

        /// <summary>Set <see cref="Xaml.Media.Animation.CommonNavigationTransitionInfo.IsStaggerElement"/></summary>
        public static TTarget CommonNavigationTransitionInfo_IsStaggerElement<TTarget>(this TTarget target, bool value) where TTarget : UIElement
        { Xaml.Media.Animation.CommonNavigationTransitionInfo.SetIsStaggerElement(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.CommonNavigationTransitionInfo.IsStaggerElement"/></summary>
        public static DependencyProperty<TTarget, bool> CommonNavigationTransitionInfo_IsStaggerElement<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.CommonNavigationTransitionInfo.IsStaggerElementProperty);
    }
}

namespace CSharpMarkup.WinUI // ContentThemeTransition
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.ContentThemeTransition"/></summary>
        public static ContentThemeTransition ContentThemeTransition(double? HorizontalOffset = default, double? VerticalOffset = default)
        {
            var ui = new Xaml.Media.Animation.ContentThemeTransition();
            if (HorizontalOffset is not null) ui.HorizontalOffset = HorizontalOffset.Value;
            if (VerticalOffset is not null) ui.VerticalOffset = VerticalOffset.Value;
            return CSharpMarkup.WinUI.ContentThemeTransition.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.ContentThemeTransition"/></summary>
        public static ContentThemeTransition ContentThemeTransition()
        {
            var ui = new Xaml.Media.Animation.ContentThemeTransition();
            return CSharpMarkup.WinUI.ContentThemeTransition.StartChain(ui);
        }
    }

    public partial class ContentThemeTransition : Transition, IUI<Xaml.Media.Animation.ContentThemeTransition>
    {
        static ContentThemeTransition instance;

        internal static ContentThemeTransition StartChain(Xaml.Media.Animation.ContentThemeTransition ui)
        {
            if (instance == null) instance = new ContentThemeTransition();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.ContentThemeTransition ui;

        public new Xaml.Media.Animation.ContentThemeTransition UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.ContentThemeTransition(ContentThemeTransition view) => view?.UI;

        public static implicit operator ContentThemeTransition(Xaml.Media.Animation.ContentThemeTransition ui) => ContentThemeTransition.StartChain(ui);

        public ContentThemeTransition Invoke(Action<Xaml.Media.Animation.ContentThemeTransition> action) { action?.Invoke(UI); return this; }

        protected ContentThemeTransition() { }
    }

    public static partial class ContentThemeTransitionExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.ContentThemeTransition.HorizontalOffset"/></summary>
        public static TView HorizontalOffset<TView>(this TView view, double value) where TView : ContentThemeTransition { view.UI.HorizontalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.ContentThemeTransition.VerticalOffset"/></summary>
        public static TView VerticalOffset<TView>(this TView view, double value) where TView : ContentThemeTransition { view.UI.VerticalOffset = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ContentThemeTransition.HorizontalOffset"/></summary>
        public static DependencyProperty<TTarget, double> HorizontalOffset<TTarget>(this TTarget target) where TTarget : ContentThemeTransition
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.ContentThemeTransition.HorizontalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ContentThemeTransition.VerticalOffset"/></summary>
        public static DependencyProperty<TTarget, double> VerticalOffset<TTarget>(this TTarget target) where TTarget : ContentThemeTransition
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.ContentThemeTransition.VerticalOffsetProperty);
    }
}

namespace CSharpMarkup.WinUI // ContinuumNavigationTransitionInfo
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.ContinuumNavigationTransitionInfo"/></summary>
        public static ContinuumNavigationTransitionInfo ContinuumNavigationTransitionInfo(Xaml.UIElement ExitElement = default)
        {
            var ui = new Xaml.Media.Animation.ContinuumNavigationTransitionInfo();
            if (ExitElement is not null) ui.ExitElement = ExitElement;
            return CSharpMarkup.WinUI.ContinuumNavigationTransitionInfo.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.ContinuumNavigationTransitionInfo"/></summary>
        public static ContinuumNavigationTransitionInfo ContinuumNavigationTransitionInfo()
        {
            var ui = new Xaml.Media.Animation.ContinuumNavigationTransitionInfo();
            return CSharpMarkup.WinUI.ContinuumNavigationTransitionInfo.StartChain(ui);
        }
    }

    public partial class ContinuumNavigationTransitionInfo : NavigationTransitionInfo, IUI<Xaml.Media.Animation.ContinuumNavigationTransitionInfo>
    {
        static ContinuumNavigationTransitionInfo instance;

        internal static ContinuumNavigationTransitionInfo StartChain(Xaml.Media.Animation.ContinuumNavigationTransitionInfo ui)
        {
            if (instance == null) instance = new ContinuumNavigationTransitionInfo();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.ContinuumNavigationTransitionInfo ui;

        public new Xaml.Media.Animation.ContinuumNavigationTransitionInfo UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.ContinuumNavigationTransitionInfo(ContinuumNavigationTransitionInfo view) => view?.UI;

        public static implicit operator ContinuumNavigationTransitionInfo(Xaml.Media.Animation.ContinuumNavigationTransitionInfo ui) => ContinuumNavigationTransitionInfo.StartChain(ui);

        public ContinuumNavigationTransitionInfo Invoke(Action<Xaml.Media.Animation.ContinuumNavigationTransitionInfo> action) { action?.Invoke(UI); return this; }

        protected ContinuumNavigationTransitionInfo() { }
    }

    public static partial class ContinuumNavigationTransitionInfoExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.ContinuumNavigationTransitionInfo.ExitElement"/></summary>
        public static TView ExitElement<TView>(this TView view, Xaml.UIElement value) where TView : ContinuumNavigationTransitionInfo { view.UI.ExitElement = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ContinuumNavigationTransitionInfo.ExitElement"/></summary>
        public static DependencyProperty<TTarget, Xaml.UIElement> ExitElement<TTarget>(this TTarget target) where TTarget : ContinuumNavigationTransitionInfo
        => DependencyProperty<TTarget, Xaml.UIElement>.Get(target, Xaml.Media.Animation.ContinuumNavigationTransitionInfo.ExitElementProperty);

        /// <summary>Set <see cref="Xaml.Media.Animation.ContinuumNavigationTransitionInfo.ExitElementContainer"/></summary>
        public static TTarget ContinuumNavigationTransitionInfo_ExitElementContainer<TTarget>(this TTarget target, bool value) where TTarget : ListViewBase
        { Xaml.Media.Animation.ContinuumNavigationTransitionInfo.SetExitElementContainer(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ContinuumNavigationTransitionInfo.ExitElementContainer"/></summary>
        public static DependencyProperty<TTarget, bool> ContinuumNavigationTransitionInfo_ExitElementContainer<TTarget>(this TTarget target) where TTarget : ListViewBase
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.ContinuumNavigationTransitionInfo.ExitElementContainerProperty);

        /// <summary>Set <see cref="Xaml.Media.Animation.ContinuumNavigationTransitionInfo"/> attached properties</summary>
        public static TTarget ContinuumNavigationTransitionInfo<TTarget>(this TTarget target

            , bool? ExitElementContainer = default

            , bool? IsEntranceElement = default

            , bool? IsExitElement = default

        ) where TTarget : ListViewBase
        {
            if (ExitElementContainer is not null) Xaml.Media.Animation.ContinuumNavigationTransitionInfo.SetExitElementContainer(target.UI, ExitElementContainer.Value);

            if (IsEntranceElement is not null) Xaml.Media.Animation.ContinuumNavigationTransitionInfo.SetIsEntranceElement(target.UI, IsEntranceElement.Value);

            if (IsExitElement is not null) Xaml.Media.Animation.ContinuumNavigationTransitionInfo.SetIsExitElement(target.UI, IsExitElement.Value);

            return target;
        }

        /// <summary>Set <see cref="Xaml.Media.Animation.ContinuumNavigationTransitionInfo.IsEntranceElement"/></summary>
        public static TTarget ContinuumNavigationTransitionInfo_IsEntranceElement<TTarget>(this TTarget target, bool value) where TTarget : UIElement
        { Xaml.Media.Animation.ContinuumNavigationTransitionInfo.SetIsEntranceElement(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ContinuumNavigationTransitionInfo.IsEntranceElement"/></summary>
        public static DependencyProperty<TTarget, bool> ContinuumNavigationTransitionInfo_IsEntranceElement<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.ContinuumNavigationTransitionInfo.IsEntranceElementProperty);

        /// <summary>Set <see cref="Xaml.Media.Animation.ContinuumNavigationTransitionInfo.IsExitElement"/></summary>
        public static TTarget ContinuumNavigationTransitionInfo_IsExitElement<TTarget>(this TTarget target, bool value) where TTarget : UIElement
        { Xaml.Media.Animation.ContinuumNavigationTransitionInfo.SetIsExitElement(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ContinuumNavigationTransitionInfo.IsExitElement"/></summary>
        public static DependencyProperty<TTarget, bool> ContinuumNavigationTransitionInfo_IsExitElement<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.ContinuumNavigationTransitionInfo.IsExitElementProperty);

        /// <summary>Set <see cref="Xaml.Media.Animation.ContinuumNavigationTransitionInfo"/> attached properties</summary>
        public static TTarget ContinuumNavigationTransitionInfo<TTarget>(this TTarget target

            , bool? IsEntranceElement = default

            , bool? IsExitElement = default

        ) where TTarget : UIElement
        {
            if (IsEntranceElement is not null) Xaml.Media.Animation.ContinuumNavigationTransitionInfo.SetIsEntranceElement(target.UI, IsEntranceElement.Value);

            if (IsExitElement is not null) Xaml.Media.Animation.ContinuumNavigationTransitionInfo.SetIsExitElement(target.UI, IsExitElement.Value);

            return target;
        }
    }
}

namespace CSharpMarkup.WinUI // CubicEase
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.CubicEase"/></summary>
        public static CubicEase CubicEase()
        {
            var ui = new Xaml.Media.Animation.CubicEase();
            return CSharpMarkup.WinUI.CubicEase.StartChain(ui);
        }
    }

    public partial class CubicEase : EasingFunctionBase, IUI<Xaml.Media.Animation.CubicEase>
    {
        static CubicEase instance;

        internal static CubicEase StartChain(Xaml.Media.Animation.CubicEase ui)
        {
            if (instance == null) instance = new CubicEase();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.CubicEase ui;

        public new Xaml.Media.Animation.CubicEase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.CubicEase(CubicEase view) => view?.UI;

        public static implicit operator CubicEase(Xaml.Media.Animation.CubicEase ui) => CubicEase.StartChain(ui);

        public CubicEase Invoke(Action<Xaml.Media.Animation.CubicEase> action) { action?.Invoke(UI); return this; }

        protected CubicEase() { }
    }
}

namespace CSharpMarkup.WinUI // DiscreteColorKeyFrame
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.DiscreteColorKeyFrame"/></summary>
        public static DiscreteColorKeyFrame DiscreteColorKeyFrame()
        {
            var ui = new Xaml.Media.Animation.DiscreteColorKeyFrame();
            return CSharpMarkup.WinUI.DiscreteColorKeyFrame.StartChain(ui);
        }
    }

    public partial class DiscreteColorKeyFrame : ColorKeyFrame, IUI<Xaml.Media.Animation.DiscreteColorKeyFrame>
    {
        static DiscreteColorKeyFrame instance;

        internal static DiscreteColorKeyFrame StartChain(Xaml.Media.Animation.DiscreteColorKeyFrame ui)
        {
            if (instance == null) instance = new DiscreteColorKeyFrame();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.DiscreteColorKeyFrame ui;

        public new Xaml.Media.Animation.DiscreteColorKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.DiscreteColorKeyFrame(DiscreteColorKeyFrame view) => view?.UI;

        public static implicit operator DiscreteColorKeyFrame(Xaml.Media.Animation.DiscreteColorKeyFrame ui) => DiscreteColorKeyFrame.StartChain(ui);

        public DiscreteColorKeyFrame Invoke(Action<Xaml.Media.Animation.DiscreteColorKeyFrame> action) { action?.Invoke(UI); return this; }

        protected DiscreteColorKeyFrame() { }
    }
}

namespace CSharpMarkup.WinUI // DiscreteDoubleKeyFrame
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.DiscreteDoubleKeyFrame"/></summary>
        public static DiscreteDoubleKeyFrame DiscreteDoubleKeyFrame()
        {
            var ui = new Xaml.Media.Animation.DiscreteDoubleKeyFrame();
            return CSharpMarkup.WinUI.DiscreteDoubleKeyFrame.StartChain(ui);
        }
    }

    public partial class DiscreteDoubleKeyFrame : DoubleKeyFrame, IUI<Xaml.Media.Animation.DiscreteDoubleKeyFrame>
    {
        static DiscreteDoubleKeyFrame instance;

        internal static DiscreteDoubleKeyFrame StartChain(Xaml.Media.Animation.DiscreteDoubleKeyFrame ui)
        {
            if (instance == null) instance = new DiscreteDoubleKeyFrame();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.DiscreteDoubleKeyFrame ui;

        public new Xaml.Media.Animation.DiscreteDoubleKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.DiscreteDoubleKeyFrame(DiscreteDoubleKeyFrame view) => view?.UI;

        public static implicit operator DiscreteDoubleKeyFrame(Xaml.Media.Animation.DiscreteDoubleKeyFrame ui) => DiscreteDoubleKeyFrame.StartChain(ui);

        public DiscreteDoubleKeyFrame Invoke(Action<Xaml.Media.Animation.DiscreteDoubleKeyFrame> action) { action?.Invoke(UI); return this; }

        protected DiscreteDoubleKeyFrame() { }
    }
}

namespace CSharpMarkup.WinUI // DiscreteObjectKeyFrame
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.DiscreteObjectKeyFrame"/></summary>
        public static DiscreteObjectKeyFrame DiscreteObjectKeyFrame()
        {
            var ui = new Xaml.Media.Animation.DiscreteObjectKeyFrame();
            return CSharpMarkup.WinUI.DiscreteObjectKeyFrame.StartChain(ui);
        }
    }

    public partial class DiscreteObjectKeyFrame : ObjectKeyFrame, IUI<Xaml.Media.Animation.DiscreteObjectKeyFrame>
    {
        static DiscreteObjectKeyFrame instance;

        internal static DiscreteObjectKeyFrame StartChain(Xaml.Media.Animation.DiscreteObjectKeyFrame ui)
        {
            if (instance == null) instance = new DiscreteObjectKeyFrame();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.DiscreteObjectKeyFrame ui;

        public new Xaml.Media.Animation.DiscreteObjectKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.DiscreteObjectKeyFrame(DiscreteObjectKeyFrame view) => view?.UI;

        public static implicit operator DiscreteObjectKeyFrame(Xaml.Media.Animation.DiscreteObjectKeyFrame ui) => DiscreteObjectKeyFrame.StartChain(ui);

        public DiscreteObjectKeyFrame Invoke(Action<Xaml.Media.Animation.DiscreteObjectKeyFrame> action) { action?.Invoke(UI); return this; }

        protected DiscreteObjectKeyFrame() { }
    }
}

namespace CSharpMarkup.WinUI // DiscretePointKeyFrame
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.DiscretePointKeyFrame"/></summary>
        public static DiscretePointKeyFrame DiscretePointKeyFrame()
        {
            var ui = new Xaml.Media.Animation.DiscretePointKeyFrame();
            return CSharpMarkup.WinUI.DiscretePointKeyFrame.StartChain(ui);
        }
    }

    public partial class DiscretePointKeyFrame : PointKeyFrame, IUI<Xaml.Media.Animation.DiscretePointKeyFrame>
    {
        static DiscretePointKeyFrame instance;

        internal static DiscretePointKeyFrame StartChain(Xaml.Media.Animation.DiscretePointKeyFrame ui)
        {
            if (instance == null) instance = new DiscretePointKeyFrame();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.DiscretePointKeyFrame ui;

        public new Xaml.Media.Animation.DiscretePointKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.DiscretePointKeyFrame(DiscretePointKeyFrame view) => view?.UI;

        public static implicit operator DiscretePointKeyFrame(Xaml.Media.Animation.DiscretePointKeyFrame ui) => DiscretePointKeyFrame.StartChain(ui);

        public DiscretePointKeyFrame Invoke(Action<Xaml.Media.Animation.DiscretePointKeyFrame> action) { action?.Invoke(UI); return this; }

        protected DiscretePointKeyFrame() { }
    }
}

namespace CSharpMarkup.WinUI // DoubleAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.DoubleAnimation"/></summary>
        public static DoubleAnimation DoubleAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, double? By = default, Xaml.Media.Animation.EasingFunctionBase EasingFunction = default, bool? EnableDependentAnimation = default, double? From = default, double? To = default)
        {
            var ui = new Xaml.Media.Animation.DoubleAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (By is not null) ui.By = By.Value;
            if (EasingFunction is not null) ui.EasingFunction = EasingFunction;
            if (EnableDependentAnimation is not null) ui.EnableDependentAnimation = EnableDependentAnimation.Value;
            if (From is not null) ui.From = From.Value;
            if (To is not null) ui.To = To.Value;
            return CSharpMarkup.WinUI.DoubleAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.DoubleAnimation"/></summary>
        public static DoubleAnimation DoubleAnimation()
        {
            var ui = new Xaml.Media.Animation.DoubleAnimation();
            return CSharpMarkup.WinUI.DoubleAnimation.StartChain(ui);
        }
    }

    public partial class DoubleAnimation : Timeline, IUI<Xaml.Media.Animation.DoubleAnimation>
    {
        static DoubleAnimation instance;

        internal static DoubleAnimation StartChain(Xaml.Media.Animation.DoubleAnimation ui)
        {
            if (instance == null) instance = new DoubleAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.DoubleAnimation ui;

        public new Xaml.Media.Animation.DoubleAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.DoubleAnimation(DoubleAnimation view) => view?.UI;

        public static implicit operator DoubleAnimation(Xaml.Media.Animation.DoubleAnimation ui) => DoubleAnimation.StartChain(ui);

        public DoubleAnimation Invoke(Action<Xaml.Media.Animation.DoubleAnimation> action) { action?.Invoke(UI); return this; }

        protected DoubleAnimation() { }
    }

    public static partial class DoubleAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.DoubleAnimation.By"/></summary>
        public static TView By<TView>(this TView view, double? value) where TView : DoubleAnimation { view.UI.By = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.DoubleAnimation.EasingFunction"/></summary>
        public static TView EasingFunction<TView>(this TView view, Xaml.Media.Animation.EasingFunctionBase value) where TView : DoubleAnimation { view.UI.EasingFunction = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.DoubleAnimation.EnableDependentAnimation"/></summary>
        public static TView EnableDependentAnimation<TView>(this TView view, bool value) where TView : DoubleAnimation { view.UI.EnableDependentAnimation = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.DoubleAnimation.From"/></summary>
        public static TView From<TView>(this TView view, double? value) where TView : DoubleAnimation { view.UI.From = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.DoubleAnimation.To"/></summary>
        public static TView To<TView>(this TView view, double? value) where TView : DoubleAnimation { view.UI.To = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DoubleAnimation.By"/></summary>
        public static DependencyProperty<TTarget, double?> By<TTarget>(this TTarget target) where TTarget : DoubleAnimation
        => DependencyProperty<TTarget, double?>.Get(target, Xaml.Media.Animation.DoubleAnimation.ByProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DoubleAnimation.EasingFunction"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.EasingFunctionBase> EasingFunction<TTarget>(this TTarget target) where TTarget : DoubleAnimation
        => DependencyProperty<TTarget, Xaml.Media.Animation.EasingFunctionBase>.Get(target, Xaml.Media.Animation.DoubleAnimation.EasingFunctionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DoubleAnimation.EnableDependentAnimation"/></summary>
        public static DependencyProperty<TTarget, bool> EnableDependentAnimation<TTarget>(this TTarget target) where TTarget : DoubleAnimation
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.DoubleAnimation.EnableDependentAnimationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DoubleAnimation.From"/></summary>
        public static DependencyProperty<TTarget, double?> From<TTarget>(this TTarget target) where TTarget : DoubleAnimation
        => DependencyProperty<TTarget, double?>.Get(target, Xaml.Media.Animation.DoubleAnimation.FromProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DoubleAnimation.To"/></summary>
        public static DependencyProperty<TTarget, double?> To<TTarget>(this TTarget target) where TTarget : DoubleAnimation
        => DependencyProperty<TTarget, double?>.Get(target, Xaml.Media.Animation.DoubleAnimation.ToProperty);
    }
}

namespace CSharpMarkup.WinUI // DoubleAnimationUsingKeyFrames
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.DoubleAnimationUsingKeyFrames"/></summary>
        public static DoubleAnimationUsingKeyFrames DoubleAnimationUsingKeyFrames(params Xaml.Media.Animation.DoubleKeyFrame[] KeyFrames)
        {
            var ui = new Xaml.Media.Animation.DoubleAnimationUsingKeyFrames();
            for (int i = 0; i < KeyFrames.Length; i++)
            {
                var child = KeyFrames[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Media.Animation.DoubleKeyFrame>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.KeyFrames.Add(subChildren[j]);
                else
                    ui.KeyFrames.Add(child);
            }
            return CSharpMarkup.WinUI.DoubleAnimationUsingKeyFrames.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.DoubleAnimationUsingKeyFrames"/></summary>
        public static DoubleAnimationUsingKeyFrames DoubleAnimationUsingKeyFrames()
        {
            var ui = new Xaml.Media.Animation.DoubleAnimationUsingKeyFrames();
            return CSharpMarkup.WinUI.DoubleAnimationUsingKeyFrames.StartChain(ui);
        }
    }

    public partial class DoubleAnimationUsingKeyFrames : Timeline, IUI<Xaml.Media.Animation.DoubleAnimationUsingKeyFrames>
    {
        static DoubleAnimationUsingKeyFrames instance;

        internal static DoubleAnimationUsingKeyFrames StartChain(Xaml.Media.Animation.DoubleAnimationUsingKeyFrames ui)
        {
            if (instance == null) instance = new DoubleAnimationUsingKeyFrames();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.DoubleAnimationUsingKeyFrames ui;

        public new Xaml.Media.Animation.DoubleAnimationUsingKeyFrames UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.DoubleAnimationUsingKeyFrames(DoubleAnimationUsingKeyFrames view) => view?.UI;

        public static implicit operator DoubleAnimationUsingKeyFrames(Xaml.Media.Animation.DoubleAnimationUsingKeyFrames ui) => DoubleAnimationUsingKeyFrames.StartChain(ui);

        public DoubleAnimationUsingKeyFrames Invoke(Action<Xaml.Media.Animation.DoubleAnimationUsingKeyFrames> action) { action?.Invoke(UI); return this; }

        protected DoubleAnimationUsingKeyFrames() { }
    }

    public static partial class DoubleAnimationUsingKeyFramesExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.DoubleAnimationUsingKeyFrames.EnableDependentAnimation"/></summary>
        public static TView EnableDependentAnimation<TView>(this TView view, bool value) where TView : DoubleAnimationUsingKeyFrames { view.UI.EnableDependentAnimation = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DoubleAnimationUsingKeyFrames.EnableDependentAnimation"/></summary>
        public static DependencyProperty<TTarget, bool> EnableDependentAnimation<TTarget>(this TTarget target) where TTarget : DoubleAnimationUsingKeyFrames
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.DoubleAnimationUsingKeyFrames.EnableDependentAnimationProperty);
    }
}

namespace CSharpMarkup.WinUI // DoubleKeyFrame
{
    public partial class DoubleKeyFrame : DependencyObject, IUI<Xaml.Media.Animation.DoubleKeyFrame>
    {
        Xaml.Media.Animation.DoubleKeyFrame ui;

        public new Xaml.Media.Animation.DoubleKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public DoubleKeyFrame Invoke(Action<Xaml.Media.Animation.DoubleKeyFrame> action) { action?.Invoke(UI); return this; }

        protected DoubleKeyFrame() { }
    }

    public static partial class DoubleKeyFrameExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.DoubleKeyFrame.KeyTime"/></summary>
        public static TView KeyTime<TView>(this TView view, CSharpMarkup.WinUI.to.KeyTime value) where TView : DoubleKeyFrame { view.UI.KeyTime = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.DoubleKeyFrame.Value"/></summary>
        public static TView Value<TView>(this TView view, double value) where TView : DoubleKeyFrame { view.UI.Value = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DoubleKeyFrame.KeyTime"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.KeyTime> KeyTime<TTarget>(this TTarget target) where TTarget : DoubleKeyFrame
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.KeyTime>.Get(target, Xaml.Media.Animation.DoubleKeyFrame.KeyTimeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DoubleKeyFrame.Value"/></summary>
        public static DependencyProperty<TTarget, double> Value<TTarget>(this TTarget target) where TTarget : DoubleKeyFrame
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.DoubleKeyFrame.ValueProperty);
    }
}

namespace CSharpMarkup.WinUI // DragItemThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.DragItemThemeAnimation"/></summary>
        public static DragItemThemeAnimation DragItemThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, string TargetName = default)
        {
            var ui = new Xaml.Media.Animation.DragItemThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (TargetName is not null) ui.TargetName = TargetName;
            return CSharpMarkup.WinUI.DragItemThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.DragItemThemeAnimation"/></summary>
        public static DragItemThemeAnimation DragItemThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.DragItemThemeAnimation();
            return CSharpMarkup.WinUI.DragItemThemeAnimation.StartChain(ui);
        }
    }

    public partial class DragItemThemeAnimation : Timeline, IUI<Xaml.Media.Animation.DragItemThemeAnimation>
    {
        static DragItemThemeAnimation instance;

        internal static DragItemThemeAnimation StartChain(Xaml.Media.Animation.DragItemThemeAnimation ui)
        {
            if (instance == null) instance = new DragItemThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.DragItemThemeAnimation ui;

        public new Xaml.Media.Animation.DragItemThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.DragItemThemeAnimation(DragItemThemeAnimation view) => view?.UI;

        public static implicit operator DragItemThemeAnimation(Xaml.Media.Animation.DragItemThemeAnimation ui) => DragItemThemeAnimation.StartChain(ui);

        public DragItemThemeAnimation Invoke(Action<Xaml.Media.Animation.DragItemThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected DragItemThemeAnimation() { }
    }

    public static partial class DragItemThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.DragItemThemeAnimation.TargetName"/></summary>
        public static TView TargetName<TView>(this TView view, string value) where TView : DragItemThemeAnimation { view.UI.TargetName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DragItemThemeAnimation.TargetName"/></summary>
        public static DependencyProperty<TTarget, string> TargetName<TTarget>(this TTarget target) where TTarget : DragItemThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.DragItemThemeAnimation.TargetNameProperty);
    }
}

namespace CSharpMarkup.WinUI // DragOverThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.DragOverThemeAnimation"/></summary>
        public static DragOverThemeAnimation DragOverThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, Xaml.Controls.Primitives.AnimationDirection? Direction = default, string TargetName = default, double? ToOffset = default)
        {
            var ui = new Xaml.Media.Animation.DragOverThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (Direction is not null) ui.Direction = Direction.Value;
            if (TargetName is not null) ui.TargetName = TargetName;
            if (ToOffset is not null) ui.ToOffset = ToOffset.Value;
            return CSharpMarkup.WinUI.DragOverThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.DragOverThemeAnimation"/></summary>
        public static DragOverThemeAnimation DragOverThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.DragOverThemeAnimation();
            return CSharpMarkup.WinUI.DragOverThemeAnimation.StartChain(ui);
        }
    }

    public partial class DragOverThemeAnimation : Timeline, IUI<Xaml.Media.Animation.DragOverThemeAnimation>
    {
        static DragOverThemeAnimation instance;

        internal static DragOverThemeAnimation StartChain(Xaml.Media.Animation.DragOverThemeAnimation ui)
        {
            if (instance == null) instance = new DragOverThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.DragOverThemeAnimation ui;

        public new Xaml.Media.Animation.DragOverThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.DragOverThemeAnimation(DragOverThemeAnimation view) => view?.UI;

        public static implicit operator DragOverThemeAnimation(Xaml.Media.Animation.DragOverThemeAnimation ui) => DragOverThemeAnimation.StartChain(ui);

        public DragOverThemeAnimation Invoke(Action<Xaml.Media.Animation.DragOverThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected DragOverThemeAnimation() { }
    }

    public static partial class DragOverThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.DragOverThemeAnimation.Direction"/></summary>
        public static TView Direction<TView>(this TView view, Xaml.Controls.Primitives.AnimationDirection value) where TView : DragOverThemeAnimation { view.UI.Direction = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.DragOverThemeAnimation.TargetName"/></summary>
        public static TView TargetName<TView>(this TView view, string value) where TView : DragOverThemeAnimation { view.UI.TargetName = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.DragOverThemeAnimation.ToOffset"/></summary>
        public static TView ToOffset<TView>(this TView view, double value) where TView : DragOverThemeAnimation { view.UI.ToOffset = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DragOverThemeAnimation.Direction"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> Direction<TTarget>(this TTarget target) where TTarget : DragOverThemeAnimation
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection>.Get(target, Xaml.Media.Animation.DragOverThemeAnimation.DirectionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DragOverThemeAnimation.TargetName"/></summary>
        public static DependencyProperty<TTarget, string> TargetName<TTarget>(this TTarget target) where TTarget : DragOverThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.DragOverThemeAnimation.TargetNameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DragOverThemeAnimation.ToOffset"/></summary>
        public static DependencyProperty<TTarget, double> ToOffset<TTarget>(this TTarget target) where TTarget : DragOverThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.DragOverThemeAnimation.ToOffsetProperty);
    }
}

namespace CSharpMarkup.WinUI // DrillInNavigationTransitionInfo
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.DrillInNavigationTransitionInfo"/></summary>
        public static DrillInNavigationTransitionInfo DrillInNavigationTransitionInfo()
        {
            var ui = new Xaml.Media.Animation.DrillInNavigationTransitionInfo();
            return CSharpMarkup.WinUI.DrillInNavigationTransitionInfo.StartChain(ui);
        }
    }

    public partial class DrillInNavigationTransitionInfo : NavigationTransitionInfo, IUI<Xaml.Media.Animation.DrillInNavigationTransitionInfo>
    {
        static DrillInNavigationTransitionInfo instance;

        internal static DrillInNavigationTransitionInfo StartChain(Xaml.Media.Animation.DrillInNavigationTransitionInfo ui)
        {
            if (instance == null) instance = new DrillInNavigationTransitionInfo();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.DrillInNavigationTransitionInfo ui;

        public new Xaml.Media.Animation.DrillInNavigationTransitionInfo UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.DrillInNavigationTransitionInfo(DrillInNavigationTransitionInfo view) => view?.UI;

        public static implicit operator DrillInNavigationTransitionInfo(Xaml.Media.Animation.DrillInNavigationTransitionInfo ui) => DrillInNavigationTransitionInfo.StartChain(ui);

        public DrillInNavigationTransitionInfo Invoke(Action<Xaml.Media.Animation.DrillInNavigationTransitionInfo> action) { action?.Invoke(UI); return this; }

        protected DrillInNavigationTransitionInfo() { }
    }
}

namespace CSharpMarkup.WinUI // DrillInThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.DrillInThemeAnimation"/></summary>
        public static DrillInThemeAnimation DrillInThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, Xaml.DependencyObject EntranceTarget = default, string EntranceTargetName = default, Xaml.DependencyObject ExitTarget = default, string ExitTargetName = default)
        {
            var ui = new Xaml.Media.Animation.DrillInThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (EntranceTarget is not null) ui.EntranceTarget = EntranceTarget;
            if (EntranceTargetName is not null) ui.EntranceTargetName = EntranceTargetName;
            if (ExitTarget is not null) ui.ExitTarget = ExitTarget;
            if (ExitTargetName is not null) ui.ExitTargetName = ExitTargetName;
            return CSharpMarkup.WinUI.DrillInThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.DrillInThemeAnimation"/></summary>
        public static DrillInThemeAnimation DrillInThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.DrillInThemeAnimation();
            return CSharpMarkup.WinUI.DrillInThemeAnimation.StartChain(ui);
        }
    }

    public partial class DrillInThemeAnimation : Timeline, IUI<Xaml.Media.Animation.DrillInThemeAnimation>
    {
        static DrillInThemeAnimation instance;

        internal static DrillInThemeAnimation StartChain(Xaml.Media.Animation.DrillInThemeAnimation ui)
        {
            if (instance == null) instance = new DrillInThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.DrillInThemeAnimation ui;

        public new Xaml.Media.Animation.DrillInThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.DrillInThemeAnimation(DrillInThemeAnimation view) => view?.UI;

        public static implicit operator DrillInThemeAnimation(Xaml.Media.Animation.DrillInThemeAnimation ui) => DrillInThemeAnimation.StartChain(ui);

        public DrillInThemeAnimation Invoke(Action<Xaml.Media.Animation.DrillInThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected DrillInThemeAnimation() { }
    }

    public static partial class DrillInThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.DrillInThemeAnimation.EntranceTarget"/></summary>
        public static TView EntranceTarget<TView>(this TView view, Xaml.DependencyObject value) where TView : DrillInThemeAnimation { view.UI.EntranceTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.DrillInThemeAnimation.EntranceTargetName"/></summary>
        public static TView EntranceTargetName<TView>(this TView view, string value) where TView : DrillInThemeAnimation { view.UI.EntranceTargetName = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.DrillInThemeAnimation.ExitTarget"/></summary>
        public static TView ExitTarget<TView>(this TView view, Xaml.DependencyObject value) where TView : DrillInThemeAnimation { view.UI.ExitTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.DrillInThemeAnimation.ExitTargetName"/></summary>
        public static TView ExitTargetName<TView>(this TView view, string value) where TView : DrillInThemeAnimation { view.UI.ExitTargetName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DrillInThemeAnimation.EntranceTargetName"/></summary>
        public static DependencyProperty<TTarget, string> EntranceTargetName<TTarget>(this TTarget target) where TTarget : DrillInThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.DrillInThemeAnimation.EntranceTargetNameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DrillInThemeAnimation.EntranceTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> EntranceTarget<TTarget>(this TTarget target) where TTarget : DrillInThemeAnimation
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Media.Animation.DrillInThemeAnimation.EntranceTargetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DrillInThemeAnimation.ExitTargetName"/></summary>
        public static DependencyProperty<TTarget, string> ExitTargetName<TTarget>(this TTarget target) where TTarget : DrillInThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.DrillInThemeAnimation.ExitTargetNameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DrillInThemeAnimation.ExitTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> ExitTarget<TTarget>(this TTarget target) where TTarget : DrillInThemeAnimation
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Media.Animation.DrillInThemeAnimation.ExitTargetProperty);
    }
}

namespace CSharpMarkup.WinUI // DrillOutThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.DrillOutThemeAnimation"/></summary>
        public static DrillOutThemeAnimation DrillOutThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, Xaml.DependencyObject EntranceTarget = default, string EntranceTargetName = default, Xaml.DependencyObject ExitTarget = default, string ExitTargetName = default)
        {
            var ui = new Xaml.Media.Animation.DrillOutThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (EntranceTarget is not null) ui.EntranceTarget = EntranceTarget;
            if (EntranceTargetName is not null) ui.EntranceTargetName = EntranceTargetName;
            if (ExitTarget is not null) ui.ExitTarget = ExitTarget;
            if (ExitTargetName is not null) ui.ExitTargetName = ExitTargetName;
            return CSharpMarkup.WinUI.DrillOutThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.DrillOutThemeAnimation"/></summary>
        public static DrillOutThemeAnimation DrillOutThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.DrillOutThemeAnimation();
            return CSharpMarkup.WinUI.DrillOutThemeAnimation.StartChain(ui);
        }
    }

    public partial class DrillOutThemeAnimation : Timeline, IUI<Xaml.Media.Animation.DrillOutThemeAnimation>
    {
        static DrillOutThemeAnimation instance;

        internal static DrillOutThemeAnimation StartChain(Xaml.Media.Animation.DrillOutThemeAnimation ui)
        {
            if (instance == null) instance = new DrillOutThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.DrillOutThemeAnimation ui;

        public new Xaml.Media.Animation.DrillOutThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.DrillOutThemeAnimation(DrillOutThemeAnimation view) => view?.UI;

        public static implicit operator DrillOutThemeAnimation(Xaml.Media.Animation.DrillOutThemeAnimation ui) => DrillOutThemeAnimation.StartChain(ui);

        public DrillOutThemeAnimation Invoke(Action<Xaml.Media.Animation.DrillOutThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected DrillOutThemeAnimation() { }
    }

    public static partial class DrillOutThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.DrillOutThemeAnimation.EntranceTarget"/></summary>
        public static TView EntranceTarget<TView>(this TView view, Xaml.DependencyObject value) where TView : DrillOutThemeAnimation { view.UI.EntranceTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.DrillOutThemeAnimation.EntranceTargetName"/></summary>
        public static TView EntranceTargetName<TView>(this TView view, string value) where TView : DrillOutThemeAnimation { view.UI.EntranceTargetName = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.DrillOutThemeAnimation.ExitTarget"/></summary>
        public static TView ExitTarget<TView>(this TView view, Xaml.DependencyObject value) where TView : DrillOutThemeAnimation { view.UI.ExitTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.DrillOutThemeAnimation.ExitTargetName"/></summary>
        public static TView ExitTargetName<TView>(this TView view, string value) where TView : DrillOutThemeAnimation { view.UI.ExitTargetName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DrillOutThemeAnimation.EntranceTargetName"/></summary>
        public static DependencyProperty<TTarget, string> EntranceTargetName<TTarget>(this TTarget target) where TTarget : DrillOutThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.DrillOutThemeAnimation.EntranceTargetNameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DrillOutThemeAnimation.EntranceTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> EntranceTarget<TTarget>(this TTarget target) where TTarget : DrillOutThemeAnimation
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Media.Animation.DrillOutThemeAnimation.EntranceTargetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DrillOutThemeAnimation.ExitTargetName"/></summary>
        public static DependencyProperty<TTarget, string> ExitTargetName<TTarget>(this TTarget target) where TTarget : DrillOutThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.DrillOutThemeAnimation.ExitTargetNameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DrillOutThemeAnimation.ExitTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> ExitTarget<TTarget>(this TTarget target) where TTarget : DrillOutThemeAnimation
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Media.Animation.DrillOutThemeAnimation.ExitTargetProperty);
    }
}

namespace CSharpMarkup.WinUI // DropTargetItemThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.DropTargetItemThemeAnimation"/></summary>
        public static DropTargetItemThemeAnimation DropTargetItemThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, string TargetName = default)
        {
            var ui = new Xaml.Media.Animation.DropTargetItemThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (TargetName is not null) ui.TargetName = TargetName;
            return CSharpMarkup.WinUI.DropTargetItemThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.DropTargetItemThemeAnimation"/></summary>
        public static DropTargetItemThemeAnimation DropTargetItemThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.DropTargetItemThemeAnimation();
            return CSharpMarkup.WinUI.DropTargetItemThemeAnimation.StartChain(ui);
        }
    }

    public partial class DropTargetItemThemeAnimation : Timeline, IUI<Xaml.Media.Animation.DropTargetItemThemeAnimation>
    {
        static DropTargetItemThemeAnimation instance;

        internal static DropTargetItemThemeAnimation StartChain(Xaml.Media.Animation.DropTargetItemThemeAnimation ui)
        {
            if (instance == null) instance = new DropTargetItemThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.DropTargetItemThemeAnimation ui;

        public new Xaml.Media.Animation.DropTargetItemThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.DropTargetItemThemeAnimation(DropTargetItemThemeAnimation view) => view?.UI;

        public static implicit operator DropTargetItemThemeAnimation(Xaml.Media.Animation.DropTargetItemThemeAnimation ui) => DropTargetItemThemeAnimation.StartChain(ui);

        public DropTargetItemThemeAnimation Invoke(Action<Xaml.Media.Animation.DropTargetItemThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected DropTargetItemThemeAnimation() { }
    }

    public static partial class DropTargetItemThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.DropTargetItemThemeAnimation.TargetName"/></summary>
        public static TView TargetName<TView>(this TView view, string value) where TView : DropTargetItemThemeAnimation { view.UI.TargetName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.DropTargetItemThemeAnimation.TargetName"/></summary>
        public static DependencyProperty<TTarget, string> TargetName<TTarget>(this TTarget target) where TTarget : DropTargetItemThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.DropTargetItemThemeAnimation.TargetNameProperty);
    }
}

namespace CSharpMarkup.WinUI // EasingColorKeyFrame
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.EasingColorKeyFrame"/></summary>
        public static EasingColorKeyFrame EasingColorKeyFrame(Xaml.Media.Animation.EasingFunctionBase EasingFunction = default)
        {
            var ui = new Xaml.Media.Animation.EasingColorKeyFrame();
            if (EasingFunction is not null) ui.EasingFunction = EasingFunction;
            return CSharpMarkup.WinUI.EasingColorKeyFrame.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.EasingColorKeyFrame"/></summary>
        public static EasingColorKeyFrame EasingColorKeyFrame()
        {
            var ui = new Xaml.Media.Animation.EasingColorKeyFrame();
            return CSharpMarkup.WinUI.EasingColorKeyFrame.StartChain(ui);
        }
    }

    public partial class EasingColorKeyFrame : ColorKeyFrame, IUI<Xaml.Media.Animation.EasingColorKeyFrame>
    {
        static EasingColorKeyFrame instance;

        internal static EasingColorKeyFrame StartChain(Xaml.Media.Animation.EasingColorKeyFrame ui)
        {
            if (instance == null) instance = new EasingColorKeyFrame();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.EasingColorKeyFrame ui;

        public new Xaml.Media.Animation.EasingColorKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.EasingColorKeyFrame(EasingColorKeyFrame view) => view?.UI;

        public static implicit operator EasingColorKeyFrame(Xaml.Media.Animation.EasingColorKeyFrame ui) => EasingColorKeyFrame.StartChain(ui);

        public EasingColorKeyFrame Invoke(Action<Xaml.Media.Animation.EasingColorKeyFrame> action) { action?.Invoke(UI); return this; }

        protected EasingColorKeyFrame() { }
    }

    public static partial class EasingColorKeyFrameExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.EasingColorKeyFrame.EasingFunction"/></summary>
        public static TView EasingFunction<TView>(this TView view, Xaml.Media.Animation.EasingFunctionBase value) where TView : EasingColorKeyFrame { view.UI.EasingFunction = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.EasingColorKeyFrame.EasingFunction"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.EasingFunctionBase> EasingFunction<TTarget>(this TTarget target) where TTarget : EasingColorKeyFrame
        => DependencyProperty<TTarget, Xaml.Media.Animation.EasingFunctionBase>.Get(target, Xaml.Media.Animation.EasingColorKeyFrame.EasingFunctionProperty);
    }
}

namespace CSharpMarkup.WinUI // EasingDoubleKeyFrame
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.EasingDoubleKeyFrame"/></summary>
        public static EasingDoubleKeyFrame EasingDoubleKeyFrame(Xaml.Media.Animation.EasingFunctionBase EasingFunction = default)
        {
            var ui = new Xaml.Media.Animation.EasingDoubleKeyFrame();
            if (EasingFunction is not null) ui.EasingFunction = EasingFunction;
            return CSharpMarkup.WinUI.EasingDoubleKeyFrame.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.EasingDoubleKeyFrame"/></summary>
        public static EasingDoubleKeyFrame EasingDoubleKeyFrame()
        {
            var ui = new Xaml.Media.Animation.EasingDoubleKeyFrame();
            return CSharpMarkup.WinUI.EasingDoubleKeyFrame.StartChain(ui);
        }
    }

    public partial class EasingDoubleKeyFrame : DoubleKeyFrame, IUI<Xaml.Media.Animation.EasingDoubleKeyFrame>
    {
        static EasingDoubleKeyFrame instance;

        internal static EasingDoubleKeyFrame StartChain(Xaml.Media.Animation.EasingDoubleKeyFrame ui)
        {
            if (instance == null) instance = new EasingDoubleKeyFrame();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.EasingDoubleKeyFrame ui;

        public new Xaml.Media.Animation.EasingDoubleKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.EasingDoubleKeyFrame(EasingDoubleKeyFrame view) => view?.UI;

        public static implicit operator EasingDoubleKeyFrame(Xaml.Media.Animation.EasingDoubleKeyFrame ui) => EasingDoubleKeyFrame.StartChain(ui);

        public EasingDoubleKeyFrame Invoke(Action<Xaml.Media.Animation.EasingDoubleKeyFrame> action) { action?.Invoke(UI); return this; }

        protected EasingDoubleKeyFrame() { }
    }

    public static partial class EasingDoubleKeyFrameExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.EasingDoubleKeyFrame.EasingFunction"/></summary>
        public static TView EasingFunction<TView>(this TView view, Xaml.Media.Animation.EasingFunctionBase value) where TView : EasingDoubleKeyFrame { view.UI.EasingFunction = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.EasingDoubleKeyFrame.EasingFunction"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.EasingFunctionBase> EasingFunction<TTarget>(this TTarget target) where TTarget : EasingDoubleKeyFrame
        => DependencyProperty<TTarget, Xaml.Media.Animation.EasingFunctionBase>.Get(target, Xaml.Media.Animation.EasingDoubleKeyFrame.EasingFunctionProperty);
    }
}

namespace CSharpMarkup.WinUI // EasingFunctionBase
{
    public partial class EasingFunctionBase : DependencyObject, IUI<Xaml.Media.Animation.EasingFunctionBase>
    {
        Xaml.Media.Animation.EasingFunctionBase ui;

        public new Xaml.Media.Animation.EasingFunctionBase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public EasingFunctionBase Invoke(Action<Xaml.Media.Animation.EasingFunctionBase> action) { action?.Invoke(UI); return this; }

        protected EasingFunctionBase() { }
    }

    public static partial class EasingFunctionBaseExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.EasingFunctionBase.EasingMode"/></summary>
        public static TView EasingMode<TView>(this TView view, Xaml.Media.Animation.EasingMode value) where TView : EasingFunctionBase { view.UI.EasingMode = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.EasingFunctionBase.EasingMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.EasingMode> EasingMode<TTarget>(this TTarget target) where TTarget : EasingFunctionBase
        => DependencyProperty<TTarget, Xaml.Media.Animation.EasingMode>.Get(target, Xaml.Media.Animation.EasingFunctionBase.EasingModeProperty);
    }
}

namespace CSharpMarkup.WinUI // EasingPointKeyFrame
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.EasingPointKeyFrame"/></summary>
        public static EasingPointKeyFrame EasingPointKeyFrame(Xaml.Media.Animation.EasingFunctionBase EasingFunction = default)
        {
            var ui = new Xaml.Media.Animation.EasingPointKeyFrame();
            if (EasingFunction is not null) ui.EasingFunction = EasingFunction;
            return CSharpMarkup.WinUI.EasingPointKeyFrame.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.EasingPointKeyFrame"/></summary>
        public static EasingPointKeyFrame EasingPointKeyFrame()
        {
            var ui = new Xaml.Media.Animation.EasingPointKeyFrame();
            return CSharpMarkup.WinUI.EasingPointKeyFrame.StartChain(ui);
        }
    }

    public partial class EasingPointKeyFrame : PointKeyFrame, IUI<Xaml.Media.Animation.EasingPointKeyFrame>
    {
        static EasingPointKeyFrame instance;

        internal static EasingPointKeyFrame StartChain(Xaml.Media.Animation.EasingPointKeyFrame ui)
        {
            if (instance == null) instance = new EasingPointKeyFrame();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.EasingPointKeyFrame ui;

        public new Xaml.Media.Animation.EasingPointKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.EasingPointKeyFrame(EasingPointKeyFrame view) => view?.UI;

        public static implicit operator EasingPointKeyFrame(Xaml.Media.Animation.EasingPointKeyFrame ui) => EasingPointKeyFrame.StartChain(ui);

        public EasingPointKeyFrame Invoke(Action<Xaml.Media.Animation.EasingPointKeyFrame> action) { action?.Invoke(UI); return this; }

        protected EasingPointKeyFrame() { }
    }

    public static partial class EasingPointKeyFrameExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.EasingPointKeyFrame.EasingFunction"/></summary>
        public static TView EasingFunction<TView>(this TView view, Xaml.Media.Animation.EasingFunctionBase value) where TView : EasingPointKeyFrame { view.UI.EasingFunction = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.EasingPointKeyFrame.EasingFunction"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.EasingFunctionBase> EasingFunction<TTarget>(this TTarget target) where TTarget : EasingPointKeyFrame
        => DependencyProperty<TTarget, Xaml.Media.Animation.EasingFunctionBase>.Get(target, Xaml.Media.Animation.EasingPointKeyFrame.EasingFunctionProperty);
    }
}

namespace CSharpMarkup.WinUI // EdgeUIThemeTransition
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.EdgeUIThemeTransition"/></summary>
        public static EdgeUIThemeTransition EdgeUIThemeTransition(Xaml.Controls.Primitives.EdgeTransitionLocation? Edge = default)
        {
            var ui = new Xaml.Media.Animation.EdgeUIThemeTransition();
            if (Edge is not null) ui.Edge = Edge.Value;
            return CSharpMarkup.WinUI.EdgeUIThemeTransition.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.EdgeUIThemeTransition"/></summary>
        public static EdgeUIThemeTransition EdgeUIThemeTransition()
        {
            var ui = new Xaml.Media.Animation.EdgeUIThemeTransition();
            return CSharpMarkup.WinUI.EdgeUIThemeTransition.StartChain(ui);
        }
    }

    public partial class EdgeUIThemeTransition : Transition, IUI<Xaml.Media.Animation.EdgeUIThemeTransition>
    {
        static EdgeUIThemeTransition instance;

        internal static EdgeUIThemeTransition StartChain(Xaml.Media.Animation.EdgeUIThemeTransition ui)
        {
            if (instance == null) instance = new EdgeUIThemeTransition();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.EdgeUIThemeTransition ui;

        public new Xaml.Media.Animation.EdgeUIThemeTransition UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.EdgeUIThemeTransition(EdgeUIThemeTransition view) => view?.UI;

        public static implicit operator EdgeUIThemeTransition(Xaml.Media.Animation.EdgeUIThemeTransition ui) => EdgeUIThemeTransition.StartChain(ui);

        public EdgeUIThemeTransition Invoke(Action<Xaml.Media.Animation.EdgeUIThemeTransition> action) { action?.Invoke(UI); return this; }

        protected EdgeUIThemeTransition() { }
    }

    public static partial class EdgeUIThemeTransitionExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.EdgeUIThemeTransition.Edge"/></summary>
        public static TView Edge<TView>(this TView view, Xaml.Controls.Primitives.EdgeTransitionLocation value) where TView : EdgeUIThemeTransition { view.UI.Edge = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.EdgeUIThemeTransition.Edge"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.EdgeTransitionLocation> Edge<TTarget>(this TTarget target) where TTarget : EdgeUIThemeTransition
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.EdgeTransitionLocation>.Get(target, Xaml.Media.Animation.EdgeUIThemeTransition.EdgeProperty);
    }
}

namespace CSharpMarkup.WinUI // ElasticEase
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.ElasticEase"/></summary>
        public static ElasticEase ElasticEase(int? Oscillations = default, double? Springiness = default)
        {
            var ui = new Xaml.Media.Animation.ElasticEase();
            if (Oscillations is not null) ui.Oscillations = Oscillations.Value;
            if (Springiness is not null) ui.Springiness = Springiness.Value;
            return CSharpMarkup.WinUI.ElasticEase.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.ElasticEase"/></summary>
        public static ElasticEase ElasticEase()
        {
            var ui = new Xaml.Media.Animation.ElasticEase();
            return CSharpMarkup.WinUI.ElasticEase.StartChain(ui);
        }
    }

    public partial class ElasticEase : EasingFunctionBase, IUI<Xaml.Media.Animation.ElasticEase>
    {
        static ElasticEase instance;

        internal static ElasticEase StartChain(Xaml.Media.Animation.ElasticEase ui)
        {
            if (instance == null) instance = new ElasticEase();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.ElasticEase ui;

        public new Xaml.Media.Animation.ElasticEase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.ElasticEase(ElasticEase view) => view?.UI;

        public static implicit operator ElasticEase(Xaml.Media.Animation.ElasticEase ui) => ElasticEase.StartChain(ui);

        public ElasticEase Invoke(Action<Xaml.Media.Animation.ElasticEase> action) { action?.Invoke(UI); return this; }

        protected ElasticEase() { }
    }

    public static partial class ElasticEaseExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.ElasticEase.Oscillations"/></summary>
        public static TView Oscillations<TView>(this TView view, int value) where TView : ElasticEase { view.UI.Oscillations = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.ElasticEase.Springiness"/></summary>
        public static TView Springiness<TView>(this TView view, double value) where TView : ElasticEase { view.UI.Springiness = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ElasticEase.Oscillations"/></summary>
        public static DependencyProperty<TTarget, int> Oscillations<TTarget>(this TTarget target) where TTarget : ElasticEase
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Media.Animation.ElasticEase.OscillationsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ElasticEase.Springiness"/></summary>
        public static DependencyProperty<TTarget, double> Springiness<TTarget>(this TTarget target) where TTarget : ElasticEase
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.ElasticEase.SpringinessProperty);
    }
}

namespace CSharpMarkup.WinUI // EntranceNavigationTransitionInfo
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.EntranceNavigationTransitionInfo"/></summary>
        public static EntranceNavigationTransitionInfo EntranceNavigationTransitionInfo()
        {
            var ui = new Xaml.Media.Animation.EntranceNavigationTransitionInfo();
            return CSharpMarkup.WinUI.EntranceNavigationTransitionInfo.StartChain(ui);
        }
    }

    public partial class EntranceNavigationTransitionInfo : NavigationTransitionInfo, IUI<Xaml.Media.Animation.EntranceNavigationTransitionInfo>
    {
        static EntranceNavigationTransitionInfo instance;

        internal static EntranceNavigationTransitionInfo StartChain(Xaml.Media.Animation.EntranceNavigationTransitionInfo ui)
        {
            if (instance == null) instance = new EntranceNavigationTransitionInfo();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.EntranceNavigationTransitionInfo ui;

        public new Xaml.Media.Animation.EntranceNavigationTransitionInfo UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.EntranceNavigationTransitionInfo(EntranceNavigationTransitionInfo view) => view?.UI;

        public static implicit operator EntranceNavigationTransitionInfo(Xaml.Media.Animation.EntranceNavigationTransitionInfo ui) => EntranceNavigationTransitionInfo.StartChain(ui);

        public EntranceNavigationTransitionInfo Invoke(Action<Xaml.Media.Animation.EntranceNavigationTransitionInfo> action) { action?.Invoke(UI); return this; }

        protected EntranceNavigationTransitionInfo() { }
    }

    public static partial class EntranceNavigationTransitionInfoExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.EntranceNavigationTransitionInfo.IsTargetElement"/></summary>
        public static TTarget EntranceNavigationTransitionInfo_IsTargetElement<TTarget>(this TTarget target, bool value) where TTarget : UIElement
        { Xaml.Media.Animation.EntranceNavigationTransitionInfo.SetIsTargetElement(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.EntranceNavigationTransitionInfo.IsTargetElement"/></summary>
        public static DependencyProperty<TTarget, bool> EntranceNavigationTransitionInfo_IsTargetElement<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.EntranceNavigationTransitionInfo.IsTargetElementProperty);
    }
}

namespace CSharpMarkup.WinUI // EntranceThemeTransition
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.EntranceThemeTransition"/></summary>
        public static EntranceThemeTransition EntranceThemeTransition(double? FromHorizontalOffset = default, double? FromVerticalOffset = default, bool? IsStaggeringEnabled = default)
        {
            var ui = new Xaml.Media.Animation.EntranceThemeTransition();
            if (FromHorizontalOffset is not null) ui.FromHorizontalOffset = FromHorizontalOffset.Value;
            if (FromVerticalOffset is not null) ui.FromVerticalOffset = FromVerticalOffset.Value;
            if (IsStaggeringEnabled is not null) ui.IsStaggeringEnabled = IsStaggeringEnabled.Value;
            return CSharpMarkup.WinUI.EntranceThemeTransition.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.EntranceThemeTransition"/></summary>
        public static EntranceThemeTransition EntranceThemeTransition()
        {
            var ui = new Xaml.Media.Animation.EntranceThemeTransition();
            return CSharpMarkup.WinUI.EntranceThemeTransition.StartChain(ui);
        }
    }

    public partial class EntranceThemeTransition : Transition, IUI<Xaml.Media.Animation.EntranceThemeTransition>
    {
        static EntranceThemeTransition instance;

        internal static EntranceThemeTransition StartChain(Xaml.Media.Animation.EntranceThemeTransition ui)
        {
            if (instance == null) instance = new EntranceThemeTransition();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.EntranceThemeTransition ui;

        public new Xaml.Media.Animation.EntranceThemeTransition UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.EntranceThemeTransition(EntranceThemeTransition view) => view?.UI;

        public static implicit operator EntranceThemeTransition(Xaml.Media.Animation.EntranceThemeTransition ui) => EntranceThemeTransition.StartChain(ui);

        public EntranceThemeTransition Invoke(Action<Xaml.Media.Animation.EntranceThemeTransition> action) { action?.Invoke(UI); return this; }

        protected EntranceThemeTransition() { }
    }

    public static partial class EntranceThemeTransitionExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.EntranceThemeTransition.FromHorizontalOffset"/></summary>
        public static TView FromHorizontalOffset<TView>(this TView view, double value) where TView : EntranceThemeTransition { view.UI.FromHorizontalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.EntranceThemeTransition.FromVerticalOffset"/></summary>
        public static TView FromVerticalOffset<TView>(this TView view, double value) where TView : EntranceThemeTransition { view.UI.FromVerticalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.EntranceThemeTransition.IsStaggeringEnabled"/></summary>
        public static TView IsStaggeringEnabled<TView>(this TView view, bool value) where TView : EntranceThemeTransition { view.UI.IsStaggeringEnabled = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.EntranceThemeTransition.FromHorizontalOffset"/></summary>
        public static DependencyProperty<TTarget, double> FromHorizontalOffset<TTarget>(this TTarget target) where TTarget : EntranceThemeTransition
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.EntranceThemeTransition.FromHorizontalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.EntranceThemeTransition.FromVerticalOffset"/></summary>
        public static DependencyProperty<TTarget, double> FromVerticalOffset<TTarget>(this TTarget target) where TTarget : EntranceThemeTransition
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.EntranceThemeTransition.FromVerticalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.EntranceThemeTransition.IsStaggeringEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsStaggeringEnabled<TTarget>(this TTarget target) where TTarget : EntranceThemeTransition
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.EntranceThemeTransition.IsStaggeringEnabledProperty);
    }
}

namespace CSharpMarkup.WinUI // ExponentialEase
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.ExponentialEase"/></summary>
        public static ExponentialEase ExponentialEase(double? Exponent = default)
        {
            var ui = new Xaml.Media.Animation.ExponentialEase();
            if (Exponent is not null) ui.Exponent = Exponent.Value;
            return CSharpMarkup.WinUI.ExponentialEase.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.ExponentialEase"/></summary>
        public static ExponentialEase ExponentialEase()
        {
            var ui = new Xaml.Media.Animation.ExponentialEase();
            return CSharpMarkup.WinUI.ExponentialEase.StartChain(ui);
        }
    }

    public partial class ExponentialEase : EasingFunctionBase, IUI<Xaml.Media.Animation.ExponentialEase>
    {
        static ExponentialEase instance;

        internal static ExponentialEase StartChain(Xaml.Media.Animation.ExponentialEase ui)
        {
            if (instance == null) instance = new ExponentialEase();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.ExponentialEase ui;

        public new Xaml.Media.Animation.ExponentialEase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.ExponentialEase(ExponentialEase view) => view?.UI;

        public static implicit operator ExponentialEase(Xaml.Media.Animation.ExponentialEase ui) => ExponentialEase.StartChain(ui);

        public ExponentialEase Invoke(Action<Xaml.Media.Animation.ExponentialEase> action) { action?.Invoke(UI); return this; }

        protected ExponentialEase() { }
    }

    public static partial class ExponentialEaseExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.ExponentialEase.Exponent"/></summary>
        public static TView Exponent<TView>(this TView view, double value) where TView : ExponentialEase { view.UI.Exponent = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ExponentialEase.Exponent"/></summary>
        public static DependencyProperty<TTarget, double> Exponent<TTarget>(this TTarget target) where TTarget : ExponentialEase
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.ExponentialEase.ExponentProperty);
    }
}

namespace CSharpMarkup.WinUI // FadeInThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.FadeInThemeAnimation"/></summary>
        public static FadeInThemeAnimation FadeInThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, string TargetName = default)
        {
            var ui = new Xaml.Media.Animation.FadeInThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (TargetName is not null) ui.TargetName = TargetName;
            return CSharpMarkup.WinUI.FadeInThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.FadeInThemeAnimation"/></summary>
        public static FadeInThemeAnimation FadeInThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.FadeInThemeAnimation();
            return CSharpMarkup.WinUI.FadeInThemeAnimation.StartChain(ui);
        }
    }

    public partial class FadeInThemeAnimation : Timeline, IUI<Xaml.Media.Animation.FadeInThemeAnimation>
    {
        static FadeInThemeAnimation instance;

        internal static FadeInThemeAnimation StartChain(Xaml.Media.Animation.FadeInThemeAnimation ui)
        {
            if (instance == null) instance = new FadeInThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.FadeInThemeAnimation ui;

        public new Xaml.Media.Animation.FadeInThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.FadeInThemeAnimation(FadeInThemeAnimation view) => view?.UI;

        public static implicit operator FadeInThemeAnimation(Xaml.Media.Animation.FadeInThemeAnimation ui) => FadeInThemeAnimation.StartChain(ui);

        public FadeInThemeAnimation Invoke(Action<Xaml.Media.Animation.FadeInThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected FadeInThemeAnimation() { }
    }

    public static partial class FadeInThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.FadeInThemeAnimation.TargetName"/></summary>
        public static TView TargetName<TView>(this TView view, string value) where TView : FadeInThemeAnimation { view.UI.TargetName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.FadeInThemeAnimation.TargetName"/></summary>
        public static DependencyProperty<TTarget, string> TargetName<TTarget>(this TTarget target) where TTarget : FadeInThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.FadeInThemeAnimation.TargetNameProperty);
    }
}

namespace CSharpMarkup.WinUI // FadeOutThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.FadeOutThemeAnimation"/></summary>
        public static FadeOutThemeAnimation FadeOutThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, string TargetName = default)
        {
            var ui = new Xaml.Media.Animation.FadeOutThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (TargetName is not null) ui.TargetName = TargetName;
            return CSharpMarkup.WinUI.FadeOutThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.FadeOutThemeAnimation"/></summary>
        public static FadeOutThemeAnimation FadeOutThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.FadeOutThemeAnimation();
            return CSharpMarkup.WinUI.FadeOutThemeAnimation.StartChain(ui);
        }
    }

    public partial class FadeOutThemeAnimation : Timeline, IUI<Xaml.Media.Animation.FadeOutThemeAnimation>
    {
        static FadeOutThemeAnimation instance;

        internal static FadeOutThemeAnimation StartChain(Xaml.Media.Animation.FadeOutThemeAnimation ui)
        {
            if (instance == null) instance = new FadeOutThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.FadeOutThemeAnimation ui;

        public new Xaml.Media.Animation.FadeOutThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.FadeOutThemeAnimation(FadeOutThemeAnimation view) => view?.UI;

        public static implicit operator FadeOutThemeAnimation(Xaml.Media.Animation.FadeOutThemeAnimation ui) => FadeOutThemeAnimation.StartChain(ui);

        public FadeOutThemeAnimation Invoke(Action<Xaml.Media.Animation.FadeOutThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected FadeOutThemeAnimation() { }
    }

    public static partial class FadeOutThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.FadeOutThemeAnimation.TargetName"/></summary>
        public static TView TargetName<TView>(this TView view, string value) where TView : FadeOutThemeAnimation { view.UI.TargetName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.FadeOutThemeAnimation.TargetName"/></summary>
        public static DependencyProperty<TTarget, string> TargetName<TTarget>(this TTarget target) where TTarget : FadeOutThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.FadeOutThemeAnimation.TargetNameProperty);
    }
}

namespace CSharpMarkup.WinUI // KeySpline
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.KeySpline"/></summary>
        public static KeySpline KeySpline(CSharpMarkup.WinUI.to.Point? ControlPoint1 = default, CSharpMarkup.WinUI.to.Point? ControlPoint2 = default)
        {
            var ui = new Xaml.Media.Animation.KeySpline();
            if (ControlPoint1 is not null) ui.ControlPoint1 = ControlPoint1.Value;
            if (ControlPoint2 is not null) ui.ControlPoint2 = ControlPoint2.Value;
            return CSharpMarkup.WinUI.KeySpline.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.KeySpline"/></summary>
        public static KeySpline KeySpline()
        {
            var ui = new Xaml.Media.Animation.KeySpline();
            return CSharpMarkup.WinUI.KeySpline.StartChain(ui);
        }
    }

    public partial class KeySpline : DependencyObject, IUI<Xaml.Media.Animation.KeySpline>
    {
        static KeySpline instance;

        internal static KeySpline StartChain(Xaml.Media.Animation.KeySpline ui)
        {
            if (instance == null) instance = new KeySpline();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.KeySpline ui;

        public new Xaml.Media.Animation.KeySpline UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.KeySpline(KeySpline view) => view?.UI;

        public static implicit operator KeySpline(Xaml.Media.Animation.KeySpline ui) => KeySpline.StartChain(ui);

        public KeySpline Invoke(Action<Xaml.Media.Animation.KeySpline> action) { action?.Invoke(UI); return this; }

        protected KeySpline() { }
    }

    public static partial class KeySplineExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.KeySpline.ControlPoint1"/></summary>
        public static TView ControlPoint1<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : KeySpline { view.UI.ControlPoint1 = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.KeySpline.ControlPoint2"/></summary>
        public static TView ControlPoint2<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : KeySpline { view.UI.ControlPoint2 = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // LinearColorKeyFrame
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.LinearColorKeyFrame"/></summary>
        public static LinearColorKeyFrame LinearColorKeyFrame()
        {
            var ui = new Xaml.Media.Animation.LinearColorKeyFrame();
            return CSharpMarkup.WinUI.LinearColorKeyFrame.StartChain(ui);
        }
    }

    public partial class LinearColorKeyFrame : ColorKeyFrame, IUI<Xaml.Media.Animation.LinearColorKeyFrame>
    {
        static LinearColorKeyFrame instance;

        internal static LinearColorKeyFrame StartChain(Xaml.Media.Animation.LinearColorKeyFrame ui)
        {
            if (instance == null) instance = new LinearColorKeyFrame();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.LinearColorKeyFrame ui;

        public new Xaml.Media.Animation.LinearColorKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.LinearColorKeyFrame(LinearColorKeyFrame view) => view?.UI;

        public static implicit operator LinearColorKeyFrame(Xaml.Media.Animation.LinearColorKeyFrame ui) => LinearColorKeyFrame.StartChain(ui);

        public LinearColorKeyFrame Invoke(Action<Xaml.Media.Animation.LinearColorKeyFrame> action) { action?.Invoke(UI); return this; }

        protected LinearColorKeyFrame() { }
    }
}

namespace CSharpMarkup.WinUI // LinearDoubleKeyFrame
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.LinearDoubleKeyFrame"/></summary>
        public static LinearDoubleKeyFrame LinearDoubleKeyFrame()
        {
            var ui = new Xaml.Media.Animation.LinearDoubleKeyFrame();
            return CSharpMarkup.WinUI.LinearDoubleKeyFrame.StartChain(ui);
        }
    }

    public partial class LinearDoubleKeyFrame : DoubleKeyFrame, IUI<Xaml.Media.Animation.LinearDoubleKeyFrame>
    {
        static LinearDoubleKeyFrame instance;

        internal static LinearDoubleKeyFrame StartChain(Xaml.Media.Animation.LinearDoubleKeyFrame ui)
        {
            if (instance == null) instance = new LinearDoubleKeyFrame();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.LinearDoubleKeyFrame ui;

        public new Xaml.Media.Animation.LinearDoubleKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.LinearDoubleKeyFrame(LinearDoubleKeyFrame view) => view?.UI;

        public static implicit operator LinearDoubleKeyFrame(Xaml.Media.Animation.LinearDoubleKeyFrame ui) => LinearDoubleKeyFrame.StartChain(ui);

        public LinearDoubleKeyFrame Invoke(Action<Xaml.Media.Animation.LinearDoubleKeyFrame> action) { action?.Invoke(UI); return this; }

        protected LinearDoubleKeyFrame() { }
    }
}

namespace CSharpMarkup.WinUI // LinearPointKeyFrame
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.LinearPointKeyFrame"/></summary>
        public static LinearPointKeyFrame LinearPointKeyFrame()
        {
            var ui = new Xaml.Media.Animation.LinearPointKeyFrame();
            return CSharpMarkup.WinUI.LinearPointKeyFrame.StartChain(ui);
        }
    }

    public partial class LinearPointKeyFrame : PointKeyFrame, IUI<Xaml.Media.Animation.LinearPointKeyFrame>
    {
        static LinearPointKeyFrame instance;

        internal static LinearPointKeyFrame StartChain(Xaml.Media.Animation.LinearPointKeyFrame ui)
        {
            if (instance == null) instance = new LinearPointKeyFrame();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.LinearPointKeyFrame ui;

        public new Xaml.Media.Animation.LinearPointKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.LinearPointKeyFrame(LinearPointKeyFrame view) => view?.UI;

        public static implicit operator LinearPointKeyFrame(Xaml.Media.Animation.LinearPointKeyFrame ui) => LinearPointKeyFrame.StartChain(ui);

        public LinearPointKeyFrame Invoke(Action<Xaml.Media.Animation.LinearPointKeyFrame> action) { action?.Invoke(UI); return this; }

        protected LinearPointKeyFrame() { }
    }
}

namespace CSharpMarkup.WinUI // NavigationThemeTransition
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.NavigationThemeTransition"/></summary>
        public static NavigationThemeTransition NavigationThemeTransition(Xaml.Media.Animation.NavigationTransitionInfo DefaultNavigationTransitionInfo)
        {
            var ui = new Xaml.Media.Animation.NavigationThemeTransition();
            if (DefaultNavigationTransitionInfo is not null) ui.DefaultNavigationTransitionInfo = DefaultNavigationTransitionInfo;
            return CSharpMarkup.WinUI.NavigationThemeTransition.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.NavigationThemeTransition"/></summary>
        public static NavigationThemeTransition NavigationThemeTransition()
        {
            var ui = new Xaml.Media.Animation.NavigationThemeTransition();
            return CSharpMarkup.WinUI.NavigationThemeTransition.StartChain(ui);
        }
    }

    public partial class NavigationThemeTransition : Transition, IUI<Xaml.Media.Animation.NavigationThemeTransition>
    {
        static NavigationThemeTransition instance;

        internal static NavigationThemeTransition StartChain(Xaml.Media.Animation.NavigationThemeTransition ui)
        {
            if (instance == null) instance = new NavigationThemeTransition();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.NavigationThemeTransition ui;

        public new Xaml.Media.Animation.NavigationThemeTransition UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.NavigationThemeTransition(NavigationThemeTransition view) => view?.UI;

        public static implicit operator NavigationThemeTransition(Xaml.Media.Animation.NavigationThemeTransition ui) => NavigationThemeTransition.StartChain(ui);

        public NavigationThemeTransition Invoke(Action<Xaml.Media.Animation.NavigationThemeTransition> action) { action?.Invoke(UI); return this; }

        protected NavigationThemeTransition() { }
    }

    public static partial class NavigationThemeTransitionExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.NavigationThemeTransition.DefaultNavigationTransitionInfo"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.NavigationTransitionInfo> DefaultNavigationTransitionInfo<TTarget>(this TTarget target) where TTarget : NavigationThemeTransition
        => DependencyProperty<TTarget, Xaml.Media.Animation.NavigationTransitionInfo>.Get(target, Xaml.Media.Animation.NavigationThemeTransition.DefaultNavigationTransitionInfoProperty);
    }
}

namespace CSharpMarkup.WinUI // NavigationTransitionInfo
{
    public partial class NavigationTransitionInfo : DependencyObject, IUI<Xaml.Media.Animation.NavigationTransitionInfo>
    {
        Xaml.Media.Animation.NavigationTransitionInfo ui;

        public new Xaml.Media.Animation.NavigationTransitionInfo UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public NavigationTransitionInfo Invoke(Action<Xaml.Media.Animation.NavigationTransitionInfo> action) { action?.Invoke(UI); return this; }

        protected NavigationTransitionInfo() { }
    }
}

namespace CSharpMarkup.WinUI // ObjectAnimationUsingKeyFrames
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.ObjectAnimationUsingKeyFrames"/></summary>
        public static ObjectAnimationUsingKeyFrames ObjectAnimationUsingKeyFrames(params Xaml.Media.Animation.ObjectKeyFrame[] KeyFrames)
        {
            var ui = new Xaml.Media.Animation.ObjectAnimationUsingKeyFrames();
            for (int i = 0; i < KeyFrames.Length; i++)
            {
                var child = KeyFrames[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Media.Animation.ObjectKeyFrame>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.KeyFrames.Add(subChildren[j]);
                else
                    ui.KeyFrames.Add(child);
            }
            return CSharpMarkup.WinUI.ObjectAnimationUsingKeyFrames.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.ObjectAnimationUsingKeyFrames"/></summary>
        public static ObjectAnimationUsingKeyFrames ObjectAnimationUsingKeyFrames()
        {
            var ui = new Xaml.Media.Animation.ObjectAnimationUsingKeyFrames();
            return CSharpMarkup.WinUI.ObjectAnimationUsingKeyFrames.StartChain(ui);
        }
    }

    public partial class ObjectAnimationUsingKeyFrames : Timeline, IUI<Xaml.Media.Animation.ObjectAnimationUsingKeyFrames>
    {
        static ObjectAnimationUsingKeyFrames instance;

        internal static ObjectAnimationUsingKeyFrames StartChain(Xaml.Media.Animation.ObjectAnimationUsingKeyFrames ui)
        {
            if (instance == null) instance = new ObjectAnimationUsingKeyFrames();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.ObjectAnimationUsingKeyFrames ui;

        public new Xaml.Media.Animation.ObjectAnimationUsingKeyFrames UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.ObjectAnimationUsingKeyFrames(ObjectAnimationUsingKeyFrames view) => view?.UI;

        public static implicit operator ObjectAnimationUsingKeyFrames(Xaml.Media.Animation.ObjectAnimationUsingKeyFrames ui) => ObjectAnimationUsingKeyFrames.StartChain(ui);

        public ObjectAnimationUsingKeyFrames Invoke(Action<Xaml.Media.Animation.ObjectAnimationUsingKeyFrames> action) { action?.Invoke(UI); return this; }

        protected ObjectAnimationUsingKeyFrames() { }
    }

    public static partial class ObjectAnimationUsingKeyFramesExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.ObjectAnimationUsingKeyFrames.EnableDependentAnimation"/></summary>
        public static TView EnableDependentAnimation<TView>(this TView view, bool value) where TView : ObjectAnimationUsingKeyFrames { view.UI.EnableDependentAnimation = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ObjectAnimationUsingKeyFrames.EnableDependentAnimation"/></summary>
        public static DependencyProperty<TTarget, bool> EnableDependentAnimation<TTarget>(this TTarget target) where TTarget : ObjectAnimationUsingKeyFrames
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.ObjectAnimationUsingKeyFrames.EnableDependentAnimationProperty);
    }
}

namespace CSharpMarkup.WinUI // ObjectKeyFrame
{
    public partial class ObjectKeyFrame : DependencyObject, IUI<Xaml.Media.Animation.ObjectKeyFrame>
    {
        Xaml.Media.Animation.ObjectKeyFrame ui;

        public new Xaml.Media.Animation.ObjectKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ObjectKeyFrame Invoke(Action<Xaml.Media.Animation.ObjectKeyFrame> action) { action?.Invoke(UI); return this; }

        protected ObjectKeyFrame() { }
    }

    public static partial class ObjectKeyFrameExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.ObjectKeyFrame.KeyTime"/></summary>
        public static TView KeyTime<TView>(this TView view, CSharpMarkup.WinUI.to.KeyTime value) where TView : ObjectKeyFrame { view.UI.KeyTime = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.ObjectKeyFrame.Value"/></summary>
        public static TView Value<TView>(this TView view, object value) where TView : ObjectKeyFrame { view.UI.Value = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ObjectKeyFrame.KeyTime"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.KeyTime> KeyTime<TTarget>(this TTarget target) where TTarget : ObjectKeyFrame
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.KeyTime>.Get(target, Xaml.Media.Animation.ObjectKeyFrame.KeyTimeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.ObjectKeyFrame.Value"/></summary>
        public static DependencyProperty<TTarget, object> Value<TTarget>(this TTarget target) where TTarget : ObjectKeyFrame
        => DependencyProperty<TTarget, object>.Get(target, Xaml.Media.Animation.ObjectKeyFrame.ValueProperty);
    }
}

namespace CSharpMarkup.WinUI // PaneThemeTransition
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.PaneThemeTransition"/></summary>
        public static PaneThemeTransition PaneThemeTransition(Xaml.Controls.Primitives.EdgeTransitionLocation? Edge = default)
        {
            var ui = new Xaml.Media.Animation.PaneThemeTransition();
            if (Edge is not null) ui.Edge = Edge.Value;
            return CSharpMarkup.WinUI.PaneThemeTransition.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.PaneThemeTransition"/></summary>
        public static PaneThemeTransition PaneThemeTransition()
        {
            var ui = new Xaml.Media.Animation.PaneThemeTransition();
            return CSharpMarkup.WinUI.PaneThemeTransition.StartChain(ui);
        }
    }

    public partial class PaneThemeTransition : Transition, IUI<Xaml.Media.Animation.PaneThemeTransition>
    {
        static PaneThemeTransition instance;

        internal static PaneThemeTransition StartChain(Xaml.Media.Animation.PaneThemeTransition ui)
        {
            if (instance == null) instance = new PaneThemeTransition();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.PaneThemeTransition ui;

        public new Xaml.Media.Animation.PaneThemeTransition UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.PaneThemeTransition(PaneThemeTransition view) => view?.UI;

        public static implicit operator PaneThemeTransition(Xaml.Media.Animation.PaneThemeTransition ui) => PaneThemeTransition.StartChain(ui);

        public PaneThemeTransition Invoke(Action<Xaml.Media.Animation.PaneThemeTransition> action) { action?.Invoke(UI); return this; }

        protected PaneThemeTransition() { }
    }

    public static partial class PaneThemeTransitionExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.PaneThemeTransition.Edge"/></summary>
        public static TView Edge<TView>(this TView view, Xaml.Controls.Primitives.EdgeTransitionLocation value) where TView : PaneThemeTransition { view.UI.Edge = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PaneThemeTransition.Edge"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.EdgeTransitionLocation> Edge<TTarget>(this TTarget target) where TTarget : PaneThemeTransition
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.EdgeTransitionLocation>.Get(target, Xaml.Media.Animation.PaneThemeTransition.EdgeProperty);
    }
}

namespace CSharpMarkup.WinUI // PointAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.PointAnimation"/></summary>
        public static PointAnimation PointAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, CSharpMarkup.WinUI.to.Point? By = default, Xaml.Media.Animation.EasingFunctionBase EasingFunction = default, bool? EnableDependentAnimation = default, CSharpMarkup.WinUI.to.Point? From = default, CSharpMarkup.WinUI.to.Point? To = default)
        {
            var ui = new Xaml.Media.Animation.PointAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (By is not null) ui.By = By.Value;
            if (EasingFunction is not null) ui.EasingFunction = EasingFunction;
            if (EnableDependentAnimation is not null) ui.EnableDependentAnimation = EnableDependentAnimation.Value;
            if (From is not null) ui.From = From.Value;
            if (To is not null) ui.To = To.Value;
            return CSharpMarkup.WinUI.PointAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.PointAnimation"/></summary>
        public static PointAnimation PointAnimation()
        {
            var ui = new Xaml.Media.Animation.PointAnimation();
            return CSharpMarkup.WinUI.PointAnimation.StartChain(ui);
        }
    }

    public partial class PointAnimation : Timeline, IUI<Xaml.Media.Animation.PointAnimation>
    {
        static PointAnimation instance;

        internal static PointAnimation StartChain(Xaml.Media.Animation.PointAnimation ui)
        {
            if (instance == null) instance = new PointAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.PointAnimation ui;

        public new Xaml.Media.Animation.PointAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.PointAnimation(PointAnimation view) => view?.UI;

        public static implicit operator PointAnimation(Xaml.Media.Animation.PointAnimation ui) => PointAnimation.StartChain(ui);

        public PointAnimation Invoke(Action<Xaml.Media.Animation.PointAnimation> action) { action?.Invoke(UI); return this; }

        protected PointAnimation() { }
    }

    public static partial class PointAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.PointAnimation.By"/></summary>
        public static TView By<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : PointAnimation { view.UI.By = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.PointAnimation.EasingFunction"/></summary>
        public static TView EasingFunction<TView>(this TView view, Xaml.Media.Animation.EasingFunctionBase value) where TView : PointAnimation { view.UI.EasingFunction = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.PointAnimation.EnableDependentAnimation"/></summary>
        public static TView EnableDependentAnimation<TView>(this TView view, bool value) where TView : PointAnimation { view.UI.EnableDependentAnimation = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.PointAnimation.From"/></summary>
        public static TView From<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : PointAnimation { view.UI.From = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.PointAnimation.To"/></summary>
        public static TView To<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : PointAnimation { view.UI.To = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PointAnimation.By"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> By<TTarget>(this TTarget target) where TTarget : PointAnimation
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.Animation.PointAnimation.ByProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PointAnimation.EasingFunction"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.EasingFunctionBase> EasingFunction<TTarget>(this TTarget target) where TTarget : PointAnimation
        => DependencyProperty<TTarget, Xaml.Media.Animation.EasingFunctionBase>.Get(target, Xaml.Media.Animation.PointAnimation.EasingFunctionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PointAnimation.EnableDependentAnimation"/></summary>
        public static DependencyProperty<TTarget, bool> EnableDependentAnimation<TTarget>(this TTarget target) where TTarget : PointAnimation
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.PointAnimation.EnableDependentAnimationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PointAnimation.From"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> From<TTarget>(this TTarget target) where TTarget : PointAnimation
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.Animation.PointAnimation.FromProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PointAnimation.To"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> To<TTarget>(this TTarget target) where TTarget : PointAnimation
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.Animation.PointAnimation.ToProperty);
    }
}

namespace CSharpMarkup.WinUI // PointAnimationUsingKeyFrames
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.PointAnimationUsingKeyFrames"/></summary>
        public static PointAnimationUsingKeyFrames PointAnimationUsingKeyFrames(params Xaml.Media.Animation.PointKeyFrame[] KeyFrames)
        {
            var ui = new Xaml.Media.Animation.PointAnimationUsingKeyFrames();
            for (int i = 0; i < KeyFrames.Length; i++)
            {
                var child = KeyFrames[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Media.Animation.PointKeyFrame>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.KeyFrames.Add(subChildren[j]);
                else
                    ui.KeyFrames.Add(child);
            }
            return CSharpMarkup.WinUI.PointAnimationUsingKeyFrames.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.PointAnimationUsingKeyFrames"/></summary>
        public static PointAnimationUsingKeyFrames PointAnimationUsingKeyFrames()
        {
            var ui = new Xaml.Media.Animation.PointAnimationUsingKeyFrames();
            return CSharpMarkup.WinUI.PointAnimationUsingKeyFrames.StartChain(ui);
        }
    }

    public partial class PointAnimationUsingKeyFrames : Timeline, IUI<Xaml.Media.Animation.PointAnimationUsingKeyFrames>
    {
        static PointAnimationUsingKeyFrames instance;

        internal static PointAnimationUsingKeyFrames StartChain(Xaml.Media.Animation.PointAnimationUsingKeyFrames ui)
        {
            if (instance == null) instance = new PointAnimationUsingKeyFrames();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.PointAnimationUsingKeyFrames ui;

        public new Xaml.Media.Animation.PointAnimationUsingKeyFrames UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.PointAnimationUsingKeyFrames(PointAnimationUsingKeyFrames view) => view?.UI;

        public static implicit operator PointAnimationUsingKeyFrames(Xaml.Media.Animation.PointAnimationUsingKeyFrames ui) => PointAnimationUsingKeyFrames.StartChain(ui);

        public PointAnimationUsingKeyFrames Invoke(Action<Xaml.Media.Animation.PointAnimationUsingKeyFrames> action) { action?.Invoke(UI); return this; }

        protected PointAnimationUsingKeyFrames() { }
    }

    public static partial class PointAnimationUsingKeyFramesExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.PointAnimationUsingKeyFrames.EnableDependentAnimation"/></summary>
        public static TView EnableDependentAnimation<TView>(this TView view, bool value) where TView : PointAnimationUsingKeyFrames { view.UI.EnableDependentAnimation = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PointAnimationUsingKeyFrames.EnableDependentAnimation"/></summary>
        public static DependencyProperty<TTarget, bool> EnableDependentAnimation<TTarget>(this TTarget target) where TTarget : PointAnimationUsingKeyFrames
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.PointAnimationUsingKeyFrames.EnableDependentAnimationProperty);
    }
}

namespace CSharpMarkup.WinUI // PointerDownThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.PointerDownThemeAnimation"/></summary>
        public static PointerDownThemeAnimation PointerDownThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, string TargetName = default)
        {
            var ui = new Xaml.Media.Animation.PointerDownThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (TargetName is not null) ui.TargetName = TargetName;
            return CSharpMarkup.WinUI.PointerDownThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.PointerDownThemeAnimation"/></summary>
        public static PointerDownThemeAnimation PointerDownThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.PointerDownThemeAnimation();
            return CSharpMarkup.WinUI.PointerDownThemeAnimation.StartChain(ui);
        }
    }

    public partial class PointerDownThemeAnimation : Timeline, IUI<Xaml.Media.Animation.PointerDownThemeAnimation>
    {
        static PointerDownThemeAnimation instance;

        internal static PointerDownThemeAnimation StartChain(Xaml.Media.Animation.PointerDownThemeAnimation ui)
        {
            if (instance == null) instance = new PointerDownThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.PointerDownThemeAnimation ui;

        public new Xaml.Media.Animation.PointerDownThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.PointerDownThemeAnimation(PointerDownThemeAnimation view) => view?.UI;

        public static implicit operator PointerDownThemeAnimation(Xaml.Media.Animation.PointerDownThemeAnimation ui) => PointerDownThemeAnimation.StartChain(ui);

        public PointerDownThemeAnimation Invoke(Action<Xaml.Media.Animation.PointerDownThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected PointerDownThemeAnimation() { }
    }

    public static partial class PointerDownThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.PointerDownThemeAnimation.TargetName"/></summary>
        public static TView TargetName<TView>(this TView view, string value) where TView : PointerDownThemeAnimation { view.UI.TargetName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PointerDownThemeAnimation.TargetName"/></summary>
        public static DependencyProperty<TTarget, string> TargetName<TTarget>(this TTarget target) where TTarget : PointerDownThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.PointerDownThemeAnimation.TargetNameProperty);
    }
}

namespace CSharpMarkup.WinUI // PointerUpThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.PointerUpThemeAnimation"/></summary>
        public static PointerUpThemeAnimation PointerUpThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, string TargetName = default)
        {
            var ui = new Xaml.Media.Animation.PointerUpThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (TargetName is not null) ui.TargetName = TargetName;
            return CSharpMarkup.WinUI.PointerUpThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.PointerUpThemeAnimation"/></summary>
        public static PointerUpThemeAnimation PointerUpThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.PointerUpThemeAnimation();
            return CSharpMarkup.WinUI.PointerUpThemeAnimation.StartChain(ui);
        }
    }

    public partial class PointerUpThemeAnimation : Timeline, IUI<Xaml.Media.Animation.PointerUpThemeAnimation>
    {
        static PointerUpThemeAnimation instance;

        internal static PointerUpThemeAnimation StartChain(Xaml.Media.Animation.PointerUpThemeAnimation ui)
        {
            if (instance == null) instance = new PointerUpThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.PointerUpThemeAnimation ui;

        public new Xaml.Media.Animation.PointerUpThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.PointerUpThemeAnimation(PointerUpThemeAnimation view) => view?.UI;

        public static implicit operator PointerUpThemeAnimation(Xaml.Media.Animation.PointerUpThemeAnimation ui) => PointerUpThemeAnimation.StartChain(ui);

        public PointerUpThemeAnimation Invoke(Action<Xaml.Media.Animation.PointerUpThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected PointerUpThemeAnimation() { }
    }

    public static partial class PointerUpThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.PointerUpThemeAnimation.TargetName"/></summary>
        public static TView TargetName<TView>(this TView view, string value) where TView : PointerUpThemeAnimation { view.UI.TargetName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PointerUpThemeAnimation.TargetName"/></summary>
        public static DependencyProperty<TTarget, string> TargetName<TTarget>(this TTarget target) where TTarget : PointerUpThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.PointerUpThemeAnimation.TargetNameProperty);
    }
}

namespace CSharpMarkup.WinUI // PointKeyFrame
{
    public partial class PointKeyFrame : DependencyObject, IUI<Xaml.Media.Animation.PointKeyFrame>
    {
        Xaml.Media.Animation.PointKeyFrame ui;

        public new Xaml.Media.Animation.PointKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PointKeyFrame Invoke(Action<Xaml.Media.Animation.PointKeyFrame> action) { action?.Invoke(UI); return this; }

        protected PointKeyFrame() { }
    }

    public static partial class PointKeyFrameExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.PointKeyFrame.KeyTime"/></summary>
        public static TView KeyTime<TView>(this TView view, CSharpMarkup.WinUI.to.KeyTime value) where TView : PointKeyFrame { view.UI.KeyTime = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.PointKeyFrame.Value"/></summary>
        public static TView Value<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : PointKeyFrame { view.UI.Value = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PointKeyFrame.KeyTime"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.KeyTime> KeyTime<TTarget>(this TTarget target) where TTarget : PointKeyFrame
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.KeyTime>.Get(target, Xaml.Media.Animation.PointKeyFrame.KeyTimeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PointKeyFrame.Value"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> Value<TTarget>(this TTarget target) where TTarget : PointKeyFrame
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.Animation.PointKeyFrame.ValueProperty);
    }
}

namespace CSharpMarkup.WinUI // PopInThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.PopInThemeAnimation"/></summary>
        public static PopInThemeAnimation PopInThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, double? FromHorizontalOffset = default, double? FromVerticalOffset = default, string TargetName = default)
        {
            var ui = new Xaml.Media.Animation.PopInThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (FromHorizontalOffset is not null) ui.FromHorizontalOffset = FromHorizontalOffset.Value;
            if (FromVerticalOffset is not null) ui.FromVerticalOffset = FromVerticalOffset.Value;
            if (TargetName is not null) ui.TargetName = TargetName;
            return CSharpMarkup.WinUI.PopInThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.PopInThemeAnimation"/></summary>
        public static PopInThemeAnimation PopInThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.PopInThemeAnimation();
            return CSharpMarkup.WinUI.PopInThemeAnimation.StartChain(ui);
        }
    }

    public partial class PopInThemeAnimation : Timeline, IUI<Xaml.Media.Animation.PopInThemeAnimation>
    {
        static PopInThemeAnimation instance;

        internal static PopInThemeAnimation StartChain(Xaml.Media.Animation.PopInThemeAnimation ui)
        {
            if (instance == null) instance = new PopInThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.PopInThemeAnimation ui;

        public new Xaml.Media.Animation.PopInThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.PopInThemeAnimation(PopInThemeAnimation view) => view?.UI;

        public static implicit operator PopInThemeAnimation(Xaml.Media.Animation.PopInThemeAnimation ui) => PopInThemeAnimation.StartChain(ui);

        public PopInThemeAnimation Invoke(Action<Xaml.Media.Animation.PopInThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected PopInThemeAnimation() { }
    }

    public static partial class PopInThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.PopInThemeAnimation.FromHorizontalOffset"/></summary>
        public static TView FromHorizontalOffset<TView>(this TView view, double value) where TView : PopInThemeAnimation { view.UI.FromHorizontalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.PopInThemeAnimation.FromVerticalOffset"/></summary>
        public static TView FromVerticalOffset<TView>(this TView view, double value) where TView : PopInThemeAnimation { view.UI.FromVerticalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.PopInThemeAnimation.TargetName"/></summary>
        public static TView TargetName<TView>(this TView view, string value) where TView : PopInThemeAnimation { view.UI.TargetName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PopInThemeAnimation.FromHorizontalOffset"/></summary>
        public static DependencyProperty<TTarget, double> FromHorizontalOffset<TTarget>(this TTarget target) where TTarget : PopInThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.PopInThemeAnimation.FromHorizontalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PopInThemeAnimation.FromVerticalOffset"/></summary>
        public static DependencyProperty<TTarget, double> FromVerticalOffset<TTarget>(this TTarget target) where TTarget : PopInThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.PopInThemeAnimation.FromVerticalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PopInThemeAnimation.TargetName"/></summary>
        public static DependencyProperty<TTarget, string> TargetName<TTarget>(this TTarget target) where TTarget : PopInThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.PopInThemeAnimation.TargetNameProperty);
    }
}

namespace CSharpMarkup.WinUI // PopOutThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.PopOutThemeAnimation"/></summary>
        public static PopOutThemeAnimation PopOutThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, string TargetName = default)
        {
            var ui = new Xaml.Media.Animation.PopOutThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (TargetName is not null) ui.TargetName = TargetName;
            return CSharpMarkup.WinUI.PopOutThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.PopOutThemeAnimation"/></summary>
        public static PopOutThemeAnimation PopOutThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.PopOutThemeAnimation();
            return CSharpMarkup.WinUI.PopOutThemeAnimation.StartChain(ui);
        }
    }

    public partial class PopOutThemeAnimation : Timeline, IUI<Xaml.Media.Animation.PopOutThemeAnimation>
    {
        static PopOutThemeAnimation instance;

        internal static PopOutThemeAnimation StartChain(Xaml.Media.Animation.PopOutThemeAnimation ui)
        {
            if (instance == null) instance = new PopOutThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.PopOutThemeAnimation ui;

        public new Xaml.Media.Animation.PopOutThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.PopOutThemeAnimation(PopOutThemeAnimation view) => view?.UI;

        public static implicit operator PopOutThemeAnimation(Xaml.Media.Animation.PopOutThemeAnimation ui) => PopOutThemeAnimation.StartChain(ui);

        public PopOutThemeAnimation Invoke(Action<Xaml.Media.Animation.PopOutThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected PopOutThemeAnimation() { }
    }

    public static partial class PopOutThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.PopOutThemeAnimation.TargetName"/></summary>
        public static TView TargetName<TView>(this TView view, string value) where TView : PopOutThemeAnimation { view.UI.TargetName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PopOutThemeAnimation.TargetName"/></summary>
        public static DependencyProperty<TTarget, string> TargetName<TTarget>(this TTarget target) where TTarget : PopOutThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.PopOutThemeAnimation.TargetNameProperty);
    }
}

namespace CSharpMarkup.WinUI // PopupThemeTransition
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.PopupThemeTransition"/></summary>
        public static PopupThemeTransition PopupThemeTransition(double? FromHorizontalOffset = default, double? FromVerticalOffset = default)
        {
            var ui = new Xaml.Media.Animation.PopupThemeTransition();
            if (FromHorizontalOffset is not null) ui.FromHorizontalOffset = FromHorizontalOffset.Value;
            if (FromVerticalOffset is not null) ui.FromVerticalOffset = FromVerticalOffset.Value;
            return CSharpMarkup.WinUI.PopupThemeTransition.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.PopupThemeTransition"/></summary>
        public static PopupThemeTransition PopupThemeTransition()
        {
            var ui = new Xaml.Media.Animation.PopupThemeTransition();
            return CSharpMarkup.WinUI.PopupThemeTransition.StartChain(ui);
        }
    }

    public partial class PopupThemeTransition : Transition, IUI<Xaml.Media.Animation.PopupThemeTransition>
    {
        static PopupThemeTransition instance;

        internal static PopupThemeTransition StartChain(Xaml.Media.Animation.PopupThemeTransition ui)
        {
            if (instance == null) instance = new PopupThemeTransition();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.PopupThemeTransition ui;

        public new Xaml.Media.Animation.PopupThemeTransition UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.PopupThemeTransition(PopupThemeTransition view) => view?.UI;

        public static implicit operator PopupThemeTransition(Xaml.Media.Animation.PopupThemeTransition ui) => PopupThemeTransition.StartChain(ui);

        public PopupThemeTransition Invoke(Action<Xaml.Media.Animation.PopupThemeTransition> action) { action?.Invoke(UI); return this; }

        protected PopupThemeTransition() { }
    }

    public static partial class PopupThemeTransitionExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.PopupThemeTransition.FromHorizontalOffset"/></summary>
        public static TView FromHorizontalOffset<TView>(this TView view, double value) where TView : PopupThemeTransition { view.UI.FromHorizontalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.PopupThemeTransition.FromVerticalOffset"/></summary>
        public static TView FromVerticalOffset<TView>(this TView view, double value) where TView : PopupThemeTransition { view.UI.FromVerticalOffset = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PopupThemeTransition.FromHorizontalOffset"/></summary>
        public static DependencyProperty<TTarget, double> FromHorizontalOffset<TTarget>(this TTarget target) where TTarget : PopupThemeTransition
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.PopupThemeTransition.FromHorizontalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PopupThemeTransition.FromVerticalOffset"/></summary>
        public static DependencyProperty<TTarget, double> FromVerticalOffset<TTarget>(this TTarget target) where TTarget : PopupThemeTransition
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.PopupThemeTransition.FromVerticalOffsetProperty);
    }
}

namespace CSharpMarkup.WinUI // PowerEase
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.PowerEase"/></summary>
        public static PowerEase PowerEase(double? Power = default)
        {
            var ui = new Xaml.Media.Animation.PowerEase();
            if (Power is not null) ui.Power = Power.Value;
            return CSharpMarkup.WinUI.PowerEase.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.PowerEase"/></summary>
        public static PowerEase PowerEase()
        {
            var ui = new Xaml.Media.Animation.PowerEase();
            return CSharpMarkup.WinUI.PowerEase.StartChain(ui);
        }
    }

    public partial class PowerEase : EasingFunctionBase, IUI<Xaml.Media.Animation.PowerEase>
    {
        static PowerEase instance;

        internal static PowerEase StartChain(Xaml.Media.Animation.PowerEase ui)
        {
            if (instance == null) instance = new PowerEase();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.PowerEase ui;

        public new Xaml.Media.Animation.PowerEase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.PowerEase(PowerEase view) => view?.UI;

        public static implicit operator PowerEase(Xaml.Media.Animation.PowerEase ui) => PowerEase.StartChain(ui);

        public PowerEase Invoke(Action<Xaml.Media.Animation.PowerEase> action) { action?.Invoke(UI); return this; }

        protected PowerEase() { }
    }

    public static partial class PowerEaseExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.PowerEase.Power"/></summary>
        public static TView Power<TView>(this TView view, double value) where TView : PowerEase { view.UI.Power = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.PowerEase.Power"/></summary>
        public static DependencyProperty<TTarget, double> Power<TTarget>(this TTarget target) where TTarget : PowerEase
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.PowerEase.PowerProperty);
    }
}

namespace CSharpMarkup.WinUI // QuadraticEase
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.QuadraticEase"/></summary>
        public static QuadraticEase QuadraticEase()
        {
            var ui = new Xaml.Media.Animation.QuadraticEase();
            return CSharpMarkup.WinUI.QuadraticEase.StartChain(ui);
        }
    }

    public partial class QuadraticEase : EasingFunctionBase, IUI<Xaml.Media.Animation.QuadraticEase>
    {
        static QuadraticEase instance;

        internal static QuadraticEase StartChain(Xaml.Media.Animation.QuadraticEase ui)
        {
            if (instance == null) instance = new QuadraticEase();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.QuadraticEase ui;

        public new Xaml.Media.Animation.QuadraticEase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.QuadraticEase(QuadraticEase view) => view?.UI;

        public static implicit operator QuadraticEase(Xaml.Media.Animation.QuadraticEase ui) => QuadraticEase.StartChain(ui);

        public QuadraticEase Invoke(Action<Xaml.Media.Animation.QuadraticEase> action) { action?.Invoke(UI); return this; }

        protected QuadraticEase() { }
    }
}

namespace CSharpMarkup.WinUI // QuarticEase
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.QuarticEase"/></summary>
        public static QuarticEase QuarticEase()
        {
            var ui = new Xaml.Media.Animation.QuarticEase();
            return CSharpMarkup.WinUI.QuarticEase.StartChain(ui);
        }
    }

    public partial class QuarticEase : EasingFunctionBase, IUI<Xaml.Media.Animation.QuarticEase>
    {
        static QuarticEase instance;

        internal static QuarticEase StartChain(Xaml.Media.Animation.QuarticEase ui)
        {
            if (instance == null) instance = new QuarticEase();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.QuarticEase ui;

        public new Xaml.Media.Animation.QuarticEase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.QuarticEase(QuarticEase view) => view?.UI;

        public static implicit operator QuarticEase(Xaml.Media.Animation.QuarticEase ui) => QuarticEase.StartChain(ui);

        public QuarticEase Invoke(Action<Xaml.Media.Animation.QuarticEase> action) { action?.Invoke(UI); return this; }

        protected QuarticEase() { }
    }
}

namespace CSharpMarkup.WinUI // QuinticEase
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.QuinticEase"/></summary>
        public static QuinticEase QuinticEase()
        {
            var ui = new Xaml.Media.Animation.QuinticEase();
            return CSharpMarkup.WinUI.QuinticEase.StartChain(ui);
        }
    }

    public partial class QuinticEase : EasingFunctionBase, IUI<Xaml.Media.Animation.QuinticEase>
    {
        static QuinticEase instance;

        internal static QuinticEase StartChain(Xaml.Media.Animation.QuinticEase ui)
        {
            if (instance == null) instance = new QuinticEase();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.QuinticEase ui;

        public new Xaml.Media.Animation.QuinticEase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.QuinticEase(QuinticEase view) => view?.UI;

        public static implicit operator QuinticEase(Xaml.Media.Animation.QuinticEase ui) => QuinticEase.StartChain(ui);

        public QuinticEase Invoke(Action<Xaml.Media.Animation.QuinticEase> action) { action?.Invoke(UI); return this; }

        protected QuinticEase() { }
    }
}

namespace CSharpMarkup.WinUI // ReorderThemeTransition
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.ReorderThemeTransition"/></summary>
        public static ReorderThemeTransition ReorderThemeTransition()
        {
            var ui = new Xaml.Media.Animation.ReorderThemeTransition();
            return CSharpMarkup.WinUI.ReorderThemeTransition.StartChain(ui);
        }
    }

    public partial class ReorderThemeTransition : Transition, IUI<Xaml.Media.Animation.ReorderThemeTransition>
    {
        static ReorderThemeTransition instance;

        internal static ReorderThemeTransition StartChain(Xaml.Media.Animation.ReorderThemeTransition ui)
        {
            if (instance == null) instance = new ReorderThemeTransition();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.ReorderThemeTransition ui;

        public new Xaml.Media.Animation.ReorderThemeTransition UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.ReorderThemeTransition(ReorderThemeTransition view) => view?.UI;

        public static implicit operator ReorderThemeTransition(Xaml.Media.Animation.ReorderThemeTransition ui) => ReorderThemeTransition.StartChain(ui);

        public ReorderThemeTransition Invoke(Action<Xaml.Media.Animation.ReorderThemeTransition> action) { action?.Invoke(UI); return this; }

        protected ReorderThemeTransition() { }
    }
}

namespace CSharpMarkup.WinUI // RepositionThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.RepositionThemeAnimation"/></summary>
        public static RepositionThemeAnimation RepositionThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, double? FromHorizontalOffset = default, double? FromVerticalOffset = default, string TargetName = default)
        {
            var ui = new Xaml.Media.Animation.RepositionThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (FromHorizontalOffset is not null) ui.FromHorizontalOffset = FromHorizontalOffset.Value;
            if (FromVerticalOffset is not null) ui.FromVerticalOffset = FromVerticalOffset.Value;
            if (TargetName is not null) ui.TargetName = TargetName;
            return CSharpMarkup.WinUI.RepositionThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.RepositionThemeAnimation"/></summary>
        public static RepositionThemeAnimation RepositionThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.RepositionThemeAnimation();
            return CSharpMarkup.WinUI.RepositionThemeAnimation.StartChain(ui);
        }
    }

    public partial class RepositionThemeAnimation : Timeline, IUI<Xaml.Media.Animation.RepositionThemeAnimation>
    {
        static RepositionThemeAnimation instance;

        internal static RepositionThemeAnimation StartChain(Xaml.Media.Animation.RepositionThemeAnimation ui)
        {
            if (instance == null) instance = new RepositionThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.RepositionThemeAnimation ui;

        public new Xaml.Media.Animation.RepositionThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.RepositionThemeAnimation(RepositionThemeAnimation view) => view?.UI;

        public static implicit operator RepositionThemeAnimation(Xaml.Media.Animation.RepositionThemeAnimation ui) => RepositionThemeAnimation.StartChain(ui);

        public RepositionThemeAnimation Invoke(Action<Xaml.Media.Animation.RepositionThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected RepositionThemeAnimation() { }
    }

    public static partial class RepositionThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.RepositionThemeAnimation.FromHorizontalOffset"/></summary>
        public static TView FromHorizontalOffset<TView>(this TView view, double value) where TView : RepositionThemeAnimation { view.UI.FromHorizontalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.RepositionThemeAnimation.FromVerticalOffset"/></summary>
        public static TView FromVerticalOffset<TView>(this TView view, double value) where TView : RepositionThemeAnimation { view.UI.FromVerticalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.RepositionThemeAnimation.TargetName"/></summary>
        public static TView TargetName<TView>(this TView view, string value) where TView : RepositionThemeAnimation { view.UI.TargetName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.RepositionThemeAnimation.FromHorizontalOffset"/></summary>
        public static DependencyProperty<TTarget, double> FromHorizontalOffset<TTarget>(this TTarget target) where TTarget : RepositionThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.RepositionThemeAnimation.FromHorizontalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.RepositionThemeAnimation.FromVerticalOffset"/></summary>
        public static DependencyProperty<TTarget, double> FromVerticalOffset<TTarget>(this TTarget target) where TTarget : RepositionThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.RepositionThemeAnimation.FromVerticalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.RepositionThemeAnimation.TargetName"/></summary>
        public static DependencyProperty<TTarget, string> TargetName<TTarget>(this TTarget target) where TTarget : RepositionThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.RepositionThemeAnimation.TargetNameProperty);
    }
}

namespace CSharpMarkup.WinUI // RepositionThemeTransition
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.RepositionThemeTransition"/></summary>
        public static RepositionThemeTransition RepositionThemeTransition(bool? IsStaggeringEnabled = default)
        {
            var ui = new Xaml.Media.Animation.RepositionThemeTransition();
            if (IsStaggeringEnabled is not null) ui.IsStaggeringEnabled = IsStaggeringEnabled.Value;
            return CSharpMarkup.WinUI.RepositionThemeTransition.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.RepositionThemeTransition"/></summary>
        public static RepositionThemeTransition RepositionThemeTransition()
        {
            var ui = new Xaml.Media.Animation.RepositionThemeTransition();
            return CSharpMarkup.WinUI.RepositionThemeTransition.StartChain(ui);
        }
    }

    public partial class RepositionThemeTransition : Transition, IUI<Xaml.Media.Animation.RepositionThemeTransition>
    {
        static RepositionThemeTransition instance;

        internal static RepositionThemeTransition StartChain(Xaml.Media.Animation.RepositionThemeTransition ui)
        {
            if (instance == null) instance = new RepositionThemeTransition();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.RepositionThemeTransition ui;

        public new Xaml.Media.Animation.RepositionThemeTransition UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.RepositionThemeTransition(RepositionThemeTransition view) => view?.UI;

        public static implicit operator RepositionThemeTransition(Xaml.Media.Animation.RepositionThemeTransition ui) => RepositionThemeTransition.StartChain(ui);

        public RepositionThemeTransition Invoke(Action<Xaml.Media.Animation.RepositionThemeTransition> action) { action?.Invoke(UI); return this; }

        protected RepositionThemeTransition() { }
    }

    public static partial class RepositionThemeTransitionExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.RepositionThemeTransition.IsStaggeringEnabled"/></summary>
        public static TView IsStaggeringEnabled<TView>(this TView view, bool value) where TView : RepositionThemeTransition { view.UI.IsStaggeringEnabled = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.RepositionThemeTransition.IsStaggeringEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsStaggeringEnabled<TTarget>(this TTarget target) where TTarget : RepositionThemeTransition
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.RepositionThemeTransition.IsStaggeringEnabledProperty);
    }
}

namespace CSharpMarkup.WinUI // SineEase
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.SineEase"/></summary>
        public static SineEase SineEase()
        {
            var ui = new Xaml.Media.Animation.SineEase();
            return CSharpMarkup.WinUI.SineEase.StartChain(ui);
        }
    }

    public partial class SineEase : EasingFunctionBase, IUI<Xaml.Media.Animation.SineEase>
    {
        static SineEase instance;

        internal static SineEase StartChain(Xaml.Media.Animation.SineEase ui)
        {
            if (instance == null) instance = new SineEase();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.SineEase ui;

        public new Xaml.Media.Animation.SineEase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.SineEase(SineEase view) => view?.UI;

        public static implicit operator SineEase(Xaml.Media.Animation.SineEase ui) => SineEase.StartChain(ui);

        public SineEase Invoke(Action<Xaml.Media.Animation.SineEase> action) { action?.Invoke(UI); return this; }

        protected SineEase() { }
    }
}

namespace CSharpMarkup.WinUI // SlideNavigationTransitionInfo
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.SlideNavigationTransitionInfo"/></summary>
        public static SlideNavigationTransitionInfo SlideNavigationTransitionInfo(Xaml.Media.Animation.SlideNavigationTransitionEffect? Effect = default)
        {
            var ui = new Xaml.Media.Animation.SlideNavigationTransitionInfo();
            if (Effect is not null) ui.Effect = Effect.Value;
            return CSharpMarkup.WinUI.SlideNavigationTransitionInfo.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.SlideNavigationTransitionInfo"/></summary>
        public static SlideNavigationTransitionInfo SlideNavigationTransitionInfo()
        {
            var ui = new Xaml.Media.Animation.SlideNavigationTransitionInfo();
            return CSharpMarkup.WinUI.SlideNavigationTransitionInfo.StartChain(ui);
        }
    }

    public partial class SlideNavigationTransitionInfo : NavigationTransitionInfo, IUI<Xaml.Media.Animation.SlideNavigationTransitionInfo>
    {
        static SlideNavigationTransitionInfo instance;

        internal static SlideNavigationTransitionInfo StartChain(Xaml.Media.Animation.SlideNavigationTransitionInfo ui)
        {
            if (instance == null) instance = new SlideNavigationTransitionInfo();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.SlideNavigationTransitionInfo ui;

        public new Xaml.Media.Animation.SlideNavigationTransitionInfo UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.SlideNavigationTransitionInfo(SlideNavigationTransitionInfo view) => view?.UI;

        public static implicit operator SlideNavigationTransitionInfo(Xaml.Media.Animation.SlideNavigationTransitionInfo ui) => SlideNavigationTransitionInfo.StartChain(ui);

        public SlideNavigationTransitionInfo Invoke(Action<Xaml.Media.Animation.SlideNavigationTransitionInfo> action) { action?.Invoke(UI); return this; }

        protected SlideNavigationTransitionInfo() { }
    }

    public static partial class SlideNavigationTransitionInfoExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.SlideNavigationTransitionInfo.Effect"/></summary>
        public static TView Effect<TView>(this TView view, Xaml.Media.Animation.SlideNavigationTransitionEffect value) where TView : SlideNavigationTransitionInfo { view.UI.Effect = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SlideNavigationTransitionInfo.Effect"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.SlideNavigationTransitionEffect> Effect<TTarget>(this TTarget target) where TTarget : SlideNavigationTransitionInfo
        => DependencyProperty<TTarget, Xaml.Media.Animation.SlideNavigationTransitionEffect>.Get(target, Xaml.Media.Animation.SlideNavigationTransitionInfo.EffectProperty);
    }
}

namespace CSharpMarkup.WinUI // SplineColorKeyFrame
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.SplineColorKeyFrame"/></summary>
        public static SplineColorKeyFrame SplineColorKeyFrame(Xaml.Media.Animation.KeySpline KeySpline = default)
        {
            var ui = new Xaml.Media.Animation.SplineColorKeyFrame();
            if (KeySpline is not null) ui.KeySpline = KeySpline;
            return CSharpMarkup.WinUI.SplineColorKeyFrame.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.SplineColorKeyFrame"/></summary>
        public static SplineColorKeyFrame SplineColorKeyFrame()
        {
            var ui = new Xaml.Media.Animation.SplineColorKeyFrame();
            return CSharpMarkup.WinUI.SplineColorKeyFrame.StartChain(ui);
        }
    }

    public partial class SplineColorKeyFrame : ColorKeyFrame, IUI<Xaml.Media.Animation.SplineColorKeyFrame>
    {
        static SplineColorKeyFrame instance;

        internal static SplineColorKeyFrame StartChain(Xaml.Media.Animation.SplineColorKeyFrame ui)
        {
            if (instance == null) instance = new SplineColorKeyFrame();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.SplineColorKeyFrame ui;

        public new Xaml.Media.Animation.SplineColorKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.SplineColorKeyFrame(SplineColorKeyFrame view) => view?.UI;

        public static implicit operator SplineColorKeyFrame(Xaml.Media.Animation.SplineColorKeyFrame ui) => SplineColorKeyFrame.StartChain(ui);

        public SplineColorKeyFrame Invoke(Action<Xaml.Media.Animation.SplineColorKeyFrame> action) { action?.Invoke(UI); return this; }

        protected SplineColorKeyFrame() { }
    }

    public static partial class SplineColorKeyFrameExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.SplineColorKeyFrame.KeySpline"/></summary>
        public static TView KeySpline<TView>(this TView view, Xaml.Media.Animation.KeySpline value) where TView : SplineColorKeyFrame { view.UI.KeySpline = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplineColorKeyFrame.KeySpline"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.KeySpline> KeySpline<TTarget>(this TTarget target) where TTarget : SplineColorKeyFrame
        => DependencyProperty<TTarget, Xaml.Media.Animation.KeySpline>.Get(target, Xaml.Media.Animation.SplineColorKeyFrame.KeySplineProperty);
    }
}

namespace CSharpMarkup.WinUI // SplineDoubleKeyFrame
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.SplineDoubleKeyFrame"/></summary>
        public static SplineDoubleKeyFrame SplineDoubleKeyFrame(Xaml.Media.Animation.KeySpline KeySpline = default)
        {
            var ui = new Xaml.Media.Animation.SplineDoubleKeyFrame();
            if (KeySpline is not null) ui.KeySpline = KeySpline;
            return CSharpMarkup.WinUI.SplineDoubleKeyFrame.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.SplineDoubleKeyFrame"/></summary>
        public static SplineDoubleKeyFrame SplineDoubleKeyFrame()
        {
            var ui = new Xaml.Media.Animation.SplineDoubleKeyFrame();
            return CSharpMarkup.WinUI.SplineDoubleKeyFrame.StartChain(ui);
        }
    }

    public partial class SplineDoubleKeyFrame : DoubleKeyFrame, IUI<Xaml.Media.Animation.SplineDoubleKeyFrame>
    {
        static SplineDoubleKeyFrame instance;

        internal static SplineDoubleKeyFrame StartChain(Xaml.Media.Animation.SplineDoubleKeyFrame ui)
        {
            if (instance == null) instance = new SplineDoubleKeyFrame();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.SplineDoubleKeyFrame ui;

        public new Xaml.Media.Animation.SplineDoubleKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.SplineDoubleKeyFrame(SplineDoubleKeyFrame view) => view?.UI;

        public static implicit operator SplineDoubleKeyFrame(Xaml.Media.Animation.SplineDoubleKeyFrame ui) => SplineDoubleKeyFrame.StartChain(ui);

        public SplineDoubleKeyFrame Invoke(Action<Xaml.Media.Animation.SplineDoubleKeyFrame> action) { action?.Invoke(UI); return this; }

        protected SplineDoubleKeyFrame() { }
    }

    public static partial class SplineDoubleKeyFrameExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.SplineDoubleKeyFrame.KeySpline"/></summary>
        public static TView KeySpline<TView>(this TView view, Xaml.Media.Animation.KeySpline value) where TView : SplineDoubleKeyFrame { view.UI.KeySpline = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplineDoubleKeyFrame.KeySpline"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.KeySpline> KeySpline<TTarget>(this TTarget target) where TTarget : SplineDoubleKeyFrame
        => DependencyProperty<TTarget, Xaml.Media.Animation.KeySpline>.Get(target, Xaml.Media.Animation.SplineDoubleKeyFrame.KeySplineProperty);
    }
}

namespace CSharpMarkup.WinUI // SplinePointKeyFrame
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.SplinePointKeyFrame"/></summary>
        public static SplinePointKeyFrame SplinePointKeyFrame(Xaml.Media.Animation.KeySpline KeySpline = default)
        {
            var ui = new Xaml.Media.Animation.SplinePointKeyFrame();
            if (KeySpline is not null) ui.KeySpline = KeySpline;
            return CSharpMarkup.WinUI.SplinePointKeyFrame.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.SplinePointKeyFrame"/></summary>
        public static SplinePointKeyFrame SplinePointKeyFrame()
        {
            var ui = new Xaml.Media.Animation.SplinePointKeyFrame();
            return CSharpMarkup.WinUI.SplinePointKeyFrame.StartChain(ui);
        }
    }

    public partial class SplinePointKeyFrame : PointKeyFrame, IUI<Xaml.Media.Animation.SplinePointKeyFrame>
    {
        static SplinePointKeyFrame instance;

        internal static SplinePointKeyFrame StartChain(Xaml.Media.Animation.SplinePointKeyFrame ui)
        {
            if (instance == null) instance = new SplinePointKeyFrame();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.SplinePointKeyFrame ui;

        public new Xaml.Media.Animation.SplinePointKeyFrame UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.SplinePointKeyFrame(SplinePointKeyFrame view) => view?.UI;

        public static implicit operator SplinePointKeyFrame(Xaml.Media.Animation.SplinePointKeyFrame ui) => SplinePointKeyFrame.StartChain(ui);

        public SplinePointKeyFrame Invoke(Action<Xaml.Media.Animation.SplinePointKeyFrame> action) { action?.Invoke(UI); return this; }

        protected SplinePointKeyFrame() { }
    }

    public static partial class SplinePointKeyFrameExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.SplinePointKeyFrame.KeySpline"/></summary>
        public static TView KeySpline<TView>(this TView view, Xaml.Media.Animation.KeySpline value) where TView : SplinePointKeyFrame { view.UI.KeySpline = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplinePointKeyFrame.KeySpline"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.KeySpline> KeySpline<TTarget>(this TTarget target) where TTarget : SplinePointKeyFrame
        => DependencyProperty<TTarget, Xaml.Media.Animation.KeySpline>.Get(target, Xaml.Media.Animation.SplinePointKeyFrame.KeySplineProperty);
    }
}

namespace CSharpMarkup.WinUI // SplitCloseThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation"/></summary>
        public static SplitCloseThemeAnimation SplitCloseThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, double? ClosedLength = default, Xaml.DependencyObject ClosedTarget = default, string ClosedTargetName = default, Xaml.DependencyObject ContentTarget = default, string ContentTargetName = default, Xaml.Controls.Primitives.AnimationDirection? ContentTranslationDirection = default, double? ContentTranslationOffset = default, double? OffsetFromCenter = default, double? OpenedLength = default, Xaml.DependencyObject OpenedTarget = default, string OpenedTargetName = default)
        {
            var ui = new Xaml.Media.Animation.SplitCloseThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (ClosedLength is not null) ui.ClosedLength = ClosedLength.Value;
            if (ClosedTarget is not null) ui.ClosedTarget = ClosedTarget;
            if (ClosedTargetName is not null) ui.ClosedTargetName = ClosedTargetName;
            if (ContentTarget is not null) ui.ContentTarget = ContentTarget;
            if (ContentTargetName is not null) ui.ContentTargetName = ContentTargetName;
            if (ContentTranslationDirection is not null) ui.ContentTranslationDirection = ContentTranslationDirection.Value;
            if (ContentTranslationOffset is not null) ui.ContentTranslationOffset = ContentTranslationOffset.Value;
            if (OffsetFromCenter is not null) ui.OffsetFromCenter = OffsetFromCenter.Value;
            if (OpenedLength is not null) ui.OpenedLength = OpenedLength.Value;
            if (OpenedTarget is not null) ui.OpenedTarget = OpenedTarget;
            if (OpenedTargetName is not null) ui.OpenedTargetName = OpenedTargetName;
            return CSharpMarkup.WinUI.SplitCloseThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation"/></summary>
        public static SplitCloseThemeAnimation SplitCloseThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.SplitCloseThemeAnimation();
            return CSharpMarkup.WinUI.SplitCloseThemeAnimation.StartChain(ui);
        }
    }

    public partial class SplitCloseThemeAnimation : Timeline, IUI<Xaml.Media.Animation.SplitCloseThemeAnimation>
    {
        static SplitCloseThemeAnimation instance;

        internal static SplitCloseThemeAnimation StartChain(Xaml.Media.Animation.SplitCloseThemeAnimation ui)
        {
            if (instance == null) instance = new SplitCloseThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.SplitCloseThemeAnimation ui;

        public new Xaml.Media.Animation.SplitCloseThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.SplitCloseThemeAnimation(SplitCloseThemeAnimation view) => view?.UI;

        public static implicit operator SplitCloseThemeAnimation(Xaml.Media.Animation.SplitCloseThemeAnimation ui) => SplitCloseThemeAnimation.StartChain(ui);

        public SplitCloseThemeAnimation Invoke(Action<Xaml.Media.Animation.SplitCloseThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected SplitCloseThemeAnimation() { }
    }

    public static partial class SplitCloseThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.ClosedLength"/></summary>
        public static TView ClosedLength<TView>(this TView view, double value) where TView : SplitCloseThemeAnimation { view.UI.ClosedLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.ClosedTarget"/></summary>
        public static TView ClosedTarget<TView>(this TView view, Xaml.DependencyObject value) where TView : SplitCloseThemeAnimation { view.UI.ClosedTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.ClosedTargetName"/></summary>
        public static TView ClosedTargetName<TView>(this TView view, string value) where TView : SplitCloseThemeAnimation { view.UI.ClosedTargetName = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.ContentTarget"/></summary>
        public static TView ContentTarget<TView>(this TView view, Xaml.DependencyObject value) where TView : SplitCloseThemeAnimation { view.UI.ContentTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.ContentTargetName"/></summary>
        public static TView ContentTargetName<TView>(this TView view, string value) where TView : SplitCloseThemeAnimation { view.UI.ContentTargetName = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.ContentTranslationDirection"/></summary>
        public static TView ContentTranslationDirection<TView>(this TView view, Xaml.Controls.Primitives.AnimationDirection value) where TView : SplitCloseThemeAnimation { view.UI.ContentTranslationDirection = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.ContentTranslationOffset"/></summary>
        public static TView ContentTranslationOffset<TView>(this TView view, double value) where TView : SplitCloseThemeAnimation { view.UI.ContentTranslationOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.OffsetFromCenter"/></summary>
        public static TView OffsetFromCenter<TView>(this TView view, double value) where TView : SplitCloseThemeAnimation { view.UI.OffsetFromCenter = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.OpenedLength"/></summary>
        public static TView OpenedLength<TView>(this TView view, double value) where TView : SplitCloseThemeAnimation { view.UI.OpenedLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.OpenedTarget"/></summary>
        public static TView OpenedTarget<TView>(this TView view, Xaml.DependencyObject value) where TView : SplitCloseThemeAnimation { view.UI.OpenedTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.OpenedTargetName"/></summary>
        public static TView OpenedTargetName<TView>(this TView view, string value) where TView : SplitCloseThemeAnimation { view.UI.OpenedTargetName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.ClosedLength"/></summary>
        public static DependencyProperty<TTarget, double> ClosedLength<TTarget>(this TTarget target) where TTarget : SplitCloseThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.SplitCloseThemeAnimation.ClosedLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.ClosedTargetName"/></summary>
        public static DependencyProperty<TTarget, string> ClosedTargetName<TTarget>(this TTarget target) where TTarget : SplitCloseThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.SplitCloseThemeAnimation.ClosedTargetNameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.ClosedTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> ClosedTarget<TTarget>(this TTarget target) where TTarget : SplitCloseThemeAnimation
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Media.Animation.SplitCloseThemeAnimation.ClosedTargetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.ContentTargetName"/></summary>
        public static DependencyProperty<TTarget, string> ContentTargetName<TTarget>(this TTarget target) where TTarget : SplitCloseThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.SplitCloseThemeAnimation.ContentTargetNameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.ContentTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> ContentTarget<TTarget>(this TTarget target) where TTarget : SplitCloseThemeAnimation
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Media.Animation.SplitCloseThemeAnimation.ContentTargetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.ContentTranslationDirection"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> ContentTranslationDirection<TTarget>(this TTarget target) where TTarget : SplitCloseThemeAnimation
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection>.Get(target, Xaml.Media.Animation.SplitCloseThemeAnimation.ContentTranslationDirectionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.ContentTranslationOffset"/></summary>
        public static DependencyProperty<TTarget, double> ContentTranslationOffset<TTarget>(this TTarget target) where TTarget : SplitCloseThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.SplitCloseThemeAnimation.ContentTranslationOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.OffsetFromCenter"/></summary>
        public static DependencyProperty<TTarget, double> OffsetFromCenter<TTarget>(this TTarget target) where TTarget : SplitCloseThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.SplitCloseThemeAnimation.OffsetFromCenterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.OpenedLength"/></summary>
        public static DependencyProperty<TTarget, double> OpenedLength<TTarget>(this TTarget target) where TTarget : SplitCloseThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.SplitCloseThemeAnimation.OpenedLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.OpenedTargetName"/></summary>
        public static DependencyProperty<TTarget, string> OpenedTargetName<TTarget>(this TTarget target) where TTarget : SplitCloseThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.SplitCloseThemeAnimation.OpenedTargetNameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitCloseThemeAnimation.OpenedTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> OpenedTarget<TTarget>(this TTarget target) where TTarget : SplitCloseThemeAnimation
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Media.Animation.SplitCloseThemeAnimation.OpenedTargetProperty);
    }
}

namespace CSharpMarkup.WinUI // SplitOpenThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation"/></summary>
        public static SplitOpenThemeAnimation SplitOpenThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, double? ClosedLength = default, Xaml.DependencyObject ClosedTarget = default, string ClosedTargetName = default, Xaml.DependencyObject ContentTarget = default, string ContentTargetName = default, Xaml.Controls.Primitives.AnimationDirection? ContentTranslationDirection = default, double? ContentTranslationOffset = default, double? OffsetFromCenter = default, double? OpenedLength = default, Xaml.DependencyObject OpenedTarget = default, string OpenedTargetName = default)
        {
            var ui = new Xaml.Media.Animation.SplitOpenThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (ClosedLength is not null) ui.ClosedLength = ClosedLength.Value;
            if (ClosedTarget is not null) ui.ClosedTarget = ClosedTarget;
            if (ClosedTargetName is not null) ui.ClosedTargetName = ClosedTargetName;
            if (ContentTarget is not null) ui.ContentTarget = ContentTarget;
            if (ContentTargetName is not null) ui.ContentTargetName = ContentTargetName;
            if (ContentTranslationDirection is not null) ui.ContentTranslationDirection = ContentTranslationDirection.Value;
            if (ContentTranslationOffset is not null) ui.ContentTranslationOffset = ContentTranslationOffset.Value;
            if (OffsetFromCenter is not null) ui.OffsetFromCenter = OffsetFromCenter.Value;
            if (OpenedLength is not null) ui.OpenedLength = OpenedLength.Value;
            if (OpenedTarget is not null) ui.OpenedTarget = OpenedTarget;
            if (OpenedTargetName is not null) ui.OpenedTargetName = OpenedTargetName;
            return CSharpMarkup.WinUI.SplitOpenThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation"/></summary>
        public static SplitOpenThemeAnimation SplitOpenThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.SplitOpenThemeAnimation();
            return CSharpMarkup.WinUI.SplitOpenThemeAnimation.StartChain(ui);
        }
    }

    public partial class SplitOpenThemeAnimation : Timeline, IUI<Xaml.Media.Animation.SplitOpenThemeAnimation>
    {
        static SplitOpenThemeAnimation instance;

        internal static SplitOpenThemeAnimation StartChain(Xaml.Media.Animation.SplitOpenThemeAnimation ui)
        {
            if (instance == null) instance = new SplitOpenThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.SplitOpenThemeAnimation ui;

        public new Xaml.Media.Animation.SplitOpenThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.SplitOpenThemeAnimation(SplitOpenThemeAnimation view) => view?.UI;

        public static implicit operator SplitOpenThemeAnimation(Xaml.Media.Animation.SplitOpenThemeAnimation ui) => SplitOpenThemeAnimation.StartChain(ui);

        public SplitOpenThemeAnimation Invoke(Action<Xaml.Media.Animation.SplitOpenThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected SplitOpenThemeAnimation() { }
    }

    public static partial class SplitOpenThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.ClosedLength"/></summary>
        public static TView ClosedLength<TView>(this TView view, double value) where TView : SplitOpenThemeAnimation { view.UI.ClosedLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.ClosedTarget"/></summary>
        public static TView ClosedTarget<TView>(this TView view, Xaml.DependencyObject value) where TView : SplitOpenThemeAnimation { view.UI.ClosedTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.ClosedTargetName"/></summary>
        public static TView ClosedTargetName<TView>(this TView view, string value) where TView : SplitOpenThemeAnimation { view.UI.ClosedTargetName = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.ContentTarget"/></summary>
        public static TView ContentTarget<TView>(this TView view, Xaml.DependencyObject value) where TView : SplitOpenThemeAnimation { view.UI.ContentTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.ContentTargetName"/></summary>
        public static TView ContentTargetName<TView>(this TView view, string value) where TView : SplitOpenThemeAnimation { view.UI.ContentTargetName = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.ContentTranslationDirection"/></summary>
        public static TView ContentTranslationDirection<TView>(this TView view, Xaml.Controls.Primitives.AnimationDirection value) where TView : SplitOpenThemeAnimation { view.UI.ContentTranslationDirection = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.ContentTranslationOffset"/></summary>
        public static TView ContentTranslationOffset<TView>(this TView view, double value) where TView : SplitOpenThemeAnimation { view.UI.ContentTranslationOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.OffsetFromCenter"/></summary>
        public static TView OffsetFromCenter<TView>(this TView view, double value) where TView : SplitOpenThemeAnimation { view.UI.OffsetFromCenter = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.OpenedLength"/></summary>
        public static TView OpenedLength<TView>(this TView view, double value) where TView : SplitOpenThemeAnimation { view.UI.OpenedLength = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.OpenedTarget"/></summary>
        public static TView OpenedTarget<TView>(this TView view, Xaml.DependencyObject value) where TView : SplitOpenThemeAnimation { view.UI.OpenedTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.OpenedTargetName"/></summary>
        public static TView OpenedTargetName<TView>(this TView view, string value) where TView : SplitOpenThemeAnimation { view.UI.OpenedTargetName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.ClosedLength"/></summary>
        public static DependencyProperty<TTarget, double> ClosedLength<TTarget>(this TTarget target) where TTarget : SplitOpenThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.SplitOpenThemeAnimation.ClosedLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.ClosedTargetName"/></summary>
        public static DependencyProperty<TTarget, string> ClosedTargetName<TTarget>(this TTarget target) where TTarget : SplitOpenThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.SplitOpenThemeAnimation.ClosedTargetNameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.ClosedTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> ClosedTarget<TTarget>(this TTarget target) where TTarget : SplitOpenThemeAnimation
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Media.Animation.SplitOpenThemeAnimation.ClosedTargetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.ContentTargetName"/></summary>
        public static DependencyProperty<TTarget, string> ContentTargetName<TTarget>(this TTarget target) where TTarget : SplitOpenThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.SplitOpenThemeAnimation.ContentTargetNameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.ContentTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> ContentTarget<TTarget>(this TTarget target) where TTarget : SplitOpenThemeAnimation
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Media.Animation.SplitOpenThemeAnimation.ContentTargetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.ContentTranslationDirection"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> ContentTranslationDirection<TTarget>(this TTarget target) where TTarget : SplitOpenThemeAnimation
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection>.Get(target, Xaml.Media.Animation.SplitOpenThemeAnimation.ContentTranslationDirectionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.ContentTranslationOffset"/></summary>
        public static DependencyProperty<TTarget, double> ContentTranslationOffset<TTarget>(this TTarget target) where TTarget : SplitOpenThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.SplitOpenThemeAnimation.ContentTranslationOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.OffsetFromCenter"/></summary>
        public static DependencyProperty<TTarget, double> OffsetFromCenter<TTarget>(this TTarget target) where TTarget : SplitOpenThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.SplitOpenThemeAnimation.OffsetFromCenterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.OpenedLength"/></summary>
        public static DependencyProperty<TTarget, double> OpenedLength<TTarget>(this TTarget target) where TTarget : SplitOpenThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.SplitOpenThemeAnimation.OpenedLengthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.OpenedTargetName"/></summary>
        public static DependencyProperty<TTarget, string> OpenedTargetName<TTarget>(this TTarget target) where TTarget : SplitOpenThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.SplitOpenThemeAnimation.OpenedTargetNameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SplitOpenThemeAnimation.OpenedTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> OpenedTarget<TTarget>(this TTarget target) where TTarget : SplitOpenThemeAnimation
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.Media.Animation.SplitOpenThemeAnimation.OpenedTargetProperty);
    }
}

namespace CSharpMarkup.WinUI // Storyboard
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.Storyboard"/></summary>
        public static Storyboard Storyboard(params Xaml.Media.Animation.Timeline[] Children)
        {
            var ui = new Xaml.Media.Animation.Storyboard();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Media.Animation.Timeline>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.Storyboard.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.Storyboard"/></summary>
        public static Storyboard Storyboard()
        {
            var ui = new Xaml.Media.Animation.Storyboard();
            return CSharpMarkup.WinUI.Storyboard.StartChain(ui);
        }
    }

    public partial class Storyboard : Timeline, IUI<Xaml.Media.Animation.Storyboard>
    {
        static Storyboard instance;

        internal static Storyboard StartChain(Xaml.Media.Animation.Storyboard ui)
        {
            if (instance == null) instance = new Storyboard();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.Storyboard ui;

        public new Xaml.Media.Animation.Storyboard UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.Storyboard(Storyboard view) => view?.UI;

        public static implicit operator Storyboard(Xaml.Media.Animation.Storyboard ui) => Storyboard.StartChain(ui);

        public Storyboard Invoke(Action<Xaml.Media.Animation.Storyboard> action) { action?.Invoke(UI); return this; }

        protected Storyboard() { }
    }

    public static partial class StoryboardExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.Storyboard.TargetName"/></summary>
        public static TTarget Storyboard_TargetName<TTarget>(this TTarget target, string value) where TTarget : Timeline
        { Xaml.Media.Animation.Storyboard.SetTargetName(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.Storyboard.TargetName"/></summary>
        public static DependencyProperty<TTarget, string> Storyboard_TargetName<TTarget>(this TTarget target) where TTarget : Timeline
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.Storyboard.TargetNameProperty);

        /// <summary>Set <see cref="Xaml.Media.Animation.Storyboard.TargetProperty"/></summary>
        public static TTarget Storyboard_TargetProperty<TTarget>(this TTarget target, string value) where TTarget : Timeline
        { Xaml.Media.Animation.Storyboard.SetTargetProperty(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.Storyboard.TargetProperty"/></summary>
        public static DependencyProperty<TTarget, string> Storyboard_TargetProperty<TTarget>(this TTarget target) where TTarget : Timeline
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.Storyboard.TargetPropertyProperty);

        /// <summary>Set <see cref="Xaml.Media.Animation.Storyboard"/> attached properties</summary>
        public static TTarget Storyboard<TTarget>(this TTarget target

            , string TargetName = default

            , string TargetProperty = default

        ) where TTarget : Timeline
        {
            if (TargetName is not null) Xaml.Media.Animation.Storyboard.SetTargetName(target.UI, TargetName);

            if (TargetProperty is not null) Xaml.Media.Animation.Storyboard.SetTargetProperty(target.UI, TargetProperty);

            return target;
        }
    }
}

namespace CSharpMarkup.WinUI // SuppressNavigationTransitionInfo
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.SuppressNavigationTransitionInfo"/></summary>
        public static SuppressNavigationTransitionInfo SuppressNavigationTransitionInfo()
        {
            var ui = new Xaml.Media.Animation.SuppressNavigationTransitionInfo();
            return CSharpMarkup.WinUI.SuppressNavigationTransitionInfo.StartChain(ui);
        }
    }

    public partial class SuppressNavigationTransitionInfo : NavigationTransitionInfo, IUI<Xaml.Media.Animation.SuppressNavigationTransitionInfo>
    {
        static SuppressNavigationTransitionInfo instance;

        internal static SuppressNavigationTransitionInfo StartChain(Xaml.Media.Animation.SuppressNavigationTransitionInfo ui)
        {
            if (instance == null) instance = new SuppressNavigationTransitionInfo();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.SuppressNavigationTransitionInfo ui;

        public new Xaml.Media.Animation.SuppressNavigationTransitionInfo UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.SuppressNavigationTransitionInfo(SuppressNavigationTransitionInfo view) => view?.UI;

        public static implicit operator SuppressNavigationTransitionInfo(Xaml.Media.Animation.SuppressNavigationTransitionInfo ui) => SuppressNavigationTransitionInfo.StartChain(ui);

        public SuppressNavigationTransitionInfo Invoke(Action<Xaml.Media.Animation.SuppressNavigationTransitionInfo> action) { action?.Invoke(UI); return this; }

        protected SuppressNavigationTransitionInfo() { }
    }
}

namespace CSharpMarkup.WinUI // SwipeBackThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.SwipeBackThemeAnimation"/></summary>
        public static SwipeBackThemeAnimation SwipeBackThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, double? FromHorizontalOffset = default, double? FromVerticalOffset = default, string TargetName = default)
        {
            var ui = new Xaml.Media.Animation.SwipeBackThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (FromHorizontalOffset is not null) ui.FromHorizontalOffset = FromHorizontalOffset.Value;
            if (FromVerticalOffset is not null) ui.FromVerticalOffset = FromVerticalOffset.Value;
            if (TargetName is not null) ui.TargetName = TargetName;
            return CSharpMarkup.WinUI.SwipeBackThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.SwipeBackThemeAnimation"/></summary>
        public static SwipeBackThemeAnimation SwipeBackThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.SwipeBackThemeAnimation();
            return CSharpMarkup.WinUI.SwipeBackThemeAnimation.StartChain(ui);
        }
    }

    public partial class SwipeBackThemeAnimation : Timeline, IUI<Xaml.Media.Animation.SwipeBackThemeAnimation>
    {
        static SwipeBackThemeAnimation instance;

        internal static SwipeBackThemeAnimation StartChain(Xaml.Media.Animation.SwipeBackThemeAnimation ui)
        {
            if (instance == null) instance = new SwipeBackThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.SwipeBackThemeAnimation ui;

        public new Xaml.Media.Animation.SwipeBackThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.SwipeBackThemeAnimation(SwipeBackThemeAnimation view) => view?.UI;

        public static implicit operator SwipeBackThemeAnimation(Xaml.Media.Animation.SwipeBackThemeAnimation ui) => SwipeBackThemeAnimation.StartChain(ui);

        public SwipeBackThemeAnimation Invoke(Action<Xaml.Media.Animation.SwipeBackThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected SwipeBackThemeAnimation() { }
    }

    public static partial class SwipeBackThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.SwipeBackThemeAnimation.FromHorizontalOffset"/></summary>
        public static TView FromHorizontalOffset<TView>(this TView view, double value) where TView : SwipeBackThemeAnimation { view.UI.FromHorizontalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SwipeBackThemeAnimation.FromVerticalOffset"/></summary>
        public static TView FromVerticalOffset<TView>(this TView view, double value) where TView : SwipeBackThemeAnimation { view.UI.FromVerticalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SwipeBackThemeAnimation.TargetName"/></summary>
        public static TView TargetName<TView>(this TView view, string value) where TView : SwipeBackThemeAnimation { view.UI.TargetName = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SwipeBackThemeAnimation.FromHorizontalOffset"/></summary>
        public static DependencyProperty<TTarget, double> FromHorizontalOffset<TTarget>(this TTarget target) where TTarget : SwipeBackThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.SwipeBackThemeAnimation.FromHorizontalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SwipeBackThemeAnimation.FromVerticalOffset"/></summary>
        public static DependencyProperty<TTarget, double> FromVerticalOffset<TTarget>(this TTarget target) where TTarget : SwipeBackThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.SwipeBackThemeAnimation.FromVerticalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SwipeBackThemeAnimation.TargetName"/></summary>
        public static DependencyProperty<TTarget, string> TargetName<TTarget>(this TTarget target) where TTarget : SwipeBackThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.SwipeBackThemeAnimation.TargetNameProperty);
    }
}

namespace CSharpMarkup.WinUI // SwipeHintThemeAnimation
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Animation.SwipeHintThemeAnimation"/></summary>
        public static SwipeHintThemeAnimation SwipeHintThemeAnimation(CSharpMarkup.WinUI.to.TimeSpan? BeginTime = default, CSharpMarkup.WinUI.to.Duration? Duration = default, string TargetName = default, double? ToHorizontalOffset = default, double? ToVerticalOffset = default)
        {
            var ui = new Xaml.Media.Animation.SwipeHintThemeAnimation();
            if (BeginTime is not null) ui.BeginTime = BeginTime.Value;
            if (Duration is not null) ui.Duration = Duration.Value;
            if (TargetName is not null) ui.TargetName = TargetName;
            if (ToHorizontalOffset is not null) ui.ToHorizontalOffset = ToHorizontalOffset.Value;
            if (ToVerticalOffset is not null) ui.ToVerticalOffset = ToVerticalOffset.Value;
            return CSharpMarkup.WinUI.SwipeHintThemeAnimation.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Animation.SwipeHintThemeAnimation"/></summary>
        public static SwipeHintThemeAnimation SwipeHintThemeAnimation()
        {
            var ui = new Xaml.Media.Animation.SwipeHintThemeAnimation();
            return CSharpMarkup.WinUI.SwipeHintThemeAnimation.StartChain(ui);
        }
    }

    public partial class SwipeHintThemeAnimation : Timeline, IUI<Xaml.Media.Animation.SwipeHintThemeAnimation>
    {
        static SwipeHintThemeAnimation instance;

        internal static SwipeHintThemeAnimation StartChain(Xaml.Media.Animation.SwipeHintThemeAnimation ui)
        {
            if (instance == null) instance = new SwipeHintThemeAnimation();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Animation.SwipeHintThemeAnimation ui;

        public new Xaml.Media.Animation.SwipeHintThemeAnimation UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Animation.SwipeHintThemeAnimation(SwipeHintThemeAnimation view) => view?.UI;

        public static implicit operator SwipeHintThemeAnimation(Xaml.Media.Animation.SwipeHintThemeAnimation ui) => SwipeHintThemeAnimation.StartChain(ui);

        public SwipeHintThemeAnimation Invoke(Action<Xaml.Media.Animation.SwipeHintThemeAnimation> action) { action?.Invoke(UI); return this; }

        protected SwipeHintThemeAnimation() { }
    }

    public static partial class SwipeHintThemeAnimationExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.SwipeHintThemeAnimation.TargetName"/></summary>
        public static TView TargetName<TView>(this TView view, string value) where TView : SwipeHintThemeAnimation { view.UI.TargetName = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SwipeHintThemeAnimation.ToHorizontalOffset"/></summary>
        public static TView ToHorizontalOffset<TView>(this TView view, double value) where TView : SwipeHintThemeAnimation { view.UI.ToHorizontalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.SwipeHintThemeAnimation.ToVerticalOffset"/></summary>
        public static TView ToVerticalOffset<TView>(this TView view, double value) where TView : SwipeHintThemeAnimation { view.UI.ToVerticalOffset = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SwipeHintThemeAnimation.TargetName"/></summary>
        public static DependencyProperty<TTarget, string> TargetName<TTarget>(this TTarget target) where TTarget : SwipeHintThemeAnimation
        => DependencyProperty<TTarget, string>.Get(target, Xaml.Media.Animation.SwipeHintThemeAnimation.TargetNameProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SwipeHintThemeAnimation.ToHorizontalOffset"/></summary>
        public static DependencyProperty<TTarget, double> ToHorizontalOffset<TTarget>(this TTarget target) where TTarget : SwipeHintThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.SwipeHintThemeAnimation.ToHorizontalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.SwipeHintThemeAnimation.ToVerticalOffset"/></summary>
        public static DependencyProperty<TTarget, double> ToVerticalOffset<TTarget>(this TTarget target) where TTarget : SwipeHintThemeAnimation
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.SwipeHintThemeAnimation.ToVerticalOffsetProperty);
    }
}

namespace CSharpMarkup.WinUI // Timeline
{
    public partial class Timeline : DependencyObject, IUI<Xaml.Media.Animation.Timeline>
    {
        Xaml.Media.Animation.Timeline ui;

        public new Xaml.Media.Animation.Timeline UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Timeline Invoke(Action<Xaml.Media.Animation.Timeline> action) { action?.Invoke(UI); return this; }

        protected Timeline() { }
    }

    public static partial class TimelineExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Animation.Timeline.AutoReverse"/></summary>
        public static TView AutoReverse<TView>(this TView view, bool value) where TView : Timeline { view.UI.AutoReverse = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.Timeline.BeginTime"/></summary>
        public static TView BeginTime<TView>(this TView view, CSharpMarkup.WinUI.to.TimeSpan value) where TView : Timeline { view.UI.BeginTime = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.Timeline.Duration"/></summary>
        public static TView Duration<TView>(this TView view, CSharpMarkup.WinUI.to.Duration value) where TView : Timeline { view.UI.Duration = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.Timeline.FillBehavior"/></summary>
        public static TView FillBehavior<TView>(this TView view, Xaml.Media.Animation.FillBehavior value) where TView : Timeline { view.UI.FillBehavior = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.Timeline.RepeatBehavior"/></summary>
        public static TView RepeatBehavior<TView>(this TView view, Xaml.Media.Animation.RepeatBehavior value) where TView : Timeline { view.UI.RepeatBehavior = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Animation.Timeline.SpeedRatio"/></summary>
        public static TView SpeedRatio<TView>(this TView view, double value) where TView : Timeline { view.UI.SpeedRatio = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.Timeline.AutoReverse"/></summary>
        public static DependencyProperty<TTarget, bool> AutoReverse<TTarget>(this TTarget target) where TTarget : Timeline
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Animation.Timeline.AutoReverseProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.Timeline.BeginTime"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.TimeSpan> BeginTime<TTarget>(this TTarget target) where TTarget : Timeline
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.TimeSpan>.Get(target, Xaml.Media.Animation.Timeline.BeginTimeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.Timeline.Duration"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Duration> Duration<TTarget>(this TTarget target) where TTarget : Timeline
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Duration>.Get(target, Xaml.Media.Animation.Timeline.DurationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.Timeline.FillBehavior"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.FillBehavior> FillBehavior<TTarget>(this TTarget target) where TTarget : Timeline
        => DependencyProperty<TTarget, Xaml.Media.Animation.FillBehavior>.Get(target, Xaml.Media.Animation.Timeline.FillBehaviorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.Timeline.RepeatBehavior"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.RepeatBehavior> RepeatBehavior<TTarget>(this TTarget target) where TTarget : Timeline
        => DependencyProperty<TTarget, Xaml.Media.Animation.RepeatBehavior>.Get(target, Xaml.Media.Animation.Timeline.RepeatBehaviorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Animation.Timeline.SpeedRatio"/></summary>
        public static DependencyProperty<TTarget, double> SpeedRatio<TTarget>(this TTarget target) where TTarget : Timeline
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Animation.Timeline.SpeedRatioProperty);
    }
}

namespace CSharpMarkup.WinUI // Transition
{
    public partial class Transition : DependencyObject, IUI<Xaml.Media.Animation.Transition>
    {
        Xaml.Media.Animation.Transition ui;

        public new Xaml.Media.Animation.Transition UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Transition Invoke(Action<Xaml.Media.Animation.Transition> action) { action?.Invoke(UI); return this; }

        protected Transition() { }
    }
}

namespace CSharpMarkup.WinUI // ArcSegment
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.ArcSegment"/></summary>
        public static ArcSegment ArcSegment(bool? IsLargeArc = default, CSharpMarkup.WinUI.to.Point? Point = default, double? RotationAngle = default, CSharpMarkup.WinUI.to.Size? Size = default, Xaml.Media.SweepDirection? SweepDirection = default)
        {
            var ui = new Xaml.Media.ArcSegment();
            if (IsLargeArc is not null) ui.IsLargeArc = IsLargeArc.Value;
            if (Point is not null) ui.Point = Point.Value;
            if (RotationAngle is not null) ui.RotationAngle = RotationAngle.Value;
            if (Size is not null) ui.Size = Size.Value;
            if (SweepDirection is not null) ui.SweepDirection = SweepDirection.Value;
            return CSharpMarkup.WinUI.ArcSegment.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.ArcSegment"/></summary>
        public static ArcSegment ArcSegment()
        {
            var ui = new Xaml.Media.ArcSegment();
            return CSharpMarkup.WinUI.ArcSegment.StartChain(ui);
        }
    }

    public partial class ArcSegment : PathSegment, IUI<Xaml.Media.ArcSegment>
    {
        static ArcSegment instance;

        internal static ArcSegment StartChain(Xaml.Media.ArcSegment ui)
        {
            if (instance == null) instance = new ArcSegment();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.ArcSegment ui;

        public new Xaml.Media.ArcSegment UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.ArcSegment(ArcSegment view) => view?.UI;

        public static implicit operator ArcSegment(Xaml.Media.ArcSegment ui) => ArcSegment.StartChain(ui);

        public ArcSegment Invoke(Action<Xaml.Media.ArcSegment> action) { action?.Invoke(UI); return this; }

        protected ArcSegment() { }
    }

    public static partial class ArcSegmentExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.ArcSegment.IsLargeArc"/></summary>
        public static TView IsLargeArc<TView>(this TView view, bool value) where TView : ArcSegment { view.UI.IsLargeArc = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.ArcSegment.Point"/></summary>
        public static TView Point<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : ArcSegment { view.UI.Point = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.ArcSegment.RotationAngle"/></summary>
        public static TView RotationAngle<TView>(this TView view, double value) where TView : ArcSegment { view.UI.RotationAngle = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.ArcSegment.Size"/></summary>
        public static TView Size<TView>(this TView view, CSharpMarkup.WinUI.to.Size value) where TView : ArcSegment { view.UI.Size = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.ArcSegment.SweepDirection"/></summary>
        public static TView SweepDirection<TView>(this TView view, Xaml.Media.SweepDirection value) where TView : ArcSegment { view.UI.SweepDirection = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.ArcSegment.IsLargeArc"/></summary>
        public static DependencyProperty<TTarget, bool> IsLargeArc<TTarget>(this TTarget target) where TTarget : ArcSegment
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.ArcSegment.IsLargeArcProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.ArcSegment.Point"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> Point<TTarget>(this TTarget target) where TTarget : ArcSegment
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.ArcSegment.PointProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.ArcSegment.RotationAngle"/></summary>
        public static DependencyProperty<TTarget, double> RotationAngle<TTarget>(this TTarget target) where TTarget : ArcSegment
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.ArcSegment.RotationAngleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.ArcSegment.Size"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Size> Size<TTarget>(this TTarget target) where TTarget : ArcSegment
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Size>.Get(target, Xaml.Media.ArcSegment.SizeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.ArcSegment.SweepDirection"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.SweepDirection> SweepDirection<TTarget>(this TTarget target) where TTarget : ArcSegment
        => DependencyProperty<TTarget, Xaml.Media.SweepDirection>.Get(target, Xaml.Media.ArcSegment.SweepDirectionProperty);
    }
}

namespace CSharpMarkup.WinUI // BezierSegment
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.BezierSegment"/></summary>
        public static BezierSegment BezierSegment(CSharpMarkup.WinUI.to.Point? Point1 = default, CSharpMarkup.WinUI.to.Point? Point2 = default, CSharpMarkup.WinUI.to.Point? Point3 = default)
        {
            var ui = new Xaml.Media.BezierSegment();
            if (Point1 is not null) ui.Point1 = Point1.Value;
            if (Point2 is not null) ui.Point2 = Point2.Value;
            if (Point3 is not null) ui.Point3 = Point3.Value;
            return CSharpMarkup.WinUI.BezierSegment.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.BezierSegment"/></summary>
        public static BezierSegment BezierSegment()
        {
            var ui = new Xaml.Media.BezierSegment();
            return CSharpMarkup.WinUI.BezierSegment.StartChain(ui);
        }
    }

    public partial class BezierSegment : PathSegment, IUI<Xaml.Media.BezierSegment>
    {
        static BezierSegment instance;

        internal static BezierSegment StartChain(Xaml.Media.BezierSegment ui)
        {
            if (instance == null) instance = new BezierSegment();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.BezierSegment ui;

        public new Xaml.Media.BezierSegment UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.BezierSegment(BezierSegment view) => view?.UI;

        public static implicit operator BezierSegment(Xaml.Media.BezierSegment ui) => BezierSegment.StartChain(ui);

        public BezierSegment Invoke(Action<Xaml.Media.BezierSegment> action) { action?.Invoke(UI); return this; }

        protected BezierSegment() { }
    }

    public static partial class BezierSegmentExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.BezierSegment.Point1"/></summary>
        public static TView Point1<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : BezierSegment { view.UI.Point1 = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.BezierSegment.Point2"/></summary>
        public static TView Point2<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : BezierSegment { view.UI.Point2 = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.BezierSegment.Point3"/></summary>
        public static TView Point3<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : BezierSegment { view.UI.Point3 = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.BezierSegment.Point1"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> Point1<TTarget>(this TTarget target) where TTarget : BezierSegment
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.BezierSegment.Point1Property);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.BezierSegment.Point2"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> Point2<TTarget>(this TTarget target) where TTarget : BezierSegment
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.BezierSegment.Point2Property);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.BezierSegment.Point3"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> Point3<TTarget>(this TTarget target) where TTarget : BezierSegment
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.BezierSegment.Point3Property);
    }
}

namespace CSharpMarkup.WinUI // BitmapCache
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.BitmapCache"/></summary>
        public static BitmapCache BitmapCache()
        {
            var ui = new Xaml.Media.BitmapCache();
            return CSharpMarkup.WinUI.BitmapCache.StartChain(ui);
        }
    }

    public partial class BitmapCache : CacheMode, IUI<Xaml.Media.BitmapCache>
    {
        static BitmapCache instance;

        internal static BitmapCache StartChain(Xaml.Media.BitmapCache ui)
        {
            if (instance == null) instance = new BitmapCache();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.BitmapCache ui;

        public new Xaml.Media.BitmapCache UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.BitmapCache(BitmapCache view) => view?.UI;

        public static implicit operator BitmapCache(Xaml.Media.BitmapCache ui) => BitmapCache.StartChain(ui);

        public BitmapCache Invoke(Action<Xaml.Media.BitmapCache> action) { action?.Invoke(UI); return this; }

        protected BitmapCache() { }
    }
}

namespace CSharpMarkup.WinUI // Brush
{
    public partial class Brush : DependencyObject, IUI<Xaml.Media.Brush>
    {
        Xaml.Media.Brush ui;

        public new Xaml.Media.Brush UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Brush Invoke(Action<Xaml.Media.Brush> action) { action?.Invoke(UI); return this; }

        protected Brush() { }
    }

    public static partial class BrushExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Brush.Opacity"/></summary>
        public static TView Opacity<TView>(this TView view, double value) where TView : Brush { view.UI.Opacity = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Brush.RelativeTransform"/></summary>
        public static TView RelativeTransform<TView>(this TView view, Xaml.Media.Transform value) where TView : Brush { view.UI.RelativeTransform = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Brush.Transform"/></summary>
        public static TView Transform<TView>(this TView view, Xaml.Media.Transform value) where TView : Brush { view.UI.Transform = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Brush.Opacity"/></summary>
        public static DependencyProperty<TTarget, double> Opacity<TTarget>(this TTarget target) where TTarget : Brush
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Brush.OpacityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Brush.RelativeTransform"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Transform> RelativeTransform<TTarget>(this TTarget target) where TTarget : Brush
        => DependencyProperty<TTarget, Xaml.Media.Transform>.Get(target, Xaml.Media.Brush.RelativeTransformProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Brush.Transform"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Transform> Transform<TTarget>(this TTarget target) where TTarget : Brush
        => DependencyProperty<TTarget, Xaml.Media.Transform>.Get(target, Xaml.Media.Brush.TransformProperty);
    }
}

namespace CSharpMarkup.WinUI // CacheMode
{
    public partial class CacheMode : DependencyObject, IUI<Xaml.Media.CacheMode>
    {
        Xaml.Media.CacheMode ui;

        public new Xaml.Media.CacheMode UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public CacheMode Invoke(Action<Xaml.Media.CacheMode> action) { action?.Invoke(UI); return this; }

        protected CacheMode() { }
    }
}

namespace CSharpMarkup.WinUI // CompositeTransform
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.CompositeTransform"/></summary>
        public static CompositeTransform CompositeTransform(double? CenterX = default, double? CenterY = default, double? Rotation = default, double? ScaleX = default, double? ScaleY = default, double? SkewX = default, double? SkewY = default, double? TranslateX = default, double? TranslateY = default)
        {
            var ui = new Xaml.Media.CompositeTransform();
            if (CenterX is not null) ui.CenterX = CenterX.Value;
            if (CenterY is not null) ui.CenterY = CenterY.Value;
            if (Rotation is not null) ui.Rotation = Rotation.Value;
            if (ScaleX is not null) ui.ScaleX = ScaleX.Value;
            if (ScaleY is not null) ui.ScaleY = ScaleY.Value;
            if (SkewX is not null) ui.SkewX = SkewX.Value;
            if (SkewY is not null) ui.SkewY = SkewY.Value;
            if (TranslateX is not null) ui.TranslateX = TranslateX.Value;
            if (TranslateY is not null) ui.TranslateY = TranslateY.Value;
            return CSharpMarkup.WinUI.CompositeTransform.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.CompositeTransform"/></summary>
        public static CompositeTransform CompositeTransform()
        {
            var ui = new Xaml.Media.CompositeTransform();
            return CSharpMarkup.WinUI.CompositeTransform.StartChain(ui);
        }
    }

    public partial class CompositeTransform : Transform, IUI<Xaml.Media.CompositeTransform>
    {
        static CompositeTransform instance;

        internal static CompositeTransform StartChain(Xaml.Media.CompositeTransform ui)
        {
            if (instance == null) instance = new CompositeTransform();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.CompositeTransform ui;

        public new Xaml.Media.CompositeTransform UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.CompositeTransform(CompositeTransform view) => view?.UI;

        public static implicit operator CompositeTransform(Xaml.Media.CompositeTransform ui) => CompositeTransform.StartChain(ui);

        public CompositeTransform Invoke(Action<Xaml.Media.CompositeTransform> action) { action?.Invoke(UI); return this; }

        protected CompositeTransform() { }
    }

    public static partial class CompositeTransformExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.CompositeTransform.CenterX"/></summary>
        public static TView CenterX<TView>(this TView view, double value) where TView : CompositeTransform { view.UI.CenterX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.CompositeTransform.CenterY"/></summary>
        public static TView CenterY<TView>(this TView view, double value) where TView : CompositeTransform { view.UI.CenterY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.CompositeTransform.Rotation"/></summary>
        public static TView Rotation<TView>(this TView view, double value) where TView : CompositeTransform { view.UI.Rotation = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.CompositeTransform.ScaleX"/></summary>
        public static TView ScaleX<TView>(this TView view, double value) where TView : CompositeTransform { view.UI.ScaleX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.CompositeTransform.ScaleY"/></summary>
        public static TView ScaleY<TView>(this TView view, double value) where TView : CompositeTransform { view.UI.ScaleY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.CompositeTransform.SkewX"/></summary>
        public static TView SkewX<TView>(this TView view, double value) where TView : CompositeTransform { view.UI.SkewX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.CompositeTransform.SkewY"/></summary>
        public static TView SkewY<TView>(this TView view, double value) where TView : CompositeTransform { view.UI.SkewY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.CompositeTransform.TranslateX"/></summary>
        public static TView TranslateX<TView>(this TView view, double value) where TView : CompositeTransform { view.UI.TranslateX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.CompositeTransform.TranslateY"/></summary>
        public static TView TranslateY<TView>(this TView view, double value) where TView : CompositeTransform { view.UI.TranslateY = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.CompositeTransform.CenterX"/></summary>
        public static DependencyProperty<TTarget, double> CenterX<TTarget>(this TTarget target) where TTarget : CompositeTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.CompositeTransform.CenterXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.CompositeTransform.CenterY"/></summary>
        public static DependencyProperty<TTarget, double> CenterY<TTarget>(this TTarget target) where TTarget : CompositeTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.CompositeTransform.CenterYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.CompositeTransform.Rotation"/></summary>
        public static DependencyProperty<TTarget, double> Rotation<TTarget>(this TTarget target) where TTarget : CompositeTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.CompositeTransform.RotationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.CompositeTransform.ScaleX"/></summary>
        public static DependencyProperty<TTarget, double> ScaleX<TTarget>(this TTarget target) where TTarget : CompositeTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.CompositeTransform.ScaleXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.CompositeTransform.ScaleY"/></summary>
        public static DependencyProperty<TTarget, double> ScaleY<TTarget>(this TTarget target) where TTarget : CompositeTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.CompositeTransform.ScaleYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.CompositeTransform.SkewX"/></summary>
        public static DependencyProperty<TTarget, double> SkewX<TTarget>(this TTarget target) where TTarget : CompositeTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.CompositeTransform.SkewXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.CompositeTransform.SkewY"/></summary>
        public static DependencyProperty<TTarget, double> SkewY<TTarget>(this TTarget target) where TTarget : CompositeTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.CompositeTransform.SkewYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.CompositeTransform.TranslateX"/></summary>
        public static DependencyProperty<TTarget, double> TranslateX<TTarget>(this TTarget target) where TTarget : CompositeTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.CompositeTransform.TranslateXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.CompositeTransform.TranslateY"/></summary>
        public static DependencyProperty<TTarget, double> TranslateY<TTarget>(this TTarget target) where TTarget : CompositeTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.CompositeTransform.TranslateYProperty);
    }
}

namespace CSharpMarkup.WinUI // DesktopAcrylicBackdrop
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.DesktopAcrylicBackdrop"/></summary>
        public static DesktopAcrylicBackdrop DesktopAcrylicBackdrop()
        {
            var ui = new Xaml.Media.DesktopAcrylicBackdrop();
            return CSharpMarkup.WinUI.DesktopAcrylicBackdrop.StartChain(ui);
        }
    }

    public partial class DesktopAcrylicBackdrop : SystemBackdrop, IUI<Xaml.Media.DesktopAcrylicBackdrop>
    {
        static DesktopAcrylicBackdrop instance;

        internal static DesktopAcrylicBackdrop StartChain(Xaml.Media.DesktopAcrylicBackdrop ui)
        {
            if (instance == null) instance = new DesktopAcrylicBackdrop();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.DesktopAcrylicBackdrop ui;

        public new Xaml.Media.DesktopAcrylicBackdrop UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.DesktopAcrylicBackdrop(DesktopAcrylicBackdrop view) => view?.UI;

        public static implicit operator DesktopAcrylicBackdrop(Xaml.Media.DesktopAcrylicBackdrop ui) => DesktopAcrylicBackdrop.StartChain(ui);

        public DesktopAcrylicBackdrop Invoke(Action<Xaml.Media.DesktopAcrylicBackdrop> action) { action?.Invoke(UI); return this; }

        protected DesktopAcrylicBackdrop() { }
    }
}

namespace CSharpMarkup.WinUI // EllipseGeometry
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.EllipseGeometry"/></summary>
        public static EllipseGeometry EllipseGeometry(CSharpMarkup.WinUI.to.Point? Center = default, double? RadiusX = default, double? RadiusY = default)
        {
            var ui = new Xaml.Media.EllipseGeometry();
            if (Center is not null) ui.Center = Center.Value;
            if (RadiusX is not null) ui.RadiusX = RadiusX.Value;
            if (RadiusY is not null) ui.RadiusY = RadiusY.Value;
            return CSharpMarkup.WinUI.EllipseGeometry.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.EllipseGeometry"/></summary>
        public static EllipseGeometry EllipseGeometry()
        {
            var ui = new Xaml.Media.EllipseGeometry();
            return CSharpMarkup.WinUI.EllipseGeometry.StartChain(ui);
        }
    }

    public partial class EllipseGeometry : Geometry, IUI<Xaml.Media.EllipseGeometry>
    {
        static EllipseGeometry instance;

        internal static EllipseGeometry StartChain(Xaml.Media.EllipseGeometry ui)
        {
            if (instance == null) instance = new EllipseGeometry();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.EllipseGeometry ui;

        public new Xaml.Media.EllipseGeometry UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.EllipseGeometry(EllipseGeometry view) => view?.UI;

        public static implicit operator EllipseGeometry(Xaml.Media.EllipseGeometry ui) => EllipseGeometry.StartChain(ui);

        public EllipseGeometry Invoke(Action<Xaml.Media.EllipseGeometry> action) { action?.Invoke(UI); return this; }

        protected EllipseGeometry() { }
    }

    public static partial class EllipseGeometryExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.EllipseGeometry.Center"/></summary>
        public static TView Center<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : EllipseGeometry { view.UI.Center = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.EllipseGeometry.RadiusX"/></summary>
        public static TView RadiusX<TView>(this TView view, double value) where TView : EllipseGeometry { view.UI.RadiusX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.EllipseGeometry.RadiusY"/></summary>
        public static TView RadiusY<TView>(this TView view, double value) where TView : EllipseGeometry { view.UI.RadiusY = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.EllipseGeometry.Center"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> Center<TTarget>(this TTarget target) where TTarget : EllipseGeometry
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.EllipseGeometry.CenterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.EllipseGeometry.RadiusX"/></summary>
        public static DependencyProperty<TTarget, double> RadiusX<TTarget>(this TTarget target) where TTarget : EllipseGeometry
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.EllipseGeometry.RadiusXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.EllipseGeometry.RadiusY"/></summary>
        public static DependencyProperty<TTarget, double> RadiusY<TTarget>(this TTarget target) where TTarget : EllipseGeometry
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.EllipseGeometry.RadiusYProperty);
    }
}

namespace CSharpMarkup.WinUI // GeneralTransform
{
    public partial class GeneralTransform : DependencyObject, IUI<Xaml.Media.GeneralTransform>
    {
        Xaml.Media.GeneralTransform ui;

        public new Xaml.Media.GeneralTransform UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public GeneralTransform Invoke(Action<Xaml.Media.GeneralTransform> action) { action?.Invoke(UI); return this; }

        protected GeneralTransform() { }
    }
}

namespace CSharpMarkup.WinUI // Geometry
{
    public partial class Geometry : DependencyObject, IUI<Xaml.Media.Geometry>
    {
        Xaml.Media.Geometry ui;

        public new Xaml.Media.Geometry UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Geometry Invoke(Action<Xaml.Media.Geometry> action) { action?.Invoke(UI); return this; }

        protected Geometry() { }
    }

    public static partial class GeometryExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Geometry.Transform"/></summary>
        public static TView Transform<TView>(this TView view, Xaml.Media.Transform value) where TView : Geometry { view.UI.Transform = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Geometry.Transform"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Transform> Transform<TTarget>(this TTarget target) where TTarget : Geometry
        => DependencyProperty<TTarget, Xaml.Media.Transform>.Get(target, Xaml.Media.Geometry.TransformProperty);
    }
}

namespace CSharpMarkup.WinUI // GeometryGroup
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.GeometryGroup"/></summary>
        public static GeometryGroup GeometryGroup(params CSharpMarkup.WinUI.to.Geometry?[] Children)
        {
            var ui = new Xaml.Media.GeometryGroup();
            for (int i = 0; i < Children.Length; i++)
            {
                var item = Children[i];
                if (!item.HasValue) continue;

                var child = item.Value;
                if (child.Values.Value is not null)
                {
                    ui.Children.Add(child.Values.Value);
                    continue;
                }

                if (child.Values.Array is not null)
                {
                    foreach (var subChild in child.Values.Array)
                        ui.Children.Add(subChild);
                }
            }
            return CSharpMarkup.WinUI.GeometryGroup.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.GeometryGroup"/></summary>
        public static GeometryGroup GeometryGroup()
        {
            var ui = new Xaml.Media.GeometryGroup();
            return CSharpMarkup.WinUI.GeometryGroup.StartChain(ui);
        }
    }

    public partial class GeometryGroup : Geometry, IUI<Xaml.Media.GeometryGroup>
    {
        static GeometryGroup instance;

        internal static GeometryGroup StartChain(Xaml.Media.GeometryGroup ui)
        {
            if (instance == null) instance = new GeometryGroup();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.GeometryGroup ui;

        public new Xaml.Media.GeometryGroup UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.GeometryGroup(GeometryGroup view) => view?.UI;

        public static implicit operator GeometryGroup(Xaml.Media.GeometryGroup ui) => GeometryGroup.StartChain(ui);

        public GeometryGroup Invoke(Action<Xaml.Media.GeometryGroup> action) { action?.Invoke(UI); return this; }

        protected GeometryGroup() { }
    }

    public static partial class GeometryGroupExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.GeometryGroup.FillRule"/></summary>
        public static TView FillRule<TView>(this TView view, Xaml.Media.FillRule value) where TView : GeometryGroup { view.UI.FillRule = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.GeometryGroup.Children"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.GeometryCollection> Children<TTarget>(this TTarget target) where TTarget : GeometryGroup
        => DependencyProperty<TTarget, Xaml.Media.GeometryCollection>.Get(target, Xaml.Media.GeometryGroup.ChildrenProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.GeometryGroup.FillRule"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FillRule> FillRule<TTarget>(this TTarget target) where TTarget : GeometryGroup
        => DependencyProperty<TTarget, Xaml.Media.FillRule>.Get(target, Xaml.Media.GeometryGroup.FillRuleProperty);
    }
}

namespace CSharpMarkup.WinUI // GradientBrush
{
    public partial class GradientBrush : Brush, IUI<Xaml.Media.GradientBrush>
    {
        Xaml.Media.GradientBrush ui;

        public new Xaml.Media.GradientBrush UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public GradientBrush Invoke(Action<Xaml.Media.GradientBrush> action) { action?.Invoke(UI); return this; }

        protected GradientBrush() { }
    }

    public static partial class GradientBrushExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.GradientBrush.ColorInterpolationMode"/></summary>
        public static TView ColorInterpolationMode<TView>(this TView view, Xaml.Media.ColorInterpolationMode value) where TView : GradientBrush { view.UI.ColorInterpolationMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.GradientBrush.MappingMode"/></summary>
        public static TView MappingMode<TView>(this TView view, Xaml.Media.BrushMappingMode value) where TView : GradientBrush { view.UI.MappingMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.GradientBrush.SpreadMethod"/></summary>
        public static TView SpreadMethod<TView>(this TView view, Xaml.Media.GradientSpreadMethod value) where TView : GradientBrush { view.UI.SpreadMethod = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.GradientBrush.ColorInterpolationMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ColorInterpolationMode> ColorInterpolationMode<TTarget>(this TTarget target) where TTarget : GradientBrush
        => DependencyProperty<TTarget, Xaml.Media.ColorInterpolationMode>.Get(target, Xaml.Media.GradientBrush.ColorInterpolationModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.GradientBrush.GradientStops"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.GradientStopCollection> GradientStops<TTarget>(this TTarget target) where TTarget : GradientBrush
        => DependencyProperty<TTarget, Xaml.Media.GradientStopCollection>.Get(target, Xaml.Media.GradientBrush.GradientStopsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.GradientBrush.MappingMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.BrushMappingMode> MappingMode<TTarget>(this TTarget target) where TTarget : GradientBrush
        => DependencyProperty<TTarget, Xaml.Media.BrushMappingMode>.Get(target, Xaml.Media.GradientBrush.MappingModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.GradientBrush.SpreadMethod"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.GradientSpreadMethod> SpreadMethod<TTarget>(this TTarget target) where TTarget : GradientBrush
        => DependencyProperty<TTarget, Xaml.Media.GradientSpreadMethod>.Get(target, Xaml.Media.GradientBrush.SpreadMethodProperty);
    }
}

namespace CSharpMarkup.WinUI // GradientStop
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.GradientStop"/></summary>
        public static GradientStop GradientStop(Windows.UI.Color Color)
        {
            var ui = new Xaml.Media.GradientStop();
            ui.Color = Color;
            return CSharpMarkup.WinUI.GradientStop.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.GradientStop"/></summary>
        public static GradientStop GradientStop()
        {
            var ui = new Xaml.Media.GradientStop();
            return CSharpMarkup.WinUI.GradientStop.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.GradientStop"/></summary>
        public static partial GradientStop GradientStop(Windows.UI.Color Color, double Offset)
        {
            var ui = new Xaml.Media.GradientStop();
            ui.Color = Color; ui.Offset = Offset;
            return CSharpMarkup.WinUI.GradientStop.StartChain(ui);
        }
    }

    public partial class GradientStop : DependencyObject, IUI<Xaml.Media.GradientStop>
    {
        static GradientStop instance;

        internal static GradientStop StartChain(Xaml.Media.GradientStop ui)
        {
            if (instance == null) instance = new GradientStop();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.GradientStop ui;

        public new Xaml.Media.GradientStop UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.GradientStop(GradientStop view) => view?.UI;

        public static implicit operator GradientStop(Xaml.Media.GradientStop ui) => GradientStop.StartChain(ui);

        public GradientStop Invoke(Action<Xaml.Media.GradientStop> action) { action?.Invoke(UI); return this; }

        protected GradientStop() { }
    }

    public static partial class GradientStopExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.GradientStop.Offset"/></summary>
        public static TView Offset<TView>(this TView view, double value) where TView : GradientStop { view.UI.Offset = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.GradientStop.Color"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Color> Color<TTarget>(this TTarget target) where TTarget : GradientStop
        => DependencyProperty<TTarget, Windows.UI.Color>.Get(target, Xaml.Media.GradientStop.ColorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.GradientStop.Offset"/></summary>
        public static DependencyProperty<TTarget, double> Offset<TTarget>(this TTarget target) where TTarget : GradientStop
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.GradientStop.OffsetProperty);
    }
}

namespace CSharpMarkup.WinUI // ImageBrush
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.ImageBrush"/></summary>
        /// <remarks>Remark: ImageBrush().Bind() binds to <see cref="Xaml.Media.ImageBrush.ImageSourceProperty"/></remarks>
        public static ImageBrush ImageBrush(Xaml.Media.ImageSource ImageSource = default)
        {
            var ui = new Xaml.Media.ImageBrush();
            if (ImageSource is not null) ui.ImageSource = ImageSource;
            return CSharpMarkup.WinUI.ImageBrush.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.ImageBrush"/></summary>
        /// <remarks>Remark: ImageBrush().Bind() binds to <see cref="Xaml.Media.ImageBrush.ImageSourceProperty"/></remarks>
        public static ImageBrush ImageBrush()
        {
            var ui = new Xaml.Media.ImageBrush();
            return CSharpMarkup.WinUI.ImageBrush.StartChain(ui);
        }
    }

    public partial class ImageBrush : TileBrush, IUI<Xaml.Media.ImageBrush>, IDefaultBindProperty
    {
        static ImageBrush instance;

        internal static ImageBrush StartChain(Xaml.Media.ImageBrush ui)
        {
            if (instance == null) instance = new ImageBrush();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.ImageBrush ui;

        public new Xaml.Media.ImageBrush UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Media.ImageBrush.ImageSourceProperty"/></summary>
        public Xaml.DependencyProperty DefaultBindProperty => Xaml.Media.ImageBrush.ImageSourceProperty;

        public static implicit operator Xaml.Media.ImageBrush(ImageBrush view) => view?.UI;

        public static implicit operator ImageBrush(Xaml.Media.ImageBrush ui) => ImageBrush.StartChain(ui);

        public ImageBrush Invoke(Action<Xaml.Media.ImageBrush> action) { action?.Invoke(UI); return this; }

        protected ImageBrush() { }
    }

    public static partial class ImageBrushExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.ImageBrush.ImageSource"/></summary>
        public static TView ImageSource<TView>(this TView view, Xaml.Media.ImageSource value) where TView : ImageBrush { view.UI.ImageSource = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.ImageBrush.ImageSource"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ImageSource> ImageSource<TTarget>(this TTarget target) where TTarget : ImageBrush
        => DependencyProperty<TTarget, Xaml.Media.ImageSource>.Get(target, Xaml.Media.ImageBrush.ImageSourceProperty);
    }
}

namespace CSharpMarkup.WinUI // ImageSource
{
    public partial class ImageSource : DependencyObject, IUI<Xaml.Media.ImageSource>
    {
        Xaml.Media.ImageSource ui;

        public new Xaml.Media.ImageSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public ImageSource Invoke(Action<Xaml.Media.ImageSource> action) { action?.Invoke(UI); return this; }

        protected ImageSource() { }
    }
}

namespace CSharpMarkup.WinUI // BitmapImage
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Imaging.BitmapImage"/></summary>
        public static BitmapImage BitmapImage(bool? AutoPlay = default, Xaml.Media.Imaging.BitmapCreateOptions? CreateOptions = default, int? DecodePixelHeight = default, Xaml.Media.Imaging.DecodePixelType? DecodePixelType = default, int? DecodePixelWidth = default, Uri UriSource = default)
        {
            var ui = new Xaml.Media.Imaging.BitmapImage();
            if (AutoPlay is not null) ui.AutoPlay = AutoPlay.Value;
            if (CreateOptions is not null) ui.CreateOptions = CreateOptions.Value;
            if (DecodePixelHeight is not null) ui.DecodePixelHeight = DecodePixelHeight.Value;
            if (DecodePixelType is not null) ui.DecodePixelType = DecodePixelType.Value;
            if (DecodePixelWidth is not null) ui.DecodePixelWidth = DecodePixelWidth.Value;
            if (UriSource is not null) ui.UriSource = UriSource;
            return CSharpMarkup.WinUI.BitmapImage.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Imaging.BitmapImage"/></summary>
        public static BitmapImage BitmapImage()
        {
            var ui = new Xaml.Media.Imaging.BitmapImage();
            return CSharpMarkup.WinUI.BitmapImage.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Imaging.BitmapImage"/></summary>
        public static BitmapImage BitmapImage(Uri uriSource)
        {
            var ui = new Xaml.Media.Imaging.BitmapImage(uriSource);
            return CSharpMarkup.WinUI.BitmapImage.StartChain(ui);
        }
    }

    public partial class BitmapImage : BitmapSource, IUI<Xaml.Media.Imaging.BitmapImage>
    {
        static BitmapImage instance;

        internal static BitmapImage StartChain(Xaml.Media.Imaging.BitmapImage ui)
        {
            if (instance == null) instance = new BitmapImage();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Imaging.BitmapImage ui;

        public new Xaml.Media.Imaging.BitmapImage UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Imaging.BitmapImage(BitmapImage view) => view?.UI;

        public static implicit operator BitmapImage(Xaml.Media.Imaging.BitmapImage ui) => BitmapImage.StartChain(ui);

        public BitmapImage Invoke(Action<Xaml.Media.Imaging.BitmapImage> action) { action?.Invoke(UI); return this; }

        protected BitmapImage() { }
    }

    public static partial class BitmapImageExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Imaging.BitmapImage.AutoPlay"/></summary>
        public static TView AutoPlay<TView>(this TView view, bool value) where TView : BitmapImage { view.UI.AutoPlay = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Imaging.BitmapImage.CreateOptions"/></summary>
        public static TView CreateOptions<TView>(this TView view, Xaml.Media.Imaging.BitmapCreateOptions value) where TView : BitmapImage { view.UI.CreateOptions = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Imaging.BitmapImage.DecodePixelHeight"/></summary>
        public static TView DecodePixelHeight<TView>(this TView view, int value) where TView : BitmapImage { view.UI.DecodePixelHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Imaging.BitmapImage.DecodePixelType"/></summary>
        public static TView DecodePixelType<TView>(this TView view, Xaml.Media.Imaging.DecodePixelType value) where TView : BitmapImage { view.UI.DecodePixelType = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Imaging.BitmapImage.DecodePixelWidth"/></summary>
        public static TView DecodePixelWidth<TView>(this TView view, int value) where TView : BitmapImage { view.UI.DecodePixelWidth = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Imaging.BitmapImage.UriSource"/></summary>
        public static TView UriSource<TView>(this TView view, Uri value) where TView : BitmapImage { view.UI.UriSource = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.BitmapImage.AutoPlay"/></summary>
        public static DependencyProperty<TTarget, bool> AutoPlay<TTarget>(this TTarget target) where TTarget : BitmapImage
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Imaging.BitmapImage.AutoPlayProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.BitmapImage.CreateOptions"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Imaging.BitmapCreateOptions> CreateOptions<TTarget>(this TTarget target) where TTarget : BitmapImage
        => DependencyProperty<TTarget, Xaml.Media.Imaging.BitmapCreateOptions>.Get(target, Xaml.Media.Imaging.BitmapImage.CreateOptionsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.BitmapImage.DecodePixelHeight"/></summary>
        public static DependencyProperty<TTarget, int> DecodePixelHeight<TTarget>(this TTarget target) where TTarget : BitmapImage
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Media.Imaging.BitmapImage.DecodePixelHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.BitmapImage.DecodePixelType"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Imaging.DecodePixelType> DecodePixelType<TTarget>(this TTarget target) where TTarget : BitmapImage
        => DependencyProperty<TTarget, Xaml.Media.Imaging.DecodePixelType>.Get(target, Xaml.Media.Imaging.BitmapImage.DecodePixelTypeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.BitmapImage.DecodePixelWidth"/></summary>
        public static DependencyProperty<TTarget, int> DecodePixelWidth<TTarget>(this TTarget target) where TTarget : BitmapImage
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Media.Imaging.BitmapImage.DecodePixelWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.BitmapImage.IsAnimatedBitmap"/></summary>
        public static DependencyProperty<TTarget, bool> IsAnimatedBitmap<TTarget>(this TTarget target) where TTarget : BitmapImage
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Imaging.BitmapImage.IsAnimatedBitmapProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.BitmapImage.IsPlaying"/></summary>
        public static DependencyProperty<TTarget, bool> IsPlaying<TTarget>(this TTarget target) where TTarget : BitmapImage
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.Imaging.BitmapImage.IsPlayingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.BitmapImage.UriSource"/></summary>
        public static DependencyProperty<TTarget, Uri> UriSource<TTarget>(this TTarget target) where TTarget : BitmapImage
        => DependencyProperty<TTarget, Uri>.Get(target, Xaml.Media.Imaging.BitmapImage.UriSourceProperty);
    }
}

namespace CSharpMarkup.WinUI // BitmapSource
{
    public partial class BitmapSource : ImageSource, IUI<Xaml.Media.Imaging.BitmapSource>
    {
        Xaml.Media.Imaging.BitmapSource ui;

        public new Xaml.Media.Imaging.BitmapSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public BitmapSource Invoke(Action<Xaml.Media.Imaging.BitmapSource> action) { action?.Invoke(UI); return this; }

        protected BitmapSource() { }
    }

    public static partial class BitmapSourceExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.BitmapSource.PixelHeight"/></summary>
        public static DependencyProperty<TTarget, int> PixelHeight<TTarget>(this TTarget target) where TTarget : BitmapSource
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Media.Imaging.BitmapSource.PixelHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.BitmapSource.PixelWidth"/></summary>
        public static DependencyProperty<TTarget, int> PixelWidth<TTarget>(this TTarget target) where TTarget : BitmapSource
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Media.Imaging.BitmapSource.PixelWidthProperty);
    }
}

namespace CSharpMarkup.WinUI // RenderTargetBitmap
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Imaging.RenderTargetBitmap"/></summary>
        public static RenderTargetBitmap RenderTargetBitmap()
        {
            var ui = new Xaml.Media.Imaging.RenderTargetBitmap();
            return CSharpMarkup.WinUI.RenderTargetBitmap.StartChain(ui);
        }
    }

    public partial class RenderTargetBitmap : ImageSource, IUI<Xaml.Media.Imaging.RenderTargetBitmap>
    {
        static RenderTargetBitmap instance;

        internal static RenderTargetBitmap StartChain(Xaml.Media.Imaging.RenderTargetBitmap ui)
        {
            if (instance == null) instance = new RenderTargetBitmap();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Imaging.RenderTargetBitmap ui;

        public new Xaml.Media.Imaging.RenderTargetBitmap UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Imaging.RenderTargetBitmap(RenderTargetBitmap view) => view?.UI;

        public static implicit operator RenderTargetBitmap(Xaml.Media.Imaging.RenderTargetBitmap ui) => RenderTargetBitmap.StartChain(ui);

        public RenderTargetBitmap Invoke(Action<Xaml.Media.Imaging.RenderTargetBitmap> action) { action?.Invoke(UI); return this; }

        protected RenderTargetBitmap() { }
    }

    public static partial class RenderTargetBitmapExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.RenderTargetBitmap.PixelHeight"/></summary>
        public static DependencyProperty<TTarget, int> PixelHeight<TTarget>(this TTarget target) where TTarget : RenderTargetBitmap
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Media.Imaging.RenderTargetBitmap.PixelHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.RenderTargetBitmap.PixelWidth"/></summary>
        public static DependencyProperty<TTarget, int> PixelWidth<TTarget>(this TTarget target) where TTarget : RenderTargetBitmap
        => DependencyProperty<TTarget, int>.Get(target, Xaml.Media.Imaging.RenderTargetBitmap.PixelWidthProperty);
    }
}

namespace CSharpMarkup.WinUI // SoftwareBitmapSource
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Imaging.SoftwareBitmapSource"/></summary>
        public static SoftwareBitmapSource SoftwareBitmapSource()
        {
            var ui = new Xaml.Media.Imaging.SoftwareBitmapSource();
            return CSharpMarkup.WinUI.SoftwareBitmapSource.StartChain(ui);
        }
    }

    public partial class SoftwareBitmapSource : ImageSource, IUI<Xaml.Media.Imaging.SoftwareBitmapSource>
    {
        static SoftwareBitmapSource instance;

        internal static SoftwareBitmapSource StartChain(Xaml.Media.Imaging.SoftwareBitmapSource ui)
        {
            if (instance == null) instance = new SoftwareBitmapSource();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Imaging.SoftwareBitmapSource ui;

        public new Xaml.Media.Imaging.SoftwareBitmapSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Imaging.SoftwareBitmapSource(SoftwareBitmapSource view) => view?.UI;

        public static implicit operator SoftwareBitmapSource(Xaml.Media.Imaging.SoftwareBitmapSource ui) => SoftwareBitmapSource.StartChain(ui);

        public SoftwareBitmapSource Invoke(Action<Xaml.Media.Imaging.SoftwareBitmapSource> action) { action?.Invoke(UI); return this; }

        protected SoftwareBitmapSource() { }
    }
}

namespace CSharpMarkup.WinUI // SurfaceImageSource
{
    public partial class SurfaceImageSource : ImageSource, IUI<Xaml.Media.Imaging.SurfaceImageSource>
    {
        Xaml.Media.Imaging.SurfaceImageSource ui;

        public new Xaml.Media.Imaging.SurfaceImageSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public SurfaceImageSource Invoke(Action<Xaml.Media.Imaging.SurfaceImageSource> action) { action?.Invoke(UI); return this; }

        protected SurfaceImageSource() { }
    }
}

namespace CSharpMarkup.WinUI // SvgImageSource
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Imaging.SvgImageSource"/></summary>
        public static SvgImageSource SvgImageSource(double? RasterizePixelHeight = default, double? RasterizePixelWidth = default, Uri UriSource = default)
        {
            var ui = new Xaml.Media.Imaging.SvgImageSource();
            if (RasterizePixelHeight is not null) ui.RasterizePixelHeight = RasterizePixelHeight.Value;
            if (RasterizePixelWidth is not null) ui.RasterizePixelWidth = RasterizePixelWidth.Value;
            if (UriSource is not null) ui.UriSource = UriSource;
            return CSharpMarkup.WinUI.SvgImageSource.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Imaging.SvgImageSource"/></summary>
        public static SvgImageSource SvgImageSource()
        {
            var ui = new Xaml.Media.Imaging.SvgImageSource();
            return CSharpMarkup.WinUI.SvgImageSource.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Imaging.SvgImageSource"/></summary>
        public static SvgImageSource SvgImageSource(Uri uriSource)
        {
            var ui = new Xaml.Media.Imaging.SvgImageSource(uriSource);
            return CSharpMarkup.WinUI.SvgImageSource.StartChain(ui);
        }
    }

    public partial class SvgImageSource : ImageSource, IUI<Xaml.Media.Imaging.SvgImageSource>
    {
        static SvgImageSource instance;

        internal static SvgImageSource StartChain(Xaml.Media.Imaging.SvgImageSource ui)
        {
            if (instance == null) instance = new SvgImageSource();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Imaging.SvgImageSource ui;

        public new Xaml.Media.Imaging.SvgImageSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Imaging.SvgImageSource(SvgImageSource view) => view?.UI;

        public static implicit operator SvgImageSource(Xaml.Media.Imaging.SvgImageSource ui) => SvgImageSource.StartChain(ui);

        public SvgImageSource Invoke(Action<Xaml.Media.Imaging.SvgImageSource> action) { action?.Invoke(UI); return this; }

        protected SvgImageSource() { }
    }

    public static partial class SvgImageSourceExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Imaging.SvgImageSource.RasterizePixelHeight"/></summary>
        public static TView RasterizePixelHeight<TView>(this TView view, double value) where TView : SvgImageSource { view.UI.RasterizePixelHeight = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Imaging.SvgImageSource.RasterizePixelWidth"/></summary>
        public static TView RasterizePixelWidth<TView>(this TView view, double value) where TView : SvgImageSource { view.UI.RasterizePixelWidth = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Imaging.SvgImageSource.UriSource"/></summary>
        public static TView UriSource<TView>(this TView view, Uri value) where TView : SvgImageSource { view.UI.UriSource = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.SvgImageSource.RasterizePixelHeight"/></summary>
        public static DependencyProperty<TTarget, double> RasterizePixelHeight<TTarget>(this TTarget target) where TTarget : SvgImageSource
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Imaging.SvgImageSource.RasterizePixelHeightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.SvgImageSource.RasterizePixelWidth"/></summary>
        public static DependencyProperty<TTarget, double> RasterizePixelWidth<TTarget>(this TTarget target) where TTarget : SvgImageSource
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Imaging.SvgImageSource.RasterizePixelWidthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Imaging.SvgImageSource.UriSource"/></summary>
        public static DependencyProperty<TTarget, Uri> UriSource<TTarget>(this TTarget target) where TTarget : SvgImageSource
        => DependencyProperty<TTarget, Uri>.Get(target, Xaml.Media.Imaging.SvgImageSource.UriSourceProperty);
    }
}

namespace CSharpMarkup.WinUI // VirtualSurfaceImageSource
{
    public partial class VirtualSurfaceImageSource : SurfaceImageSource, IUI<Xaml.Media.Imaging.VirtualSurfaceImageSource>
    {
        Xaml.Media.Imaging.VirtualSurfaceImageSource ui;

        public new Xaml.Media.Imaging.VirtualSurfaceImageSource UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public VirtualSurfaceImageSource Invoke(Action<Xaml.Media.Imaging.VirtualSurfaceImageSource> action) { action?.Invoke(UI); return this; }

        protected VirtualSurfaceImageSource() { }
    }
}

namespace CSharpMarkup.WinUI // WriteableBitmap
{
    public partial class WriteableBitmap : BitmapSource, IUI<Xaml.Media.Imaging.WriteableBitmap>
    {
        Xaml.Media.Imaging.WriteableBitmap ui;

        public new Xaml.Media.Imaging.WriteableBitmap UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public WriteableBitmap Invoke(Action<Xaml.Media.Imaging.WriteableBitmap> action) { action?.Invoke(UI); return this; }

        protected WriteableBitmap() { }
    }
}

namespace CSharpMarkup.WinUI // LinearGradientBrush
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.LinearGradientBrush"/></summary>
        public static LinearGradientBrush LinearGradientBrush(params Xaml.Media.GradientStop[] GradientStops)
        {
            var ui = new Xaml.Media.LinearGradientBrush();
            for (int i = 0; i < GradientStops.Length; i++)
            {
                var child = GradientStops[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Media.GradientStop>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.GradientStops.Add(subChildren[j]);
                else
                    ui.GradientStops.Add(child);
            }
            return CSharpMarkup.WinUI.LinearGradientBrush.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.LinearGradientBrush"/></summary>
        public static LinearGradientBrush LinearGradientBrush()
        {
            var ui = new Xaml.Media.LinearGradientBrush();
            return CSharpMarkup.WinUI.LinearGradientBrush.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.LinearGradientBrush"/></summary>
        public static LinearGradientBrush LinearGradientBrush(Xaml.Media.GradientStopCollection gradientStopCollection, double angle)
        {
            var ui = new Xaml.Media.LinearGradientBrush(gradientStopCollection, angle);
            return CSharpMarkup.WinUI.LinearGradientBrush.StartChain(ui);
        }
    }

    public partial class LinearGradientBrush : GradientBrush, IUI<Xaml.Media.LinearGradientBrush>
    {
        static LinearGradientBrush instance;

        internal static LinearGradientBrush StartChain(Xaml.Media.LinearGradientBrush ui)
        {
            if (instance == null) instance = new LinearGradientBrush();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.LinearGradientBrush ui;

        public new Xaml.Media.LinearGradientBrush UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.LinearGradientBrush(LinearGradientBrush view) => view?.UI;

        public static implicit operator LinearGradientBrush(Xaml.Media.LinearGradientBrush ui) => LinearGradientBrush.StartChain(ui);

        public LinearGradientBrush Invoke(Action<Xaml.Media.LinearGradientBrush> action) { action?.Invoke(UI); return this; }

        protected LinearGradientBrush() { }
    }

    public static partial class LinearGradientBrushExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.LinearGradientBrush.EndPoint"/></summary>
        public static TView EndPoint<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : LinearGradientBrush { view.UI.EndPoint = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.LinearGradientBrush.StartPoint"/></summary>
        public static TView StartPoint<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : LinearGradientBrush { view.UI.StartPoint = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.LinearGradientBrush.EndPoint"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> EndPoint<TTarget>(this TTarget target) where TTarget : LinearGradientBrush
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.LinearGradientBrush.EndPointProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.LinearGradientBrush.StartPoint"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> StartPoint<TTarget>(this TTarget target) where TTarget : LinearGradientBrush
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.LinearGradientBrush.StartPointProperty);
    }
}

namespace CSharpMarkup.WinUI // LineGeometry
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.LineGeometry"/></summary>
        public static LineGeometry LineGeometry(CSharpMarkup.WinUI.to.Point? EndPoint = default, CSharpMarkup.WinUI.to.Point? StartPoint = default)
        {
            var ui = new Xaml.Media.LineGeometry();
            if (EndPoint is not null) ui.EndPoint = EndPoint.Value;
            if (StartPoint is not null) ui.StartPoint = StartPoint.Value;
            return CSharpMarkup.WinUI.LineGeometry.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.LineGeometry"/></summary>
        public static LineGeometry LineGeometry()
        {
            var ui = new Xaml.Media.LineGeometry();
            return CSharpMarkup.WinUI.LineGeometry.StartChain(ui);
        }
    }

    public partial class LineGeometry : Geometry, IUI<Xaml.Media.LineGeometry>
    {
        static LineGeometry instance;

        internal static LineGeometry StartChain(Xaml.Media.LineGeometry ui)
        {
            if (instance == null) instance = new LineGeometry();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.LineGeometry ui;

        public new Xaml.Media.LineGeometry UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.LineGeometry(LineGeometry view) => view?.UI;

        public static implicit operator LineGeometry(Xaml.Media.LineGeometry ui) => LineGeometry.StartChain(ui);

        public LineGeometry Invoke(Action<Xaml.Media.LineGeometry> action) { action?.Invoke(UI); return this; }

        protected LineGeometry() { }
    }

    public static partial class LineGeometryExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.LineGeometry.EndPoint"/></summary>
        public static TView EndPoint<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : LineGeometry { view.UI.EndPoint = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.LineGeometry.StartPoint"/></summary>
        public static TView StartPoint<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : LineGeometry { view.UI.StartPoint = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.LineGeometry.EndPoint"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> EndPoint<TTarget>(this TTarget target) where TTarget : LineGeometry
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.LineGeometry.EndPointProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.LineGeometry.StartPoint"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> StartPoint<TTarget>(this TTarget target) where TTarget : LineGeometry
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.LineGeometry.StartPointProperty);
    }
}

namespace CSharpMarkup.WinUI // LineSegment
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.LineSegment"/></summary>
        public static LineSegment LineSegment(CSharpMarkup.WinUI.to.Point? Point = default)
        {
            var ui = new Xaml.Media.LineSegment();
            if (Point is not null) ui.Point = Point.Value;
            return CSharpMarkup.WinUI.LineSegment.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.LineSegment"/></summary>
        public static LineSegment LineSegment()
        {
            var ui = new Xaml.Media.LineSegment();
            return CSharpMarkup.WinUI.LineSegment.StartChain(ui);
        }
    }

    public partial class LineSegment : PathSegment, IUI<Xaml.Media.LineSegment>
    {
        static LineSegment instance;

        internal static LineSegment StartChain(Xaml.Media.LineSegment ui)
        {
            if (instance == null) instance = new LineSegment();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.LineSegment ui;

        public new Xaml.Media.LineSegment UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.LineSegment(LineSegment view) => view?.UI;

        public static implicit operator LineSegment(Xaml.Media.LineSegment ui) => LineSegment.StartChain(ui);

        public LineSegment Invoke(Action<Xaml.Media.LineSegment> action) { action?.Invoke(UI); return this; }

        protected LineSegment() { }
    }

    public static partial class LineSegmentExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.LineSegment.Point"/></summary>
        public static TView Point<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : LineSegment { view.UI.Point = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.LineSegment.Point"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> Point<TTarget>(this TTarget target) where TTarget : LineSegment
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.LineSegment.PointProperty);
    }
}

namespace CSharpMarkup.WinUI // Matrix3DProjection
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Matrix3DProjection"/></summary>
        public static Matrix3DProjection Matrix3DProjection(Xaml.Media.Media3D.Matrix3D ProjectionMatrix)
        {
            var ui = new Xaml.Media.Matrix3DProjection();
            ui.ProjectionMatrix = ProjectionMatrix;
            return CSharpMarkup.WinUI.Matrix3DProjection.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Matrix3DProjection"/></summary>
        public static Matrix3DProjection Matrix3DProjection()
        {
            var ui = new Xaml.Media.Matrix3DProjection();
            return CSharpMarkup.WinUI.Matrix3DProjection.StartChain(ui);
        }
    }

    public partial class Matrix3DProjection : Projection, IUI<Xaml.Media.Matrix3DProjection>
    {
        static Matrix3DProjection instance;

        internal static Matrix3DProjection StartChain(Xaml.Media.Matrix3DProjection ui)
        {
            if (instance == null) instance = new Matrix3DProjection();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Matrix3DProjection ui;

        public new Xaml.Media.Matrix3DProjection UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Matrix3DProjection(Matrix3DProjection view) => view?.UI;

        public static implicit operator Matrix3DProjection(Xaml.Media.Matrix3DProjection ui) => Matrix3DProjection.StartChain(ui);

        public Matrix3DProjection Invoke(Action<Xaml.Media.Matrix3DProjection> action) { action?.Invoke(UI); return this; }

        protected Matrix3DProjection() { }
    }

    public static partial class Matrix3DProjectionExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Matrix3DProjection.ProjectionMatrix"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Media3D.Matrix3D> ProjectionMatrix<TTarget>(this TTarget target) where TTarget : Matrix3DProjection
        => DependencyProperty<TTarget, Xaml.Media.Media3D.Matrix3D>.Get(target, Xaml.Media.Matrix3DProjection.ProjectionMatrixProperty);
    }
}

namespace CSharpMarkup.WinUI // MatrixTransform
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.MatrixTransform"/></summary>
        public static MatrixTransform MatrixTransform(Xaml.Media.Matrix? Matrix = default)
        {
            var ui = new Xaml.Media.MatrixTransform();
            if (Matrix is not null) ui.Matrix = Matrix.Value;
            return CSharpMarkup.WinUI.MatrixTransform.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.MatrixTransform"/></summary>
        public static MatrixTransform MatrixTransform()
        {
            var ui = new Xaml.Media.MatrixTransform();
            return CSharpMarkup.WinUI.MatrixTransform.StartChain(ui);
        }
    }

    public partial class MatrixTransform : Transform, IUI<Xaml.Media.MatrixTransform>
    {
        static MatrixTransform instance;

        internal static MatrixTransform StartChain(Xaml.Media.MatrixTransform ui)
        {
            if (instance == null) instance = new MatrixTransform();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.MatrixTransform ui;

        public new Xaml.Media.MatrixTransform UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.MatrixTransform(MatrixTransform view) => view?.UI;

        public static implicit operator MatrixTransform(Xaml.Media.MatrixTransform ui) => MatrixTransform.StartChain(ui);

        public MatrixTransform Invoke(Action<Xaml.Media.MatrixTransform> action) { action?.Invoke(UI); return this; }

        protected MatrixTransform() { }
    }

    public static partial class MatrixTransformExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.MatrixTransform.Matrix"/></summary>
        public static TView Matrix<TView>(this TView view, Xaml.Media.Matrix value) where TView : MatrixTransform { view.UI.Matrix = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.MatrixTransform.Matrix"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Matrix> Matrix<TTarget>(this TTarget target) where TTarget : MatrixTransform
        => DependencyProperty<TTarget, Xaml.Media.Matrix>.Get(target, Xaml.Media.MatrixTransform.MatrixProperty);
    }
}

namespace CSharpMarkup.WinUI // CompositeTransform3D
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Media3D.CompositeTransform3D"/></summary>
        public static CompositeTransform3D CompositeTransform3D(double? CenterX = default, double? CenterY = default, double? CenterZ = default, double? RotationX = default, double? RotationY = default, double? RotationZ = default, double? ScaleX = default, double? ScaleY = default, double? ScaleZ = default, double? TranslateX = default, double? TranslateY = default, double? TranslateZ = default)
        {
            var ui = new Xaml.Media.Media3D.CompositeTransform3D();
            if (CenterX is not null) ui.CenterX = CenterX.Value;
            if (CenterY is not null) ui.CenterY = CenterY.Value;
            if (CenterZ is not null) ui.CenterZ = CenterZ.Value;
            if (RotationX is not null) ui.RotationX = RotationX.Value;
            if (RotationY is not null) ui.RotationY = RotationY.Value;
            if (RotationZ is not null) ui.RotationZ = RotationZ.Value;
            if (ScaleX is not null) ui.ScaleX = ScaleX.Value;
            if (ScaleY is not null) ui.ScaleY = ScaleY.Value;
            if (ScaleZ is not null) ui.ScaleZ = ScaleZ.Value;
            if (TranslateX is not null) ui.TranslateX = TranslateX.Value;
            if (TranslateY is not null) ui.TranslateY = TranslateY.Value;
            if (TranslateZ is not null) ui.TranslateZ = TranslateZ.Value;
            return CSharpMarkup.WinUI.CompositeTransform3D.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Media3D.CompositeTransform3D"/></summary>
        public static CompositeTransform3D CompositeTransform3D()
        {
            var ui = new Xaml.Media.Media3D.CompositeTransform3D();
            return CSharpMarkup.WinUI.CompositeTransform3D.StartChain(ui);
        }
    }

    public partial class CompositeTransform3D : Transform3D, IUI<Xaml.Media.Media3D.CompositeTransform3D>
    {
        static CompositeTransform3D instance;

        internal static CompositeTransform3D StartChain(Xaml.Media.Media3D.CompositeTransform3D ui)
        {
            if (instance == null) instance = new CompositeTransform3D();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Media3D.CompositeTransform3D ui;

        public new Xaml.Media.Media3D.CompositeTransform3D UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Media3D.CompositeTransform3D(CompositeTransform3D view) => view?.UI;

        public static implicit operator CompositeTransform3D(Xaml.Media.Media3D.CompositeTransform3D ui) => CompositeTransform3D.StartChain(ui);

        public CompositeTransform3D Invoke(Action<Xaml.Media.Media3D.CompositeTransform3D> action) { action?.Invoke(UI); return this; }

        protected CompositeTransform3D() { }
    }

    public static partial class CompositeTransform3DExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Media3D.CompositeTransform3D.CenterX"/></summary>
        public static TView CenterX<TView>(this TView view, double value) where TView : CompositeTransform3D { view.UI.CenterX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Media3D.CompositeTransform3D.CenterY"/></summary>
        public static TView CenterY<TView>(this TView view, double value) where TView : CompositeTransform3D { view.UI.CenterY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Media3D.CompositeTransform3D.CenterZ"/></summary>
        public static TView CenterZ<TView>(this TView view, double value) where TView : CompositeTransform3D { view.UI.CenterZ = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Media3D.CompositeTransform3D.RotationX"/></summary>
        public static TView RotationX<TView>(this TView view, double value) where TView : CompositeTransform3D { view.UI.RotationX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Media3D.CompositeTransform3D.RotationY"/></summary>
        public static TView RotationY<TView>(this TView view, double value) where TView : CompositeTransform3D { view.UI.RotationY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Media3D.CompositeTransform3D.RotationZ"/></summary>
        public static TView RotationZ<TView>(this TView view, double value) where TView : CompositeTransform3D { view.UI.RotationZ = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Media3D.CompositeTransform3D.ScaleX"/></summary>
        public static TView ScaleX<TView>(this TView view, double value) where TView : CompositeTransform3D { view.UI.ScaleX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Media3D.CompositeTransform3D.ScaleY"/></summary>
        public static TView ScaleY<TView>(this TView view, double value) where TView : CompositeTransform3D { view.UI.ScaleY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Media3D.CompositeTransform3D.ScaleZ"/></summary>
        public static TView ScaleZ<TView>(this TView view, double value) where TView : CompositeTransform3D { view.UI.ScaleZ = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Media3D.CompositeTransform3D.TranslateX"/></summary>
        public static TView TranslateX<TView>(this TView view, double value) where TView : CompositeTransform3D { view.UI.TranslateX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Media3D.CompositeTransform3D.TranslateY"/></summary>
        public static TView TranslateY<TView>(this TView view, double value) where TView : CompositeTransform3D { view.UI.TranslateY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Media3D.CompositeTransform3D.TranslateZ"/></summary>
        public static TView TranslateZ<TView>(this TView view, double value) where TView : CompositeTransform3D { view.UI.TranslateZ = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.CompositeTransform3D.CenterX"/></summary>
        public static DependencyProperty<TTarget, double> CenterX<TTarget>(this TTarget target) where TTarget : CompositeTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.CompositeTransform3D.CenterXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.CompositeTransform3D.CenterY"/></summary>
        public static DependencyProperty<TTarget, double> CenterY<TTarget>(this TTarget target) where TTarget : CompositeTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.CompositeTransform3D.CenterYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.CompositeTransform3D.CenterZ"/></summary>
        public static DependencyProperty<TTarget, double> CenterZ<TTarget>(this TTarget target) where TTarget : CompositeTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.CompositeTransform3D.CenterZProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.CompositeTransform3D.RotationX"/></summary>
        public static DependencyProperty<TTarget, double> RotationX<TTarget>(this TTarget target) where TTarget : CompositeTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.CompositeTransform3D.RotationXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.CompositeTransform3D.RotationY"/></summary>
        public static DependencyProperty<TTarget, double> RotationY<TTarget>(this TTarget target) where TTarget : CompositeTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.CompositeTransform3D.RotationYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.CompositeTransform3D.RotationZ"/></summary>
        public static DependencyProperty<TTarget, double> RotationZ<TTarget>(this TTarget target) where TTarget : CompositeTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.CompositeTransform3D.RotationZProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.CompositeTransform3D.ScaleX"/></summary>
        public static DependencyProperty<TTarget, double> ScaleX<TTarget>(this TTarget target) where TTarget : CompositeTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.CompositeTransform3D.ScaleXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.CompositeTransform3D.ScaleY"/></summary>
        public static DependencyProperty<TTarget, double> ScaleY<TTarget>(this TTarget target) where TTarget : CompositeTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.CompositeTransform3D.ScaleYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.CompositeTransform3D.ScaleZ"/></summary>
        public static DependencyProperty<TTarget, double> ScaleZ<TTarget>(this TTarget target) where TTarget : CompositeTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.CompositeTransform3D.ScaleZProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.CompositeTransform3D.TranslateX"/></summary>
        public static DependencyProperty<TTarget, double> TranslateX<TTarget>(this TTarget target) where TTarget : CompositeTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.CompositeTransform3D.TranslateXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.CompositeTransform3D.TranslateY"/></summary>
        public static DependencyProperty<TTarget, double> TranslateY<TTarget>(this TTarget target) where TTarget : CompositeTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.CompositeTransform3D.TranslateYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.CompositeTransform3D.TranslateZ"/></summary>
        public static DependencyProperty<TTarget, double> TranslateZ<TTarget>(this TTarget target) where TTarget : CompositeTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.CompositeTransform3D.TranslateZProperty);
    }
}

namespace CSharpMarkup.WinUI // PerspectiveTransform3D
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.Media3D.PerspectiveTransform3D"/></summary>
        public static PerspectiveTransform3D PerspectiveTransform3D(double? Depth = default, double? OffsetX = default, double? OffsetY = default)
        {
            var ui = new Xaml.Media.Media3D.PerspectiveTransform3D();
            if (Depth is not null) ui.Depth = Depth.Value;
            if (OffsetX is not null) ui.OffsetX = OffsetX.Value;
            if (OffsetY is not null) ui.OffsetY = OffsetY.Value;
            return CSharpMarkup.WinUI.PerspectiveTransform3D.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.Media3D.PerspectiveTransform3D"/></summary>
        public static PerspectiveTransform3D PerspectiveTransform3D()
        {
            var ui = new Xaml.Media.Media3D.PerspectiveTransform3D();
            return CSharpMarkup.WinUI.PerspectiveTransform3D.StartChain(ui);
        }
    }

    public partial class PerspectiveTransform3D : Transform3D, IUI<Xaml.Media.Media3D.PerspectiveTransform3D>
    {
        static PerspectiveTransform3D instance;

        internal static PerspectiveTransform3D StartChain(Xaml.Media.Media3D.PerspectiveTransform3D ui)
        {
            if (instance == null) instance = new PerspectiveTransform3D();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.Media3D.PerspectiveTransform3D ui;

        public new Xaml.Media.Media3D.PerspectiveTransform3D UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.Media3D.PerspectiveTransform3D(PerspectiveTransform3D view) => view?.UI;

        public static implicit operator PerspectiveTransform3D(Xaml.Media.Media3D.PerspectiveTransform3D ui) => PerspectiveTransform3D.StartChain(ui);

        public PerspectiveTransform3D Invoke(Action<Xaml.Media.Media3D.PerspectiveTransform3D> action) { action?.Invoke(UI); return this; }

        protected PerspectiveTransform3D() { }
    }

    public static partial class PerspectiveTransform3DExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.Media3D.PerspectiveTransform3D.Depth"/></summary>
        public static TView Depth<TView>(this TView view, double value) where TView : PerspectiveTransform3D { view.UI.Depth = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Media3D.PerspectiveTransform3D.OffsetX"/></summary>
        public static TView OffsetX<TView>(this TView view, double value) where TView : PerspectiveTransform3D { view.UI.OffsetX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.Media3D.PerspectiveTransform3D.OffsetY"/></summary>
        public static TView OffsetY<TView>(this TView view, double value) where TView : PerspectiveTransform3D { view.UI.OffsetY = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.PerspectiveTransform3D.Depth"/></summary>
        public static DependencyProperty<TTarget, double> Depth<TTarget>(this TTarget target) where TTarget : PerspectiveTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.PerspectiveTransform3D.DepthProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.PerspectiveTransform3D.OffsetX"/></summary>
        public static DependencyProperty<TTarget, double> OffsetX<TTarget>(this TTarget target) where TTarget : PerspectiveTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.PerspectiveTransform3D.OffsetXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.Media3D.PerspectiveTransform3D.OffsetY"/></summary>
        public static DependencyProperty<TTarget, double> OffsetY<TTarget>(this TTarget target) where TTarget : PerspectiveTransform3D
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.Media3D.PerspectiveTransform3D.OffsetYProperty);
    }
}

namespace CSharpMarkup.WinUI // Transform3D
{
    public partial class Transform3D : DependencyObject, IUI<Xaml.Media.Media3D.Transform3D>
    {
        Xaml.Media.Media3D.Transform3D ui;

        public new Xaml.Media.Media3D.Transform3D UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Transform3D Invoke(Action<Xaml.Media.Media3D.Transform3D> action) { action?.Invoke(UI); return this; }

        protected Transform3D() { }
    }
}

namespace CSharpMarkup.WinUI // MicaBackdrop
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.MicaBackdrop"/></summary>
        public static MicaBackdrop MicaBackdrop(UI.Composition.SystemBackdrops.MicaKind? Kind = default)
        {
            var ui = new Xaml.Media.MicaBackdrop();
            if (Kind is not null) ui.Kind = Kind.Value;
            return CSharpMarkup.WinUI.MicaBackdrop.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.MicaBackdrop"/></summary>
        public static MicaBackdrop MicaBackdrop()
        {
            var ui = new Xaml.Media.MicaBackdrop();
            return CSharpMarkup.WinUI.MicaBackdrop.StartChain(ui);
        }
    }

    public partial class MicaBackdrop : SystemBackdrop, IUI<Xaml.Media.MicaBackdrop>
    {
        static MicaBackdrop instance;

        internal static MicaBackdrop StartChain(Xaml.Media.MicaBackdrop ui)
        {
            if (instance == null) instance = new MicaBackdrop();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.MicaBackdrop ui;

        public new Xaml.Media.MicaBackdrop UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.MicaBackdrop(MicaBackdrop view) => view?.UI;

        public static implicit operator MicaBackdrop(Xaml.Media.MicaBackdrop ui) => MicaBackdrop.StartChain(ui);

        public MicaBackdrop Invoke(Action<Xaml.Media.MicaBackdrop> action) { action?.Invoke(UI); return this; }

        protected MicaBackdrop() { }
    }

    public static partial class MicaBackdropExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.MicaBackdrop.Kind"/></summary>
        public static TView Kind<TView>(this TView view, UI.Composition.SystemBackdrops.MicaKind value) where TView : MicaBackdrop { view.UI.Kind = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.MicaBackdrop.Kind"/></summary>
        public static DependencyProperty<TTarget, UI.Composition.SystemBackdrops.MicaKind> Kind<TTarget>(this TTarget target) where TTarget : MicaBackdrop
        => DependencyProperty<TTarget, UI.Composition.SystemBackdrops.MicaKind>.Get(target, Xaml.Media.MicaBackdrop.KindProperty);
    }
}

namespace CSharpMarkup.WinUI // PathFigure
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.PathFigure"/></summary>
        public static PathFigure PathFigure(params Xaml.Media.PathSegment[] Segments)
        {
            var ui = new Xaml.Media.PathFigure();
            for (int i = 0; i < Segments.Length; i++)
            {
                var child = Segments[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Media.PathSegment>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Segments.Add(subChildren[j]);
                else
                    ui.Segments.Add(child);
            }
            return CSharpMarkup.WinUI.PathFigure.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.PathFigure"/></summary>
        public static PathFigure PathFigure()
        {
            var ui = new Xaml.Media.PathFigure();
            return CSharpMarkup.WinUI.PathFigure.StartChain(ui);
        }
    }

    public partial class PathFigure : DependencyObject, IUI<Xaml.Media.PathFigure>
    {
        static PathFigure instance;

        internal static PathFigure StartChain(Xaml.Media.PathFigure ui)
        {
            if (instance == null) instance = new PathFigure();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.PathFigure ui;

        public new Xaml.Media.PathFigure UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.PathFigure(PathFigure view) => view?.UI;

        public static implicit operator PathFigure(Xaml.Media.PathFigure ui) => PathFigure.StartChain(ui);

        public PathFigure Invoke(Action<Xaml.Media.PathFigure> action) { action?.Invoke(UI); return this; }

        protected PathFigure() { }
    }

    public static partial class PathFigureExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.PathFigure.IsClosed"/></summary>
        public static TView IsClosed<TView>(this TView view, bool value) where TView : PathFigure { view.UI.IsClosed = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.PathFigure.IsFilled"/></summary>
        public static TView IsFilled<TView>(this TView view, bool value) where TView : PathFigure { view.UI.IsFilled = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.PathFigure.StartPoint"/></summary>
        public static TView StartPoint<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : PathFigure { view.UI.StartPoint = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PathFigure.IsClosed"/></summary>
        public static DependencyProperty<TTarget, bool> IsClosed<TTarget>(this TTarget target) where TTarget : PathFigure
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.PathFigure.IsClosedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PathFigure.IsFilled"/></summary>
        public static DependencyProperty<TTarget, bool> IsFilled<TTarget>(this TTarget target) where TTarget : PathFigure
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.Media.PathFigure.IsFilledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PathFigure.Segments"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.PathSegmentCollection> Segments<TTarget>(this TTarget target) where TTarget : PathFigure
        => DependencyProperty<TTarget, Xaml.Media.PathSegmentCollection>.Get(target, Xaml.Media.PathFigure.SegmentsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PathFigure.StartPoint"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> StartPoint<TTarget>(this TTarget target) where TTarget : PathFigure
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.PathFigure.StartPointProperty);
    }
}

namespace CSharpMarkup.WinUI // PathGeometry
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.PathGeometry"/></summary>
        public static PathGeometry PathGeometry(params Xaml.Media.PathFigure[] Figures)
        {
            var ui = new Xaml.Media.PathGeometry();
            for (int i = 0; i < Figures.Length; i++)
            {
                var child = Figures[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Media.PathFigure>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Figures.Add(subChildren[j]);
                else
                    ui.Figures.Add(child);
            }
            return CSharpMarkup.WinUI.PathGeometry.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.PathGeometry"/></summary>
        public static PathGeometry PathGeometry()
        {
            var ui = new Xaml.Media.PathGeometry();
            return CSharpMarkup.WinUI.PathGeometry.StartChain(ui);
        }
    }

    public partial class PathGeometry : Geometry, IUI<Xaml.Media.PathGeometry>
    {
        static PathGeometry instance;

        internal static PathGeometry StartChain(Xaml.Media.PathGeometry ui)
        {
            if (instance == null) instance = new PathGeometry();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.PathGeometry ui;

        public new Xaml.Media.PathGeometry UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.PathGeometry(PathGeometry view) => view?.UI;

        public static implicit operator PathGeometry(Xaml.Media.PathGeometry ui) => PathGeometry.StartChain(ui);

        public PathGeometry Invoke(Action<Xaml.Media.PathGeometry> action) { action?.Invoke(UI); return this; }

        protected PathGeometry() { }
    }

    public static partial class PathGeometryExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.PathGeometry.FillRule"/></summary>
        public static TView FillRule<TView>(this TView view, Xaml.Media.FillRule value) where TView : PathGeometry { view.UI.FillRule = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PathGeometry.Figures"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.PathFigureCollection> Figures<TTarget>(this TTarget target) where TTarget : PathGeometry
        => DependencyProperty<TTarget, Xaml.Media.PathFigureCollection>.Get(target, Xaml.Media.PathGeometry.FiguresProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PathGeometry.FillRule"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FillRule> FillRule<TTarget>(this TTarget target) where TTarget : PathGeometry
        => DependencyProperty<TTarget, Xaml.Media.FillRule>.Get(target, Xaml.Media.PathGeometry.FillRuleProperty);
    }
}

namespace CSharpMarkup.WinUI // PathSegment
{
    public partial class PathSegment : DependencyObject, IUI<Xaml.Media.PathSegment>
    {
        Xaml.Media.PathSegment ui;

        public new Xaml.Media.PathSegment UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PathSegment Invoke(Action<Xaml.Media.PathSegment> action) { action?.Invoke(UI); return this; }

        protected PathSegment() { }
    }
}

namespace CSharpMarkup.WinUI // PlaneProjection
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.PlaneProjection"/></summary>
        public static PlaneProjection PlaneProjection(double? CenterOfRotationX = default, double? CenterOfRotationY = default, double? CenterOfRotationZ = default, double? GlobalOffsetX = default, double? GlobalOffsetY = default, double? GlobalOffsetZ = default, double? LocalOffsetX = default, double? LocalOffsetY = default, double? LocalOffsetZ = default, double? RotationX = default, double? RotationY = default, double? RotationZ = default)
        {
            var ui = new Xaml.Media.PlaneProjection();
            if (CenterOfRotationX is not null) ui.CenterOfRotationX = CenterOfRotationX.Value;
            if (CenterOfRotationY is not null) ui.CenterOfRotationY = CenterOfRotationY.Value;
            if (CenterOfRotationZ is not null) ui.CenterOfRotationZ = CenterOfRotationZ.Value;
            if (GlobalOffsetX is not null) ui.GlobalOffsetX = GlobalOffsetX.Value;
            if (GlobalOffsetY is not null) ui.GlobalOffsetY = GlobalOffsetY.Value;
            if (GlobalOffsetZ is not null) ui.GlobalOffsetZ = GlobalOffsetZ.Value;
            if (LocalOffsetX is not null) ui.LocalOffsetX = LocalOffsetX.Value;
            if (LocalOffsetY is not null) ui.LocalOffsetY = LocalOffsetY.Value;
            if (LocalOffsetZ is not null) ui.LocalOffsetZ = LocalOffsetZ.Value;
            if (RotationX is not null) ui.RotationX = RotationX.Value;
            if (RotationY is not null) ui.RotationY = RotationY.Value;
            if (RotationZ is not null) ui.RotationZ = RotationZ.Value;
            return CSharpMarkup.WinUI.PlaneProjection.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.PlaneProjection"/></summary>
        public static PlaneProjection PlaneProjection()
        {
            var ui = new Xaml.Media.PlaneProjection();
            return CSharpMarkup.WinUI.PlaneProjection.StartChain(ui);
        }
    }

    public partial class PlaneProjection : Projection, IUI<Xaml.Media.PlaneProjection>
    {
        static PlaneProjection instance;

        internal static PlaneProjection StartChain(Xaml.Media.PlaneProjection ui)
        {
            if (instance == null) instance = new PlaneProjection();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.PlaneProjection ui;

        public new Xaml.Media.PlaneProjection UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.PlaneProjection(PlaneProjection view) => view?.UI;

        public static implicit operator PlaneProjection(Xaml.Media.PlaneProjection ui) => PlaneProjection.StartChain(ui);

        public PlaneProjection Invoke(Action<Xaml.Media.PlaneProjection> action) { action?.Invoke(UI); return this; }

        protected PlaneProjection() { }
    }

    public static partial class PlaneProjectionExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.PlaneProjection.CenterOfRotationX"/></summary>
        public static TView CenterOfRotationX<TView>(this TView view, double value) where TView : PlaneProjection { view.UI.CenterOfRotationX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.PlaneProjection.CenterOfRotationY"/></summary>
        public static TView CenterOfRotationY<TView>(this TView view, double value) where TView : PlaneProjection { view.UI.CenterOfRotationY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.PlaneProjection.CenterOfRotationZ"/></summary>
        public static TView CenterOfRotationZ<TView>(this TView view, double value) where TView : PlaneProjection { view.UI.CenterOfRotationZ = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.PlaneProjection.GlobalOffsetX"/></summary>
        public static TView GlobalOffsetX<TView>(this TView view, double value) where TView : PlaneProjection { view.UI.GlobalOffsetX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.PlaneProjection.GlobalOffsetY"/></summary>
        public static TView GlobalOffsetY<TView>(this TView view, double value) where TView : PlaneProjection { view.UI.GlobalOffsetY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.PlaneProjection.GlobalOffsetZ"/></summary>
        public static TView GlobalOffsetZ<TView>(this TView view, double value) where TView : PlaneProjection { view.UI.GlobalOffsetZ = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.PlaneProjection.LocalOffsetX"/></summary>
        public static TView LocalOffsetX<TView>(this TView view, double value) where TView : PlaneProjection { view.UI.LocalOffsetX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.PlaneProjection.LocalOffsetY"/></summary>
        public static TView LocalOffsetY<TView>(this TView view, double value) where TView : PlaneProjection { view.UI.LocalOffsetY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.PlaneProjection.LocalOffsetZ"/></summary>
        public static TView LocalOffsetZ<TView>(this TView view, double value) where TView : PlaneProjection { view.UI.LocalOffsetZ = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.PlaneProjection.RotationX"/></summary>
        public static TView RotationX<TView>(this TView view, double value) where TView : PlaneProjection { view.UI.RotationX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.PlaneProjection.RotationY"/></summary>
        public static TView RotationY<TView>(this TView view, double value) where TView : PlaneProjection { view.UI.RotationY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.PlaneProjection.RotationZ"/></summary>
        public static TView RotationZ<TView>(this TView view, double value) where TView : PlaneProjection { view.UI.RotationZ = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PlaneProjection.CenterOfRotationX"/></summary>
        public static DependencyProperty<TTarget, double> CenterOfRotationX<TTarget>(this TTarget target) where TTarget : PlaneProjection
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.PlaneProjection.CenterOfRotationXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PlaneProjection.CenterOfRotationY"/></summary>
        public static DependencyProperty<TTarget, double> CenterOfRotationY<TTarget>(this TTarget target) where TTarget : PlaneProjection
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.PlaneProjection.CenterOfRotationYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PlaneProjection.CenterOfRotationZ"/></summary>
        public static DependencyProperty<TTarget, double> CenterOfRotationZ<TTarget>(this TTarget target) where TTarget : PlaneProjection
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.PlaneProjection.CenterOfRotationZProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PlaneProjection.GlobalOffsetX"/></summary>
        public static DependencyProperty<TTarget, double> GlobalOffsetX<TTarget>(this TTarget target) where TTarget : PlaneProjection
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.PlaneProjection.GlobalOffsetXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PlaneProjection.GlobalOffsetY"/></summary>
        public static DependencyProperty<TTarget, double> GlobalOffsetY<TTarget>(this TTarget target) where TTarget : PlaneProjection
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.PlaneProjection.GlobalOffsetYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PlaneProjection.GlobalOffsetZ"/></summary>
        public static DependencyProperty<TTarget, double> GlobalOffsetZ<TTarget>(this TTarget target) where TTarget : PlaneProjection
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.PlaneProjection.GlobalOffsetZProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PlaneProjection.LocalOffsetX"/></summary>
        public static DependencyProperty<TTarget, double> LocalOffsetX<TTarget>(this TTarget target) where TTarget : PlaneProjection
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.PlaneProjection.LocalOffsetXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PlaneProjection.LocalOffsetY"/></summary>
        public static DependencyProperty<TTarget, double> LocalOffsetY<TTarget>(this TTarget target) where TTarget : PlaneProjection
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.PlaneProjection.LocalOffsetYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PlaneProjection.LocalOffsetZ"/></summary>
        public static DependencyProperty<TTarget, double> LocalOffsetZ<TTarget>(this TTarget target) where TTarget : PlaneProjection
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.PlaneProjection.LocalOffsetZProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PlaneProjection.ProjectionMatrix"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Media3D.Matrix3D> ProjectionMatrix<TTarget>(this TTarget target) where TTarget : PlaneProjection
        => DependencyProperty<TTarget, Xaml.Media.Media3D.Matrix3D>.Get(target, Xaml.Media.PlaneProjection.ProjectionMatrixProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PlaneProjection.RotationX"/></summary>
        public static DependencyProperty<TTarget, double> RotationX<TTarget>(this TTarget target) where TTarget : PlaneProjection
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.PlaneProjection.RotationXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PlaneProjection.RotationY"/></summary>
        public static DependencyProperty<TTarget, double> RotationY<TTarget>(this TTarget target) where TTarget : PlaneProjection
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.PlaneProjection.RotationYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PlaneProjection.RotationZ"/></summary>
        public static DependencyProperty<TTarget, double> RotationZ<TTarget>(this TTarget target) where TTarget : PlaneProjection
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.PlaneProjection.RotationZProperty);
    }
}

namespace CSharpMarkup.WinUI // PolyBezierSegment
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.PolyBezierSegment"/></summary>
        public static PolyBezierSegment PolyBezierSegment(params CSharpMarkup.WinUI.to.Point?[] Points)
        {
            var ui = new Xaml.Media.PolyBezierSegment();
            for (int i = 0; i < Points.Length; i++)
            {
                var item = Points[i];
                if (!item.HasValue) continue;

                var child = item.Value;
                if (child.Values.Value is not null)
                {
                    ui.Points.Add(child.Values.Value.Value);
                    continue;
                }

                if (child.Values.Array is not null)
                {
                    foreach (var subChild in child.Values.Array)
                        ui.Points.Add(subChild);
                }
            }
            return CSharpMarkup.WinUI.PolyBezierSegment.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.PolyBezierSegment"/></summary>
        public static PolyBezierSegment PolyBezierSegment()
        {
            var ui = new Xaml.Media.PolyBezierSegment();
            return CSharpMarkup.WinUI.PolyBezierSegment.StartChain(ui);
        }
    }

    public partial class PolyBezierSegment : PathSegment, IUI<Xaml.Media.PolyBezierSegment>
    {
        static PolyBezierSegment instance;

        internal static PolyBezierSegment StartChain(Xaml.Media.PolyBezierSegment ui)
        {
            if (instance == null) instance = new PolyBezierSegment();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.PolyBezierSegment ui;

        public new Xaml.Media.PolyBezierSegment UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.PolyBezierSegment(PolyBezierSegment view) => view?.UI;

        public static implicit operator PolyBezierSegment(Xaml.Media.PolyBezierSegment ui) => PolyBezierSegment.StartChain(ui);

        public PolyBezierSegment Invoke(Action<Xaml.Media.PolyBezierSegment> action) { action?.Invoke(UI); return this; }

        protected PolyBezierSegment() { }
    }

    public static partial class PolyBezierSegmentExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PolyBezierSegment.Points"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.PointCollection> Points<TTarget>(this TTarget target) where TTarget : PolyBezierSegment
        => DependencyProperty<TTarget, Xaml.Media.PointCollection>.Get(target, Xaml.Media.PolyBezierSegment.PointsProperty);
    }
}

namespace CSharpMarkup.WinUI // PolyLineSegment
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.PolyLineSegment"/></summary>
        public static PolyLineSegment PolyLineSegment(params CSharpMarkup.WinUI.to.Point?[] Points)
        {
            var ui = new Xaml.Media.PolyLineSegment();
            for (int i = 0; i < Points.Length; i++)
            {
                var item = Points[i];
                if (!item.HasValue) continue;

                var child = item.Value;
                if (child.Values.Value is not null)
                {
                    ui.Points.Add(child.Values.Value.Value);
                    continue;
                }

                if (child.Values.Array is not null)
                {
                    foreach (var subChild in child.Values.Array)
                        ui.Points.Add(subChild);
                }
            }
            return CSharpMarkup.WinUI.PolyLineSegment.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.PolyLineSegment"/></summary>
        public static PolyLineSegment PolyLineSegment()
        {
            var ui = new Xaml.Media.PolyLineSegment();
            return CSharpMarkup.WinUI.PolyLineSegment.StartChain(ui);
        }
    }

    public partial class PolyLineSegment : PathSegment, IUI<Xaml.Media.PolyLineSegment>
    {
        static PolyLineSegment instance;

        internal static PolyLineSegment StartChain(Xaml.Media.PolyLineSegment ui)
        {
            if (instance == null) instance = new PolyLineSegment();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.PolyLineSegment ui;

        public new Xaml.Media.PolyLineSegment UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.PolyLineSegment(PolyLineSegment view) => view?.UI;

        public static implicit operator PolyLineSegment(Xaml.Media.PolyLineSegment ui) => PolyLineSegment.StartChain(ui);

        public PolyLineSegment Invoke(Action<Xaml.Media.PolyLineSegment> action) { action?.Invoke(UI); return this; }

        protected PolyLineSegment() { }
    }

    public static partial class PolyLineSegmentExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PolyLineSegment.Points"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.PointCollection> Points<TTarget>(this TTarget target) where TTarget : PolyLineSegment
        => DependencyProperty<TTarget, Xaml.Media.PointCollection>.Get(target, Xaml.Media.PolyLineSegment.PointsProperty);
    }
}

namespace CSharpMarkup.WinUI // PolyQuadraticBezierSegment
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.PolyQuadraticBezierSegment"/></summary>
        public static PolyQuadraticBezierSegment PolyQuadraticBezierSegment(params CSharpMarkup.WinUI.to.Point?[] Points)
        {
            var ui = new Xaml.Media.PolyQuadraticBezierSegment();
            for (int i = 0; i < Points.Length; i++)
            {
                var item = Points[i];
                if (!item.HasValue) continue;

                var child = item.Value;
                if (child.Values.Value is not null)
                {
                    ui.Points.Add(child.Values.Value.Value);
                    continue;
                }

                if (child.Values.Array is not null)
                {
                    foreach (var subChild in child.Values.Array)
                        ui.Points.Add(subChild);
                }
            }
            return CSharpMarkup.WinUI.PolyQuadraticBezierSegment.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.PolyQuadraticBezierSegment"/></summary>
        public static PolyQuadraticBezierSegment PolyQuadraticBezierSegment()
        {
            var ui = new Xaml.Media.PolyQuadraticBezierSegment();
            return CSharpMarkup.WinUI.PolyQuadraticBezierSegment.StartChain(ui);
        }
    }

    public partial class PolyQuadraticBezierSegment : PathSegment, IUI<Xaml.Media.PolyQuadraticBezierSegment>
    {
        static PolyQuadraticBezierSegment instance;

        internal static PolyQuadraticBezierSegment StartChain(Xaml.Media.PolyQuadraticBezierSegment ui)
        {
            if (instance == null) instance = new PolyQuadraticBezierSegment();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.PolyQuadraticBezierSegment ui;

        public new Xaml.Media.PolyQuadraticBezierSegment UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.PolyQuadraticBezierSegment(PolyQuadraticBezierSegment view) => view?.UI;

        public static implicit operator PolyQuadraticBezierSegment(Xaml.Media.PolyQuadraticBezierSegment ui) => PolyQuadraticBezierSegment.StartChain(ui);

        public PolyQuadraticBezierSegment Invoke(Action<Xaml.Media.PolyQuadraticBezierSegment> action) { action?.Invoke(UI); return this; }

        protected PolyQuadraticBezierSegment() { }
    }

    public static partial class PolyQuadraticBezierSegmentExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.PolyQuadraticBezierSegment.Points"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.PointCollection> Points<TTarget>(this TTarget target) where TTarget : PolyQuadraticBezierSegment
        => DependencyProperty<TTarget, Xaml.Media.PointCollection>.Get(target, Xaml.Media.PolyQuadraticBezierSegment.PointsProperty);
    }
}

namespace CSharpMarkup.WinUI // Projection
{
    public partial class Projection : DependencyObject, IUI<Xaml.Media.Projection>
    {
        Xaml.Media.Projection ui;

        public new Xaml.Media.Projection UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Projection Invoke(Action<Xaml.Media.Projection> action) { action?.Invoke(UI); return this; }

        protected Projection() { }
    }
}

namespace CSharpMarkup.WinUI // QuadraticBezierSegment
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.QuadraticBezierSegment"/></summary>
        public static QuadraticBezierSegment QuadraticBezierSegment(CSharpMarkup.WinUI.to.Point? Point1 = default, CSharpMarkup.WinUI.to.Point? Point2 = default)
        {
            var ui = new Xaml.Media.QuadraticBezierSegment();
            if (Point1 is not null) ui.Point1 = Point1.Value;
            if (Point2 is not null) ui.Point2 = Point2.Value;
            return CSharpMarkup.WinUI.QuadraticBezierSegment.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.QuadraticBezierSegment"/></summary>
        public static QuadraticBezierSegment QuadraticBezierSegment()
        {
            var ui = new Xaml.Media.QuadraticBezierSegment();
            return CSharpMarkup.WinUI.QuadraticBezierSegment.StartChain(ui);
        }
    }

    public partial class QuadraticBezierSegment : PathSegment, IUI<Xaml.Media.QuadraticBezierSegment>
    {
        static QuadraticBezierSegment instance;

        internal static QuadraticBezierSegment StartChain(Xaml.Media.QuadraticBezierSegment ui)
        {
            if (instance == null) instance = new QuadraticBezierSegment();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.QuadraticBezierSegment ui;

        public new Xaml.Media.QuadraticBezierSegment UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.QuadraticBezierSegment(QuadraticBezierSegment view) => view?.UI;

        public static implicit operator QuadraticBezierSegment(Xaml.Media.QuadraticBezierSegment ui) => QuadraticBezierSegment.StartChain(ui);

        public QuadraticBezierSegment Invoke(Action<Xaml.Media.QuadraticBezierSegment> action) { action?.Invoke(UI); return this; }

        protected QuadraticBezierSegment() { }
    }

    public static partial class QuadraticBezierSegmentExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.QuadraticBezierSegment.Point1"/></summary>
        public static TView Point1<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : QuadraticBezierSegment { view.UI.Point1 = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.QuadraticBezierSegment.Point2"/></summary>
        public static TView Point2<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : QuadraticBezierSegment { view.UI.Point2 = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.QuadraticBezierSegment.Point1"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> Point1<TTarget>(this TTarget target) where TTarget : QuadraticBezierSegment
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.QuadraticBezierSegment.Point1Property);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.QuadraticBezierSegment.Point2"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> Point2<TTarget>(this TTarget target) where TTarget : QuadraticBezierSegment
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.QuadraticBezierSegment.Point2Property);
    }
}

namespace CSharpMarkup.WinUI // RadialGradientBrush
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.RadialGradientBrush"/></summary>
        public static RadialGradientBrush RadialGradientBrush(params Xaml.Media.GradientStop[] GradientStops)
        {
            var ui = new Xaml.Media.RadialGradientBrush();
            for (int i = 0; i < GradientStops.Length; i++)
            {
                var child = GradientStops[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Media.GradientStop>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.GradientStops.Add(subChildren[j]);
                else
                    ui.GradientStops.Add(child);
            }
            return CSharpMarkup.WinUI.RadialGradientBrush.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.RadialGradientBrush"/></summary>
        public static RadialGradientBrush RadialGradientBrush()
        {
            var ui = new Xaml.Media.RadialGradientBrush();
            return CSharpMarkup.WinUI.RadialGradientBrush.StartChain(ui);
        }
    }

    public partial class RadialGradientBrush : XamlCompositionBrushBase, IUI<Xaml.Media.RadialGradientBrush>
    {
        static RadialGradientBrush instance;

        internal static RadialGradientBrush StartChain(Xaml.Media.RadialGradientBrush ui)
        {
            if (instance == null) instance = new RadialGradientBrush();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.RadialGradientBrush ui;

        public new Xaml.Media.RadialGradientBrush UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.RadialGradientBrush(RadialGradientBrush view) => view?.UI;

        public static implicit operator RadialGradientBrush(Xaml.Media.RadialGradientBrush ui) => RadialGradientBrush.StartChain(ui);

        public RadialGradientBrush Invoke(Action<Xaml.Media.RadialGradientBrush> action) { action?.Invoke(UI); return this; }

        protected RadialGradientBrush() { }
    }

    public static partial class RadialGradientBrushExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.RadialGradientBrush.Center"/></summary>
        public static TView Center<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : RadialGradientBrush { view.UI.Center = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.RadialGradientBrush.GradientOrigin"/></summary>
        public static TView GradientOrigin<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : RadialGradientBrush { view.UI.GradientOrigin = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.RadialGradientBrush.InterpolationSpace"/></summary>
        public static TView InterpolationSpace<TView>(this TView view, UI.Composition.CompositionColorSpace value) where TView : RadialGradientBrush { view.UI.InterpolationSpace = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.RadialGradientBrush.MappingMode"/></summary>
        public static TView MappingMode<TView>(this TView view, Xaml.Media.BrushMappingMode value) where TView : RadialGradientBrush { view.UI.MappingMode = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.RadialGradientBrush.RadiusX"/></summary>
        public static TView RadiusX<TView>(this TView view, double value) where TView : RadialGradientBrush { view.UI.RadiusX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.RadialGradientBrush.RadiusY"/></summary>
        public static TView RadiusY<TView>(this TView view, double value) where TView : RadialGradientBrush { view.UI.RadiusY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.RadialGradientBrush.SpreadMethod"/></summary>
        public static TView SpreadMethod<TView>(this TView view, Xaml.Media.GradientSpreadMethod value) where TView : RadialGradientBrush { view.UI.SpreadMethod = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.RadialGradientBrush.Center"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> Center<TTarget>(this TTarget target) where TTarget : RadialGradientBrush
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.RadialGradientBrush.CenterProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.RadialGradientBrush.GradientOrigin"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> GradientOrigin<TTarget>(this TTarget target) where TTarget : RadialGradientBrush
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.Media.RadialGradientBrush.GradientOriginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.RadialGradientBrush.InterpolationSpace"/></summary>
        public static DependencyProperty<TTarget, UI.Composition.CompositionColorSpace> InterpolationSpace<TTarget>(this TTarget target) where TTarget : RadialGradientBrush
        => DependencyProperty<TTarget, UI.Composition.CompositionColorSpace>.Get(target, Xaml.Media.RadialGradientBrush.InterpolationSpaceProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.RadialGradientBrush.MappingMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.BrushMappingMode> MappingMode<TTarget>(this TTarget target) where TTarget : RadialGradientBrush
        => DependencyProperty<TTarget, Xaml.Media.BrushMappingMode>.Get(target, Xaml.Media.RadialGradientBrush.MappingModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.RadialGradientBrush.RadiusX"/></summary>
        public static DependencyProperty<TTarget, double> RadiusX<TTarget>(this TTarget target) where TTarget : RadialGradientBrush
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.RadialGradientBrush.RadiusXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.RadialGradientBrush.RadiusY"/></summary>
        public static DependencyProperty<TTarget, double> RadiusY<TTarget>(this TTarget target) where TTarget : RadialGradientBrush
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.RadialGradientBrush.RadiusYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.RadialGradientBrush.SpreadMethod"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.GradientSpreadMethod> SpreadMethod<TTarget>(this TTarget target) where TTarget : RadialGradientBrush
        => DependencyProperty<TTarget, Xaml.Media.GradientSpreadMethod>.Get(target, Xaml.Media.RadialGradientBrush.SpreadMethodProperty);
    }
}

namespace CSharpMarkup.WinUI // RectangleGeometry
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.RectangleGeometry"/></summary>
        public static RectangleGeometry RectangleGeometry(Windows.Foundation.Rect? Rect = default)
        {
            var ui = new Xaml.Media.RectangleGeometry();
            if (Rect is not null) ui.Rect = Rect.Value;
            return CSharpMarkup.WinUI.RectangleGeometry.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.RectangleGeometry"/></summary>
        public static RectangleGeometry RectangleGeometry()
        {
            var ui = new Xaml.Media.RectangleGeometry();
            return CSharpMarkup.WinUI.RectangleGeometry.StartChain(ui);
        }
    }

    public partial class RectangleGeometry : Geometry, IUI<Xaml.Media.RectangleGeometry>
    {
        static RectangleGeometry instance;

        internal static RectangleGeometry StartChain(Xaml.Media.RectangleGeometry ui)
        {
            if (instance == null) instance = new RectangleGeometry();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.RectangleGeometry ui;

        public new Xaml.Media.RectangleGeometry UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.RectangleGeometry(RectangleGeometry view) => view?.UI;

        public static implicit operator RectangleGeometry(Xaml.Media.RectangleGeometry ui) => RectangleGeometry.StartChain(ui);

        public RectangleGeometry Invoke(Action<Xaml.Media.RectangleGeometry> action) { action?.Invoke(UI); return this; }

        protected RectangleGeometry() { }
    }

    public static partial class RectangleGeometryExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.RectangleGeometry.Rect"/></summary>
        public static TView Rect<TView>(this TView view, Windows.Foundation.Rect value) where TView : RectangleGeometry { view.UI.Rect = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.RectangleGeometry.Rect"/></summary>
        public static DependencyProperty<TTarget, Windows.Foundation.Rect> Rect<TTarget>(this TTarget target) where TTarget : RectangleGeometry
        => DependencyProperty<TTarget, Windows.Foundation.Rect>.Get(target, Xaml.Media.RectangleGeometry.RectProperty);
    }
}

namespace CSharpMarkup.WinUI // RotateTransform
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.RotateTransform"/></summary>
        public static RotateTransform RotateTransform(double? Angle = default, double? CenterX = default, double? CenterY = default)
        {
            var ui = new Xaml.Media.RotateTransform();
            if (Angle is not null) ui.Angle = Angle.Value;
            if (CenterX is not null) ui.CenterX = CenterX.Value;
            if (CenterY is not null) ui.CenterY = CenterY.Value;
            return CSharpMarkup.WinUI.RotateTransform.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.RotateTransform"/></summary>
        public static RotateTransform RotateTransform()
        {
            var ui = new Xaml.Media.RotateTransform();
            return CSharpMarkup.WinUI.RotateTransform.StartChain(ui);
        }
    }

    public partial class RotateTransform : Transform, IUI<Xaml.Media.RotateTransform>
    {
        static RotateTransform instance;

        internal static RotateTransform StartChain(Xaml.Media.RotateTransform ui)
        {
            if (instance == null) instance = new RotateTransform();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.RotateTransform ui;

        public new Xaml.Media.RotateTransform UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.RotateTransform(RotateTransform view) => view?.UI;

        public static implicit operator RotateTransform(Xaml.Media.RotateTransform ui) => RotateTransform.StartChain(ui);

        public RotateTransform Invoke(Action<Xaml.Media.RotateTransform> action) { action?.Invoke(UI); return this; }

        protected RotateTransform() { }
    }

    public static partial class RotateTransformExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.RotateTransform.Angle"/></summary>
        public static TView Angle<TView>(this TView view, double value) where TView : RotateTransform { view.UI.Angle = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.RotateTransform.CenterX"/></summary>
        public static TView CenterX<TView>(this TView view, double value) where TView : RotateTransform { view.UI.CenterX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.RotateTransform.CenterY"/></summary>
        public static TView CenterY<TView>(this TView view, double value) where TView : RotateTransform { view.UI.CenterY = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.RotateTransform.Angle"/></summary>
        public static DependencyProperty<TTarget, double> Angle<TTarget>(this TTarget target) where TTarget : RotateTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.RotateTransform.AngleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.RotateTransform.CenterX"/></summary>
        public static DependencyProperty<TTarget, double> CenterX<TTarget>(this TTarget target) where TTarget : RotateTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.RotateTransform.CenterXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.RotateTransform.CenterY"/></summary>
        public static DependencyProperty<TTarget, double> CenterY<TTarget>(this TTarget target) where TTarget : RotateTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.RotateTransform.CenterYProperty);
    }
}

namespace CSharpMarkup.WinUI // ScaleTransform
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.ScaleTransform"/></summary>
        public static ScaleTransform ScaleTransform(double? CenterX = default, double? CenterY = default, double? ScaleX = default, double? ScaleY = default)
        {
            var ui = new Xaml.Media.ScaleTransform();
            if (CenterX is not null) ui.CenterX = CenterX.Value;
            if (CenterY is not null) ui.CenterY = CenterY.Value;
            if (ScaleX is not null) ui.ScaleX = ScaleX.Value;
            if (ScaleY is not null) ui.ScaleY = ScaleY.Value;
            return CSharpMarkup.WinUI.ScaleTransform.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.ScaleTransform"/></summary>
        public static ScaleTransform ScaleTransform()
        {
            var ui = new Xaml.Media.ScaleTransform();
            return CSharpMarkup.WinUI.ScaleTransform.StartChain(ui);
        }
    }

    public partial class ScaleTransform : Transform, IUI<Xaml.Media.ScaleTransform>
    {
        static ScaleTransform instance;

        internal static ScaleTransform StartChain(Xaml.Media.ScaleTransform ui)
        {
            if (instance == null) instance = new ScaleTransform();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.ScaleTransform ui;

        public new Xaml.Media.ScaleTransform UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.ScaleTransform(ScaleTransform view) => view?.UI;

        public static implicit operator ScaleTransform(Xaml.Media.ScaleTransform ui) => ScaleTransform.StartChain(ui);

        public ScaleTransform Invoke(Action<Xaml.Media.ScaleTransform> action) { action?.Invoke(UI); return this; }

        protected ScaleTransform() { }
    }

    public static partial class ScaleTransformExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.ScaleTransform.CenterX"/></summary>
        public static TView CenterX<TView>(this TView view, double value) where TView : ScaleTransform { view.UI.CenterX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.ScaleTransform.CenterY"/></summary>
        public static TView CenterY<TView>(this TView view, double value) where TView : ScaleTransform { view.UI.CenterY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.ScaleTransform.ScaleX"/></summary>
        public static TView ScaleX<TView>(this TView view, double value) where TView : ScaleTransform { view.UI.ScaleX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.ScaleTransform.ScaleY"/></summary>
        public static TView ScaleY<TView>(this TView view, double value) where TView : ScaleTransform { view.UI.ScaleY = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.ScaleTransform.CenterX"/></summary>
        public static DependencyProperty<TTarget, double> CenterX<TTarget>(this TTarget target) where TTarget : ScaleTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.ScaleTransform.CenterXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.ScaleTransform.CenterY"/></summary>
        public static DependencyProperty<TTarget, double> CenterY<TTarget>(this TTarget target) where TTarget : ScaleTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.ScaleTransform.CenterYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.ScaleTransform.ScaleX"/></summary>
        public static DependencyProperty<TTarget, double> ScaleX<TTarget>(this TTarget target) where TTarget : ScaleTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.ScaleTransform.ScaleXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.ScaleTransform.ScaleY"/></summary>
        public static DependencyProperty<TTarget, double> ScaleY<TTarget>(this TTarget target) where TTarget : ScaleTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.ScaleTransform.ScaleYProperty);
    }
}

namespace CSharpMarkup.WinUI // Shadow
{
    public partial class Shadow : DependencyObject, IUI<Xaml.Media.Shadow>
    {
        Xaml.Media.Shadow ui;

        public new Xaml.Media.Shadow UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Shadow Invoke(Action<Xaml.Media.Shadow> action) { action?.Invoke(UI); return this; }

        protected Shadow() { }
    }
}

namespace CSharpMarkup.WinUI // SkewTransform
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.SkewTransform"/></summary>
        public static SkewTransform SkewTransform(double? AngleX = default, double? AngleY = default, double? CenterX = default, double? CenterY = default)
        {
            var ui = new Xaml.Media.SkewTransform();
            if (AngleX is not null) ui.AngleX = AngleX.Value;
            if (AngleY is not null) ui.AngleY = AngleY.Value;
            if (CenterX is not null) ui.CenterX = CenterX.Value;
            if (CenterY is not null) ui.CenterY = CenterY.Value;
            return CSharpMarkup.WinUI.SkewTransform.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.SkewTransform"/></summary>
        public static SkewTransform SkewTransform()
        {
            var ui = new Xaml.Media.SkewTransform();
            return CSharpMarkup.WinUI.SkewTransform.StartChain(ui);
        }
    }

    public partial class SkewTransform : Transform, IUI<Xaml.Media.SkewTransform>
    {
        static SkewTransform instance;

        internal static SkewTransform StartChain(Xaml.Media.SkewTransform ui)
        {
            if (instance == null) instance = new SkewTransform();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.SkewTransform ui;

        public new Xaml.Media.SkewTransform UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.SkewTransform(SkewTransform view) => view?.UI;

        public static implicit operator SkewTransform(Xaml.Media.SkewTransform ui) => SkewTransform.StartChain(ui);

        public SkewTransform Invoke(Action<Xaml.Media.SkewTransform> action) { action?.Invoke(UI); return this; }

        protected SkewTransform() { }
    }

    public static partial class SkewTransformExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.SkewTransform.AngleX"/></summary>
        public static TView AngleX<TView>(this TView view, double value) where TView : SkewTransform { view.UI.AngleX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.SkewTransform.AngleY"/></summary>
        public static TView AngleY<TView>(this TView view, double value) where TView : SkewTransform { view.UI.AngleY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.SkewTransform.CenterX"/></summary>
        public static TView CenterX<TView>(this TView view, double value) where TView : SkewTransform { view.UI.CenterX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.SkewTransform.CenterY"/></summary>
        public static TView CenterY<TView>(this TView view, double value) where TView : SkewTransform { view.UI.CenterY = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.SkewTransform.AngleX"/></summary>
        public static DependencyProperty<TTarget, double> AngleX<TTarget>(this TTarget target) where TTarget : SkewTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.SkewTransform.AngleXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.SkewTransform.AngleY"/></summary>
        public static DependencyProperty<TTarget, double> AngleY<TTarget>(this TTarget target) where TTarget : SkewTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.SkewTransform.AngleYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.SkewTransform.CenterX"/></summary>
        public static DependencyProperty<TTarget, double> CenterX<TTarget>(this TTarget target) where TTarget : SkewTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.SkewTransform.CenterXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.SkewTransform.CenterY"/></summary>
        public static DependencyProperty<TTarget, double> CenterY<TTarget>(this TTarget target) where TTarget : SkewTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.SkewTransform.CenterYProperty);
    }
}

namespace CSharpMarkup.WinUI // SolidColorBrush
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.SolidColorBrush"/></summary>
        /// <remarks>Remark: SolidColorBrush().Bind() binds to <see cref="Xaml.Media.SolidColorBrush.ColorProperty"/></remarks>
        public static SolidColorBrush SolidColorBrush()
        {
            var ui = new Xaml.Media.SolidColorBrush();
            return CSharpMarkup.WinUI.SolidColorBrush.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.SolidColorBrush"/></summary>
        /// <remarks>Remark: SolidColorBrush().Bind() binds to <see cref="Xaml.Media.SolidColorBrush.ColorProperty"/></remarks>
        public static SolidColorBrush SolidColorBrush(Windows.UI.Color color)
        {
            var ui = new Xaml.Media.SolidColorBrush(color);
            return CSharpMarkup.WinUI.SolidColorBrush.StartChain(ui);
        }
    }

    public partial class SolidColorBrush : Brush, IUI<Xaml.Media.SolidColorBrush>, IDefaultBindProperty
    {
        static SolidColorBrush instance;

        internal static SolidColorBrush StartChain(Xaml.Media.SolidColorBrush ui)
        {
            if (instance == null) instance = new SolidColorBrush();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.SolidColorBrush ui;

        public new Xaml.Media.SolidColorBrush UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        /// <summary><see cref="Xaml.Media.SolidColorBrush.ColorProperty"/></summary>
        public Xaml.DependencyProperty DefaultBindProperty => Xaml.Media.SolidColorBrush.ColorProperty;

        public static implicit operator Xaml.Media.SolidColorBrush(SolidColorBrush view) => view?.UI;

        public static implicit operator SolidColorBrush(Xaml.Media.SolidColorBrush ui) => SolidColorBrush.StartChain(ui);

        public SolidColorBrush Invoke(Action<Xaml.Media.SolidColorBrush> action) { action?.Invoke(UI); return this; }

        protected SolidColorBrush() { }
    }

    public static partial class SolidColorBrushExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.SolidColorBrush.Color"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Color> Color<TTarget>(this TTarget target) where TTarget : SolidColorBrush
        => DependencyProperty<TTarget, Windows.UI.Color>.Get(target, Xaml.Media.SolidColorBrush.ColorProperty);
    }
}

namespace CSharpMarkup.WinUI // SystemBackdrop
{
    public partial class SystemBackdrop : DependencyObject, IUI<Xaml.Media.SystemBackdrop>
    {
        Xaml.Media.SystemBackdrop ui;

        public new Xaml.Media.SystemBackdrop UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public SystemBackdrop Invoke(Action<Xaml.Media.SystemBackdrop> action) { action?.Invoke(UI); return this; }

        protected SystemBackdrop() { }
    }
}

namespace CSharpMarkup.WinUI // ThemeShadow
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.ThemeShadow"/></summary>
        public static ThemeShadow ThemeShadow()
        {
            var ui = new Xaml.Media.ThemeShadow();
            return CSharpMarkup.WinUI.ThemeShadow.StartChain(ui);
        }
    }

    public partial class ThemeShadow : Shadow, IUI<Xaml.Media.ThemeShadow>
    {
        static ThemeShadow instance;

        internal static ThemeShadow StartChain(Xaml.Media.ThemeShadow ui)
        {
            if (instance == null) instance = new ThemeShadow();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.ThemeShadow ui;

        public new Xaml.Media.ThemeShadow UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.ThemeShadow(ThemeShadow view) => view?.UI;

        public static implicit operator ThemeShadow(Xaml.Media.ThemeShadow ui) => ThemeShadow.StartChain(ui);

        public ThemeShadow Invoke(Action<Xaml.Media.ThemeShadow> action) { action?.Invoke(UI); return this; }

        protected ThemeShadow() { }
    }
}

namespace CSharpMarkup.WinUI // TileBrush
{
    public partial class TileBrush : Brush, IUI<Xaml.Media.TileBrush>
    {
        Xaml.Media.TileBrush ui;

        public new Xaml.Media.TileBrush UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TileBrush Invoke(Action<Xaml.Media.TileBrush> action) { action?.Invoke(UI); return this; }

        protected TileBrush() { }
    }

    public static partial class TileBrushExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.TileBrush.AlignmentX"/></summary>
        public static TView AlignmentX<TView>(this TView view, Xaml.Media.AlignmentX value) where TView : TileBrush { view.UI.AlignmentX = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.TileBrush.AlignmentY"/></summary>
        public static TView AlignmentY<TView>(this TView view, Xaml.Media.AlignmentY value) where TView : TileBrush { view.UI.AlignmentY = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.TileBrush.Stretch"/></summary>
        public static TView Stretch<TView>(this TView view, Xaml.Media.Stretch value) where TView : TileBrush { view.UI.Stretch = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.TileBrush.AlignmentX"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.AlignmentX> AlignmentX<TTarget>(this TTarget target) where TTarget : TileBrush
        => DependencyProperty<TTarget, Xaml.Media.AlignmentX>.Get(target, Xaml.Media.TileBrush.AlignmentXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.TileBrush.AlignmentY"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.AlignmentY> AlignmentY<TTarget>(this TTarget target) where TTarget : TileBrush
        => DependencyProperty<TTarget, Xaml.Media.AlignmentY>.Get(target, Xaml.Media.TileBrush.AlignmentYProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.TileBrush.Stretch"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Stretch> Stretch<TTarget>(this TTarget target) where TTarget : TileBrush
        => DependencyProperty<TTarget, Xaml.Media.Stretch>.Get(target, Xaml.Media.TileBrush.StretchProperty);
    }
}

namespace CSharpMarkup.WinUI // Transform
{
    public partial class Transform : GeneralTransform, IUI<Xaml.Media.Transform>
    {
        Xaml.Media.Transform ui;

        public new Xaml.Media.Transform UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Transform Invoke(Action<Xaml.Media.Transform> action) { action?.Invoke(UI); return this; }

        protected Transform() { }
    }
}

namespace CSharpMarkup.WinUI // TransformGroup
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.TransformGroup"/></summary>
        public static TransformGroup TransformGroup(params Xaml.Media.Transform[] Children)
        {
            var ui = new Xaml.Media.TransformGroup();
            for (int i = 0; i < Children.Length; i++)
            {
                var child = Children[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.Media.Transform>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Children.Add(subChildren[j]);
                else
                    ui.Children.Add(child);
            }
            return CSharpMarkup.WinUI.TransformGroup.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.TransformGroup"/></summary>
        public static TransformGroup TransformGroup()
        {
            var ui = new Xaml.Media.TransformGroup();
            return CSharpMarkup.WinUI.TransformGroup.StartChain(ui);
        }
    }

    public partial class TransformGroup : Transform, IUI<Xaml.Media.TransformGroup>
    {
        static TransformGroup instance;

        internal static TransformGroup StartChain(Xaml.Media.TransformGroup ui)
        {
            if (instance == null) instance = new TransformGroup();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.TransformGroup ui;

        public new Xaml.Media.TransformGroup UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.TransformGroup(TransformGroup view) => view?.UI;

        public static implicit operator TransformGroup(Xaml.Media.TransformGroup ui) => TransformGroup.StartChain(ui);

        public TransformGroup Invoke(Action<Xaml.Media.TransformGroup> action) { action?.Invoke(UI); return this; }

        protected TransformGroup() { }
    }

    public static partial class TransformGroupExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.TransformGroup.Children"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.TransformCollection> Children<TTarget>(this TTarget target) where TTarget : TransformGroup
        => DependencyProperty<TTarget, Xaml.Media.TransformCollection>.Get(target, Xaml.Media.TransformGroup.ChildrenProperty);
    }
}

namespace CSharpMarkup.WinUI // TranslateTransform
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.TranslateTransform"/></summary>
        public static TranslateTransform TranslateTransform(double? X = default, double? Y = default)
        {
            var ui = new Xaml.Media.TranslateTransform();
            if (X is not null) ui.X = X.Value;
            if (Y is not null) ui.Y = Y.Value;
            return CSharpMarkup.WinUI.TranslateTransform.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Media.TranslateTransform"/></summary>
        public static TranslateTransform TranslateTransform()
        {
            var ui = new Xaml.Media.TranslateTransform();
            return CSharpMarkup.WinUI.TranslateTransform.StartChain(ui);
        }
    }

    public partial class TranslateTransform : Transform, IUI<Xaml.Media.TranslateTransform>
    {
        static TranslateTransform instance;

        internal static TranslateTransform StartChain(Xaml.Media.TranslateTransform ui)
        {
            if (instance == null) instance = new TranslateTransform();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.TranslateTransform ui;

        public new Xaml.Media.TranslateTransform UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.TranslateTransform(TranslateTransform view) => view?.UI;

        public static implicit operator TranslateTransform(Xaml.Media.TranslateTransform ui) => TranslateTransform.StartChain(ui);

        public TranslateTransform Invoke(Action<Xaml.Media.TranslateTransform> action) { action?.Invoke(UI); return this; }

        protected TranslateTransform() { }
    }

    public static partial class TranslateTransformExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.TranslateTransform.X"/></summary>
        public static TView X<TView>(this TView view, double value) where TView : TranslateTransform { view.UI.X = value; return view; }

        /// <summary>Set <see cref="Xaml.Media.TranslateTransform.Y"/></summary>
        public static TView Y<TView>(this TView view, double value) where TView : TranslateTransform { view.UI.Y = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.TranslateTransform.X"/></summary>
        public static DependencyProperty<TTarget, double> X<TTarget>(this TTarget target) where TTarget : TranslateTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.TranslateTransform.XProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.TranslateTransform.Y"/></summary>
        public static DependencyProperty<TTarget, double> Y<TTarget>(this TTarget target) where TTarget : TranslateTransform
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Media.TranslateTransform.YProperty);
    }
}

namespace CSharpMarkup.WinUI // XamlCompositionBrushBase
{
    public partial class XamlCompositionBrushBase : Brush, IUI<Xaml.Media.XamlCompositionBrushBase>
    {
        Xaml.Media.XamlCompositionBrushBase ui;

        public new Xaml.Media.XamlCompositionBrushBase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public XamlCompositionBrushBase Invoke(Action<Xaml.Media.XamlCompositionBrushBase> action) { action?.Invoke(UI); return this; }

        protected XamlCompositionBrushBase() { }
    }

    public static partial class XamlCompositionBrushBaseExtensions
    {
        /// <summary>Set <see cref="Xaml.Media.XamlCompositionBrushBase.FallbackColor"/></summary>
        public static TView FallbackColor<TView>(this TView view, Windows.UI.Color value) where TView : XamlCompositionBrushBase { view.UI.FallbackColor = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Media.XamlCompositionBrushBase.FallbackColor"/></summary>
        public static DependencyProperty<TTarget, Windows.UI.Color> FallbackColor<TTarget>(this TTarget target) where TTarget : XamlCompositionBrushBase
        => DependencyProperty<TTarget, Windows.UI.Color>.Get(target, Xaml.Media.XamlCompositionBrushBase.FallbackColorProperty);
    }
}

namespace CSharpMarkup.WinUI // XamlLight
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Media.XamlLight"/></summary>
        public static XamlLight XamlLight()
        {
            var ui = new Xaml.Media.XamlLight();
            return CSharpMarkup.WinUI.XamlLight.StartChain(ui);
        }
    }

    public partial class XamlLight : DependencyObject, IUI<Xaml.Media.XamlLight>
    {
        static XamlLight instance;

        internal static XamlLight StartChain(Xaml.Media.XamlLight ui)
        {
            if (instance == null) instance = new XamlLight();
            instance.UI = ui;
            return instance;
        }

        Xaml.Media.XamlLight ui;

        public new Xaml.Media.XamlLight UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Media.XamlLight(XamlLight view) => view?.UI;

        public static implicit operator XamlLight(Xaml.Media.XamlLight ui) => XamlLight.StartChain(ui);

        public XamlLight Invoke(Action<Xaml.Media.XamlLight> action) { action?.Invoke(UI); return this; }

        protected XamlLight() { }
    }
}

namespace CSharpMarkup.WinUI // PageStackEntry
{
    public partial class PageStackEntry : DependencyObject, IUI<Xaml.Navigation.PageStackEntry>
    {
        Xaml.Navigation.PageStackEntry ui;

        public new Xaml.Navigation.PageStackEntry UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PageStackEntry Invoke(Action<Xaml.Navigation.PageStackEntry> action) { action?.Invoke(UI); return this; }

        protected PageStackEntry() { }
    }

    public static partial class PageStackEntryExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Navigation.PageStackEntry.SourcePageType"/></summary>
        public static DependencyProperty<TTarget, Type> SourcePageType<TTarget>(this TTarget target) where TTarget : PageStackEntry
        => DependencyProperty<TTarget, Type>.Get(target, Xaml.Navigation.PageStackEntry.SourcePageTypeProperty);
    }
}

namespace CSharpMarkup.WinUI // PrintDocument
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Printing.PrintDocument"/></summary>
        public static PrintDocument PrintDocument()
        {
            var ui = new Xaml.Printing.PrintDocument();
            return CSharpMarkup.WinUI.PrintDocument.StartChain(ui);
        }
    }

    public partial class PrintDocument : DependencyObject, IUI<Xaml.Printing.PrintDocument>
    {
        static PrintDocument instance;

        internal static PrintDocument StartChain(Xaml.Printing.PrintDocument ui)
        {
            if (instance == null) instance = new PrintDocument();
            instance.UI = ui;
            return instance;
        }

        Xaml.Printing.PrintDocument ui;

        public new Xaml.Printing.PrintDocument UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Printing.PrintDocument(PrintDocument view) => view?.UI;

        public static implicit operator PrintDocument(Xaml.Printing.PrintDocument ui) => PrintDocument.StartChain(ui);

        public PrintDocument Invoke(Action<Xaml.Printing.PrintDocument> action) { action?.Invoke(UI); return this; }

        protected PrintDocument() { }
    }

    public static partial class PrintDocumentExtensions
    {
        /// <summary>Bind (or set enum value of) <see cref="Xaml.Printing.PrintDocument.DocumentSource"/></summary>
        public static DependencyProperty<TTarget, Windows.Graphics.Printing.IPrintDocumentSource> DocumentSource<TTarget>(this TTarget target) where TTarget : PrintDocument
        => DependencyProperty<TTarget, Windows.Graphics.Printing.IPrintDocumentSource>.Get(target, Xaml.Printing.PrintDocument.DocumentSourceProperty);
    }
}

namespace CSharpMarkup.WinUI // PropertyPath
{
    public partial class PropertyPath : DependencyObject, IUI<Xaml.PropertyPath>
    {
        Xaml.PropertyPath ui;

        public new Xaml.PropertyPath UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public PropertyPath Invoke(Action<Xaml.PropertyPath> action) { action?.Invoke(UI); return this; }

        protected PropertyPath() { }
    }
}

namespace CSharpMarkup.WinUI // ResourceDictionary
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.ResourceDictionary"/></summary>
        public static ResourceDictionary ResourceDictionary(Uri Source = default)
        {
            var ui = new Xaml.ResourceDictionary();
            if (Source is not null) ui.Source = Source;
            return CSharpMarkup.WinUI.ResourceDictionary.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.ResourceDictionary"/></summary>
        public static ResourceDictionary ResourceDictionary()
        {
            var ui = new Xaml.ResourceDictionary();
            return CSharpMarkup.WinUI.ResourceDictionary.StartChain(ui);
        }
    }

    public partial class ResourceDictionary : DependencyObject, IUI<Xaml.ResourceDictionary>
    {
        static ResourceDictionary instance;

        internal static ResourceDictionary StartChain(Xaml.ResourceDictionary ui)
        {
            if (instance == null) instance = new ResourceDictionary();
            instance.UI = ui;
            return instance;
        }

        Xaml.ResourceDictionary ui;

        public new Xaml.ResourceDictionary UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.ResourceDictionary(ResourceDictionary view) => view?.UI;

        public static implicit operator ResourceDictionary(Xaml.ResourceDictionary ui) => ResourceDictionary.StartChain(ui);

        public ResourceDictionary Invoke(Action<Xaml.ResourceDictionary> action) { action?.Invoke(UI); return this; }

        protected ResourceDictionary() { }
    }

    public static partial class ResourceDictionaryExtensions
    {
        /// <summary>Set <see cref="Xaml.ResourceDictionary.Source"/></summary>
        public static TView Source<TView>(this TView view, Uri value) where TView : ResourceDictionary { view.UI.Source = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // Setter
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Setter"/></summary>
        public static Setter Setter(Xaml.DependencyProperty Property = default, Xaml.TargetPropertyPath Target = default, object Value = default)
        {
            var ui = new Xaml.Setter();
            if (Property is not null) ui.Property = Property;
            if (Target is not null) ui.Target = Target;
            if (Value is not null) ui.Value = Value;
            return CSharpMarkup.WinUI.Setter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Setter"/></summary>
        public static Setter Setter()
        {
            var ui = new Xaml.Setter();
            return CSharpMarkup.WinUI.Setter.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Setter"/></summary>
        public static Setter Setter(Xaml.DependencyProperty targetProperty, object value)
        {
            var ui = new Xaml.Setter(targetProperty, value);
            return CSharpMarkup.WinUI.Setter.StartChain(ui);
        }
    }

    public partial class Setter : SetterBase, IUI<Xaml.Setter>
    {
        static Setter instance;

        internal static Setter StartChain(Xaml.Setter ui)
        {
            if (instance == null) instance = new Setter();
            instance.UI = ui;
            return instance;
        }

        Xaml.Setter ui;

        public new Xaml.Setter UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Setter(Setter view) => view?.UI;

        public static implicit operator Setter(Xaml.Setter ui) => Setter.StartChain(ui);

        public Setter Invoke(Action<Xaml.Setter> action) { action?.Invoke(UI); return this; }

        protected Setter() { }
    }

    public static partial class SetterExtensions
    {
        /// <summary>Set <see cref="Xaml.Setter.Property"/></summary>
        public static TView Property<TView>(this TView view, Xaml.DependencyProperty value) where TView : Setter { view.UI.Property = value; return view; }

        /// <summary>Set <see cref="Xaml.Setter.Target"/></summary>
        public static TView Target<TView>(this TView view, Xaml.TargetPropertyPath value) where TView : Setter { view.UI.Target = value; return view; }

        /// <summary>Set <see cref="Xaml.Setter.Value"/></summary>
        public static TView Value<TView>(this TView view, object value) where TView : Setter { view.UI.Value = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // SetterBase
{
    public partial class SetterBase : DependencyObject, IUI<Xaml.SetterBase>
    {
        Xaml.SetterBase ui;

        public new Xaml.SetterBase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public SetterBase Invoke(Action<Xaml.SetterBase> action) { action?.Invoke(UI); return this; }

        protected SetterBase() { }
    }
}

namespace CSharpMarkup.WinUI // Ellipse
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Shapes.Ellipse"/></summary>
        public static Ellipse Ellipse()
        {
            var ui = new Xaml.Shapes.Ellipse();
            return CSharpMarkup.WinUI.Ellipse.StartChain(ui);
        }
    }

    public partial class Ellipse : Shape, IUI<Xaml.Shapes.Ellipse>
    {
        static Ellipse instance;

        internal static Ellipse StartChain(Xaml.Shapes.Ellipse ui)
        {
            if (instance == null) instance = new Ellipse();
            instance.UI = ui;
            return instance;
        }

        Xaml.Shapes.Ellipse ui;

        public new Xaml.Shapes.Ellipse UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Ellipse view) => view?.UI;

        public static implicit operator Xaml.Shapes.Ellipse(Ellipse view) => view?.UI;

        public static implicit operator Ellipse(Xaml.Shapes.Ellipse ui) => Ellipse.StartChain(ui);

        public Ellipse Invoke(Action<Xaml.Shapes.Ellipse> action) { action?.Invoke(UI); return this; }

        protected Ellipse() { }
    }
}

namespace CSharpMarkup.WinUI // Line
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Shapes.Line"/></summary>
        public static Line Line(double? X1 = default, double? X2 = default, double? Y1 = default, double? Y2 = default)
        {
            var ui = new Xaml.Shapes.Line();
            if (X1 is not null) ui.X1 = X1.Value;
            if (X2 is not null) ui.X2 = X2.Value;
            if (Y1 is not null) ui.Y1 = Y1.Value;
            if (Y2 is not null) ui.Y2 = Y2.Value;
            return CSharpMarkup.WinUI.Line.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Shapes.Line"/></summary>
        public static Line Line()
        {
            var ui = new Xaml.Shapes.Line();
            return CSharpMarkup.WinUI.Line.StartChain(ui);
        }
    }

    public partial class Line : Shape, IUI<Xaml.Shapes.Line>
    {
        static Line instance;

        internal static Line StartChain(Xaml.Shapes.Line ui)
        {
            if (instance == null) instance = new Line();
            instance.UI = ui;
            return instance;
        }

        Xaml.Shapes.Line ui;

        public new Xaml.Shapes.Line UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Line view) => view?.UI;

        public static implicit operator Xaml.Shapes.Line(Line view) => view?.UI;

        public static implicit operator Line(Xaml.Shapes.Line ui) => Line.StartChain(ui);

        public Line Invoke(Action<Xaml.Shapes.Line> action) { action?.Invoke(UI); return this; }

        protected Line() { }
    }

    public static partial class LineExtensions
    {
        /// <summary>Set <see cref="Xaml.Shapes.Line.X1"/></summary>
        public static TView X1<TView>(this TView view, double value) where TView : Line { view.UI.X1 = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Line.X2"/></summary>
        public static TView X2<TView>(this TView view, double value) where TView : Line { view.UI.X2 = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Line.Y1"/></summary>
        public static TView Y1<TView>(this TView view, double value) where TView : Line { view.UI.Y1 = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Line.Y2"/></summary>
        public static TView Y2<TView>(this TView view, double value) where TView : Line { view.UI.Y2 = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Line.X1"/></summary>
        public static DependencyProperty<TTarget, double> X1<TTarget>(this TTarget target) where TTarget : Line
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Shapes.Line.X1Property);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Line.X2"/></summary>
        public static DependencyProperty<TTarget, double> X2<TTarget>(this TTarget target) where TTarget : Line
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Shapes.Line.X2Property);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Line.Y1"/></summary>
        public static DependencyProperty<TTarget, double> Y1<TTarget>(this TTarget target) where TTarget : Line
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Shapes.Line.Y1Property);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Line.Y2"/></summary>
        public static DependencyProperty<TTarget, double> Y2<TTarget>(this TTarget target) where TTarget : Line
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Shapes.Line.Y2Property);
    }
}

namespace CSharpMarkup.WinUI // Path
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Shapes.Path"/></summary>
        public static Path Path(CSharpMarkup.WinUI.to.Geometry? Data = default)
        {
            var ui = new Xaml.Shapes.Path();
            if (Data is not null) ui.Data = Data.Value;
            return CSharpMarkup.WinUI.Path.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Shapes.Path"/></summary>
        public static Path Path()
        {
            var ui = new Xaml.Shapes.Path();
            return CSharpMarkup.WinUI.Path.StartChain(ui);
        }
    }

    public partial class Path : Shape, IUI<Xaml.Shapes.Path>
    {
        static Path instance;

        internal static Path StartChain(Xaml.Shapes.Path ui)
        {
            if (instance == null) instance = new Path();
            instance.UI = ui;
            return instance;
        }

        Xaml.Shapes.Path ui;

        public new Xaml.Shapes.Path UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Path view) => view?.UI;

        public static implicit operator Xaml.Shapes.Path(Path view) => view?.UI;

        public static implicit operator Path(Xaml.Shapes.Path ui) => Path.StartChain(ui);

        public Path Invoke(Action<Xaml.Shapes.Path> action) { action?.Invoke(UI); return this; }

        protected Path() { }
    }

    public static partial class PathExtensions
    {
        /// <summary>Set <see cref="Xaml.Shapes.Path.Data"/></summary>
        public static TView Data<TView>(this TView view, CSharpMarkup.WinUI.to.Geometry value) where TView : Path { view.UI.Data = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Path.Data"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Geometry> Data<TTarget>(this TTarget target) where TTarget : Path
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Geometry>.Get(target, Xaml.Shapes.Path.DataProperty);
    }
}

namespace CSharpMarkup.WinUI // Polygon
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Shapes.Polygon"/></summary>
        public static Polygon Polygon(Xaml.Media.FillRule? FillRule = default, Xaml.Media.PointCollection Points = default)
        {
            var ui = new Xaml.Shapes.Polygon();
            if (FillRule is not null) ui.FillRule = FillRule.Value;
            if (Points is not null) ui.Points = Points;
            return CSharpMarkup.WinUI.Polygon.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Shapes.Polygon"/></summary>
        public static Polygon Polygon()
        {
            var ui = new Xaml.Shapes.Polygon();
            return CSharpMarkup.WinUI.Polygon.StartChain(ui);
        }
    }

    public partial class Polygon : Shape, IUI<Xaml.Shapes.Polygon>
    {
        static Polygon instance;

        internal static Polygon StartChain(Xaml.Shapes.Polygon ui)
        {
            if (instance == null) instance = new Polygon();
            instance.UI = ui;
            return instance;
        }

        Xaml.Shapes.Polygon ui;

        public new Xaml.Shapes.Polygon UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Polygon view) => view?.UI;

        public static implicit operator Xaml.Shapes.Polygon(Polygon view) => view?.UI;

        public static implicit operator Polygon(Xaml.Shapes.Polygon ui) => Polygon.StartChain(ui);

        public Polygon Invoke(Action<Xaml.Shapes.Polygon> action) { action?.Invoke(UI); return this; }

        protected Polygon() { }
    }

    public static partial class PolygonExtensions
    {
        /// <summary>Set <see cref="Xaml.Shapes.Polygon.FillRule"/></summary>
        public static TView FillRule<TView>(this TView view, Xaml.Media.FillRule value) where TView : Polygon { view.UI.FillRule = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Polygon.Points"/></summary>
        public static TView Points<TView>(this TView view, Xaml.Media.PointCollection value) where TView : Polygon { view.UI.Points = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Polygon.FillRule"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FillRule> FillRule<TTarget>(this TTarget target) where TTarget : Polygon
        => DependencyProperty<TTarget, Xaml.Media.FillRule>.Get(target, Xaml.Shapes.Polygon.FillRuleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Polygon.Points"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.PointCollection> Points<TTarget>(this TTarget target) where TTarget : Polygon
        => DependencyProperty<TTarget, Xaml.Media.PointCollection>.Get(target, Xaml.Shapes.Polygon.PointsProperty);
    }
}

namespace CSharpMarkup.WinUI // Polyline
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Shapes.Polyline"/></summary>
        public static Polyline Polyline(Xaml.Media.FillRule? FillRule = default, Xaml.Media.PointCollection Points = default)
        {
            var ui = new Xaml.Shapes.Polyline();
            if (FillRule is not null) ui.FillRule = FillRule.Value;
            if (Points is not null) ui.Points = Points;
            return CSharpMarkup.WinUI.Polyline.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Shapes.Polyline"/></summary>
        public static Polyline Polyline()
        {
            var ui = new Xaml.Shapes.Polyline();
            return CSharpMarkup.WinUI.Polyline.StartChain(ui);
        }
    }

    public partial class Polyline : Shape, IUI<Xaml.Shapes.Polyline>
    {
        static Polyline instance;

        internal static Polyline StartChain(Xaml.Shapes.Polyline ui)
        {
            if (instance == null) instance = new Polyline();
            instance.UI = ui;
            return instance;
        }

        Xaml.Shapes.Polyline ui;

        public new Xaml.Shapes.Polyline UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Polyline view) => view?.UI;

        public static implicit operator Xaml.Shapes.Polyline(Polyline view) => view?.UI;

        public static implicit operator Polyline(Xaml.Shapes.Polyline ui) => Polyline.StartChain(ui);

        public Polyline Invoke(Action<Xaml.Shapes.Polyline> action) { action?.Invoke(UI); return this; }

        protected Polyline() { }
    }

    public static partial class PolylineExtensions
    {
        /// <summary>Set <see cref="Xaml.Shapes.Polyline.FillRule"/></summary>
        public static TView FillRule<TView>(this TView view, Xaml.Media.FillRule value) where TView : Polyline { view.UI.FillRule = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Polyline.Points"/></summary>
        public static TView Points<TView>(this TView view, Xaml.Media.PointCollection value) where TView : Polyline { view.UI.Points = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Polyline.FillRule"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.FillRule> FillRule<TTarget>(this TTarget target) where TTarget : Polyline
        => DependencyProperty<TTarget, Xaml.Media.FillRule>.Get(target, Xaml.Shapes.Polyline.FillRuleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Polyline.Points"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.PointCollection> Points<TTarget>(this TTarget target) where TTarget : Polyline
        => DependencyProperty<TTarget, Xaml.Media.PointCollection>.Get(target, Xaml.Shapes.Polyline.PointsProperty);
    }
}

namespace CSharpMarkup.WinUI // Rectangle
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Shapes.Rectangle"/></summary>
        public static Rectangle Rectangle(double? RadiusX = default, double? RadiusY = default)
        {
            var ui = new Xaml.Shapes.Rectangle();
            if (RadiusX is not null) ui.RadiusX = RadiusX.Value;
            if (RadiusY is not null) ui.RadiusY = RadiusY.Value;
            return CSharpMarkup.WinUI.Rectangle.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Shapes.Rectangle"/></summary>
        public static Rectangle Rectangle()
        {
            var ui = new Xaml.Shapes.Rectangle();
            return CSharpMarkup.WinUI.Rectangle.StartChain(ui);
        }
    }

    public partial class Rectangle : Shape, IUI<Xaml.Shapes.Rectangle>
    {
        static Rectangle instance;

        internal static Rectangle StartChain(Xaml.Shapes.Rectangle ui)
        {
            if (instance == null) instance = new Rectangle();
            instance.UI = ui;
            return instance;
        }

        Xaml.Shapes.Rectangle ui;

        public new Xaml.Shapes.Rectangle UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.UIElement(Rectangle view) => view?.UI;

        public static implicit operator Xaml.Shapes.Rectangle(Rectangle view) => view?.UI;

        public static implicit operator Rectangle(Xaml.Shapes.Rectangle ui) => Rectangle.StartChain(ui);

        public Rectangle Invoke(Action<Xaml.Shapes.Rectangle> action) { action?.Invoke(UI); return this; }

        protected Rectangle() { }
    }

    public static partial class RectangleExtensions
    {
        /// <summary>Set <see cref="Xaml.Shapes.Rectangle.RadiusX"/></summary>
        public static TView RadiusX<TView>(this TView view, double value) where TView : Rectangle { view.UI.RadiusX = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Rectangle.RadiusY"/></summary>
        public static TView RadiusY<TView>(this TView view, double value) where TView : Rectangle { view.UI.RadiusY = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Rectangle.RadiusX"/></summary>
        public static DependencyProperty<TTarget, double> RadiusX<TTarget>(this TTarget target) where TTarget : Rectangle
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Shapes.Rectangle.RadiusXProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Rectangle.RadiusY"/></summary>
        public static DependencyProperty<TTarget, double> RadiusY<TTarget>(this TTarget target) where TTarget : Rectangle
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Shapes.Rectangle.RadiusYProperty);
    }
}

namespace CSharpMarkup.WinUI // Shape
{
    public partial class Shape : FrameworkElement, IUI<Xaml.Shapes.Shape>
    {
        Xaml.Shapes.Shape ui;

        public new Xaml.Shapes.Shape UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public Shape Invoke(Action<Xaml.Shapes.Shape> action) { action?.Invoke(UI); return this; }

        protected Shape() { }
    }

    public static partial class ShapeExtensions
    {
        /// <summary>Set <see cref="Xaml.Shapes.Shape.Fill"/></summary>
        public static TView Fill<TView>(this TView view, Xaml.Media.Brush value) where TView : Shape { view.UI.Fill = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Shape.Fill"/></summary>
        public static TView Fill<TView>(this TView view, Windows.UI.Color value) where TView : Shape { view.UI.Fill = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Shape.Fill"/></summary>
        public static TView Fill<TView>(this TView view, string color) where TView : Shape { view.UI.Fill = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Shape.Stretch"/></summary>
        public static TView Stretch<TView>(this TView view, Xaml.Media.Stretch value) where TView : Shape { view.UI.Stretch = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Shape.Stroke"/></summary>
        public static TView Stroke<TView>(this TView view, Xaml.Media.Brush value) where TView : Shape { view.UI.Stroke = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Shape.Stroke"/></summary>
        public static TView Stroke<TView>(this TView view, Windows.UI.Color value) where TView : Shape { view.UI.Stroke = new Xaml.Media.SolidColorBrush(value); return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Shape.Stroke"/></summary>
        public static TView Stroke<TView>(this TView view, string color) where TView : Shape { view.UI.Stroke = new Xaml.Media.SolidColorBrush(color.ToColor()); return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Shape.StrokeDashArray"/></summary>
        public static TView StrokeDashArray<TView>(this TView view, Xaml.Media.DoubleCollection value) where TView : Shape { view.UI.StrokeDashArray = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Shape.StrokeDashCap"/></summary>
        public static TView StrokeDashCap<TView>(this TView view, Xaml.Media.PenLineCap value) where TView : Shape { view.UI.StrokeDashCap = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Shape.StrokeDashOffset"/></summary>
        public static TView StrokeDashOffset<TView>(this TView view, double value) where TView : Shape { view.UI.StrokeDashOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Shape.StrokeEndLineCap"/></summary>
        public static TView StrokeEndLineCap<TView>(this TView view, Xaml.Media.PenLineCap value) where TView : Shape { view.UI.StrokeEndLineCap = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Shape.StrokeLineJoin"/></summary>
        public static TView StrokeLineJoin<TView>(this TView view, Xaml.Media.PenLineJoin value) where TView : Shape { view.UI.StrokeLineJoin = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Shape.StrokeMiterLimit"/></summary>
        public static TView StrokeMiterLimit<TView>(this TView view, double value) where TView : Shape { view.UI.StrokeMiterLimit = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Shape.StrokeStartLineCap"/></summary>
        public static TView StrokeStartLineCap<TView>(this TView view, Xaml.Media.PenLineCap value) where TView : Shape { view.UI.StrokeStartLineCap = value; return view; }

        /// <summary>Set <see cref="Xaml.Shapes.Shape.StrokeThickness"/></summary>
        public static TView StrokeThickness<TView>(this TView view, double value) where TView : Shape { view.UI.StrokeThickness = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Shape.Fill"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Fill<TTarget>(this TTarget target) where TTarget : Shape
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Shapes.Shape.FillProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Shape.Stretch"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Stretch> Stretch<TTarget>(this TTarget target) where TTarget : Shape
        => DependencyProperty<TTarget, Xaml.Media.Stretch>.Get(target, Xaml.Shapes.Shape.StretchProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Shape.StrokeDashArray"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.DoubleCollection> StrokeDashArray<TTarget>(this TTarget target) where TTarget : Shape
        => DependencyProperty<TTarget, Xaml.Media.DoubleCollection>.Get(target, Xaml.Shapes.Shape.StrokeDashArrayProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Shape.StrokeDashCap"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.PenLineCap> StrokeDashCap<TTarget>(this TTarget target) where TTarget : Shape
        => DependencyProperty<TTarget, Xaml.Media.PenLineCap>.Get(target, Xaml.Shapes.Shape.StrokeDashCapProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Shape.StrokeDashOffset"/></summary>
        public static DependencyProperty<TTarget, double> StrokeDashOffset<TTarget>(this TTarget target) where TTarget : Shape
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Shapes.Shape.StrokeDashOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Shape.StrokeEndLineCap"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.PenLineCap> StrokeEndLineCap<TTarget>(this TTarget target) where TTarget : Shape
        => DependencyProperty<TTarget, Xaml.Media.PenLineCap>.Get(target, Xaml.Shapes.Shape.StrokeEndLineCapProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Shape.StrokeLineJoin"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.PenLineJoin> StrokeLineJoin<TTarget>(this TTarget target) where TTarget : Shape
        => DependencyProperty<TTarget, Xaml.Media.PenLineJoin>.Get(target, Xaml.Shapes.Shape.StrokeLineJoinProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Shape.StrokeMiterLimit"/></summary>
        public static DependencyProperty<TTarget, double> StrokeMiterLimit<TTarget>(this TTarget target) where TTarget : Shape
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Shapes.Shape.StrokeMiterLimitProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Shape.Stroke"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Brush> Stroke<TTarget>(this TTarget target) where TTarget : Shape
        => DependencyProperty<TTarget, Xaml.Media.Brush>.Get(target, Xaml.Shapes.Shape.StrokeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Shape.StrokeStartLineCap"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.PenLineCap> StrokeStartLineCap<TTarget>(this TTarget target) where TTarget : Shape
        => DependencyProperty<TTarget, Xaml.Media.PenLineCap>.Get(target, Xaml.Shapes.Shape.StrokeStartLineCapProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.Shapes.Shape.StrokeThickness"/></summary>
        public static DependencyProperty<TTarget, double> StrokeThickness<TTarget>(this TTarget target) where TTarget : Shape
        => DependencyProperty<TTarget, double>.Get(target, Xaml.Shapes.Shape.StrokeThicknessProperty);
    }
}

namespace CSharpMarkup.WinUI // StateTrigger
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.StateTrigger"/></summary>
        public static StateTrigger StateTrigger(bool? IsActive = default)
        {
            var ui = new Xaml.StateTrigger();
            if (IsActive is not null) ui.IsActive = IsActive.Value;
            return CSharpMarkup.WinUI.StateTrigger.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.StateTrigger"/></summary>
        public static StateTrigger StateTrigger()
        {
            var ui = new Xaml.StateTrigger();
            return CSharpMarkup.WinUI.StateTrigger.StartChain(ui);
        }
    }

    public partial class StateTrigger : StateTriggerBase, IUI<Xaml.StateTrigger>
    {
        static StateTrigger instance;

        internal static StateTrigger StartChain(Xaml.StateTrigger ui)
        {
            if (instance == null) instance = new StateTrigger();
            instance.UI = ui;
            return instance;
        }

        Xaml.StateTrigger ui;

        public new Xaml.StateTrigger UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.StateTrigger(StateTrigger view) => view?.UI;

        public static implicit operator StateTrigger(Xaml.StateTrigger ui) => StateTrigger.StartChain(ui);

        public StateTrigger Invoke(Action<Xaml.StateTrigger> action) { action?.Invoke(UI); return this; }

        protected StateTrigger() { }
    }

    public static partial class StateTriggerExtensions
    {
        /// <summary>Set <see cref="Xaml.StateTrigger.IsActive"/></summary>
        public static TView IsActive<TView>(this TView view, bool value) where TView : StateTrigger { view.UI.IsActive = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.StateTrigger.IsActive"/></summary>
        public static DependencyProperty<TTarget, bool> IsActive<TTarget>(this TTarget target) where TTarget : StateTrigger
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.StateTrigger.IsActiveProperty);
    }
}

namespace CSharpMarkup.WinUI // StateTriggerBase
{
    public partial class StateTriggerBase : DependencyObject, IUI<Xaml.StateTriggerBase>
    {
        Xaml.StateTriggerBase ui;

        public new Xaml.StateTriggerBase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public StateTriggerBase Invoke(Action<Xaml.StateTriggerBase> action) { action?.Invoke(UI); return this; }

        protected StateTriggerBase() { }
    }
}

namespace CSharpMarkup.WinUI // Style
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.Style"/></summary>
        public static Style Style(params Xaml.SetterBase[] Setters)
        {
            var ui = new Xaml.Style();
            for (int i = 0; i < Setters.Length; i++)
            {
                var child = Setters[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.SetterBase>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.Setters.Add(subChildren[j]);
                else
                    ui.Setters.Add(child);
            }
            return CSharpMarkup.WinUI.Style.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Style"/></summary>
        public static Style Style()
        {
            var ui = new Xaml.Style();
            return CSharpMarkup.WinUI.Style.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.Style"/></summary>
        public static Style Style(Type targetType)
        {
            var ui = new Xaml.Style(targetType);
            return CSharpMarkup.WinUI.Style.StartChain(ui);
        }
    }

    public partial class Style : DependencyObject, IUI<Xaml.Style>
    {
        static Style instance;

        internal static Style StartChain(Xaml.Style ui)
        {
            if (instance == null) instance = new Style();
            instance.UI = ui;
            return instance;
        }

        Xaml.Style ui;

        public new Xaml.Style UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.Style(Style view) => view?.UI;

        public static implicit operator Style(Xaml.Style ui) => Style.StartChain(ui);

        public Style Invoke(Action<Xaml.Style> action) { action?.Invoke(UI); return this; }

        protected Style() { }
    }

    public static partial class StyleExtensions
    {
        /// <summary>Set <see cref="Xaml.Style.BasedOn"/></summary>
        public static TView BasedOn<TView>(this TView view, Xaml.Style value) where TView : Style { view.UI.BasedOn = value; return view; }

        /// <summary>Set <see cref="Xaml.Style.TargetType"/></summary>
        public static TView TargetType<TView>(this TView view, Type value) where TView : Style { view.UI.TargetType = value; return view; }
    }
}

namespace CSharpMarkup.WinUI // TriggerAction
{
    public partial class TriggerAction : DependencyObject, IUI<Xaml.TriggerAction>
    {
        Xaml.TriggerAction ui;

        public new Xaml.TriggerAction UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TriggerAction Invoke(Action<Xaml.TriggerAction> action) { action?.Invoke(UI); return this; }

        protected TriggerAction() { }
    }
}

namespace CSharpMarkup.WinUI // TriggerBase
{
    public partial class TriggerBase : DependencyObject, IUI<Xaml.TriggerBase>
    {
        Xaml.TriggerBase ui;

        public new Xaml.TriggerBase UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public TriggerBase Invoke(Action<Xaml.TriggerBase> action) { action?.Invoke(UI); return this; }

        protected TriggerBase() { }
    }
}

namespace CSharpMarkup.WinUI // UIElement
{
    public partial class UIElement : DependencyObject, IUI<Xaml.UIElement>
    {
        Xaml.UIElement ui;

        public new Xaml.UIElement UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public UIElement Invoke(Action<Xaml.UIElement> action) { action?.Invoke(UI); return this; }

        protected UIElement() { }
    }

    public static partial class UIElementExtensions
    {
        /// <summary>Set <see cref="Xaml.UIElement.AccessKey"/></summary>
        public static TView AccessKey<TView>(this TView view, string value) where TView : UIElement { view.UI.AccessKey = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.AccessKeyScopeOwner"/></summary>
        public static TView AccessKeyScopeOwner<TView>(this TView view, Xaml.DependencyObject value) where TView : UIElement { view.UI.AccessKeyScopeOwner = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.AllowDrop"/></summary>
        public static TView AllowDrop<TView>(this TView view, bool value) where TView : UIElement { view.UI.AllowDrop = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.CacheMode"/></summary>
        public static TView CacheMode<TView>(this TView view, Xaml.Media.CacheMode value) where TView : UIElement { view.UI.CacheMode = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.CanBeScrollAnchor"/></summary>
        public static TView CanBeScrollAnchor<TView>(this TView view, bool value) where TView : UIElement { view.UI.CanBeScrollAnchor = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.CanDrag"/></summary>
        public static TView CanDrag<TView>(this TView view, bool value) where TView : UIElement { view.UI.CanDrag = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.CenterPoint"/></summary>
        public static TView CenterPoint<TView>(this TView view, Vector3 value) where TView : UIElement { view.UI.CenterPoint = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.Clip"/></summary>
        public static TView Clip<TView>(this TView view, Xaml.Media.RectangleGeometry value) where TView : UIElement { view.UI.Clip = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.CompositeMode"/></summary>
        public static TView CompositeMode<TView>(this TView view, Xaml.Media.ElementCompositeMode value) where TView : UIElement { view.UI.CompositeMode = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.ContextFlyout"/></summary>
        public static TView ContextFlyout<TView>(this TView view, Xaml.Controls.Primitives.FlyoutBase value) where TView : UIElement { view.UI.ContextFlyout = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.ExitDisplayModeOnAccessKeyInvoked"/></summary>
        public static TView ExitDisplayModeOnAccessKeyInvoked<TView>(this TView view, bool value) where TView : UIElement { view.UI.ExitDisplayModeOnAccessKeyInvoked = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.HighContrastAdjustment"/></summary>
        public static TView HighContrastAdjustment<TView>(this TView view, Xaml.ElementHighContrastAdjustment value) where TView : UIElement { view.UI.HighContrastAdjustment = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.IsAccessKeyScope"/></summary>
        public static TView IsAccessKeyScope<TView>(this TView view, bool value) where TView : UIElement { view.UI.IsAccessKeyScope = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.IsDoubleTapEnabled"/></summary>
        public static TView IsDoubleTapEnabled<TView>(this TView view, bool value) where TView : UIElement { view.UI.IsDoubleTapEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.IsHitTestVisible"/></summary>
        public static TView IsHitTestVisible<TView>(this TView view, bool value) where TView : UIElement { view.UI.IsHitTestVisible = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.IsHoldingEnabled"/></summary>
        public static TView IsHoldingEnabled<TView>(this TView view, bool value) where TView : UIElement { view.UI.IsHoldingEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.IsRightTapEnabled"/></summary>
        public static TView IsRightTapEnabled<TView>(this TView view, bool value) where TView : UIElement { view.UI.IsRightTapEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.IsTabStop"/></summary>
        public static TView IsTabStop<TView>(this TView view, bool value) where TView : UIElement { view.UI.IsTabStop = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.IsTapEnabled"/></summary>
        public static TView IsTapEnabled<TView>(this TView view, bool value) where TView : UIElement { view.UI.IsTapEnabled = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.KeyboardAcceleratorPlacementMode"/></summary>
        public static TView KeyboardAcceleratorPlacementMode<TView>(this TView view, Xaml.Input.KeyboardAcceleratorPlacementMode value) where TView : UIElement { view.UI.KeyboardAcceleratorPlacementMode = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.KeyboardAcceleratorPlacementTarget"/></summary>
        public static TView KeyboardAcceleratorPlacementTarget<TView>(this TView view, Xaml.DependencyObject value) where TView : UIElement { view.UI.KeyboardAcceleratorPlacementTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.KeyTipHorizontalOffset"/></summary>
        public static TView KeyTipHorizontalOffset<TView>(this TView view, double value) where TView : UIElement { view.UI.KeyTipHorizontalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.KeyTipPlacementMode"/></summary>
        public static TView KeyTipPlacementMode<TView>(this TView view, Xaml.Input.KeyTipPlacementMode value) where TView : UIElement { view.UI.KeyTipPlacementMode = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.KeyTipTarget"/></summary>
        public static TView KeyTipTarget<TView>(this TView view, Xaml.DependencyObject value) where TView : UIElement { view.UI.KeyTipTarget = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.KeyTipVerticalOffset"/></summary>
        public static TView KeyTipVerticalOffset<TView>(this TView view, double value) where TView : UIElement { view.UI.KeyTipVerticalOffset = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.ManipulationMode"/></summary>
        public static TView ManipulationMode<TView>(this TView view, Xaml.Input.ManipulationModes value) where TView : UIElement { view.UI.ManipulationMode = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.Opacity"/></summary>
        public static TView Opacity<TView>(this TView view, double value) where TView : UIElement { view.UI.Opacity = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.OpacityTransition"/></summary>
        public static TView OpacityTransition<TView>(this TView view, Xaml.ScalarTransition value) where TView : UIElement { view.UI.OpacityTransition = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.Projection"/></summary>
        public static TView Projection<TView>(this TView view, Xaml.Media.Projection value) where TView : UIElement { view.UI.Projection = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.RasterizationScale"/></summary>
        public static TView RasterizationScale<TView>(this TView view, double value) where TView : UIElement { view.UI.RasterizationScale = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.RenderTransform"/></summary>
        public static TView RenderTransform<TView>(this TView view, Xaml.Media.Transform value) where TView : UIElement { view.UI.RenderTransform = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.RenderTransformOrigin"/></summary>
        public static TView RenderTransformOrigin<TView>(this TView view, CSharpMarkup.WinUI.to.Point value) where TView : UIElement { view.UI.RenderTransformOrigin = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.Rotation"/></summary>
        public static TView Rotation<TView>(this TView view, float value) where TView : UIElement { view.UI.Rotation = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.RotationAxis"/></summary>
        public static TView RotationAxis<TView>(this TView view, Vector3 value) where TView : UIElement { view.UI.RotationAxis = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.RotationTransition"/></summary>
        public static TView RotationTransition<TView>(this TView view, Xaml.ScalarTransition value) where TView : UIElement { view.UI.RotationTransition = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.Scale"/></summary>
        public static TView Scale<TView>(this TView view, Vector3 value) where TView : UIElement { view.UI.Scale = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.ScaleTransition"/></summary>
        public static TView ScaleTransition<TView>(this TView view, Xaml.Vector3Transition value) where TView : UIElement { view.UI.ScaleTransition = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.Shadow"/></summary>
        public static TView Shadow<TView>(this TView view, Xaml.Media.Shadow value) where TView : UIElement { view.UI.Shadow = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.TabFocusNavigation"/></summary>
        public static TView TabFocusNavigation<TView>(this TView view, Xaml.Input.KeyboardNavigationMode value) where TView : UIElement { view.UI.TabFocusNavigation = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.TabIndex"/></summary>
        public static TView TabIndex<TView>(this TView view, int value) where TView : UIElement { view.UI.TabIndex = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.Transform3D"/></summary>
        public static TView Transform3D<TView>(this TView view, Xaml.Media.Media3D.Transform3D value) where TView : UIElement { view.UI.Transform3D = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.TransformMatrix"/></summary>
        public static TView TransformMatrix<TView>(this TView view, Matrix4x4 value) where TView : UIElement { view.UI.TransformMatrix = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.Transitions"/></summary>
        public static TView Transitions<TView>(this TView view, Xaml.Media.Animation.TransitionCollection value) where TView : UIElement { view.UI.Transitions = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.Translation"/></summary>
        public static TView Translation<TView>(this TView view, Vector3 value) where TView : UIElement { view.UI.Translation = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.TranslationTransition"/></summary>
        public static TView TranslationTransition<TView>(this TView view, Xaml.Vector3Transition value) where TView : UIElement { view.UI.TranslationTransition = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.UseLayoutRounding"/></summary>
        public static TView UseLayoutRounding<TView>(this TView view, bool value) where TView : UIElement { view.UI.UseLayoutRounding = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.UseSystemFocusVisuals"/></summary>
        public static TView UseSystemFocusVisuals<TView>(this TView view, bool value) where TView : UIElement { view.UI.UseSystemFocusVisuals = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.Visibility"/></summary>
        public static TView Visibility<TView>(this TView view, Xaml.Visibility value) where TView : UIElement { view.UI.Visibility = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.XamlRoot"/></summary>
        public static TView XamlRoot<TView>(this TView view, Xaml.XamlRoot value) where TView : UIElement { view.UI.XamlRoot = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.XYFocusDown"/></summary>
        public static TView XYFocusDown<TView>(this TView view, Xaml.DependencyObject value) where TView : UIElement { view.UI.XYFocusDown = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.XYFocusDownNavigationStrategy"/></summary>
        public static TView XYFocusDownNavigationStrategy<TView>(this TView view, Xaml.Input.XYFocusNavigationStrategy value) where TView : UIElement { view.UI.XYFocusDownNavigationStrategy = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.XYFocusKeyboardNavigation"/></summary>
        public static TView XYFocusKeyboardNavigation<TView>(this TView view, Xaml.Input.XYFocusKeyboardNavigationMode value) where TView : UIElement { view.UI.XYFocusKeyboardNavigation = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.XYFocusLeft"/></summary>
        public static TView XYFocusLeft<TView>(this TView view, Xaml.DependencyObject value) where TView : UIElement { view.UI.XYFocusLeft = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.XYFocusLeftNavigationStrategy"/></summary>
        public static TView XYFocusLeftNavigationStrategy<TView>(this TView view, Xaml.Input.XYFocusNavigationStrategy value) where TView : UIElement { view.UI.XYFocusLeftNavigationStrategy = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.XYFocusRight"/></summary>
        public static TView XYFocusRight<TView>(this TView view, Xaml.DependencyObject value) where TView : UIElement { view.UI.XYFocusRight = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.XYFocusRightNavigationStrategy"/></summary>
        public static TView XYFocusRightNavigationStrategy<TView>(this TView view, Xaml.Input.XYFocusNavigationStrategy value) where TView : UIElement { view.UI.XYFocusRightNavigationStrategy = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.XYFocusUp"/></summary>
        public static TView XYFocusUp<TView>(this TView view, Xaml.DependencyObject value) where TView : UIElement { view.UI.XYFocusUp = value; return view; }

        /// <summary>Set <see cref="Xaml.UIElement.XYFocusUpNavigationStrategy"/></summary>
        public static TView XYFocusUpNavigationStrategy<TView>(this TView view, Xaml.Input.XYFocusNavigationStrategy value) where TView : UIElement { view.UI.XYFocusUpNavigationStrategy = value; return view; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.AccessKey"/></summary>
        public static DependencyProperty<TTarget, string> AccessKey<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, string>.Get(target, Xaml.UIElement.AccessKeyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.AccessKeyScopeOwner"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> AccessKeyScopeOwner<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.UIElement.AccessKeyScopeOwnerProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.AllowDrop"/></summary>
        public static DependencyProperty<TTarget, bool> AllowDrop<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.UIElement.AllowDropProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.CacheMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.CacheMode> CacheMode<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Media.CacheMode>.Get(target, Xaml.UIElement.CacheModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.CanBeScrollAnchor"/></summary>
        public static DependencyProperty<TTarget, bool> CanBeScrollAnchor<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.UIElement.CanBeScrollAnchorProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.CanDrag"/></summary>
        public static DependencyProperty<TTarget, bool> CanDrag<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.UIElement.CanDragProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.Clip"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.RectangleGeometry> Clip<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Media.RectangleGeometry>.Get(target, Xaml.UIElement.ClipProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.CompositeMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.ElementCompositeMode> CompositeMode<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Media.ElementCompositeMode>.Get(target, Xaml.UIElement.CompositeModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.ContextFlyout"/></summary>
        public static DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase> ContextFlyout<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutBase>.Get(target, Xaml.UIElement.ContextFlyoutProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.ExitDisplayModeOnAccessKeyInvoked"/></summary>
        public static DependencyProperty<TTarget, bool> ExitDisplayModeOnAccessKeyInvoked<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.UIElement.ExitDisplayModeOnAccessKeyInvokedProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.FocusState"/></summary>
        public static DependencyProperty<TTarget, Xaml.FocusState> FocusState<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.FocusState>.Get(target, Xaml.UIElement.FocusStateProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.HighContrastAdjustment"/></summary>
        public static DependencyProperty<TTarget, Xaml.ElementHighContrastAdjustment> HighContrastAdjustment<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.ElementHighContrastAdjustment>.Get(target, Xaml.UIElement.HighContrastAdjustmentProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.IsAccessKeyScope"/></summary>
        public static DependencyProperty<TTarget, bool> IsAccessKeyScope<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.UIElement.IsAccessKeyScopeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.IsDoubleTapEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsDoubleTapEnabled<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.UIElement.IsDoubleTapEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.IsHitTestVisible"/></summary>
        public static DependencyProperty<TTarget, bool> IsHitTestVisible<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.UIElement.IsHitTestVisibleProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.IsHoldingEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsHoldingEnabled<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.UIElement.IsHoldingEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.IsRightTapEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsRightTapEnabled<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.UIElement.IsRightTapEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.IsTabStop"/></summary>
        public static DependencyProperty<TTarget, bool> IsTabStop<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.UIElement.IsTabStopProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.IsTapEnabled"/></summary>
        public static DependencyProperty<TTarget, bool> IsTapEnabled<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.UIElement.IsTapEnabledProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.KeyboardAcceleratorPlacementMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.KeyboardAcceleratorPlacementMode> KeyboardAcceleratorPlacementMode<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Input.KeyboardAcceleratorPlacementMode>.Get(target, Xaml.UIElement.KeyboardAcceleratorPlacementModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.KeyboardAcceleratorPlacementTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> KeyboardAcceleratorPlacementTarget<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.UIElement.KeyboardAcceleratorPlacementTargetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.KeyTipHorizontalOffset"/></summary>
        public static DependencyProperty<TTarget, double> KeyTipHorizontalOffset<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.UIElement.KeyTipHorizontalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.KeyTipPlacementMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> KeyTipPlacementMode<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode>.Get(target, Xaml.UIElement.KeyTipPlacementModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.KeyTipTarget"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> KeyTipTarget<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.UIElement.KeyTipTargetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.KeyTipVerticalOffset"/></summary>
        public static DependencyProperty<TTarget, double> KeyTipVerticalOffset<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.UIElement.KeyTipVerticalOffsetProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.Lights"/></summary>
        public static DependencyProperty<TTarget, IList<Xaml.Media.XamlLight>> Lights<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, IList<Xaml.Media.XamlLight>>.Get(target, Xaml.UIElement.LightsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.ManipulationMode"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.ManipulationModes> ManipulationMode<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Input.ManipulationModes>.Get(target, Xaml.UIElement.ManipulationModeProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.Opacity"/></summary>
        public static DependencyProperty<TTarget, double> Opacity<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, double>.Get(target, Xaml.UIElement.OpacityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.PointerCaptures"/></summary>
        public static DependencyProperty<TTarget, IReadOnlyList<Xaml.Input.Pointer>> PointerCaptures<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, IReadOnlyList<Xaml.Input.Pointer>>.Get(target, Xaml.UIElement.PointerCapturesProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.Projection"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Projection> Projection<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Media.Projection>.Get(target, Xaml.UIElement.ProjectionProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.RenderTransformOrigin"/></summary>
        public static DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point> RenderTransformOrigin<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, CSharpMarkup.WinUI.to.Point>.Get(target, Xaml.UIElement.RenderTransformOriginProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.RenderTransform"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Transform> RenderTransform<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Media.Transform>.Get(target, Xaml.UIElement.RenderTransformProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.Shadow"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Shadow> Shadow<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Media.Shadow>.Get(target, Xaml.UIElement.ShadowProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.TabFocusNavigation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.KeyboardNavigationMode> TabFocusNavigation<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Input.KeyboardNavigationMode>.Get(target, Xaml.UIElement.TabFocusNavigationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.TabIndex"/></summary>
        public static DependencyProperty<TTarget, int> TabIndex<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, int>.Get(target, Xaml.UIElement.TabIndexProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.Transform3D"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Media3D.Transform3D> Transform3D<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Media.Media3D.Transform3D>.Get(target, Xaml.UIElement.Transform3DProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.Transitions"/></summary>
        public static DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection> Transitions<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Media.Animation.TransitionCollection>.Get(target, Xaml.UIElement.TransitionsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.UseLayoutRounding"/></summary>
        public static DependencyProperty<TTarget, bool> UseLayoutRounding<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.UIElement.UseLayoutRoundingProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.UseSystemFocusVisuals"/></summary>
        public static DependencyProperty<TTarget, bool> UseSystemFocusVisuals<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, bool>.Get(target, Xaml.UIElement.UseSystemFocusVisualsProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.Visibility"/></summary>
        public static DependencyProperty<TTarget, Xaml.Visibility> Visibility<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Visibility>.Get(target, Xaml.UIElement.VisibilityProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.XYFocusDownNavigationStrategy"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> XYFocusDownNavigationStrategy<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy>.Get(target, Xaml.UIElement.XYFocusDownNavigationStrategyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.XYFocusDown"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> XYFocusDown<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.UIElement.XYFocusDownProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.XYFocusKeyboardNavigation"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.XYFocusKeyboardNavigationMode> XYFocusKeyboardNavigation<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Input.XYFocusKeyboardNavigationMode>.Get(target, Xaml.UIElement.XYFocusKeyboardNavigationProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.XYFocusLeftNavigationStrategy"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> XYFocusLeftNavigationStrategy<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy>.Get(target, Xaml.UIElement.XYFocusLeftNavigationStrategyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.XYFocusLeft"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> XYFocusLeft<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.UIElement.XYFocusLeftProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.XYFocusRightNavigationStrategy"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> XYFocusRightNavigationStrategy<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy>.Get(target, Xaml.UIElement.XYFocusRightNavigationStrategyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.XYFocusRight"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> XYFocusRight<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.UIElement.XYFocusRightProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.XYFocusUpNavigationStrategy"/></summary>
        public static DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> XYFocusUpNavigationStrategy<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy>.Get(target, Xaml.UIElement.XYFocusUpNavigationStrategyProperty);

        /// <summary>Bind (or set enum value of) <see cref="Xaml.UIElement.XYFocusUp"/></summary>
        public static DependencyProperty<TTarget, Xaml.DependencyObject> XYFocusUp<TTarget>(this TTarget target) where TTarget : UIElement
        => DependencyProperty<TTarget, Xaml.DependencyObject>.Get(target, Xaml.UIElement.XYFocusUpProperty);
    }
}

namespace CSharpMarkup.WinUI // VisualState
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.VisualState"/></summary>
        public static VisualState VisualState(Xaml.Media.Animation.Storyboard Storyboard)
        {
            var ui = new Xaml.VisualState();
            if (Storyboard is not null) ui.Storyboard = Storyboard;
            return CSharpMarkup.WinUI.VisualState.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.VisualState"/></summary>
        public static VisualState VisualState()
        {
            var ui = new Xaml.VisualState();
            return CSharpMarkup.WinUI.VisualState.StartChain(ui);
        }
    }

    public partial class VisualState : DependencyObject, IUI<Xaml.VisualState>
    {
        static VisualState instance;

        internal static VisualState StartChain(Xaml.VisualState ui)
        {
            if (instance == null) instance = new VisualState();
            instance.UI = ui;
            return instance;
        }

        Xaml.VisualState ui;

        public new Xaml.VisualState UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.VisualState(VisualState view) => view?.UI;

        public static implicit operator VisualState(Xaml.VisualState ui) => VisualState.StartChain(ui);

        public VisualState Invoke(Action<Xaml.VisualState> action) { action?.Invoke(UI); return this; }

        protected VisualState() { }
    }
}

namespace CSharpMarkup.WinUI // VisualStateGroup
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.VisualStateGroup"/></summary>
        public static VisualStateGroup VisualStateGroup(params Xaml.VisualState[] States)
        {
            var ui = new Xaml.VisualStateGroup();
            for (int i = 0; i < States.Length; i++)
            {
                var child = States[i];
                if (child == null) continue;

                var subChildren = Spreader<Xaml.VisualState>.ExtractChildren(child);
                if (subChildren is not null)
                    for (int j = 0; j < subChildren.Length; j++)
                        ui.States.Add(subChildren[j]);
                else
                    ui.States.Add(child);
            }
            return CSharpMarkup.WinUI.VisualStateGroup.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.VisualStateGroup"/></summary>
        public static VisualStateGroup VisualStateGroup()
        {
            var ui = new Xaml.VisualStateGroup();
            return CSharpMarkup.WinUI.VisualStateGroup.StartChain(ui);
        }
    }

    public partial class VisualStateGroup : DependencyObject, IUI<Xaml.VisualStateGroup>
    {
        static VisualStateGroup instance;

        internal static VisualStateGroup StartChain(Xaml.VisualStateGroup ui)
        {
            if (instance == null) instance = new VisualStateGroup();
            instance.UI = ui;
            return instance;
        }

        Xaml.VisualStateGroup ui;

        public new Xaml.VisualStateGroup UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.VisualStateGroup(VisualStateGroup view) => view?.UI;

        public static implicit operator VisualStateGroup(Xaml.VisualStateGroup ui) => VisualStateGroup.StartChain(ui);

        public VisualStateGroup Invoke(Action<Xaml.VisualStateGroup> action) { action?.Invoke(UI); return this; }

        protected VisualStateGroup() { }
    }
}

namespace CSharpMarkup.WinUI // VisualStateManager
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.VisualStateManager"/></summary>
        public static VisualStateManager VisualStateManager()
        {
            var ui = new Xaml.VisualStateManager();
            return CSharpMarkup.WinUI.VisualStateManager.StartChain(ui);
        }
    }

    public partial class VisualStateManager : DependencyObject, IUI<Xaml.VisualStateManager>
    {
        static VisualStateManager instance;

        internal static VisualStateManager StartChain(Xaml.VisualStateManager ui)
        {
            if (instance == null) instance = new VisualStateManager();
            instance.UI = ui;
            return instance;
        }

        Xaml.VisualStateManager ui;

        public new Xaml.VisualStateManager UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.VisualStateManager(VisualStateManager view) => view?.UI;

        public static implicit operator VisualStateManager(Xaml.VisualStateManager ui) => VisualStateManager.StartChain(ui);

        public VisualStateManager Invoke(Action<Xaml.VisualStateManager> action) { action?.Invoke(UI); return this; }

        protected VisualStateManager() { }
    }

    public static partial class VisualStateManagerExtensions
    {
        /// <summary>Set <see cref="Xaml.VisualStateManager.CustomVisualStateManager"/></summary>
        public static TTarget VisualStateManager_CustomVisualStateManager<TTarget>(this TTarget target, Xaml.VisualStateManager value) where TTarget : FrameworkElement
        { Xaml.VisualStateManager.SetCustomVisualStateManager(target.UI, value); return target; }

        /// <summary>Bind (or set enum value of) <see cref="Xaml.VisualStateManager.CustomVisualStateManager"/></summary>
        public static DependencyProperty<TTarget, Xaml.VisualStateManager> VisualStateManager_CustomVisualStateManager<TTarget>(this TTarget target) where TTarget : FrameworkElement
        => DependencyProperty<TTarget, Xaml.VisualStateManager>.Get(target, Xaml.VisualStateManager.CustomVisualStateManagerProperty);
    }
}

namespace CSharpMarkup.WinUI // VisualTransition
{
    public static partial class Helpers
    {
        /// <summary>Create a <see cref="Xaml.VisualTransition"/></summary>
        public static VisualTransition VisualTransition(Xaml.Media.Animation.Storyboard Storyboard)
        {
            var ui = new Xaml.VisualTransition();
            if (Storyboard is not null) ui.Storyboard = Storyboard;
            return CSharpMarkup.WinUI.VisualTransition.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.VisualTransition"/></summary>
        public static VisualTransition VisualTransition(string From = default, CSharpMarkup.WinUI.to.Duration? GeneratedDuration = default, Xaml.Media.Animation.EasingFunctionBase GeneratedEasingFunction = default, string To = default, Xaml.Media.Animation.Storyboard Storyboard = default)
        {
            var ui = new Xaml.VisualTransition();
            if (From is not null) ui.From = From;
            if (GeneratedDuration is not null) ui.GeneratedDuration = GeneratedDuration.Value;
            if (GeneratedEasingFunction is not null) ui.GeneratedEasingFunction = GeneratedEasingFunction;
            if (To is not null) ui.To = To;
            if (Storyboard is not null) ui.Storyboard = Storyboard;
            return CSharpMarkup.WinUI.VisualTransition.StartChain(ui);
        }

        /// <summary>Create a <see cref="Xaml.VisualTransition"/></summary>
        public static VisualTransition VisualTransition()
        {
            var ui = new Xaml.VisualTransition();
            return CSharpMarkup.WinUI.VisualTransition.StartChain(ui);
        }
    }

    public partial class VisualTransition : DependencyObject, IUI<Xaml.VisualTransition>
    {
        static VisualTransition instance;

        internal static VisualTransition StartChain(Xaml.VisualTransition ui)
        {
            if (instance == null) instance = new VisualTransition();
            instance.UI = ui;
            return instance;
        }

        Xaml.VisualTransition ui;

        public new Xaml.VisualTransition UI
        {
            get => ui;
            protected set => base.UI = ui = value;
        }

        public static implicit operator Xaml.VisualTransition(VisualTransition view) => view?.UI;

        public static implicit operator VisualTransition(Xaml.VisualTransition ui) => VisualTransition.StartChain(ui);

        public VisualTransition Invoke(Action<Xaml.VisualTransition> action) { action?.Invoke(UI); return this; }

        protected VisualTransition() { }
    }

    public static partial class VisualTransitionExtensions
    {
        /// <summary>Set <see cref="Xaml.VisualTransition.From"/></summary>
        public static TView From<TView>(this TView view, string value) where TView : VisualTransition { view.UI.From = value; return view; }

        /// <summary>Set <see cref="Xaml.VisualTransition.GeneratedDuration"/></summary>
        public static TView GeneratedDuration<TView>(this TView view, CSharpMarkup.WinUI.to.Duration value) where TView : VisualTransition { view.UI.GeneratedDuration = value; return view; }

        /// <summary>Set <see cref="Xaml.VisualTransition.GeneratedEasingFunction"/></summary>
        public static TView GeneratedEasingFunction<TView>(this TView view, Xaml.Media.Animation.EasingFunctionBase value) where TView : VisualTransition { view.UI.GeneratedEasingFunction = value; return view; }

        /// <summary>Set <see cref="Xaml.VisualTransition.To"/></summary>
        public static TView To<TView>(this TView view, string value) where TView : VisualTransition { view.UI.To = value; return view; }
    }
}

namespace CSharpMarkup.WinUI.to // Type convertors
{
    partial struct Geometry
    {
        public static implicit operator Geometry(CSharpMarkup.WinUI.Geometry value) => new(value.UI);
    }
}

namespace CSharpMarkup.WinUI // EnumPropertyValues
{
    public static partial class AnimatedVisualPlayerExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.PlayerAnimationOptimization.Latency"/></summary>
        public static TTarget Latency<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PlayerAnimationOptimization> property) where TTarget : AnimatedVisualPlayer
        => property.Set(Xaml.Controls.PlayerAnimationOptimization.Latency);

        /// <summary>Set to <see cref="Xaml.Controls.PlayerAnimationOptimization.Resources"/></summary>
        public static TTarget Resources<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PlayerAnimationOptimization> property) where TTarget : AnimatedVisualPlayer
        => property.Set(Xaml.Controls.PlayerAnimationOptimization.Resources);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.Fill"/></summary>
        public static TTarget Fill<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : AnimatedVisualPlayer
        => property.Set(Xaml.Media.Stretch.Fill);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : AnimatedVisualPlayer
        => property.Set(Xaml.Media.Stretch.None);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.Uniform"/></summary>
        public static TTarget Uniform<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : AnimatedVisualPlayer
        => property.Set(Xaml.Media.Stretch.Uniform);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.UniformToFill"/></summary>
        public static TTarget UniformToFill<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : AnimatedVisualPlayer
        => property.Set(Xaml.Media.Stretch.UniformToFill);
    }

    public static partial class AppBarExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.AppBarClosedDisplayMode.Compact"/></summary>
        public static TTarget Compact<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.AppBarClosedDisplayMode> property) where TTarget : AppBar
        => property.Set(Xaml.Controls.AppBarClosedDisplayMode.Compact);

        /// <summary>Set to <see cref="Xaml.Controls.AppBarClosedDisplayMode.Hidden"/></summary>
        public static TTarget Hidden<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.AppBarClosedDisplayMode> property) where TTarget : AppBar
        => property.Set(Xaml.Controls.AppBarClosedDisplayMode.Hidden);

        /// <summary>Set to <see cref="Xaml.Controls.AppBarClosedDisplayMode.Minimal"/></summary>
        public static TTarget Minimal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.AppBarClosedDisplayMode> property) where TTarget : AppBar
        => property.Set(Xaml.Controls.AppBarClosedDisplayMode.Minimal);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : AppBar
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Off"/></summary>
        public static TTarget Off<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : AppBar
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Off);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.On"/></summary>
        public static TTarget On<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : AppBar
        => property.Set(Xaml.Controls.LightDismissOverlayMode.On);
    }

    public static partial class AppBarButtonExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.CommandBarLabelPosition.Collapsed"/></summary>
        public static TTarget Collapsed<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CommandBarLabelPosition> property) where TTarget : AppBarButton
        => property.Set(Xaml.Controls.CommandBarLabelPosition.Collapsed);

        /// <summary>Set to <see cref="Xaml.Controls.CommandBarLabelPosition.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CommandBarLabelPosition> property) where TTarget : AppBarButton
        => property.Set(Xaml.Controls.CommandBarLabelPosition.Default);
    }

    public static partial class AppBarToggleButtonExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.CommandBarLabelPosition.Collapsed"/></summary>
        public static TTarget Collapsed<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CommandBarLabelPosition> property) where TTarget : AppBarToggleButton
        => property.Set(Xaml.Controls.CommandBarLabelPosition.Collapsed);

        /// <summary>Set to <see cref="Xaml.Controls.CommandBarLabelPosition.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CommandBarLabelPosition> property) where TTarget : AppBarToggleButton
        => property.Set(Xaml.Controls.CommandBarLabelPosition.Default);
    }

    public static partial class ArcSegmentExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.SweepDirection.Clockwise"/></summary>
        public static TTarget Clockwise<TTarget>(this DependencyProperty<TTarget, Xaml.Media.SweepDirection> property) where TTarget : ArcSegment
        => property.Set(Xaml.Media.SweepDirection.Clockwise);

        /// <summary>Set to <see cref="Xaml.Media.SweepDirection.Counterclockwise"/></summary>
        public static TTarget Counterclockwise<TTarget>(this DependencyProperty<TTarget, Xaml.Media.SweepDirection> property) where TTarget : ArcSegment
        => property.Set(Xaml.Media.SweepDirection.Counterclockwise);
    }

    public static partial class AutomationAnnotationExtensions
    {
        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.AdvancedProofingIssue"/></summary>
        public static TTarget AdvancedProofingIssue<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.AdvancedProofingIssue);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Author"/></summary>
        public static TTarget Author<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Author);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.CircularReferenceError"/></summary>
        public static TTarget CircularReferenceError<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.CircularReferenceError);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Comment"/></summary>
        public static TTarget Comment<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Comment);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.ConflictingChange"/></summary>
        public static TTarget ConflictingChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.ConflictingChange);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.DataValidationError"/></summary>
        public static TTarget DataValidationError<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.DataValidationError);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.DeletionChange"/></summary>
        public static TTarget DeletionChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.DeletionChange);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.EditingLockedChange"/></summary>
        public static TTarget EditingLockedChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.EditingLockedChange);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Endnote"/></summary>
        public static TTarget Endnote<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Endnote);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.ExternalChange"/></summary>
        public static TTarget ExternalChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.ExternalChange);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Footer"/></summary>
        public static TTarget Footer<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Footer);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Footnote"/></summary>
        public static TTarget Footnote<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Footnote);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.FormatChange"/></summary>
        public static TTarget FormatChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.FormatChange);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.FormulaError"/></summary>
        public static TTarget FormulaError<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.FormulaError);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.GrammarError"/></summary>
        public static TTarget GrammarError<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.GrammarError);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Header"/></summary>
        public static TTarget Header<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Header);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Highlighted"/></summary>
        public static TTarget Highlighted<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Highlighted);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.InsertionChange"/></summary>
        public static TTarget InsertionChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.InsertionChange);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.MoveChange"/></summary>
        public static TTarget MoveChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.MoveChange);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.SpellingError"/></summary>
        public static TTarget SpellingError<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.SpellingError);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.TrackChanges"/></summary>
        public static TTarget TrackChanges<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.TrackChanges);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Unknown"/></summary>
        public static TTarget Unknown<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Unknown);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.UnsyncedChange"/></summary>
        public static TTarget UnsyncedChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationAnnotation
        => property.Set(Xaml.Automation.AnnotationType.UnsyncedChange);
    }

    public static partial class AutomationPeerAnnotationExtensions
    {
        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.AdvancedProofingIssue"/></summary>
        public static TTarget AdvancedProofingIssue<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.AdvancedProofingIssue);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Author"/></summary>
        public static TTarget Author<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Author);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.CircularReferenceError"/></summary>
        public static TTarget CircularReferenceError<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.CircularReferenceError);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Comment"/></summary>
        public static TTarget Comment<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Comment);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.ConflictingChange"/></summary>
        public static TTarget ConflictingChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.ConflictingChange);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.DataValidationError"/></summary>
        public static TTarget DataValidationError<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.DataValidationError);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.DeletionChange"/></summary>
        public static TTarget DeletionChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.DeletionChange);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.EditingLockedChange"/></summary>
        public static TTarget EditingLockedChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.EditingLockedChange);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Endnote"/></summary>
        public static TTarget Endnote<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Endnote);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.ExternalChange"/></summary>
        public static TTarget ExternalChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.ExternalChange);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Footer"/></summary>
        public static TTarget Footer<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Footer);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Footnote"/></summary>
        public static TTarget Footnote<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Footnote);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.FormatChange"/></summary>
        public static TTarget FormatChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.FormatChange);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.FormulaError"/></summary>
        public static TTarget FormulaError<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.FormulaError);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.GrammarError"/></summary>
        public static TTarget GrammarError<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.GrammarError);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Header"/></summary>
        public static TTarget Header<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Header);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Highlighted"/></summary>
        public static TTarget Highlighted<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Highlighted);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.InsertionChange"/></summary>
        public static TTarget InsertionChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.InsertionChange);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.MoveChange"/></summary>
        public static TTarget MoveChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.MoveChange);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.SpellingError"/></summary>
        public static TTarget SpellingError<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.SpellingError);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.TrackChanges"/></summary>
        public static TTarget TrackChanges<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.TrackChanges);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.Unknown"/></summary>
        public static TTarget Unknown<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.Unknown);

        /// <summary>Set to <see cref="Xaml.Automation.AnnotationType.UnsyncedChange"/></summary>
        public static TTarget UnsyncedChange<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.AnnotationType> property) where TTarget : AutomationPeerAnnotation
        => property.Set(Xaml.Automation.AnnotationType.UnsyncedChange);
    }

    public static partial class AutoSuggestBoxExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : AutoSuggestBox
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Off"/></summary>
        public static TTarget Off<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : AutoSuggestBox
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Off);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.On"/></summary>
        public static TTarget On<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : AutoSuggestBox
        => property.Set(Xaml.Controls.LightDismissOverlayMode.On);
    }

    public static partial class AutoSuggestBoxTextChangedEventArgsExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.AutoSuggestionBoxTextChangeReason.ProgrammaticChange"/></summary>
        public static TTarget ProgrammaticChange<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.AutoSuggestionBoxTextChangeReason> property) where TTarget : AutoSuggestBoxTextChangedEventArgs
        => property.Set(Xaml.Controls.AutoSuggestionBoxTextChangeReason.ProgrammaticChange);

        /// <summary>Set to <see cref="Xaml.Controls.AutoSuggestionBoxTextChangeReason.SuggestionChosen"/></summary>
        public static TTarget SuggestionChosen<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.AutoSuggestionBoxTextChangeReason> property) where TTarget : AutoSuggestBoxTextChangedEventArgs
        => property.Set(Xaml.Controls.AutoSuggestionBoxTextChangeReason.SuggestionChosen);

        /// <summary>Set to <see cref="Xaml.Controls.AutoSuggestionBoxTextChangeReason.UserInput"/></summary>
        public static TTarget UserInput<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.AutoSuggestionBoxTextChangeReason> property) where TTarget : AutoSuggestBoxTextChangedEventArgs
        => property.Set(Xaml.Controls.AutoSuggestionBoxTextChangeReason.UserInput);
    }

    public static partial class BitmapImageExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.Imaging.BitmapCreateOptions.IgnoreImageCache"/></summary>
        public static TTarget IgnoreImageCache<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Imaging.BitmapCreateOptions> property) where TTarget : BitmapImage
        => property.Set(Xaml.Media.Imaging.BitmapCreateOptions.IgnoreImageCache);

        /// <summary>Set to <see cref="Xaml.Media.Imaging.BitmapCreateOptions.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Imaging.BitmapCreateOptions> property) where TTarget : BitmapImage
        => property.Set(Xaml.Media.Imaging.BitmapCreateOptions.None);

        /// <summary>Set to <see cref="Xaml.Media.Imaging.DecodePixelType.Logical"/></summary>
        public static TTarget Logical<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Imaging.DecodePixelType> property) where TTarget : BitmapImage
        => property.Set(Xaml.Media.Imaging.DecodePixelType.Logical);

        /// <summary>Set to <see cref="Xaml.Media.Imaging.DecodePixelType.Physical"/></summary>
        public static TTarget Physical<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Imaging.DecodePixelType> property) where TTarget : BitmapImage
        => property.Set(Xaml.Media.Imaging.DecodePixelType.Physical);
    }

    public static partial class BlockExtensions
    {
        /// <summary>Set to <see cref="Xaml.LineStackingStrategy.BaselineToBaseline"/></summary>
        public static TTarget BaselineToBaseline<TTarget>(this DependencyProperty<TTarget, Xaml.LineStackingStrategy> property) where TTarget : Block
        => property.Set(Xaml.LineStackingStrategy.BaselineToBaseline);

        /// <summary>Set to <see cref="Xaml.LineStackingStrategy.BlockLineHeight"/></summary>
        public static TTarget BlockLineHeight<TTarget>(this DependencyProperty<TTarget, Xaml.LineStackingStrategy> property) where TTarget : Block
        => property.Set(Xaml.LineStackingStrategy.BlockLineHeight);

        /// <summary>Set to <see cref="Xaml.LineStackingStrategy.MaxHeight"/></summary>
        public static TTarget MaxHeight<TTarget>(this DependencyProperty<TTarget, Xaml.LineStackingStrategy> property) where TTarget : Block
        => property.Set(Xaml.LineStackingStrategy.MaxHeight);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : Block
        => property.Set(Xaml.TextAlignment.Center);

        /// <summary>Set to <see cref="Xaml.TextAlignment.DetectFromContent"/></summary>
        public static TTarget DetectFromContent<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : Block
        => property.Set(Xaml.TextAlignment.DetectFromContent);

        /// <summary>Set to <see cref="Xaml.TextAlignment.End"/></summary>
        public static TTarget End<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : Block
        => property.Set(Xaml.TextAlignment.End);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Justify"/></summary>
        public static TTarget Justify<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : Block
        => property.Set(Xaml.TextAlignment.Justify);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : Block
        => property.Set(Xaml.TextAlignment.Left);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : Block
        => property.Set(Xaml.TextAlignment.Right);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Start"/></summary>
        public static TTarget Start<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : Block
        => property.Set(Xaml.TextAlignment.Start);
    }

    public static partial class BorderExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.BackgroundSizing.InnerBorderEdge"/></summary>
        public static TTarget InnerBorderEdge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> property) where TTarget : Border
        => property.Set(Xaml.Controls.BackgroundSizing.InnerBorderEdge);

        /// <summary>Set to <see cref="Xaml.Controls.BackgroundSizing.OuterBorderEdge"/></summary>
        public static TTarget OuterBorderEdge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> property) where TTarget : Border
        => property.Set(Xaml.Controls.BackgroundSizing.OuterBorderEdge);
    }

    public static partial class ButtonBaseExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.ClickMode.Hover"/></summary>
        public static TTarget Hover<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ClickMode> property) where TTarget : ButtonBase
        => property.Set(Xaml.Controls.ClickMode.Hover);

        /// <summary>Set to <see cref="Xaml.Controls.ClickMode.Press"/></summary>
        public static TTarget Press<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ClickMode> property) where TTarget : ButtonBase
        => property.Set(Xaml.Controls.ClickMode.Press);

        /// <summary>Set to <see cref="Xaml.Controls.ClickMode.Release"/></summary>
        public static TTarget Release<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ClickMode> property) where TTarget : ButtonBase
        => property.Set(Xaml.Controls.ClickMode.Release);
    }

    public static partial class CalendarDatePickerExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.CalendarViewDisplayMode.Decade"/></summary>
        public static TTarget Decade<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CalendarViewDisplayMode> property) where TTarget : CalendarDatePicker
        => property.Set(Xaml.Controls.CalendarViewDisplayMode.Decade);

        /// <summary>Set to <see cref="Xaml.Controls.CalendarViewDisplayMode.Month"/></summary>
        public static TTarget Month<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CalendarViewDisplayMode> property) where TTarget : CalendarDatePicker
        => property.Set(Xaml.Controls.CalendarViewDisplayMode.Month);

        /// <summary>Set to <see cref="Xaml.Controls.CalendarViewDisplayMode.Year"/></summary>
        public static TTarget Year<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CalendarViewDisplayMode> property) where TTarget : CalendarDatePicker
        => property.Set(Xaml.Controls.CalendarViewDisplayMode.Year);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : CalendarDatePicker
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Off"/></summary>
        public static TTarget Off<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : CalendarDatePicker
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Off);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.On"/></summary>
        public static TTarget On<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : CalendarDatePicker
        => property.Set(Xaml.Controls.LightDismissOverlayMode.On);

        /// <summary>Set to <see cref="Windows.Globalization.DayOfWeek.Friday"/></summary>
        public static TTarget Friday<TTarget>(this DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> property) where TTarget : CalendarDatePicker
        => property.Set(Windows.Globalization.DayOfWeek.Friday);

        /// <summary>Set to <see cref="Windows.Globalization.DayOfWeek.Monday"/></summary>
        public static TTarget Monday<TTarget>(this DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> property) where TTarget : CalendarDatePicker
        => property.Set(Windows.Globalization.DayOfWeek.Monday);

        /// <summary>Set to <see cref="Windows.Globalization.DayOfWeek.Saturday"/></summary>
        public static TTarget Saturday<TTarget>(this DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> property) where TTarget : CalendarDatePicker
        => property.Set(Windows.Globalization.DayOfWeek.Saturday);

        /// <summary>Set to <see cref="Windows.Globalization.DayOfWeek.Sunday"/></summary>
        public static TTarget Sunday<TTarget>(this DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> property) where TTarget : CalendarDatePicker
        => property.Set(Windows.Globalization.DayOfWeek.Sunday);

        /// <summary>Set to <see cref="Windows.Globalization.DayOfWeek.Thursday"/></summary>
        public static TTarget Thursday<TTarget>(this DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> property) where TTarget : CalendarDatePicker
        => property.Set(Windows.Globalization.DayOfWeek.Thursday);

        /// <summary>Set to <see cref="Windows.Globalization.DayOfWeek.Tuesday"/></summary>
        public static TTarget Tuesday<TTarget>(this DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> property) where TTarget : CalendarDatePicker
        => property.Set(Windows.Globalization.DayOfWeek.Tuesday);

        /// <summary>Set to <see cref="Windows.Globalization.DayOfWeek.Wednesday"/></summary>
        public static TTarget Wednesday<TTarget>(this DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> property) where TTarget : CalendarDatePicker
        => property.Set(Windows.Globalization.DayOfWeek.Wednesday);
    }

    public static partial class CalendarViewExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.CalendarViewDisplayMode.Decade"/></summary>
        public static TTarget Decade<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CalendarViewDisplayMode> property) where TTarget : CalendarView
        => property.Set(Xaml.Controls.CalendarViewDisplayMode.Decade);

        /// <summary>Set to <see cref="Xaml.Controls.CalendarViewDisplayMode.Month"/></summary>
        public static TTarget Month<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CalendarViewDisplayMode> property) where TTarget : CalendarView
        => property.Set(Xaml.Controls.CalendarViewDisplayMode.Month);

        /// <summary>Set to <see cref="Xaml.Controls.CalendarViewDisplayMode.Year"/></summary>
        public static TTarget Year<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CalendarViewDisplayMode> property) where TTarget : CalendarView
        => property.Set(Xaml.Controls.CalendarViewDisplayMode.Year);

        /// <summary>Set to <see cref="Xaml.Controls.CalendarViewSelectionMode.Multiple"/></summary>
        public static TTarget Multiple<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CalendarViewSelectionMode> property) where TTarget : CalendarView
        => property.Set(Xaml.Controls.CalendarViewSelectionMode.Multiple);

        /// <summary>Set to <see cref="Xaml.Controls.CalendarViewSelectionMode.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CalendarViewSelectionMode> property) where TTarget : CalendarView
        => property.Set(Xaml.Controls.CalendarViewSelectionMode.None);

        /// <summary>Set to <see cref="Xaml.Controls.CalendarViewSelectionMode.Single"/></summary>
        public static TTarget Single<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CalendarViewSelectionMode> property) where TTarget : CalendarView
        => property.Set(Xaml.Controls.CalendarViewSelectionMode.Single);

        /// <summary>Set to <see cref="Windows.Globalization.DayOfWeek.Friday"/></summary>
        public static TTarget Friday<TTarget>(this DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> property) where TTarget : CalendarView
        => property.Set(Windows.Globalization.DayOfWeek.Friday);

        /// <summary>Set to <see cref="Windows.Globalization.DayOfWeek.Monday"/></summary>
        public static TTarget Monday<TTarget>(this DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> property) where TTarget : CalendarView
        => property.Set(Windows.Globalization.DayOfWeek.Monday);

        /// <summary>Set to <see cref="Windows.Globalization.DayOfWeek.Saturday"/></summary>
        public static TTarget Saturday<TTarget>(this DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> property) where TTarget : CalendarView
        => property.Set(Windows.Globalization.DayOfWeek.Saturday);

        /// <summary>Set to <see cref="Windows.Globalization.DayOfWeek.Sunday"/></summary>
        public static TTarget Sunday<TTarget>(this DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> property) where TTarget : CalendarView
        => property.Set(Windows.Globalization.DayOfWeek.Sunday);

        /// <summary>Set to <see cref="Windows.Globalization.DayOfWeek.Thursday"/></summary>
        public static TTarget Thursday<TTarget>(this DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> property) where TTarget : CalendarView
        => property.Set(Windows.Globalization.DayOfWeek.Thursday);

        /// <summary>Set to <see cref="Windows.Globalization.DayOfWeek.Tuesday"/></summary>
        public static TTarget Tuesday<TTarget>(this DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> property) where TTarget : CalendarView
        => property.Set(Windows.Globalization.DayOfWeek.Tuesday);

        /// <summary>Set to <see cref="Windows.Globalization.DayOfWeek.Wednesday"/></summary>
        public static TTarget Wednesday<TTarget>(this DependencyProperty<TTarget, Windows.Globalization.DayOfWeek> property) where TTarget : CalendarView
        => property.Set(Windows.Globalization.DayOfWeek.Wednesday);
    }

    public static partial class ColorPickerExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumComponents.HueSaturation"/></summary>
        public static TTarget HueSaturation<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents> property) where TTarget : ColorPicker
        => property.Set(Xaml.Controls.ColorSpectrumComponents.HueSaturation);

        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumComponents.HueValue"/></summary>
        public static TTarget HueValue<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents> property) where TTarget : ColorPicker
        => property.Set(Xaml.Controls.ColorSpectrumComponents.HueValue);

        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumComponents.SaturationHue"/></summary>
        public static TTarget SaturationHue<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents> property) where TTarget : ColorPicker
        => property.Set(Xaml.Controls.ColorSpectrumComponents.SaturationHue);

        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumComponents.SaturationValue"/></summary>
        public static TTarget SaturationValue<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents> property) where TTarget : ColorPicker
        => property.Set(Xaml.Controls.ColorSpectrumComponents.SaturationValue);

        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumComponents.ValueHue"/></summary>
        public static TTarget ValueHue<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents> property) where TTarget : ColorPicker
        => property.Set(Xaml.Controls.ColorSpectrumComponents.ValueHue);

        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumComponents.ValueSaturation"/></summary>
        public static TTarget ValueSaturation<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents> property) where TTarget : ColorPicker
        => property.Set(Xaml.Controls.ColorSpectrumComponents.ValueSaturation);

        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumShape.Box"/></summary>
        public static TTarget Box<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumShape> property) where TTarget : ColorPicker
        => property.Set(Xaml.Controls.ColorSpectrumShape.Box);

        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumShape.Ring"/></summary>
        public static TTarget Ring<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumShape> property) where TTarget : ColorPicker
        => property.Set(Xaml.Controls.ColorSpectrumShape.Ring);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : ColorPicker
        => property.Set(Xaml.Controls.Orientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : ColorPicker
        => property.Set(Xaml.Controls.Orientation.Vertical);
    }

    public static partial class ColorPickerSliderExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.ColorPickerHsvChannel.Alpha"/></summary>
        public static TTarget Alpha<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorPickerHsvChannel> property) where TTarget : ColorPickerSlider
        => property.Set(Xaml.Controls.ColorPickerHsvChannel.Alpha);

        /// <summary>Set to <see cref="Xaml.Controls.ColorPickerHsvChannel.Hue"/></summary>
        public static TTarget Hue<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorPickerHsvChannel> property) where TTarget : ColorPickerSlider
        => property.Set(Xaml.Controls.ColorPickerHsvChannel.Hue);

        /// <summary>Set to <see cref="Xaml.Controls.ColorPickerHsvChannel.Saturation"/></summary>
        public static TTarget Saturation<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorPickerHsvChannel> property) where TTarget : ColorPickerSlider
        => property.Set(Xaml.Controls.ColorPickerHsvChannel.Saturation);

        /// <summary>Set to <see cref="Xaml.Controls.ColorPickerHsvChannel.Value"/></summary>
        public static TTarget Value<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorPickerHsvChannel> property) where TTarget : ColorPickerSlider
        => property.Set(Xaml.Controls.ColorPickerHsvChannel.Value);
    }

    public static partial class ColorSpectrumExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumComponents.HueSaturation"/></summary>
        public static TTarget HueSaturation<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents> property) where TTarget : ColorSpectrum
        => property.Set(Xaml.Controls.ColorSpectrumComponents.HueSaturation);

        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumComponents.HueValue"/></summary>
        public static TTarget HueValue<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents> property) where TTarget : ColorSpectrum
        => property.Set(Xaml.Controls.ColorSpectrumComponents.HueValue);

        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumComponents.SaturationHue"/></summary>
        public static TTarget SaturationHue<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents> property) where TTarget : ColorSpectrum
        => property.Set(Xaml.Controls.ColorSpectrumComponents.SaturationHue);

        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumComponents.SaturationValue"/></summary>
        public static TTarget SaturationValue<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents> property) where TTarget : ColorSpectrum
        => property.Set(Xaml.Controls.ColorSpectrumComponents.SaturationValue);

        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumComponents.ValueHue"/></summary>
        public static TTarget ValueHue<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents> property) where TTarget : ColorSpectrum
        => property.Set(Xaml.Controls.ColorSpectrumComponents.ValueHue);

        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumComponents.ValueSaturation"/></summary>
        public static TTarget ValueSaturation<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumComponents> property) where TTarget : ColorSpectrum
        => property.Set(Xaml.Controls.ColorSpectrumComponents.ValueSaturation);

        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumShape.Box"/></summary>
        public static TTarget Box<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumShape> property) where TTarget : ColorSpectrum
        => property.Set(Xaml.Controls.ColorSpectrumShape.Box);

        /// <summary>Set to <see cref="Xaml.Controls.ColorSpectrumShape.Ring"/></summary>
        public static TTarget Ring<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ColorSpectrumShape> property) where TTarget : ColorSpectrum
        => property.Set(Xaml.Controls.ColorSpectrumShape.Ring);
    }

    public static partial class ComboBoxExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.ComboBoxSelectionChangedTrigger.Always"/></summary>
        public static TTarget Always<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ComboBoxSelectionChangedTrigger> property) where TTarget : ComboBox
        => property.Set(Xaml.Controls.ComboBoxSelectionChangedTrigger.Always);

        /// <summary>Set to <see cref="Xaml.Controls.ComboBoxSelectionChangedTrigger.Committed"/></summary>
        public static TTarget Committed<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ComboBoxSelectionChangedTrigger> property) where TTarget : ComboBox
        => property.Set(Xaml.Controls.ComboBoxSelectionChangedTrigger.Committed);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : ComboBox
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Off"/></summary>
        public static TTarget Off<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : ComboBox
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Off);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.On"/></summary>
        public static TTarget On<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : ComboBox
        => property.Set(Xaml.Controls.LightDismissOverlayMode.On);
    }

    public static partial class CommandBarExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.CommandBarDefaultLabelPosition.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CommandBarDefaultLabelPosition> property) where TTarget : CommandBar
        => property.Set(Xaml.Controls.CommandBarDefaultLabelPosition.Bottom);

        /// <summary>Set to <see cref="Xaml.Controls.CommandBarDefaultLabelPosition.Collapsed"/></summary>
        public static TTarget Collapsed<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CommandBarDefaultLabelPosition> property) where TTarget : CommandBar
        => property.Set(Xaml.Controls.CommandBarDefaultLabelPosition.Collapsed);

        /// <summary>Set to <see cref="Xaml.Controls.CommandBarDefaultLabelPosition.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CommandBarDefaultLabelPosition> property) where TTarget : CommandBar
        => property.Set(Xaml.Controls.CommandBarDefaultLabelPosition.Right);

        /// <summary>Set to <see cref="Xaml.Controls.CommandBarOverflowButtonVisibility.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CommandBarOverflowButtonVisibility> property) where TTarget : CommandBar
        => property.Set(Xaml.Controls.CommandBarOverflowButtonVisibility.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.CommandBarOverflowButtonVisibility.Collapsed"/></summary>
        public static TTarget Collapsed<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CommandBarOverflowButtonVisibility> property) where TTarget : CommandBar
        => property.Set(Xaml.Controls.CommandBarOverflowButtonVisibility.Collapsed);

        /// <summary>Set to <see cref="Xaml.Controls.CommandBarOverflowButtonVisibility.Visible"/></summary>
        public static TTarget Visible<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CommandBarOverflowButtonVisibility> property) where TTarget : CommandBar
        => property.Set(Xaml.Controls.CommandBarOverflowButtonVisibility.Visible);
    }

    public static partial class ContentDialogExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.ContentDialogButton.Close"/></summary>
        public static TTarget Close<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ContentDialogButton> property) where TTarget : ContentDialog
        => property.Set(Xaml.Controls.ContentDialogButton.Close);

        /// <summary>Set to <see cref="Xaml.Controls.ContentDialogButton.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ContentDialogButton> property) where TTarget : ContentDialog
        => property.Set(Xaml.Controls.ContentDialogButton.None);

        /// <summary>Set to <see cref="Xaml.Controls.ContentDialogButton.Primary"/></summary>
        public static TTarget Primary<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ContentDialogButton> property) where TTarget : ContentDialog
        => property.Set(Xaml.Controls.ContentDialogButton.Primary);

        /// <summary>Set to <see cref="Xaml.Controls.ContentDialogButton.Secondary"/></summary>
        public static TTarget Secondary<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ContentDialogButton> property) where TTarget : ContentDialog
        => property.Set(Xaml.Controls.ContentDialogButton.Secondary);
    }

    public static partial class ContentPresenterExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.BackgroundSizing.InnerBorderEdge"/></summary>
        public static TTarget InnerBorderEdge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> property) where TTarget : ContentPresenter
        => property.Set(Xaml.Controls.BackgroundSizing.InnerBorderEdge);

        /// <summary>Set to <see cref="Xaml.Controls.BackgroundSizing.OuterBorderEdge"/></summary>
        public static TTarget OuterBorderEdge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> property) where TTarget : ContentPresenter
        => property.Set(Xaml.Controls.BackgroundSizing.OuterBorderEdge);

        /// <summary>Set to <see cref="Xaml.LineStackingStrategy.BaselineToBaseline"/></summary>
        public static TTarget BaselineToBaseline<TTarget>(this DependencyProperty<TTarget, Xaml.LineStackingStrategy> property) where TTarget : ContentPresenter
        => property.Set(Xaml.LineStackingStrategy.BaselineToBaseline);

        /// <summary>Set to <see cref="Xaml.LineStackingStrategy.BlockLineHeight"/></summary>
        public static TTarget BlockLineHeight<TTarget>(this DependencyProperty<TTarget, Xaml.LineStackingStrategy> property) where TTarget : ContentPresenter
        => property.Set(Xaml.LineStackingStrategy.BlockLineHeight);

        /// <summary>Set to <see cref="Xaml.LineStackingStrategy.MaxHeight"/></summary>
        public static TTarget MaxHeight<TTarget>(this DependencyProperty<TTarget, Xaml.LineStackingStrategy> property) where TTarget : ContentPresenter
        => property.Set(Xaml.LineStackingStrategy.MaxHeight);

        /// <summary>Set to <see cref="Xaml.OpticalMarginAlignment.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.OpticalMarginAlignment> property) where TTarget : ContentPresenter
        => property.Set(Xaml.OpticalMarginAlignment.None);

        /// <summary>Set to <see cref="Xaml.OpticalMarginAlignment.TrimSideBearings"/></summary>
        public static TTarget TrimSideBearings<TTarget>(this DependencyProperty<TTarget, Xaml.OpticalMarginAlignment> property) where TTarget : ContentPresenter
        => property.Set(Xaml.OpticalMarginAlignment.TrimSideBearings);

        /// <summary>Set to <see cref="Xaml.TextLineBounds.Full"/></summary>
        public static TTarget Full<TTarget>(this DependencyProperty<TTarget, Xaml.TextLineBounds> property) where TTarget : ContentPresenter
        => property.Set(Xaml.TextLineBounds.Full);

        /// <summary>Set to <see cref="Xaml.TextLineBounds.Tight"/></summary>
        public static TTarget Tight<TTarget>(this DependencyProperty<TTarget, Xaml.TextLineBounds> property) where TTarget : ContentPresenter
        => property.Set(Xaml.TextLineBounds.Tight);

        /// <summary>Set to <see cref="Xaml.TextLineBounds.TrimToBaseline"/></summary>
        public static TTarget TrimToBaseline<TTarget>(this DependencyProperty<TTarget, Xaml.TextLineBounds> property) where TTarget : ContentPresenter
        => property.Set(Xaml.TextLineBounds.TrimToBaseline);

        /// <summary>Set to <see cref="Xaml.TextLineBounds.TrimToCapHeight"/></summary>
        public static TTarget TrimToCapHeight<TTarget>(this DependencyProperty<TTarget, Xaml.TextLineBounds> property) where TTarget : ContentPresenter
        => property.Set(Xaml.TextLineBounds.TrimToCapHeight);

        /// <summary>Set to <see cref="Xaml.TextWrapping.NoWrap"/></summary>
        public static TTarget NoWrap<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : ContentPresenter
        => property.Set(Xaml.TextWrapping.NoWrap);

        /// <summary>Set to <see cref="Xaml.TextWrapping.Wrap"/></summary>
        public static TTarget Wrap<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : ContentPresenter
        => property.Set(Xaml.TextWrapping.Wrap);

        /// <summary>Set to <see cref="Xaml.TextWrapping.WrapWholeWords"/></summary>
        public static TTarget WrapWholeWords<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : ContentPresenter
        => property.Set(Xaml.TextWrapping.WrapWholeWords);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Condensed"/></summary>
        public static TTarget Condensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : ContentPresenter
        => property.Set(Windows.UI.Text.FontStretch.Condensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Expanded"/></summary>
        public static TTarget Expanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : ContentPresenter
        => property.Set(Windows.UI.Text.FontStretch.Expanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.ExtraCondensed"/></summary>
        public static TTarget ExtraCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : ContentPresenter
        => property.Set(Windows.UI.Text.FontStretch.ExtraCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.ExtraExpanded"/></summary>
        public static TTarget ExtraExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : ContentPresenter
        => property.Set(Windows.UI.Text.FontStretch.ExtraExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : ContentPresenter
        => property.Set(Windows.UI.Text.FontStretch.Normal);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.SemiCondensed"/></summary>
        public static TTarget SemiCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : ContentPresenter
        => property.Set(Windows.UI.Text.FontStretch.SemiCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.SemiExpanded"/></summary>
        public static TTarget SemiExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : ContentPresenter
        => property.Set(Windows.UI.Text.FontStretch.SemiExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.UltraCondensed"/></summary>
        public static TTarget UltraCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : ContentPresenter
        => property.Set(Windows.UI.Text.FontStretch.UltraCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.UltraExpanded"/></summary>
        public static TTarget UltraExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : ContentPresenter
        => property.Set(Windows.UI.Text.FontStretch.UltraExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Undefined"/></summary>
        public static TTarget Undefined<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : ContentPresenter
        => property.Set(Windows.UI.Text.FontStretch.Undefined);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Italic"/></summary>
        public static TTarget Italic<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : ContentPresenter
        => property.Set(Windows.UI.Text.FontStyle.Italic);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : ContentPresenter
        => property.Set(Windows.UI.Text.FontStyle.Normal);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Oblique"/></summary>
        public static TTarget Oblique<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : ContentPresenter
        => property.Set(Windows.UI.Text.FontStyle.Oblique);
    }

    public static partial class ControlExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.BackgroundSizing.InnerBorderEdge"/></summary>
        public static TTarget InnerBorderEdge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> property) where TTarget : Control
        => property.Set(Xaml.Controls.BackgroundSizing.InnerBorderEdge);

        /// <summary>Set to <see cref="Xaml.Controls.BackgroundSizing.OuterBorderEdge"/></summary>
        public static TTarget OuterBorderEdge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> property) where TTarget : Control
        => property.Set(Xaml.Controls.BackgroundSizing.OuterBorderEdge);

        /// <summary>Set to <see cref="Xaml.Controls.RequiresPointer.Never"/></summary>
        public static TTarget Never<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RequiresPointer> property) where TTarget : Control
        => property.Set(Xaml.Controls.RequiresPointer.Never);

        /// <summary>Set to <see cref="Xaml.Controls.RequiresPointer.WhenEngaged"/></summary>
        public static TTarget WhenEngaged<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RequiresPointer> property) where TTarget : Control
        => property.Set(Xaml.Controls.RequiresPointer.WhenEngaged);

        /// <summary>Set to <see cref="Xaml.Controls.RequiresPointer.WhenFocused"/></summary>
        public static TTarget WhenFocused<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RequiresPointer> property) where TTarget : Control
        => property.Set(Xaml.Controls.RequiresPointer.WhenFocused);

        /// <summary>Set to <see cref="Xaml.ElementSoundMode.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.ElementSoundMode> property) where TTarget : Control
        => property.Set(Xaml.ElementSoundMode.Default);

        /// <summary>Set to <see cref="Xaml.ElementSoundMode.FocusOnly"/></summary>
        public static TTarget FocusOnly<TTarget>(this DependencyProperty<TTarget, Xaml.ElementSoundMode> property) where TTarget : Control
        => property.Set(Xaml.ElementSoundMode.FocusOnly);

        /// <summary>Set to <see cref="Xaml.ElementSoundMode.Off"/></summary>
        public static TTarget Off<TTarget>(this DependencyProperty<TTarget, Xaml.ElementSoundMode> property) where TTarget : Control
        => property.Set(Xaml.ElementSoundMode.Off);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Condensed"/></summary>
        public static TTarget Condensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : Control
        => property.Set(Windows.UI.Text.FontStretch.Condensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Expanded"/></summary>
        public static TTarget Expanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : Control
        => property.Set(Windows.UI.Text.FontStretch.Expanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.ExtraCondensed"/></summary>
        public static TTarget ExtraCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : Control
        => property.Set(Windows.UI.Text.FontStretch.ExtraCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.ExtraExpanded"/></summary>
        public static TTarget ExtraExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : Control
        => property.Set(Windows.UI.Text.FontStretch.ExtraExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : Control
        => property.Set(Windows.UI.Text.FontStretch.Normal);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.SemiCondensed"/></summary>
        public static TTarget SemiCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : Control
        => property.Set(Windows.UI.Text.FontStretch.SemiCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.SemiExpanded"/></summary>
        public static TTarget SemiExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : Control
        => property.Set(Windows.UI.Text.FontStretch.SemiExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.UltraCondensed"/></summary>
        public static TTarget UltraCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : Control
        => property.Set(Windows.UI.Text.FontStretch.UltraCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.UltraExpanded"/></summary>
        public static TTarget UltraExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : Control
        => property.Set(Windows.UI.Text.FontStretch.UltraExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Undefined"/></summary>
        public static TTarget Undefined<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : Control
        => property.Set(Windows.UI.Text.FontStretch.Undefined);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Italic"/></summary>
        public static TTarget Italic<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : Control
        => property.Set(Windows.UI.Text.FontStyle.Italic);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : Control
        => property.Set(Windows.UI.Text.FontStyle.Normal);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Oblique"/></summary>
        public static TTarget Oblique<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : Control
        => property.Set(Windows.UI.Text.FontStyle.Oblique);
    }

    public static partial class CornerRadiusFilterConverterExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusFilterKind.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusFilterKind> property) where TTarget : CornerRadiusFilterConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusFilterKind.Bottom);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusFilterKind.BottomRightValue"/></summary>
        public static TTarget BottomRightValue<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusFilterKind> property) where TTarget : CornerRadiusFilterConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusFilterKind.BottomRightValue);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusFilterKind.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusFilterKind> property) where TTarget : CornerRadiusFilterConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusFilterKind.Left);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusFilterKind.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusFilterKind> property) where TTarget : CornerRadiusFilterConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusFilterKind.None);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusFilterKind.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusFilterKind> property) where TTarget : CornerRadiusFilterConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusFilterKind.Right);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusFilterKind.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusFilterKind> property) where TTarget : CornerRadiusFilterConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusFilterKind.Top);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusFilterKind.TopLeftValue"/></summary>
        public static TTarget TopLeftValue<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusFilterKind> property) where TTarget : CornerRadiusFilterConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusFilterKind.TopLeftValue);
    }

    public static partial class CornerRadiusToThicknessConverterExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterBottomFromBottomLeft"/></summary>
        public static TTarget FilterBottomFromBottomLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind> property) where TTarget : CornerRadiusToThicknessConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterBottomFromBottomLeft);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterBottomFromBottomRight"/></summary>
        public static TTarget FilterBottomFromBottomRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind> property) where TTarget : CornerRadiusToThicknessConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterBottomFromBottomRight);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterLeftAndRightFromBottom"/></summary>
        public static TTarget FilterLeftAndRightFromBottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind> property) where TTarget : CornerRadiusToThicknessConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterLeftAndRightFromBottom);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterLeftAndRightFromTop"/></summary>
        public static TTarget FilterLeftAndRightFromTop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind> property) where TTarget : CornerRadiusToThicknessConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterLeftAndRightFromTop);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterLeftFromBottomLeft"/></summary>
        public static TTarget FilterLeftFromBottomLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind> property) where TTarget : CornerRadiusToThicknessConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterLeftFromBottomLeft);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterLeftFromTopLeft"/></summary>
        public static TTarget FilterLeftFromTopLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind> property) where TTarget : CornerRadiusToThicknessConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterLeftFromTopLeft);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterRightFromBottomRight"/></summary>
        public static TTarget FilterRightFromBottomRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind> property) where TTarget : CornerRadiusToThicknessConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterRightFromBottomRight);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterRightFromTopRight"/></summary>
        public static TTarget FilterRightFromTopRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind> property) where TTarget : CornerRadiusToThicknessConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterRightFromTopRight);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterTopAndBottomFromLeft"/></summary>
        public static TTarget FilterTopAndBottomFromLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind> property) where TTarget : CornerRadiusToThicknessConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterTopAndBottomFromLeft);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterTopAndBottomFromRight"/></summary>
        public static TTarget FilterTopAndBottomFromRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind> property) where TTarget : CornerRadiusToThicknessConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterTopAndBottomFromRight);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterTopFromTopLeft"/></summary>
        public static TTarget FilterTopFromTopLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind> property) where TTarget : CornerRadiusToThicknessConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterTopFromTopLeft);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterTopFromTopRight"/></summary>
        public static TTarget FilterTopFromTopRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind> property) where TTarget : CornerRadiusToThicknessConverter
        => property.Set(Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind.FilterTopFromTopRight);
    }

    public static partial class DatePickerExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : DatePicker
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Off"/></summary>
        public static TTarget Off<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : DatePicker
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Off);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.On"/></summary>
        public static TTarget On<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : DatePicker
        => property.Set(Xaml.Controls.LightDismissOverlayMode.On);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : DatePicker
        => property.Set(Xaml.Controls.Orientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : DatePicker
        => property.Set(Xaml.Controls.Orientation.Vertical);
    }

    public static partial class DependencyObjectExtensions
    {
        /// <summary>Set to <see cref="Xaml.Automation.Peers.AccessibilityView.Content"/></summary>
        public static TTarget Content<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AccessibilityView> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AccessibilityView.Content);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AccessibilityView.Control"/></summary>
        public static TTarget Control<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AccessibilityView> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AccessibilityView.Control);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AccessibilityView.Raw"/></summary>
        public static TTarget Raw<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AccessibilityView> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AccessibilityView.Raw);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationHeadingLevel.Level1"/></summary>
        public static TTarget Level1<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationHeadingLevel> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationHeadingLevel.Level1);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationHeadingLevel.Level2"/></summary>
        public static TTarget Level2<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationHeadingLevel> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationHeadingLevel.Level2);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationHeadingLevel.Level3"/></summary>
        public static TTarget Level3<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationHeadingLevel> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationHeadingLevel.Level3);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationHeadingLevel.Level4"/></summary>
        public static TTarget Level4<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationHeadingLevel> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationHeadingLevel.Level4);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationHeadingLevel.Level5"/></summary>
        public static TTarget Level5<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationHeadingLevel> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationHeadingLevel.Level5);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationHeadingLevel.Level6"/></summary>
        public static TTarget Level6<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationHeadingLevel> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationHeadingLevel.Level6);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationHeadingLevel.Level7"/></summary>
        public static TTarget Level7<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationHeadingLevel> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationHeadingLevel.Level7);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationHeadingLevel.Level8"/></summary>
        public static TTarget Level8<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationHeadingLevel> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationHeadingLevel.Level8);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationHeadingLevel.Level9"/></summary>
        public static TTarget Level9<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationHeadingLevel> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationHeadingLevel.Level9);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationHeadingLevel.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationHeadingLevel> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationHeadingLevel.None);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationLandmarkType.Custom"/></summary>
        public static TTarget Custom<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationLandmarkType> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationLandmarkType.Custom);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationLandmarkType.Form"/></summary>
        public static TTarget Form<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationLandmarkType> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationLandmarkType.Form);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationLandmarkType.Main"/></summary>
        public static TTarget Main<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationLandmarkType> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationLandmarkType.Main);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationLandmarkType.Navigation"/></summary>
        public static TTarget Navigation<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationLandmarkType> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationLandmarkType.Navigation);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationLandmarkType.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationLandmarkType> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationLandmarkType.None);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationLandmarkType.Search"/></summary>
        public static TTarget Search<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationLandmarkType> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationLandmarkType.Search);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationLiveSetting.Assertive"/></summary>
        public static TTarget Assertive<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationLiveSetting> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationLiveSetting.Assertive);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationLiveSetting.Off"/></summary>
        public static TTarget Off<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationLiveSetting> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationLiveSetting.Off);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationLiveSetting.Polite"/></summary>
        public static TTarget Polite<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationLiveSetting> property) where TTarget : DependencyObject
        => property.Set(Xaml.Automation.Peers.AutomationLiveSetting.Polite);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PlacementMode.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PlacementMode> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.Primitives.PlacementMode.Bottom);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PlacementMode.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PlacementMode> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.Primitives.PlacementMode.Left);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PlacementMode.Mouse"/></summary>
        public static TTarget Mouse<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PlacementMode> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.Primitives.PlacementMode.Mouse);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PlacementMode.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PlacementMode> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.Primitives.PlacementMode.Right);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PlacementMode.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PlacementMode> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.Primitives.PlacementMode.Top);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollBarVisibility.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollBarVisibility> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.ScrollBarVisibility.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollBarVisibility.Disabled"/></summary>
        public static TTarget Disabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollBarVisibility> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.ScrollBarVisibility.Disabled);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollBarVisibility.Hidden"/></summary>
        public static TTarget Hidden<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollBarVisibility> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.ScrollBarVisibility.Hidden);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollBarVisibility.Visible"/></summary>
        public static TTarget Visible<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollBarVisibility> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.ScrollBarVisibility.Visible);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollMode> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.ScrollMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollMode.Disabled"/></summary>
        public static TTarget Disabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollMode> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.ScrollMode.Disabled);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollMode.Enabled"/></summary>
        public static TTarget Enabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollMode> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.ScrollMode.Enabled);

        /// <summary>Set to <see cref="Xaml.Controls.VirtualizationMode.Recycling"/></summary>
        public static TTarget Recycling<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.VirtualizationMode> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.VirtualizationMode.Recycling);

        /// <summary>Set to <see cref="Xaml.Controls.VirtualizationMode.Standard"/></summary>
        public static TTarget Standard<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.VirtualizationMode> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.VirtualizationMode.Standard);

        /// <summary>Set to <see cref="Xaml.Controls.ZoomMode.Disabled"/></summary>
        public static TTarget Disabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ZoomMode> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.ZoomMode.Disabled);

        /// <summary>Set to <see cref="Xaml.Controls.ZoomMode.Enabled"/></summary>
        public static TTarget Enabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ZoomMode> property) where TTarget : DependencyObject
        => property.Set(Xaml.Controls.ZoomMode.Enabled);

        /// <summary>Set to <see cref="Xaml.FontCapitals.AllPetiteCaps"/></summary>
        public static TTarget AllPetiteCaps<TTarget>(this DependencyProperty<TTarget, Xaml.FontCapitals> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontCapitals.AllPetiteCaps);

        /// <summary>Set to <see cref="Xaml.FontCapitals.AllSmallCaps"/></summary>
        public static TTarget AllSmallCaps<TTarget>(this DependencyProperty<TTarget, Xaml.FontCapitals> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontCapitals.AllSmallCaps);

        /// <summary>Set to <see cref="Xaml.FontCapitals.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Xaml.FontCapitals> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontCapitals.Normal);

        /// <summary>Set to <see cref="Xaml.FontCapitals.PetiteCaps"/></summary>
        public static TTarget PetiteCaps<TTarget>(this DependencyProperty<TTarget, Xaml.FontCapitals> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontCapitals.PetiteCaps);

        /// <summary>Set to <see cref="Xaml.FontCapitals.SmallCaps"/></summary>
        public static TTarget SmallCaps<TTarget>(this DependencyProperty<TTarget, Xaml.FontCapitals> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontCapitals.SmallCaps);

        /// <summary>Set to <see cref="Xaml.FontCapitals.Titling"/></summary>
        public static TTarget Titling<TTarget>(this DependencyProperty<TTarget, Xaml.FontCapitals> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontCapitals.Titling);

        /// <summary>Set to <see cref="Xaml.FontCapitals.Unicase"/></summary>
        public static TTarget Unicase<TTarget>(this DependencyProperty<TTarget, Xaml.FontCapitals> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontCapitals.Unicase);

        /// <summary>Set to <see cref="Xaml.FontEastAsianLanguage.HojoKanji"/></summary>
        public static TTarget HojoKanji<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianLanguage> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianLanguage.HojoKanji);

        /// <summary>Set to <see cref="Xaml.FontEastAsianLanguage.Jis04"/></summary>
        public static TTarget Jis04<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianLanguage> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianLanguage.Jis04);

        /// <summary>Set to <see cref="Xaml.FontEastAsianLanguage.Jis78"/></summary>
        public static TTarget Jis78<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianLanguage> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianLanguage.Jis78);

        /// <summary>Set to <see cref="Xaml.FontEastAsianLanguage.Jis83"/></summary>
        public static TTarget Jis83<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianLanguage> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianLanguage.Jis83);

        /// <summary>Set to <see cref="Xaml.FontEastAsianLanguage.Jis90"/></summary>
        public static TTarget Jis90<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianLanguage> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianLanguage.Jis90);

        /// <summary>Set to <see cref="Xaml.FontEastAsianLanguage.NlcKanji"/></summary>
        public static TTarget NlcKanji<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianLanguage> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianLanguage.NlcKanji);

        /// <summary>Set to <see cref="Xaml.FontEastAsianLanguage.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianLanguage> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianLanguage.Normal);

        /// <summary>Set to <see cref="Xaml.FontEastAsianLanguage.Simplified"/></summary>
        public static TTarget Simplified<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianLanguage> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianLanguage.Simplified);

        /// <summary>Set to <see cref="Xaml.FontEastAsianLanguage.Traditional"/></summary>
        public static TTarget Traditional<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianLanguage> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianLanguage.Traditional);

        /// <summary>Set to <see cref="Xaml.FontEastAsianLanguage.TraditionalNames"/></summary>
        public static TTarget TraditionalNames<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianLanguage> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianLanguage.TraditionalNames);

        /// <summary>Set to <see cref="Xaml.FontEastAsianWidths.Full"/></summary>
        public static TTarget Full<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianWidths> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianWidths.Full);

        /// <summary>Set to <see cref="Xaml.FontEastAsianWidths.Half"/></summary>
        public static TTarget Half<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianWidths> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianWidths.Half);

        /// <summary>Set to <see cref="Xaml.FontEastAsianWidths.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianWidths> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianWidths.Normal);

        /// <summary>Set to <see cref="Xaml.FontEastAsianWidths.Proportional"/></summary>
        public static TTarget Proportional<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianWidths> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianWidths.Proportional);

        /// <summary>Set to <see cref="Xaml.FontEastAsianWidths.Quarter"/></summary>
        public static TTarget Quarter<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianWidths> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianWidths.Quarter);

        /// <summary>Set to <see cref="Xaml.FontEastAsianWidths.Third"/></summary>
        public static TTarget Third<TTarget>(this DependencyProperty<TTarget, Xaml.FontEastAsianWidths> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontEastAsianWidths.Third);

        /// <summary>Set to <see cref="Xaml.FontFraction.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Xaml.FontFraction> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontFraction.Normal);

        /// <summary>Set to <see cref="Xaml.FontFraction.Slashed"/></summary>
        public static TTarget Slashed<TTarget>(this DependencyProperty<TTarget, Xaml.FontFraction> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontFraction.Slashed);

        /// <summary>Set to <see cref="Xaml.FontFraction.Stacked"/></summary>
        public static TTarget Stacked<TTarget>(this DependencyProperty<TTarget, Xaml.FontFraction> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontFraction.Stacked);

        /// <summary>Set to <see cref="Xaml.FontNumeralAlignment.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Xaml.FontNumeralAlignment> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontNumeralAlignment.Normal);

        /// <summary>Set to <see cref="Xaml.FontNumeralAlignment.Proportional"/></summary>
        public static TTarget Proportional<TTarget>(this DependencyProperty<TTarget, Xaml.FontNumeralAlignment> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontNumeralAlignment.Proportional);

        /// <summary>Set to <see cref="Xaml.FontNumeralAlignment.Tabular"/></summary>
        public static TTarget Tabular<TTarget>(this DependencyProperty<TTarget, Xaml.FontNumeralAlignment> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontNumeralAlignment.Tabular);

        /// <summary>Set to <see cref="Xaml.FontNumeralStyle.Lining"/></summary>
        public static TTarget Lining<TTarget>(this DependencyProperty<TTarget, Xaml.FontNumeralStyle> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontNumeralStyle.Lining);

        /// <summary>Set to <see cref="Xaml.FontNumeralStyle.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Xaml.FontNumeralStyle> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontNumeralStyle.Normal);

        /// <summary>Set to <see cref="Xaml.FontNumeralStyle.OldStyle"/></summary>
        public static TTarget OldStyle<TTarget>(this DependencyProperty<TTarget, Xaml.FontNumeralStyle> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontNumeralStyle.OldStyle);

        /// <summary>Set to <see cref="Xaml.FontVariants.Inferior"/></summary>
        public static TTarget Inferior<TTarget>(this DependencyProperty<TTarget, Xaml.FontVariants> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontVariants.Inferior);

        /// <summary>Set to <see cref="Xaml.FontVariants.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Xaml.FontVariants> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontVariants.Normal);

        /// <summary>Set to <see cref="Xaml.FontVariants.Ordinal"/></summary>
        public static TTarget Ordinal<TTarget>(this DependencyProperty<TTarget, Xaml.FontVariants> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontVariants.Ordinal);

        /// <summary>Set to <see cref="Xaml.FontVariants.Ruby"/></summary>
        public static TTarget Ruby<TTarget>(this DependencyProperty<TTarget, Xaml.FontVariants> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontVariants.Ruby);

        /// <summary>Set to <see cref="Xaml.FontVariants.Subscript"/></summary>
        public static TTarget Subscript<TTarget>(this DependencyProperty<TTarget, Xaml.FontVariants> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontVariants.Subscript);

        /// <summary>Set to <see cref="Xaml.FontVariants.Superscript"/></summary>
        public static TTarget Superscript<TTarget>(this DependencyProperty<TTarget, Xaml.FontVariants> property) where TTarget : DependencyObject
        => property.Set(Xaml.FontVariants.Superscript);
    }

    public static partial class DragOverThemeAnimationExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Primitives.AnimationDirection.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> property) where TTarget : DragOverThemeAnimation
        => property.Set(Xaml.Controls.Primitives.AnimationDirection.Bottom);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.AnimationDirection.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> property) where TTarget : DragOverThemeAnimation
        => property.Set(Xaml.Controls.Primitives.AnimationDirection.Left);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.AnimationDirection.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> property) where TTarget : DragOverThemeAnimation
        => property.Set(Xaml.Controls.Primitives.AnimationDirection.Right);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.AnimationDirection.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> property) where TTarget : DragOverThemeAnimation
        => property.Set(Xaml.Controls.Primitives.AnimationDirection.Top);
    }

    public static partial class EasingFunctionBaseExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.Animation.EasingMode.EaseIn"/></summary>
        public static TTarget EaseIn<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Animation.EasingMode> property) where TTarget : EasingFunctionBase
        => property.Set(Xaml.Media.Animation.EasingMode.EaseIn);

        /// <summary>Set to <see cref="Xaml.Media.Animation.EasingMode.EaseInOut"/></summary>
        public static TTarget EaseInOut<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Animation.EasingMode> property) where TTarget : EasingFunctionBase
        => property.Set(Xaml.Media.Animation.EasingMode.EaseInOut);

        /// <summary>Set to <see cref="Xaml.Media.Animation.EasingMode.EaseOut"/></summary>
        public static TTarget EaseOut<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Animation.EasingMode> property) where TTarget : EasingFunctionBase
        => property.Set(Xaml.Media.Animation.EasingMode.EaseOut);
    }

    public static partial class EdgeUIThemeTransitionExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Primitives.EdgeTransitionLocation.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.EdgeTransitionLocation> property) where TTarget : EdgeUIThemeTransition
        => property.Set(Xaml.Controls.Primitives.EdgeTransitionLocation.Bottom);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.EdgeTransitionLocation.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.EdgeTransitionLocation> property) where TTarget : EdgeUIThemeTransition
        => property.Set(Xaml.Controls.Primitives.EdgeTransitionLocation.Left);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.EdgeTransitionLocation.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.EdgeTransitionLocation> property) where TTarget : EdgeUIThemeTransition
        => property.Set(Xaml.Controls.Primitives.EdgeTransitionLocation.Right);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.EdgeTransitionLocation.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.EdgeTransitionLocation> property) where TTarget : EdgeUIThemeTransition
        => property.Set(Xaml.Controls.Primitives.EdgeTransitionLocation.Top);
    }

    public static partial class ExpanderExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.ExpandDirection.Down"/></summary>
        public static TTarget Down<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ExpandDirection> property) where TTarget : Expander
        => property.Set(Xaml.Controls.ExpandDirection.Down);

        /// <summary>Set to <see cref="Xaml.Controls.ExpandDirection.Up"/></summary>
        public static TTarget Up<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ExpandDirection> property) where TTarget : Expander
        => property.Set(Xaml.Controls.ExpandDirection.Up);
    }

    public static partial class FlyoutBaseExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Off"/></summary>
        public static TTarget Off<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Off);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.On"/></summary>
        public static TTarget On<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.LightDismissOverlayMode.On);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutPlacementMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutPlacementMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutPlacementMode.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutPlacementMode.Bottom);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutPlacementMode.BottomEdgeAlignedLeft"/></summary>
        public static TTarget BottomEdgeAlignedLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutPlacementMode.BottomEdgeAlignedLeft);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutPlacementMode.BottomEdgeAlignedRight"/></summary>
        public static TTarget BottomEdgeAlignedRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutPlacementMode.BottomEdgeAlignedRight);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutPlacementMode.Full"/></summary>
        public static TTarget Full<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutPlacementMode.Full);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutPlacementMode.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutPlacementMode.Left);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutPlacementMode.LeftEdgeAlignedBottom"/></summary>
        public static TTarget LeftEdgeAlignedBottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutPlacementMode.LeftEdgeAlignedBottom);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutPlacementMode.LeftEdgeAlignedTop"/></summary>
        public static TTarget LeftEdgeAlignedTop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutPlacementMode.LeftEdgeAlignedTop);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutPlacementMode.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutPlacementMode.Right);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutPlacementMode.RightEdgeAlignedBottom"/></summary>
        public static TTarget RightEdgeAlignedBottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutPlacementMode.RightEdgeAlignedBottom);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutPlacementMode.RightEdgeAlignedTop"/></summary>
        public static TTarget RightEdgeAlignedTop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutPlacementMode.RightEdgeAlignedTop);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutPlacementMode.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutPlacementMode.Top);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutPlacementMode.TopEdgeAlignedLeft"/></summary>
        public static TTarget TopEdgeAlignedLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutPlacementMode.TopEdgeAlignedLeft);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutPlacementMode.TopEdgeAlignedRight"/></summary>
        public static TTarget TopEdgeAlignedRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutPlacementMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutPlacementMode.TopEdgeAlignedRight);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutShowMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutShowMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutShowMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutShowMode.Standard"/></summary>
        public static TTarget Standard<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutShowMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutShowMode.Standard);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutShowMode.Transient"/></summary>
        public static TTarget Transient<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutShowMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutShowMode.Transient);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.FlyoutShowMode.TransientWithDismissOnPointerMoveAway"/></summary>
        public static TTarget TransientWithDismissOnPointerMoveAway<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.FlyoutShowMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.Controls.Primitives.FlyoutShowMode.TransientWithDismissOnPointerMoveAway);

        /// <summary>Set to <see cref="Xaml.ElementSoundMode.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.ElementSoundMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.ElementSoundMode.Default);

        /// <summary>Set to <see cref="Xaml.ElementSoundMode.FocusOnly"/></summary>
        public static TTarget FocusOnly<TTarget>(this DependencyProperty<TTarget, Xaml.ElementSoundMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.ElementSoundMode.FocusOnly);

        /// <summary>Set to <see cref="Xaml.ElementSoundMode.Off"/></summary>
        public static TTarget Off<TTarget>(this DependencyProperty<TTarget, Xaml.ElementSoundMode> property) where TTarget : FlyoutBase
        => property.Set(Xaml.ElementSoundMode.Off);
    }

    public static partial class FontIconExtensions
    {
        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Italic"/></summary>
        public static TTarget Italic<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : FontIcon
        => property.Set(Windows.UI.Text.FontStyle.Italic);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : FontIcon
        => property.Set(Windows.UI.Text.FontStyle.Normal);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Oblique"/></summary>
        public static TTarget Oblique<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : FontIcon
        => property.Set(Windows.UI.Text.FontStyle.Oblique);
    }

    public static partial class FontIconSourceExtensions
    {
        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Italic"/></summary>
        public static TTarget Italic<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : FontIconSource
        => property.Set(Windows.UI.Text.FontStyle.Italic);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : FontIconSource
        => property.Set(Windows.UI.Text.FontStyle.Normal);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Oblique"/></summary>
        public static TTarget Oblique<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : FontIconSource
        => property.Set(Windows.UI.Text.FontStyle.Oblique);
    }

    public static partial class FrameworkElementExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.PivotSlideInAnimationGroup.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PivotSlideInAnimationGroup> property) where TTarget : FrameworkElement
        => property.Set(Xaml.Controls.PivotSlideInAnimationGroup.Default);

        /// <summary>Set to <see cref="Xaml.Controls.PivotSlideInAnimationGroup.GroupOne"/></summary>
        public static TTarget GroupOne<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PivotSlideInAnimationGroup> property) where TTarget : FrameworkElement
        => property.Set(Xaml.Controls.PivotSlideInAnimationGroup.GroupOne);

        /// <summary>Set to <see cref="Xaml.Controls.PivotSlideInAnimationGroup.GroupThree"/></summary>
        public static TTarget GroupThree<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PivotSlideInAnimationGroup> property) where TTarget : FrameworkElement
        => property.Set(Xaml.Controls.PivotSlideInAnimationGroup.GroupThree);

        /// <summary>Set to <see cref="Xaml.Controls.PivotSlideInAnimationGroup.GroupTwo"/></summary>
        public static TTarget GroupTwo<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PivotSlideInAnimationGroup> property) where TTarget : FrameworkElement
        => property.Set(Xaml.Controls.PivotSlideInAnimationGroup.GroupTwo);

        /// <summary>Set to <see cref="Xaml.ElementTheme.Dark"/></summary>
        public static TTarget Dark<TTarget>(this DependencyProperty<TTarget, Xaml.ElementTheme> property) where TTarget : FrameworkElement
        => property.Set(Xaml.ElementTheme.Dark);

        /// <summary>Set to <see cref="Xaml.ElementTheme.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.ElementTheme> property) where TTarget : FrameworkElement
        => property.Set(Xaml.ElementTheme.Default);

        /// <summary>Set to <see cref="Xaml.ElementTheme.Light"/></summary>
        public static TTarget Light<TTarget>(this DependencyProperty<TTarget, Xaml.ElementTheme> property) where TTarget : FrameworkElement
        => property.Set(Xaml.ElementTheme.Light);

        /// <summary>Set to <see cref="Xaml.FlowDirection.LeftToRight"/></summary>
        public static TTarget LeftToRight<TTarget>(this DependencyProperty<TTarget, Xaml.FlowDirection> property) where TTarget : FrameworkElement
        => property.Set(Xaml.FlowDirection.LeftToRight);

        /// <summary>Set to <see cref="Xaml.FlowDirection.RightToLeft"/></summary>
        public static TTarget RightToLeft<TTarget>(this DependencyProperty<TTarget, Xaml.FlowDirection> property) where TTarget : FrameworkElement
        => property.Set(Xaml.FlowDirection.RightToLeft);

        /// <summary>Set to <see cref="Xaml.HorizontalAlignment.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.HorizontalAlignment> property) where TTarget : FrameworkElement
        => property.Set(Xaml.HorizontalAlignment.Center);

        /// <summary>Set to <see cref="Xaml.HorizontalAlignment.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.HorizontalAlignment> property) where TTarget : FrameworkElement
        => property.Set(Xaml.HorizontalAlignment.Left);

        /// <summary>Set to <see cref="Xaml.HorizontalAlignment.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.HorizontalAlignment> property) where TTarget : FrameworkElement
        => property.Set(Xaml.HorizontalAlignment.Right);

        /// <summary>Set to <see cref="Xaml.HorizontalAlignment.Stretch"/></summary>
        public static TTarget Stretch<TTarget>(this DependencyProperty<TTarget, Xaml.HorizontalAlignment> property) where TTarget : FrameworkElement
        => property.Set(Xaml.HorizontalAlignment.Stretch);

        /// <summary>Set to <see cref="Xaml.VerticalAlignment.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.VerticalAlignment> property) where TTarget : FrameworkElement
        => property.Set(Xaml.VerticalAlignment.Bottom);

        /// <summary>Set to <see cref="Xaml.VerticalAlignment.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.VerticalAlignment> property) where TTarget : FrameworkElement
        => property.Set(Xaml.VerticalAlignment.Center);

        /// <summary>Set to <see cref="Xaml.VerticalAlignment.Stretch"/></summary>
        public static TTarget Stretch<TTarget>(this DependencyProperty<TTarget, Xaml.VerticalAlignment> property) where TTarget : FrameworkElement
        => property.Set(Xaml.VerticalAlignment.Stretch);

        /// <summary>Set to <see cref="Xaml.VerticalAlignment.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.VerticalAlignment> property) where TTarget : FrameworkElement
        => property.Set(Xaml.VerticalAlignment.Top);
    }

    public static partial class GeometryGroupExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.FillRule.EvenOdd"/></summary>
        public static TTarget EvenOdd<TTarget>(this DependencyProperty<TTarget, Xaml.Media.FillRule> property) where TTarget : GeometryGroup
        => property.Set(Xaml.Media.FillRule.EvenOdd);

        /// <summary>Set to <see cref="Xaml.Media.FillRule.Nonzero"/></summary>
        public static TTarget Nonzero<TTarget>(this DependencyProperty<TTarget, Xaml.Media.FillRule> property) where TTarget : GeometryGroup
        => property.Set(Xaml.Media.FillRule.Nonzero);
    }

    public static partial class GlyphsExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.StyleSimulations.BoldItalicSimulation"/></summary>
        public static TTarget BoldItalicSimulation<TTarget>(this DependencyProperty<TTarget, Xaml.Media.StyleSimulations> property) where TTarget : Glyphs
        => property.Set(Xaml.Media.StyleSimulations.BoldItalicSimulation);

        /// <summary>Set to <see cref="Xaml.Media.StyleSimulations.BoldSimulation"/></summary>
        public static TTarget BoldSimulation<TTarget>(this DependencyProperty<TTarget, Xaml.Media.StyleSimulations> property) where TTarget : Glyphs
        => property.Set(Xaml.Media.StyleSimulations.BoldSimulation);

        /// <summary>Set to <see cref="Xaml.Media.StyleSimulations.ItalicSimulation"/></summary>
        public static TTarget ItalicSimulation<TTarget>(this DependencyProperty<TTarget, Xaml.Media.StyleSimulations> property) where TTarget : Glyphs
        => property.Set(Xaml.Media.StyleSimulations.ItalicSimulation);

        /// <summary>Set to <see cref="Xaml.Media.StyleSimulations.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Media.StyleSimulations> property) where TTarget : Glyphs
        => property.Set(Xaml.Media.StyleSimulations.None);
    }

    public static partial class GradientBrushExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.BrushMappingMode.Absolute"/></summary>
        public static TTarget Absolute<TTarget>(this DependencyProperty<TTarget, Xaml.Media.BrushMappingMode> property) where TTarget : GradientBrush
        => property.Set(Xaml.Media.BrushMappingMode.Absolute);

        /// <summary>Set to <see cref="Xaml.Media.BrushMappingMode.RelativeToBoundingBox"/></summary>
        public static TTarget RelativeToBoundingBox<TTarget>(this DependencyProperty<TTarget, Xaml.Media.BrushMappingMode> property) where TTarget : GradientBrush
        => property.Set(Xaml.Media.BrushMappingMode.RelativeToBoundingBox);

        /// <summary>Set to <see cref="Xaml.Media.ColorInterpolationMode.ScRgbLinearInterpolation"/></summary>
        public static TTarget ScRgbLinearInterpolation<TTarget>(this DependencyProperty<TTarget, Xaml.Media.ColorInterpolationMode> property) where TTarget : GradientBrush
        => property.Set(Xaml.Media.ColorInterpolationMode.ScRgbLinearInterpolation);

        /// <summary>Set to <see cref="Xaml.Media.ColorInterpolationMode.SRgbLinearInterpolation"/></summary>
        public static TTarget SRgbLinearInterpolation<TTarget>(this DependencyProperty<TTarget, Xaml.Media.ColorInterpolationMode> property) where TTarget : GradientBrush
        => property.Set(Xaml.Media.ColorInterpolationMode.SRgbLinearInterpolation);

        /// <summary>Set to <see cref="Xaml.Media.GradientSpreadMethod.Pad"/></summary>
        public static TTarget Pad<TTarget>(this DependencyProperty<TTarget, Xaml.Media.GradientSpreadMethod> property) where TTarget : GradientBrush
        => property.Set(Xaml.Media.GradientSpreadMethod.Pad);

        /// <summary>Set to <see cref="Xaml.Media.GradientSpreadMethod.Reflect"/></summary>
        public static TTarget Reflect<TTarget>(this DependencyProperty<TTarget, Xaml.Media.GradientSpreadMethod> property) where TTarget : GradientBrush
        => property.Set(Xaml.Media.GradientSpreadMethod.Reflect);

        /// <summary>Set to <see cref="Xaml.Media.GradientSpreadMethod.Repeat"/></summary>
        public static TTarget Repeat<TTarget>(this DependencyProperty<TTarget, Xaml.Media.GradientSpreadMethod> property) where TTarget : GradientBrush
        => property.Set(Xaml.Media.GradientSpreadMethod.Repeat);
    }

    public static partial class GridExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.BackgroundSizing.InnerBorderEdge"/></summary>
        public static TTarget InnerBorderEdge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> property) where TTarget : Grid
        => property.Set(Xaml.Controls.BackgroundSizing.InnerBorderEdge);

        /// <summary>Set to <see cref="Xaml.Controls.BackgroundSizing.OuterBorderEdge"/></summary>
        public static TTarget OuterBorderEdge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> property) where TTarget : Grid
        => property.Set(Xaml.Controls.BackgroundSizing.OuterBorderEdge);
    }

    public static partial class HubExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : Hub
        => property.Set(Xaml.Controls.Orientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : Hub
        => property.Set(Xaml.Controls.Orientation.Vertical);
    }

    public static partial class HyperlinkExtensions
    {
        /// <summary>Set to <see cref="Xaml.Documents.UnderlineStyle.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Documents.UnderlineStyle> property) where TTarget : Hyperlink
        => property.Set(Xaml.Documents.UnderlineStyle.None);

        /// <summary>Set to <see cref="Xaml.Documents.UnderlineStyle.Single"/></summary>
        public static TTarget Single<TTarget>(this DependencyProperty<TTarget, Xaml.Documents.UnderlineStyle> property) where TTarget : Hyperlink
        => property.Set(Xaml.Documents.UnderlineStyle.Single);

        /// <summary>Set to <see cref="Xaml.ElementSoundMode.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.ElementSoundMode> property) where TTarget : Hyperlink
        => property.Set(Xaml.ElementSoundMode.Default);

        /// <summary>Set to <see cref="Xaml.ElementSoundMode.FocusOnly"/></summary>
        public static TTarget FocusOnly<TTarget>(this DependencyProperty<TTarget, Xaml.ElementSoundMode> property) where TTarget : Hyperlink
        => property.Set(Xaml.ElementSoundMode.FocusOnly);

        /// <summary>Set to <see cref="Xaml.ElementSoundMode.Off"/></summary>
        public static TTarget Off<TTarget>(this DependencyProperty<TTarget, Xaml.ElementSoundMode> property) where TTarget : Hyperlink
        => property.Set(Xaml.ElementSoundMode.Off);

        /// <summary>Set to <see cref="Xaml.FocusState.Keyboard"/></summary>
        public static TTarget Keyboard<TTarget>(this DependencyProperty<TTarget, Xaml.FocusState> property) where TTarget : Hyperlink
        => property.Set(Xaml.FocusState.Keyboard);

        /// <summary>Set to <see cref="Xaml.FocusState.Pointer"/></summary>
        public static TTarget Pointer<TTarget>(this DependencyProperty<TTarget, Xaml.FocusState> property) where TTarget : Hyperlink
        => property.Set(Xaml.FocusState.Pointer);

        /// <summary>Set to <see cref="Xaml.FocusState.Programmatic"/></summary>
        public static TTarget Programmatic<TTarget>(this DependencyProperty<TTarget, Xaml.FocusState> property) where TTarget : Hyperlink
        => property.Set(Xaml.FocusState.Programmatic);

        /// <summary>Set to <see cref="Xaml.FocusState.Unfocused"/></summary>
        public static TTarget Unfocused<TTarget>(this DependencyProperty<TTarget, Xaml.FocusState> property) where TTarget : Hyperlink
        => property.Set(Xaml.FocusState.Unfocused);

        /// <summary>Set to <see cref="Xaml.Input.XYFocusNavigationStrategy.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> property) where TTarget : Hyperlink
        => property.Set(Xaml.Input.XYFocusNavigationStrategy.Auto);

        /// <summary>Set to <see cref="Xaml.Input.XYFocusNavigationStrategy.NavigationDirectionDistance"/></summary>
        public static TTarget NavigationDirectionDistance<TTarget>(this DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> property) where TTarget : Hyperlink
        => property.Set(Xaml.Input.XYFocusNavigationStrategy.NavigationDirectionDistance);

        /// <summary>Set to <see cref="Xaml.Input.XYFocusNavigationStrategy.Projection"/></summary>
        public static TTarget Projection<TTarget>(this DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> property) where TTarget : Hyperlink
        => property.Set(Xaml.Input.XYFocusNavigationStrategy.Projection);

        /// <summary>Set to <see cref="Xaml.Input.XYFocusNavigationStrategy.RectilinearDistance"/></summary>
        public static TTarget RectilinearDistance<TTarget>(this DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> property) where TTarget : Hyperlink
        => property.Set(Xaml.Input.XYFocusNavigationStrategy.RectilinearDistance);
    }

    public static partial class ImageExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.Stretch.Fill"/></summary>
        public static TTarget Fill<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : Image
        => property.Set(Xaml.Media.Stretch.Fill);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : Image
        => property.Set(Xaml.Media.Stretch.None);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.Uniform"/></summary>
        public static TTarget Uniform<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : Image
        => property.Set(Xaml.Media.Stretch.Uniform);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.UniformToFill"/></summary>
        public static TTarget UniformToFill<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : Image
        => property.Set(Xaml.Media.Stretch.UniformToFill);
    }

    public static partial class InfoBarExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.InfoBarSeverity.Error"/></summary>
        public static TTarget Error<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.InfoBarSeverity> property) where TTarget : InfoBar
        => property.Set(Xaml.Controls.InfoBarSeverity.Error);

        /// <summary>Set to <see cref="Xaml.Controls.InfoBarSeverity.Informational"/></summary>
        public static TTarget Informational<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.InfoBarSeverity> property) where TTarget : InfoBar
        => property.Set(Xaml.Controls.InfoBarSeverity.Informational);

        /// <summary>Set to <see cref="Xaml.Controls.InfoBarSeverity.Success"/></summary>
        public static TTarget Success<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.InfoBarSeverity> property) where TTarget : InfoBar
        => property.Set(Xaml.Controls.InfoBarSeverity.Success);

        /// <summary>Set to <see cref="Xaml.Controls.InfoBarSeverity.Warning"/></summary>
        public static TTarget Warning<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.InfoBarSeverity> property) where TTarget : InfoBar
        => property.Set(Xaml.Controls.InfoBarSeverity.Warning);
    }

    public static partial class ItemsStackPanelExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : ItemsStackPanel
        => property.Set(Xaml.Controls.Orientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : ItemsStackPanel
        => property.Set(Xaml.Controls.Orientation.Vertical);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.GroupHeaderPlacement.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.GroupHeaderPlacement> property) where TTarget : ItemsStackPanel
        => property.Set(Xaml.Controls.Primitives.GroupHeaderPlacement.Left);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.GroupHeaderPlacement.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.GroupHeaderPlacement> property) where TTarget : ItemsStackPanel
        => property.Set(Xaml.Controls.Primitives.GroupHeaderPlacement.Top);
    }

    public static partial class ItemsViewExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.ItemsViewSelectionMode.Extended"/></summary>
        public static TTarget Extended<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ItemsViewSelectionMode> property) where TTarget : ItemsView
        => property.Set(Xaml.Controls.ItemsViewSelectionMode.Extended);

        /// <summary>Set to <see cref="Xaml.Controls.ItemsViewSelectionMode.Multiple"/></summary>
        public static TTarget Multiple<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ItemsViewSelectionMode> property) where TTarget : ItemsView
        => property.Set(Xaml.Controls.ItemsViewSelectionMode.Multiple);

        /// <summary>Set to <see cref="Xaml.Controls.ItemsViewSelectionMode.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ItemsViewSelectionMode> property) where TTarget : ItemsView
        => property.Set(Xaml.Controls.ItemsViewSelectionMode.None);

        /// <summary>Set to <see cref="Xaml.Controls.ItemsViewSelectionMode.Single"/></summary>
        public static TTarget Single<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ItemsViewSelectionMode> property) where TTarget : ItemsView
        => property.Set(Xaml.Controls.ItemsViewSelectionMode.Single);
    }

    public static partial class ItemsWrapGridExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : ItemsWrapGrid
        => property.Set(Xaml.Controls.Orientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : ItemsWrapGrid
        => property.Set(Xaml.Controls.Orientation.Vertical);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.GroupHeaderPlacement.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.GroupHeaderPlacement> property) where TTarget : ItemsWrapGrid
        => property.Set(Xaml.Controls.Primitives.GroupHeaderPlacement.Left);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.GroupHeaderPlacement.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.GroupHeaderPlacement> property) where TTarget : ItemsWrapGrid
        => property.Set(Xaml.Controls.Primitives.GroupHeaderPlacement.Top);
    }

    public static partial class KeyboardAcceleratorExtensions
    {
        /// <summary>Set to <see cref="VirtualKey.A"/></summary>
        public static TTarget A<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.A);

        /// <summary>Set to <see cref="VirtualKey.Accept"/></summary>
        public static TTarget Accept<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Accept);

        /// <summary>Set to <see cref="VirtualKey.Add"/></summary>
        public static TTarget Add<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Add);

        /// <summary>Set to <see cref="VirtualKey.Application"/></summary>
        public static TTarget Application<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Application);

        /// <summary>Set to <see cref="VirtualKey.B"/></summary>
        public static TTarget B<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.B);

        /// <summary>Set to <see cref="VirtualKey.Back"/></summary>
        public static TTarget Back<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Back);

        /// <summary>Set to <see cref="VirtualKey.C"/></summary>
        public static TTarget C<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.C);

        /// <summary>Set to <see cref="VirtualKey.Cancel"/></summary>
        public static TTarget Cancel<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Cancel);

        /// <summary>Set to <see cref="VirtualKey.CapitalLock"/></summary>
        public static TTarget CapitalLock<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.CapitalLock);

        /// <summary>Set to <see cref="VirtualKey.Clear"/></summary>
        public static TTarget Clear<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Clear);

        /// <summary>Set to <see cref="VirtualKey.Control"/></summary>
        public static TTarget Control<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Control);

        /// <summary>Set to <see cref="VirtualKey.Convert"/></summary>
        public static TTarget Convert<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Convert);

        /// <summary>Set to <see cref="VirtualKey.D"/></summary>
        public static TTarget D<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.D);

        /// <summary>Set to <see cref="VirtualKey.Decimal"/></summary>
        public static TTarget Decimal<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Decimal);

        /// <summary>Set to <see cref="VirtualKey.Delete"/></summary>
        public static TTarget Delete<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Delete);

        /// <summary>Set to <see cref="VirtualKey.Divide"/></summary>
        public static TTarget Divide<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Divide);

        /// <summary>Set to <see cref="VirtualKey.Down"/></summary>
        public static TTarget Down<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Down);

        /// <summary>Set to <see cref="VirtualKey.E"/></summary>
        public static TTarget E<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.E);

        /// <summary>Set to <see cref="VirtualKey.End"/></summary>
        public static TTarget End<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.End);

        /// <summary>Set to <see cref="VirtualKey.Enter"/></summary>
        public static TTarget Enter<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Enter);

        /// <summary>Set to <see cref="VirtualKey.Escape"/></summary>
        public static TTarget Escape<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Escape);

        /// <summary>Set to <see cref="VirtualKey.Execute"/></summary>
        public static TTarget Execute<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Execute);

        /// <summary>Set to <see cref="VirtualKey.F"/></summary>
        public static TTarget F<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F);

        /// <summary>Set to <see cref="VirtualKey.F1"/></summary>
        public static TTarget F1<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F1);

        /// <summary>Set to <see cref="VirtualKey.F10"/></summary>
        public static TTarget F10<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F10);

        /// <summary>Set to <see cref="VirtualKey.F11"/></summary>
        public static TTarget F11<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F11);

        /// <summary>Set to <see cref="VirtualKey.F12"/></summary>
        public static TTarget F12<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F12);

        /// <summary>Set to <see cref="VirtualKey.F13"/></summary>
        public static TTarget F13<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F13);

        /// <summary>Set to <see cref="VirtualKey.F14"/></summary>
        public static TTarget F14<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F14);

        /// <summary>Set to <see cref="VirtualKey.F15"/></summary>
        public static TTarget F15<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F15);

        /// <summary>Set to <see cref="VirtualKey.F16"/></summary>
        public static TTarget F16<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F16);

        /// <summary>Set to <see cref="VirtualKey.F17"/></summary>
        public static TTarget F17<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F17);

        /// <summary>Set to <see cref="VirtualKey.F18"/></summary>
        public static TTarget F18<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F18);

        /// <summary>Set to <see cref="VirtualKey.F19"/></summary>
        public static TTarget F19<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F19);

        /// <summary>Set to <see cref="VirtualKey.F2"/></summary>
        public static TTarget F2<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F2);

        /// <summary>Set to <see cref="VirtualKey.F20"/></summary>
        public static TTarget F20<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F20);

        /// <summary>Set to <see cref="VirtualKey.F21"/></summary>
        public static TTarget F21<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F21);

        /// <summary>Set to <see cref="VirtualKey.F22"/></summary>
        public static TTarget F22<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F22);

        /// <summary>Set to <see cref="VirtualKey.F23"/></summary>
        public static TTarget F23<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F23);

        /// <summary>Set to <see cref="VirtualKey.F24"/></summary>
        public static TTarget F24<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F24);

        /// <summary>Set to <see cref="VirtualKey.F3"/></summary>
        public static TTarget F3<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F3);

        /// <summary>Set to <see cref="VirtualKey.F4"/></summary>
        public static TTarget F4<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F4);

        /// <summary>Set to <see cref="VirtualKey.F5"/></summary>
        public static TTarget F5<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F5);

        /// <summary>Set to <see cref="VirtualKey.F6"/></summary>
        public static TTarget F6<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F6);

        /// <summary>Set to <see cref="VirtualKey.F7"/></summary>
        public static TTarget F7<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F7);

        /// <summary>Set to <see cref="VirtualKey.F8"/></summary>
        public static TTarget F8<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F8);

        /// <summary>Set to <see cref="VirtualKey.F9"/></summary>
        public static TTarget F9<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.F9);

        /// <summary>Set to <see cref="VirtualKey.Favorites"/></summary>
        public static TTarget Favorites<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Favorites);

        /// <summary>Set to <see cref="VirtualKey.Final"/></summary>
        public static TTarget Final<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Final);

        /// <summary>Set to <see cref="VirtualKey.G"/></summary>
        public static TTarget G<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.G);

        /// <summary>Set to <see cref="VirtualKey.GamepadA"/></summary>
        public static TTarget GamepadA<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadA);

        /// <summary>Set to <see cref="VirtualKey.GamepadB"/></summary>
        public static TTarget GamepadB<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadB);

        /// <summary>Set to <see cref="VirtualKey.GamepadDPadDown"/></summary>
        public static TTarget GamepadDPadDown<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadDPadDown);

        /// <summary>Set to <see cref="VirtualKey.GamepadDPadLeft"/></summary>
        public static TTarget GamepadDPadLeft<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadDPadLeft);

        /// <summary>Set to <see cref="VirtualKey.GamepadDPadRight"/></summary>
        public static TTarget GamepadDPadRight<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadDPadRight);

        /// <summary>Set to <see cref="VirtualKey.GamepadDPadUp"/></summary>
        public static TTarget GamepadDPadUp<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadDPadUp);

        /// <summary>Set to <see cref="VirtualKey.GamepadLeftShoulder"/></summary>
        public static TTarget GamepadLeftShoulder<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadLeftShoulder);

        /// <summary>Set to <see cref="VirtualKey.GamepadLeftThumbstickButton"/></summary>
        public static TTarget GamepadLeftThumbstickButton<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadLeftThumbstickButton);

        /// <summary>Set to <see cref="VirtualKey.GamepadLeftThumbstickDown"/></summary>
        public static TTarget GamepadLeftThumbstickDown<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadLeftThumbstickDown);

        /// <summary>Set to <see cref="VirtualKey.GamepadLeftThumbstickLeft"/></summary>
        public static TTarget GamepadLeftThumbstickLeft<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadLeftThumbstickLeft);

        /// <summary>Set to <see cref="VirtualKey.GamepadLeftThumbstickRight"/></summary>
        public static TTarget GamepadLeftThumbstickRight<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadLeftThumbstickRight);

        /// <summary>Set to <see cref="VirtualKey.GamepadLeftThumbstickUp"/></summary>
        public static TTarget GamepadLeftThumbstickUp<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadLeftThumbstickUp);

        /// <summary>Set to <see cref="VirtualKey.GamepadLeftTrigger"/></summary>
        public static TTarget GamepadLeftTrigger<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadLeftTrigger);

        /// <summary>Set to <see cref="VirtualKey.GamepadMenu"/></summary>
        public static TTarget GamepadMenu<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadMenu);

        /// <summary>Set to <see cref="VirtualKey.GamepadRightShoulder"/></summary>
        public static TTarget GamepadRightShoulder<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadRightShoulder);

        /// <summary>Set to <see cref="VirtualKey.GamepadRightThumbstickButton"/></summary>
        public static TTarget GamepadRightThumbstickButton<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadRightThumbstickButton);

        /// <summary>Set to <see cref="VirtualKey.GamepadRightThumbstickDown"/></summary>
        public static TTarget GamepadRightThumbstickDown<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadRightThumbstickDown);

        /// <summary>Set to <see cref="VirtualKey.GamepadRightThumbstickLeft"/></summary>
        public static TTarget GamepadRightThumbstickLeft<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadRightThumbstickLeft);

        /// <summary>Set to <see cref="VirtualKey.GamepadRightThumbstickRight"/></summary>
        public static TTarget GamepadRightThumbstickRight<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadRightThumbstickRight);

        /// <summary>Set to <see cref="VirtualKey.GamepadRightThumbstickUp"/></summary>
        public static TTarget GamepadRightThumbstickUp<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadRightThumbstickUp);

        /// <summary>Set to <see cref="VirtualKey.GamepadRightTrigger"/></summary>
        public static TTarget GamepadRightTrigger<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadRightTrigger);

        /// <summary>Set to <see cref="VirtualKey.GamepadView"/></summary>
        public static TTarget GamepadView<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadView);

        /// <summary>Set to <see cref="VirtualKey.GamepadX"/></summary>
        public static TTarget GamepadX<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadX);

        /// <summary>Set to <see cref="VirtualKey.GamepadY"/></summary>
        public static TTarget GamepadY<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GamepadY);

        /// <summary>Set to <see cref="VirtualKey.GoBack"/></summary>
        public static TTarget GoBack<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GoBack);

        /// <summary>Set to <see cref="VirtualKey.GoForward"/></summary>
        public static TTarget GoForward<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GoForward);

        /// <summary>Set to <see cref="VirtualKey.GoHome"/></summary>
        public static TTarget GoHome<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.GoHome);

        /// <summary>Set to <see cref="VirtualKey.H"/></summary>
        public static TTarget H<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.H);

        /// <summary>Set to <see cref="VirtualKey.Hangul"/></summary>
        public static TTarget Hangul<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Hangul);

        /// <summary>Set to <see cref="VirtualKey.Hanja"/></summary>
        public static TTarget Hanja<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Hanja);

        /// <summary>Set to <see cref="VirtualKey.Help"/></summary>
        public static TTarget Help<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Help);

        /// <summary>Set to <see cref="VirtualKey.Home"/></summary>
        public static TTarget Home<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Home);

        /// <summary>Set to <see cref="VirtualKey.I"/></summary>
        public static TTarget I<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.I);

        /// <summary>Set to <see cref="VirtualKey.Insert"/></summary>
        public static TTarget Insert<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Insert);

        /// <summary>Set to <see cref="VirtualKey.J"/></summary>
        public static TTarget J<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.J);

        /// <summary>Set to <see cref="VirtualKey.Junja"/></summary>
        public static TTarget Junja<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Junja);

        /// <summary>Set to <see cref="VirtualKey.K"/></summary>
        public static TTarget K<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.K);

        /// <summary>Set to <see cref="VirtualKey.Kana"/></summary>
        public static TTarget Kana<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Kana);

        /// <summary>Set to <see cref="VirtualKey.Kanji"/></summary>
        public static TTarget Kanji<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Kanji);

        /// <summary>Set to <see cref="VirtualKey.L"/></summary>
        public static TTarget L<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.L);

        /// <summary>Set to <see cref="VirtualKey.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Left);

        /// <summary>Set to <see cref="VirtualKey.LeftButton"/></summary>
        public static TTarget LeftButton<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.LeftButton);

        /// <summary>Set to <see cref="VirtualKey.LeftControl"/></summary>
        public static TTarget LeftControl<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.LeftControl);

        /// <summary>Set to <see cref="VirtualKey.LeftMenu"/></summary>
        public static TTarget LeftMenu<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.LeftMenu);

        /// <summary>Set to <see cref="VirtualKey.LeftShift"/></summary>
        public static TTarget LeftShift<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.LeftShift);

        /// <summary>Set to <see cref="VirtualKey.LeftWindows"/></summary>
        public static TTarget LeftWindows<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.LeftWindows);

        /// <summary>Set to <see cref="VirtualKey.M"/></summary>
        public static TTarget M<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.M);

        /// <summary>Set to <see cref="VirtualKey.Menu"/></summary>
        public static TTarget Menu<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Menu);

        /// <summary>Set to <see cref="VirtualKey.MiddleButton"/></summary>
        public static TTarget MiddleButton<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.MiddleButton);

        /// <summary>Set to <see cref="VirtualKey.ModeChange"/></summary>
        public static TTarget ModeChange<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.ModeChange);

        /// <summary>Set to <see cref="VirtualKey.Multiply"/></summary>
        public static TTarget Multiply<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Multiply);

        /// <summary>Set to <see cref="VirtualKey.N"/></summary>
        public static TTarget N<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.N);

        /// <summary>Set to <see cref="VirtualKey.NavigationAccept"/></summary>
        public static TTarget NavigationAccept<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NavigationAccept);

        /// <summary>Set to <see cref="VirtualKey.NavigationCancel"/></summary>
        public static TTarget NavigationCancel<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NavigationCancel);

        /// <summary>Set to <see cref="VirtualKey.NavigationDown"/></summary>
        public static TTarget NavigationDown<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NavigationDown);

        /// <summary>Set to <see cref="VirtualKey.NavigationLeft"/></summary>
        public static TTarget NavigationLeft<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NavigationLeft);

        /// <summary>Set to <see cref="VirtualKey.NavigationMenu"/></summary>
        public static TTarget NavigationMenu<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NavigationMenu);

        /// <summary>Set to <see cref="VirtualKey.NavigationRight"/></summary>
        public static TTarget NavigationRight<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NavigationRight);

        /// <summary>Set to <see cref="VirtualKey.NavigationUp"/></summary>
        public static TTarget NavigationUp<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NavigationUp);

        /// <summary>Set to <see cref="VirtualKey.NavigationView"/></summary>
        public static TTarget NavigationView<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NavigationView);

        /// <summary>Set to <see cref="VirtualKey.NonConvert"/></summary>
        public static TTarget NonConvert<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NonConvert);

        /// <summary>Set to <see cref="VirtualKey.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.None);

        /// <summary>Set to <see cref="VirtualKey.Number0"/></summary>
        public static TTarget Number0<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Number0);

        /// <summary>Set to <see cref="VirtualKey.Number1"/></summary>
        public static TTarget Number1<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Number1);

        /// <summary>Set to <see cref="VirtualKey.Number2"/></summary>
        public static TTarget Number2<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Number2);

        /// <summary>Set to <see cref="VirtualKey.Number3"/></summary>
        public static TTarget Number3<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Number3);

        /// <summary>Set to <see cref="VirtualKey.Number4"/></summary>
        public static TTarget Number4<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Number4);

        /// <summary>Set to <see cref="VirtualKey.Number5"/></summary>
        public static TTarget Number5<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Number5);

        /// <summary>Set to <see cref="VirtualKey.Number6"/></summary>
        public static TTarget Number6<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Number6);

        /// <summary>Set to <see cref="VirtualKey.Number7"/></summary>
        public static TTarget Number7<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Number7);

        /// <summary>Set to <see cref="VirtualKey.Number8"/></summary>
        public static TTarget Number8<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Number8);

        /// <summary>Set to <see cref="VirtualKey.Number9"/></summary>
        public static TTarget Number9<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Number9);

        /// <summary>Set to <see cref="VirtualKey.NumberKeyLock"/></summary>
        public static TTarget NumberKeyLock<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NumberKeyLock);

        /// <summary>Set to <see cref="VirtualKey.NumberPad0"/></summary>
        public static TTarget NumberPad0<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NumberPad0);

        /// <summary>Set to <see cref="VirtualKey.NumberPad1"/></summary>
        public static TTarget NumberPad1<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NumberPad1);

        /// <summary>Set to <see cref="VirtualKey.NumberPad2"/></summary>
        public static TTarget NumberPad2<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NumberPad2);

        /// <summary>Set to <see cref="VirtualKey.NumberPad3"/></summary>
        public static TTarget NumberPad3<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NumberPad3);

        /// <summary>Set to <see cref="VirtualKey.NumberPad4"/></summary>
        public static TTarget NumberPad4<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NumberPad4);

        /// <summary>Set to <see cref="VirtualKey.NumberPad5"/></summary>
        public static TTarget NumberPad5<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NumberPad5);

        /// <summary>Set to <see cref="VirtualKey.NumberPad6"/></summary>
        public static TTarget NumberPad6<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NumberPad6);

        /// <summary>Set to <see cref="VirtualKey.NumberPad7"/></summary>
        public static TTarget NumberPad7<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NumberPad7);

        /// <summary>Set to <see cref="VirtualKey.NumberPad8"/></summary>
        public static TTarget NumberPad8<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NumberPad8);

        /// <summary>Set to <see cref="VirtualKey.NumberPad9"/></summary>
        public static TTarget NumberPad9<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.NumberPad9);

        /// <summary>Set to <see cref="VirtualKey.O"/></summary>
        public static TTarget O<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.O);

        /// <summary>Set to <see cref="VirtualKey.P"/></summary>
        public static TTarget P<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.P);

        /// <summary>Set to <see cref="VirtualKey.PageDown"/></summary>
        public static TTarget PageDown<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.PageDown);

        /// <summary>Set to <see cref="VirtualKey.PageUp"/></summary>
        public static TTarget PageUp<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.PageUp);

        /// <summary>Set to <see cref="VirtualKey.Pause"/></summary>
        public static TTarget Pause<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Pause);

        /// <summary>Set to <see cref="VirtualKey.Print"/></summary>
        public static TTarget Print<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Print);

        /// <summary>Set to <see cref="VirtualKey.Q"/></summary>
        public static TTarget Q<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Q);

        /// <summary>Set to <see cref="VirtualKey.R"/></summary>
        public static TTarget R<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.R);

        /// <summary>Set to <see cref="VirtualKey.Refresh"/></summary>
        public static TTarget Refresh<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Refresh);

        /// <summary>Set to <see cref="VirtualKey.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Right);

        /// <summary>Set to <see cref="VirtualKey.RightButton"/></summary>
        public static TTarget RightButton<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.RightButton);

        /// <summary>Set to <see cref="VirtualKey.RightControl"/></summary>
        public static TTarget RightControl<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.RightControl);

        /// <summary>Set to <see cref="VirtualKey.RightMenu"/></summary>
        public static TTarget RightMenu<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.RightMenu);

        /// <summary>Set to <see cref="VirtualKey.RightShift"/></summary>
        public static TTarget RightShift<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.RightShift);

        /// <summary>Set to <see cref="VirtualKey.RightWindows"/></summary>
        public static TTarget RightWindows<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.RightWindows);

        /// <summary>Set to <see cref="VirtualKey.S"/></summary>
        public static TTarget S<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.S);

        /// <summary>Set to <see cref="VirtualKey.Scroll"/></summary>
        public static TTarget Scroll<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Scroll);

        /// <summary>Set to <see cref="VirtualKey.Search"/></summary>
        public static TTarget Search<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Search);

        /// <summary>Set to <see cref="VirtualKey.Select"/></summary>
        public static TTarget Select<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Select);

        /// <summary>Set to <see cref="VirtualKey.Separator"/></summary>
        public static TTarget Separator<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Separator);

        /// <summary>Set to <see cref="VirtualKey.Shift"/></summary>
        public static TTarget Shift<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Shift);

        /// <summary>Set to <see cref="VirtualKey.Sleep"/></summary>
        public static TTarget Sleep<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Sleep);

        /// <summary>Set to <see cref="VirtualKey.Snapshot"/></summary>
        public static TTarget Snapshot<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Snapshot);

        /// <summary>Set to <see cref="VirtualKey.Space"/></summary>
        public static TTarget Space<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Space);

        /// <summary>Set to <see cref="VirtualKey.Stop"/></summary>
        public static TTarget Stop<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Stop);

        /// <summary>Set to <see cref="VirtualKey.Subtract"/></summary>
        public static TTarget Subtract<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Subtract);

        /// <summary>Set to <see cref="VirtualKey.T"/></summary>
        public static TTarget T<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.T);

        /// <summary>Set to <see cref="VirtualKey.Tab"/></summary>
        public static TTarget Tab<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Tab);

        /// <summary>Set to <see cref="VirtualKey.U"/></summary>
        public static TTarget U<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.U);

        /// <summary>Set to <see cref="VirtualKey.Up"/></summary>
        public static TTarget Up<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Up);

        /// <summary>Set to <see cref="VirtualKey.V"/></summary>
        public static TTarget V<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.V);

        /// <summary>Set to <see cref="VirtualKey.W"/></summary>
        public static TTarget W<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.W);

        /// <summary>Set to <see cref="VirtualKey.X"/></summary>
        public static TTarget X<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.X);

        /// <summary>Set to <see cref="VirtualKey.XButton1"/></summary>
        public static TTarget XButton1<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.XButton1);

        /// <summary>Set to <see cref="VirtualKey.XButton2"/></summary>
        public static TTarget XButton2<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.XButton2);

        /// <summary>Set to <see cref="VirtualKey.Y"/></summary>
        public static TTarget Y<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Y);

        /// <summary>Set to <see cref="VirtualKey.Z"/></summary>
        public static TTarget Z<TTarget>(this DependencyProperty<TTarget, VirtualKey> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKey.Z);

        /// <summary>Set to <see cref="VirtualKeyModifiers.Control"/></summary>
        public static TTarget Control<TTarget>(this DependencyProperty<TTarget, VirtualKeyModifiers> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKeyModifiers.Control);

        /// <summary>Set to <see cref="VirtualKeyModifiers.Menu"/></summary>
        public static TTarget Menu<TTarget>(this DependencyProperty<TTarget, VirtualKeyModifiers> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKeyModifiers.Menu);

        /// <summary>Set to <see cref="VirtualKeyModifiers.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, VirtualKeyModifiers> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKeyModifiers.None);

        /// <summary>Set to <see cref="VirtualKeyModifiers.Shift"/></summary>
        public static TTarget Shift<TTarget>(this DependencyProperty<TTarget, VirtualKeyModifiers> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKeyModifiers.Shift);

        /// <summary>Set to <see cref="VirtualKeyModifiers.Windows"/></summary>
        public static TTarget Windows<TTarget>(this DependencyProperty<TTarget, VirtualKeyModifiers> property) where TTarget : KeyboardAccelerator
        => property.Set(VirtualKeyModifiers.Windows);
    }

    public static partial class LinedFlowLayoutExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.LinedFlowLayoutItemsJustification.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LinedFlowLayoutItemsJustification> property) where TTarget : LinedFlowLayout
        => property.Set(Xaml.Controls.LinedFlowLayoutItemsJustification.Center);

        /// <summary>Set to <see cref="Xaml.Controls.LinedFlowLayoutItemsJustification.End"/></summary>
        public static TTarget End<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LinedFlowLayoutItemsJustification> property) where TTarget : LinedFlowLayout
        => property.Set(Xaml.Controls.LinedFlowLayoutItemsJustification.End);

        /// <summary>Set to <see cref="Xaml.Controls.LinedFlowLayoutItemsJustification.SpaceAround"/></summary>
        public static TTarget SpaceAround<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LinedFlowLayoutItemsJustification> property) where TTarget : LinedFlowLayout
        => property.Set(Xaml.Controls.LinedFlowLayoutItemsJustification.SpaceAround);

        /// <summary>Set to <see cref="Xaml.Controls.LinedFlowLayoutItemsJustification.SpaceBetween"/></summary>
        public static TTarget SpaceBetween<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LinedFlowLayoutItemsJustification> property) where TTarget : LinedFlowLayout
        => property.Set(Xaml.Controls.LinedFlowLayoutItemsJustification.SpaceBetween);

        /// <summary>Set to <see cref="Xaml.Controls.LinedFlowLayoutItemsJustification.SpaceEvenly"/></summary>
        public static TTarget SpaceEvenly<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LinedFlowLayoutItemsJustification> property) where TTarget : LinedFlowLayout
        => property.Set(Xaml.Controls.LinedFlowLayoutItemsJustification.SpaceEvenly);

        /// <summary>Set to <see cref="Xaml.Controls.LinedFlowLayoutItemsJustification.Start"/></summary>
        public static TTarget Start<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LinedFlowLayoutItemsJustification> property) where TTarget : LinedFlowLayout
        => property.Set(Xaml.Controls.LinedFlowLayoutItemsJustification.Start);

        /// <summary>Set to <see cref="Xaml.Controls.LinedFlowLayoutItemsStretch.Fill"/></summary>
        public static TTarget Fill<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LinedFlowLayoutItemsStretch> property) where TTarget : LinedFlowLayout
        => property.Set(Xaml.Controls.LinedFlowLayoutItemsStretch.Fill);

        /// <summary>Set to <see cref="Xaml.Controls.LinedFlowLayoutItemsStretch.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LinedFlowLayoutItemsStretch> property) where TTarget : LinedFlowLayout
        => property.Set(Xaml.Controls.LinedFlowLayoutItemsStretch.None);
    }

    public static partial class ListBoxExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.SelectionMode.Extended"/></summary>
        public static TTarget Extended<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SelectionMode> property) where TTarget : ListBox
        => property.Set(Xaml.Controls.SelectionMode.Extended);

        /// <summary>Set to <see cref="Xaml.Controls.SelectionMode.Multiple"/></summary>
        public static TTarget Multiple<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SelectionMode> property) where TTarget : ListBox
        => property.Set(Xaml.Controls.SelectionMode.Multiple);

        /// <summary>Set to <see cref="Xaml.Controls.SelectionMode.Single"/></summary>
        public static TTarget Single<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SelectionMode> property) where TTarget : ListBox
        => property.Set(Xaml.Controls.SelectionMode.Single);
    }

    public static partial class ListPickerFlyoutExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.ListPickerFlyoutSelectionMode.Multiple"/></summary>
        public static TTarget Multiple<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ListPickerFlyoutSelectionMode> property) where TTarget : ListPickerFlyout
        => property.Set(Xaml.Controls.ListPickerFlyoutSelectionMode.Multiple);

        /// <summary>Set to <see cref="Xaml.Controls.ListPickerFlyoutSelectionMode.Single"/></summary>
        public static TTarget Single<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ListPickerFlyoutSelectionMode> property) where TTarget : ListPickerFlyout
        => property.Set(Xaml.Controls.ListPickerFlyoutSelectionMode.Single);
    }

    public static partial class ListViewBaseExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.IncrementalLoadingTrigger.Edge"/></summary>
        public static TTarget Edge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.IncrementalLoadingTrigger> property) where TTarget : ListViewBase
        => property.Set(Xaml.Controls.IncrementalLoadingTrigger.Edge);

        /// <summary>Set to <see cref="Xaml.Controls.IncrementalLoadingTrigger.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.IncrementalLoadingTrigger> property) where TTarget : ListViewBase
        => property.Set(Xaml.Controls.IncrementalLoadingTrigger.None);

        /// <summary>Set to <see cref="Xaml.Controls.ListViewReorderMode.Disabled"/></summary>
        public static TTarget Disabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ListViewReorderMode> property) where TTarget : ListViewBase
        => property.Set(Xaml.Controls.ListViewReorderMode.Disabled);

        /// <summary>Set to <see cref="Xaml.Controls.ListViewReorderMode.Enabled"/></summary>
        public static TTarget Enabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ListViewReorderMode> property) where TTarget : ListViewBase
        => property.Set(Xaml.Controls.ListViewReorderMode.Enabled);

        /// <summary>Set to <see cref="Xaml.Controls.ListViewSelectionMode.Extended"/></summary>
        public static TTarget Extended<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ListViewSelectionMode> property) where TTarget : ListViewBase
        => property.Set(Xaml.Controls.ListViewSelectionMode.Extended);

        /// <summary>Set to <see cref="Xaml.Controls.ListViewSelectionMode.Multiple"/></summary>
        public static TTarget Multiple<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ListViewSelectionMode> property) where TTarget : ListViewBase
        => property.Set(Xaml.Controls.ListViewSelectionMode.Multiple);

        /// <summary>Set to <see cref="Xaml.Controls.ListViewSelectionMode.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ListViewSelectionMode> property) where TTarget : ListViewBase
        => property.Set(Xaml.Controls.ListViewSelectionMode.None);

        /// <summary>Set to <see cref="Xaml.Controls.ListViewSelectionMode.Single"/></summary>
        public static TTarget Single<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ListViewSelectionMode> property) where TTarget : ListViewBase
        => property.Set(Xaml.Controls.ListViewSelectionMode.Single);
    }

    public static partial class ListViewItemPresenterExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Primitives.ListViewItemPresenterCheckMode.Inline"/></summary>
        public static TTarget Inline<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.ListViewItemPresenterCheckMode> property) where TTarget : ListViewItemPresenter
        => property.Set(Xaml.Controls.Primitives.ListViewItemPresenterCheckMode.Inline);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.ListViewItemPresenterCheckMode.Overlay"/></summary>
        public static TTarget Overlay<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.ListViewItemPresenterCheckMode> property) where TTarget : ListViewItemPresenter
        => property.Set(Xaml.Controls.Primitives.ListViewItemPresenterCheckMode.Overlay);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode.Inline"/></summary>
        public static TTarget Inline<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode> property) where TTarget : ListViewItemPresenter
        => property.Set(Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode.Inline);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode.Overlay"/></summary>
        public static TTarget Overlay<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode> property) where TTarget : ListViewItemPresenter
        => property.Set(Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode.Overlay);
    }

    public static partial class MediaPlayerElementExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.Stretch.Fill"/></summary>
        public static TTarget Fill<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : MediaPlayerElement
        => property.Set(Xaml.Media.Stretch.Fill);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : MediaPlayerElement
        => property.Set(Xaml.Media.Stretch.None);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.Uniform"/></summary>
        public static TTarget Uniform<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : MediaPlayerElement
        => property.Set(Xaml.Media.Stretch.Uniform);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.UniformToFill"/></summary>
        public static TTarget UniformToFill<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : MediaPlayerElement
        => property.Set(Xaml.Media.Stretch.UniformToFill);
    }

    public static partial class MediaPlayerPresenterExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.Stretch.Fill"/></summary>
        public static TTarget Fill<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : MediaPlayerPresenter
        => property.Set(Xaml.Media.Stretch.Fill);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : MediaPlayerPresenter
        => property.Set(Xaml.Media.Stretch.None);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.Uniform"/></summary>
        public static TTarget Uniform<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : MediaPlayerPresenter
        => property.Set(Xaml.Media.Stretch.Uniform);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.UniformToFill"/></summary>
        public static TTarget UniformToFill<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : MediaPlayerPresenter
        => property.Set(Xaml.Media.Stretch.UniformToFill);
    }

    public static partial class MediaTransportControlsExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.FastPlayFallbackBehaviour.Disable"/></summary>
        public static TTarget Disable<TTarget>(this DependencyProperty<TTarget, Xaml.Media.FastPlayFallbackBehaviour> property) where TTarget : MediaTransportControls
        => property.Set(Xaml.Media.FastPlayFallbackBehaviour.Disable);

        /// <summary>Set to <see cref="Xaml.Media.FastPlayFallbackBehaviour.Hide"/></summary>
        public static TTarget Hide<TTarget>(this DependencyProperty<TTarget, Xaml.Media.FastPlayFallbackBehaviour> property) where TTarget : MediaTransportControls
        => property.Set(Xaml.Media.FastPlayFallbackBehaviour.Hide);

        /// <summary>Set to <see cref="Xaml.Media.FastPlayFallbackBehaviour.Skip"/></summary>
        public static TTarget Skip<TTarget>(this DependencyProperty<TTarget, Xaml.Media.FastPlayFallbackBehaviour> property) where TTarget : MediaTransportControls
        => property.Set(Xaml.Media.FastPlayFallbackBehaviour.Skip);
    }

    public static partial class MicaBackdropExtensions
    {
        /// <summary>Set to <see cref="UI.Composition.SystemBackdrops.MicaKind.Base"/></summary>
        public static TTarget Base<TTarget>(this DependencyProperty<TTarget, UI.Composition.SystemBackdrops.MicaKind> property) where TTarget : MicaBackdrop
        => property.Set(UI.Composition.SystemBackdrops.MicaKind.Base);

        /// <summary>Set to <see cref="UI.Composition.SystemBackdrops.MicaKind.BaseAlt"/></summary>
        public static TTarget BaseAlt<TTarget>(this DependencyProperty<TTarget, UI.Composition.SystemBackdrops.MicaKind> property) where TTarget : MicaBackdrop
        => property.Set(UI.Composition.SystemBackdrops.MicaKind.BaseAlt);
    }

    public static partial class NavigationViewExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewBackButtonVisible.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewBackButtonVisible> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewBackButtonVisible.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewBackButtonVisible.Collapsed"/></summary>
        public static TTarget Collapsed<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewBackButtonVisible> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewBackButtonVisible.Collapsed);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewBackButtonVisible.Visible"/></summary>
        public static TTarget Visible<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewBackButtonVisible> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewBackButtonVisible.Visible);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewDisplayMode.Compact"/></summary>
        public static TTarget Compact<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewDisplayMode> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewDisplayMode.Compact);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewDisplayMode.Expanded"/></summary>
        public static TTarget Expanded<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewDisplayMode> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewDisplayMode.Expanded);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewDisplayMode.Minimal"/></summary>
        public static TTarget Minimal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewDisplayMode> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewDisplayMode.Minimal);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewOverflowLabelMode.MoreLabel"/></summary>
        public static TTarget MoreLabel<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewOverflowLabelMode> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewOverflowLabelMode.MoreLabel);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewOverflowLabelMode.NoLabel"/></summary>
        public static TTarget NoLabel<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewOverflowLabelMode> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewOverflowLabelMode.NoLabel);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewPaneDisplayMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewPaneDisplayMode> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewPaneDisplayMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewPaneDisplayMode.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewPaneDisplayMode> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewPaneDisplayMode.Left);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewPaneDisplayMode.LeftCompact"/></summary>
        public static TTarget LeftCompact<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewPaneDisplayMode> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewPaneDisplayMode.LeftCompact);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewPaneDisplayMode.LeftMinimal"/></summary>
        public static TTarget LeftMinimal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewPaneDisplayMode> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewPaneDisplayMode.LeftMinimal);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewPaneDisplayMode.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewPaneDisplayMode> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewPaneDisplayMode.Top);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewSelectionFollowsFocus.Disabled"/></summary>
        public static TTarget Disabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewSelectionFollowsFocus> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewSelectionFollowsFocus.Disabled);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewSelectionFollowsFocus.Enabled"/></summary>
        public static TTarget Enabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewSelectionFollowsFocus> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewSelectionFollowsFocus.Enabled);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewShoulderNavigationEnabled.Always"/></summary>
        public static TTarget Always<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewShoulderNavigationEnabled> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewShoulderNavigationEnabled.Always);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewShoulderNavigationEnabled.Never"/></summary>
        public static TTarget Never<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewShoulderNavigationEnabled> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewShoulderNavigationEnabled.Never);

        /// <summary>Set to <see cref="Xaml.Controls.NavigationViewShoulderNavigationEnabled.WhenSelectionFollowsFocus"/></summary>
        public static TTarget WhenSelectionFollowsFocus<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NavigationViewShoulderNavigationEnabled> property) where TTarget : NavigationView
        => property.Set(Xaml.Controls.NavigationViewShoulderNavigationEnabled.WhenSelectionFollowsFocus);
    }

    public static partial class NavigationViewTemplateSettingsExtensions
    {
        /// <summary>Set to <see cref="Xaml.Visibility.Collapsed"/></summary>
        public static TTarget Collapsed<TTarget>(this DependencyProperty<TTarget, Xaml.Visibility> property) where TTarget : NavigationViewTemplateSettings
        => property.Set(Xaml.Visibility.Collapsed);

        /// <summary>Set to <see cref="Xaml.Visibility.Visible"/></summary>
        public static TTarget Visible<TTarget>(this DependencyProperty<TTarget, Xaml.Visibility> property) where TTarget : NavigationViewTemplateSettings
        => property.Set(Xaml.Visibility.Visible);
    }

    public static partial class NumberBoxExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.NumberBoxSpinButtonPlacementMode.Compact"/></summary>
        public static TTarget Compact<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NumberBoxSpinButtonPlacementMode> property) where TTarget : NumberBox
        => property.Set(Xaml.Controls.NumberBoxSpinButtonPlacementMode.Compact);

        /// <summary>Set to <see cref="Xaml.Controls.NumberBoxSpinButtonPlacementMode.Hidden"/></summary>
        public static TTarget Hidden<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NumberBoxSpinButtonPlacementMode> property) where TTarget : NumberBox
        => property.Set(Xaml.Controls.NumberBoxSpinButtonPlacementMode.Hidden);

        /// <summary>Set to <see cref="Xaml.Controls.NumberBoxSpinButtonPlacementMode.Inline"/></summary>
        public static TTarget Inline<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NumberBoxSpinButtonPlacementMode> property) where TTarget : NumberBox
        => property.Set(Xaml.Controls.NumberBoxSpinButtonPlacementMode.Inline);

        /// <summary>Set to <see cref="Xaml.Controls.NumberBoxValidationMode.Disabled"/></summary>
        public static TTarget Disabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NumberBoxValidationMode> property) where TTarget : NumberBox
        => property.Set(Xaml.Controls.NumberBoxValidationMode.Disabled);

        /// <summary>Set to <see cref="Xaml.Controls.NumberBoxValidationMode.InvalidInputOverwritten"/></summary>
        public static TTarget InvalidInputOverwritten<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.NumberBoxValidationMode> property) where TTarget : NumberBox
        => property.Set(Xaml.Controls.NumberBoxValidationMode.InvalidInputOverwritten);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : NumberBox
        => property.Set(Xaml.TextReadingOrder.Default);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.DetectFromContent"/></summary>
        public static TTarget DetectFromContent<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : NumberBox
        => property.Set(Xaml.TextReadingOrder.DetectFromContent);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.UseFlowDirection"/></summary>
        public static TTarget UseFlowDirection<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : NumberBox
        => property.Set(Xaml.TextReadingOrder.UseFlowDirection);
    }

    public static partial class PaneThemeTransitionExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Primitives.EdgeTransitionLocation.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.EdgeTransitionLocation> property) where TTarget : PaneThemeTransition
        => property.Set(Xaml.Controls.Primitives.EdgeTransitionLocation.Bottom);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.EdgeTransitionLocation.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.EdgeTransitionLocation> property) where TTarget : PaneThemeTransition
        => property.Set(Xaml.Controls.Primitives.EdgeTransitionLocation.Left);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.EdgeTransitionLocation.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.EdgeTransitionLocation> property) where TTarget : PaneThemeTransition
        => property.Set(Xaml.Controls.Primitives.EdgeTransitionLocation.Right);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.EdgeTransitionLocation.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.EdgeTransitionLocation> property) where TTarget : PaneThemeTransition
        => property.Set(Xaml.Controls.Primitives.EdgeTransitionLocation.Top);
    }

    public static partial class ParallaxViewExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.ParallaxSourceOffsetKind.Absolute"/></summary>
        public static TTarget Absolute<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ParallaxSourceOffsetKind> property) where TTarget : ParallaxView
        => property.Set(Xaml.Controls.ParallaxSourceOffsetKind.Absolute);

        /// <summary>Set to <see cref="Xaml.Controls.ParallaxSourceOffsetKind.Relative"/></summary>
        public static TTarget Relative<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ParallaxSourceOffsetKind> property) where TTarget : ParallaxView
        => property.Set(Xaml.Controls.ParallaxSourceOffsetKind.Relative);
    }

    public static partial class PasswordBoxExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.PasswordRevealMode.Hidden"/></summary>
        public static TTarget Hidden<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PasswordRevealMode> property) where TTarget : PasswordBox
        => property.Set(Xaml.Controls.PasswordRevealMode.Hidden);

        /// <summary>Set to <see cref="Xaml.Controls.PasswordRevealMode.Peek"/></summary>
        public static TTarget Peek<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PasswordRevealMode> property) where TTarget : PasswordBox
        => property.Set(Xaml.Controls.PasswordRevealMode.Peek);

        /// <summary>Set to <see cref="Xaml.Controls.PasswordRevealMode.Visible"/></summary>
        public static TTarget Visible<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PasswordRevealMode> property) where TTarget : PasswordBox
        => property.Set(Xaml.Controls.PasswordRevealMode.Visible);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : PasswordBox
        => property.Set(Xaml.TextReadingOrder.Default);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.DetectFromContent"/></summary>
        public static TTarget DetectFromContent<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : PasswordBox
        => property.Set(Xaml.TextReadingOrder.DetectFromContent);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.UseFlowDirection"/></summary>
        public static TTarget UseFlowDirection<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : PasswordBox
        => property.Set(Xaml.TextReadingOrder.UseFlowDirection);
    }

    public static partial class PathGeometryExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.FillRule.EvenOdd"/></summary>
        public static TTarget EvenOdd<TTarget>(this DependencyProperty<TTarget, Xaml.Media.FillRule> property) where TTarget : PathGeometry
        => property.Set(Xaml.Media.FillRule.EvenOdd);

        /// <summary>Set to <see cref="Xaml.Media.FillRule.Nonzero"/></summary>
        public static TTarget Nonzero<TTarget>(this DependencyProperty<TTarget, Xaml.Media.FillRule> property) where TTarget : PathGeometry
        => property.Set(Xaml.Media.FillRule.Nonzero);
    }

    public static partial class PipsPagerExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : PipsPager
        => property.Set(Xaml.Controls.Orientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : PipsPager
        => property.Set(Xaml.Controls.Orientation.Vertical);

        /// <summary>Set to <see cref="Xaml.Controls.PipsPagerButtonVisibility.Collapsed"/></summary>
        public static TTarget Collapsed<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PipsPagerButtonVisibility> property) where TTarget : PipsPager
        => property.Set(Xaml.Controls.PipsPagerButtonVisibility.Collapsed);

        /// <summary>Set to <see cref="Xaml.Controls.PipsPagerButtonVisibility.Visible"/></summary>
        public static TTarget Visible<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PipsPagerButtonVisibility> property) where TTarget : PipsPager
        => property.Set(Xaml.Controls.PipsPagerButtonVisibility.Visible);

        /// <summary>Set to <see cref="Xaml.Controls.PipsPagerButtonVisibility.VisibleOnPointerOver"/></summary>
        public static TTarget VisibleOnPointerOver<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PipsPagerButtonVisibility> property) where TTarget : PipsPager
        => property.Set(Xaml.Controls.PipsPagerButtonVisibility.VisibleOnPointerOver);

        /// <summary>Set to <see cref="Xaml.Controls.PipsPagerWrapMode.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PipsPagerWrapMode> property) where TTarget : PipsPager
        => property.Set(Xaml.Controls.PipsPagerWrapMode.None);

        /// <summary>Set to <see cref="Xaml.Controls.PipsPagerWrapMode.Wrap"/></summary>
        public static TTarget Wrap<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PipsPagerWrapMode> property) where TTarget : PipsPager
        => property.Set(Xaml.Controls.PipsPagerWrapMode.Wrap);
    }

    public static partial class PivotExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.PivotHeaderFocusVisualPlacement.ItemHeaders"/></summary>
        public static TTarget ItemHeaders<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PivotHeaderFocusVisualPlacement> property) where TTarget : Pivot
        => property.Set(Xaml.Controls.PivotHeaderFocusVisualPlacement.ItemHeaders);

        /// <summary>Set to <see cref="Xaml.Controls.PivotHeaderFocusVisualPlacement.SelectedItemHeader"/></summary>
        public static TTarget SelectedItemHeader<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.PivotHeaderFocusVisualPlacement> property) where TTarget : Pivot
        => property.Set(Xaml.Controls.PivotHeaderFocusVisualPlacement.SelectedItemHeader);
    }

    public static partial class PolygonExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.FillRule.EvenOdd"/></summary>
        public static TTarget EvenOdd<TTarget>(this DependencyProperty<TTarget, Xaml.Media.FillRule> property) where TTarget : Polygon
        => property.Set(Xaml.Media.FillRule.EvenOdd);

        /// <summary>Set to <see cref="Xaml.Media.FillRule.Nonzero"/></summary>
        public static TTarget Nonzero<TTarget>(this DependencyProperty<TTarget, Xaml.Media.FillRule> property) where TTarget : Polygon
        => property.Set(Xaml.Media.FillRule.Nonzero);
    }

    public static partial class PolylineExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.FillRule.EvenOdd"/></summary>
        public static TTarget EvenOdd<TTarget>(this DependencyProperty<TTarget, Xaml.Media.FillRule> property) where TTarget : Polyline
        => property.Set(Xaml.Media.FillRule.EvenOdd);

        /// <summary>Set to <see cref="Xaml.Media.FillRule.Nonzero"/></summary>
        public static TTarget Nonzero<TTarget>(this DependencyProperty<TTarget, Xaml.Media.FillRule> property) where TTarget : Polyline
        => property.Set(Xaml.Media.FillRule.Nonzero);
    }

    public static partial class PopupExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Off"/></summary>
        public static TTarget Off<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Off);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.On"/></summary>
        public static TTarget On<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.LightDismissOverlayMode.On);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PopupPlacementMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.Primitives.PopupPlacementMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PopupPlacementMode.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.Primitives.PopupPlacementMode.Bottom);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PopupPlacementMode.BottomEdgeAlignedLeft"/></summary>
        public static TTarget BottomEdgeAlignedLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.Primitives.PopupPlacementMode.BottomEdgeAlignedLeft);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PopupPlacementMode.BottomEdgeAlignedRight"/></summary>
        public static TTarget BottomEdgeAlignedRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.Primitives.PopupPlacementMode.BottomEdgeAlignedRight);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PopupPlacementMode.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.Primitives.PopupPlacementMode.Left);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PopupPlacementMode.LeftEdgeAlignedBottom"/></summary>
        public static TTarget LeftEdgeAlignedBottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.Primitives.PopupPlacementMode.LeftEdgeAlignedBottom);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PopupPlacementMode.LeftEdgeAlignedTop"/></summary>
        public static TTarget LeftEdgeAlignedTop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.Primitives.PopupPlacementMode.LeftEdgeAlignedTop);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PopupPlacementMode.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.Primitives.PopupPlacementMode.Right);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PopupPlacementMode.RightEdgeAlignedBottom"/></summary>
        public static TTarget RightEdgeAlignedBottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.Primitives.PopupPlacementMode.RightEdgeAlignedBottom);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PopupPlacementMode.RightEdgeAlignedTop"/></summary>
        public static TTarget RightEdgeAlignedTop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.Primitives.PopupPlacementMode.RightEdgeAlignedTop);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PopupPlacementMode.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.Primitives.PopupPlacementMode.Top);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PopupPlacementMode.TopEdgeAlignedLeft"/></summary>
        public static TTarget TopEdgeAlignedLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.Primitives.PopupPlacementMode.TopEdgeAlignedLeft);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.PopupPlacementMode.TopEdgeAlignedRight"/></summary>
        public static TTarget TopEdgeAlignedRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.PopupPlacementMode> property) where TTarget : Popup
        => property.Set(Xaml.Controls.Primitives.PopupPlacementMode.TopEdgeAlignedRight);
    }

    public static partial class RadialGradientBrushExtensions
    {
        /// <summary>Set to <see cref="UI.Composition.CompositionColorSpace.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, UI.Composition.CompositionColorSpace> property) where TTarget : RadialGradientBrush
        => property.Set(UI.Composition.CompositionColorSpace.Auto);

        /// <summary>Set to <see cref="UI.Composition.CompositionColorSpace.Hsl"/></summary>
        public static TTarget Hsl<TTarget>(this DependencyProperty<TTarget, UI.Composition.CompositionColorSpace> property) where TTarget : RadialGradientBrush
        => property.Set(UI.Composition.CompositionColorSpace.Hsl);

        /// <summary>Set to <see cref="UI.Composition.CompositionColorSpace.HslLinear"/></summary>
        public static TTarget HslLinear<TTarget>(this DependencyProperty<TTarget, UI.Composition.CompositionColorSpace> property) where TTarget : RadialGradientBrush
        => property.Set(UI.Composition.CompositionColorSpace.HslLinear);

        /// <summary>Set to <see cref="UI.Composition.CompositionColorSpace.Rgb"/></summary>
        public static TTarget Rgb<TTarget>(this DependencyProperty<TTarget, UI.Composition.CompositionColorSpace> property) where TTarget : RadialGradientBrush
        => property.Set(UI.Composition.CompositionColorSpace.Rgb);

        /// <summary>Set to <see cref="UI.Composition.CompositionColorSpace.RgbLinear"/></summary>
        public static TTarget RgbLinear<TTarget>(this DependencyProperty<TTarget, UI.Composition.CompositionColorSpace> property) where TTarget : RadialGradientBrush
        => property.Set(UI.Composition.CompositionColorSpace.RgbLinear);

        /// <summary>Set to <see cref="Xaml.Media.BrushMappingMode.Absolute"/></summary>
        public static TTarget Absolute<TTarget>(this DependencyProperty<TTarget, Xaml.Media.BrushMappingMode> property) where TTarget : RadialGradientBrush
        => property.Set(Xaml.Media.BrushMappingMode.Absolute);

        /// <summary>Set to <see cref="Xaml.Media.BrushMappingMode.RelativeToBoundingBox"/></summary>
        public static TTarget RelativeToBoundingBox<TTarget>(this DependencyProperty<TTarget, Xaml.Media.BrushMappingMode> property) where TTarget : RadialGradientBrush
        => property.Set(Xaml.Media.BrushMappingMode.RelativeToBoundingBox);

        /// <summary>Set to <see cref="Xaml.Media.GradientSpreadMethod.Pad"/></summary>
        public static TTarget Pad<TTarget>(this DependencyProperty<TTarget, Xaml.Media.GradientSpreadMethod> property) where TTarget : RadialGradientBrush
        => property.Set(Xaml.Media.GradientSpreadMethod.Pad);

        /// <summary>Set to <see cref="Xaml.Media.GradientSpreadMethod.Reflect"/></summary>
        public static TTarget Reflect<TTarget>(this DependencyProperty<TTarget, Xaml.Media.GradientSpreadMethod> property) where TTarget : RadialGradientBrush
        => property.Set(Xaml.Media.GradientSpreadMethod.Reflect);

        /// <summary>Set to <see cref="Xaml.Media.GradientSpreadMethod.Repeat"/></summary>
        public static TTarget Repeat<TTarget>(this DependencyProperty<TTarget, Xaml.Media.GradientSpreadMethod> property) where TTarget : RadialGradientBrush
        => property.Set(Xaml.Media.GradientSpreadMethod.Repeat);
    }

    public static partial class RefreshContainerExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.RefreshPullDirection.BottomToTop"/></summary>
        public static TTarget BottomToTop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RefreshPullDirection> property) where TTarget : RefreshContainer
        => property.Set(Xaml.Controls.RefreshPullDirection.BottomToTop);

        /// <summary>Set to <see cref="Xaml.Controls.RefreshPullDirection.LeftToRight"/></summary>
        public static TTarget LeftToRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RefreshPullDirection> property) where TTarget : RefreshContainer
        => property.Set(Xaml.Controls.RefreshPullDirection.LeftToRight);

        /// <summary>Set to <see cref="Xaml.Controls.RefreshPullDirection.RightToLeft"/></summary>
        public static TTarget RightToLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RefreshPullDirection> property) where TTarget : RefreshContainer
        => property.Set(Xaml.Controls.RefreshPullDirection.RightToLeft);

        /// <summary>Set to <see cref="Xaml.Controls.RefreshPullDirection.TopToBottom"/></summary>
        public static TTarget TopToBottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RefreshPullDirection> property) where TTarget : RefreshContainer
        => property.Set(Xaml.Controls.RefreshPullDirection.TopToBottom);
    }

    public static partial class RefreshVisualizerExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.RefreshVisualizerOrientation.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizerOrientation> property) where TTarget : RefreshVisualizer
        => property.Set(Xaml.Controls.RefreshVisualizerOrientation.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.RefreshVisualizerOrientation.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizerOrientation> property) where TTarget : RefreshVisualizer
        => property.Set(Xaml.Controls.RefreshVisualizerOrientation.Normal);

        /// <summary>Set to <see cref="Xaml.Controls.RefreshVisualizerOrientation.Rotate270DegreesCounterclockwise"/></summary>
        public static TTarget Rotate270DegreesCounterclockwise<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizerOrientation> property) where TTarget : RefreshVisualizer
        => property.Set(Xaml.Controls.RefreshVisualizerOrientation.Rotate270DegreesCounterclockwise);

        /// <summary>Set to <see cref="Xaml.Controls.RefreshVisualizerOrientation.Rotate90DegreesCounterclockwise"/></summary>
        public static TTarget Rotate90DegreesCounterclockwise<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizerOrientation> property) where TTarget : RefreshVisualizer
        => property.Set(Xaml.Controls.RefreshVisualizerOrientation.Rotate90DegreesCounterclockwise);

        /// <summary>Set to <see cref="Xaml.Controls.RefreshVisualizerState.Idle"/></summary>
        public static TTarget Idle<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizerState> property) where TTarget : RefreshVisualizer
        => property.Set(Xaml.Controls.RefreshVisualizerState.Idle);

        /// <summary>Set to <see cref="Xaml.Controls.RefreshVisualizerState.Interacting"/></summary>
        public static TTarget Interacting<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizerState> property) where TTarget : RefreshVisualizer
        => property.Set(Xaml.Controls.RefreshVisualizerState.Interacting);

        /// <summary>Set to <see cref="Xaml.Controls.RefreshVisualizerState.Peeking"/></summary>
        public static TTarget Peeking<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizerState> property) where TTarget : RefreshVisualizer
        => property.Set(Xaml.Controls.RefreshVisualizerState.Peeking);

        /// <summary>Set to <see cref="Xaml.Controls.RefreshVisualizerState.Pending"/></summary>
        public static TTarget Pending<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizerState> property) where TTarget : RefreshVisualizer
        => property.Set(Xaml.Controls.RefreshVisualizerState.Pending);

        /// <summary>Set to <see cref="Xaml.Controls.RefreshVisualizerState.Refreshing"/></summary>
        public static TTarget Refreshing<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RefreshVisualizerState> property) where TTarget : RefreshVisualizer
        => property.Set(Xaml.Controls.RefreshVisualizerState.Refreshing);
    }

    public static partial class RelativePanelExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.BackgroundSizing.InnerBorderEdge"/></summary>
        public static TTarget InnerBorderEdge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> property) where TTarget : RelativePanel
        => property.Set(Xaml.Controls.BackgroundSizing.InnerBorderEdge);

        /// <summary>Set to <see cref="Xaml.Controls.BackgroundSizing.OuterBorderEdge"/></summary>
        public static TTarget OuterBorderEdge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> property) where TTarget : RelativePanel
        => property.Set(Xaml.Controls.BackgroundSizing.OuterBorderEdge);
    }

    public static partial class RichEditBoxExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.CandidateWindowAlignment.BottomEdge"/></summary>
        public static TTarget BottomEdge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CandidateWindowAlignment> property) where TTarget : RichEditBox
        => property.Set(Xaml.Controls.CandidateWindowAlignment.BottomEdge);

        /// <summary>Set to <see cref="Xaml.Controls.CandidateWindowAlignment.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CandidateWindowAlignment> property) where TTarget : RichEditBox
        => property.Set(Xaml.Controls.CandidateWindowAlignment.Default);

        /// <summary>Set to <see cref="Xaml.Controls.CharacterCasing.Lower"/></summary>
        public static TTarget Lower<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CharacterCasing> property) where TTarget : RichEditBox
        => property.Set(Xaml.Controls.CharacterCasing.Lower);

        /// <summary>Set to <see cref="Xaml.Controls.CharacterCasing.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CharacterCasing> property) where TTarget : RichEditBox
        => property.Set(Xaml.Controls.CharacterCasing.Normal);

        /// <summary>Set to <see cref="Xaml.Controls.CharacterCasing.Upper"/></summary>
        public static TTarget Upper<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CharacterCasing> property) where TTarget : RichEditBox
        => property.Set(Xaml.Controls.CharacterCasing.Upper);

        /// <summary>Set to <see cref="Xaml.Controls.DisabledFormattingAccelerators.All"/></summary>
        public static TTarget All<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.DisabledFormattingAccelerators> property) where TTarget : RichEditBox
        => property.Set(Xaml.Controls.DisabledFormattingAccelerators.All);

        /// <summary>Set to <see cref="Xaml.Controls.DisabledFormattingAccelerators.Bold"/></summary>
        public static TTarget Bold<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.DisabledFormattingAccelerators> property) where TTarget : RichEditBox
        => property.Set(Xaml.Controls.DisabledFormattingAccelerators.Bold);

        /// <summary>Set to <see cref="Xaml.Controls.DisabledFormattingAccelerators.Italic"/></summary>
        public static TTarget Italic<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.DisabledFormattingAccelerators> property) where TTarget : RichEditBox
        => property.Set(Xaml.Controls.DisabledFormattingAccelerators.Italic);

        /// <summary>Set to <see cref="Xaml.Controls.DisabledFormattingAccelerators.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.DisabledFormattingAccelerators> property) where TTarget : RichEditBox
        => property.Set(Xaml.Controls.DisabledFormattingAccelerators.None);

        /// <summary>Set to <see cref="Xaml.Controls.DisabledFormattingAccelerators.Underline"/></summary>
        public static TTarget Underline<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.DisabledFormattingAccelerators> property) where TTarget : RichEditBox
        => property.Set(Xaml.Controls.DisabledFormattingAccelerators.Underline);

        /// <summary>Set to <see cref="Xaml.Controls.RichEditClipboardFormat.AllFormats"/></summary>
        public static TTarget AllFormats<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RichEditClipboardFormat> property) where TTarget : RichEditBox
        => property.Set(Xaml.Controls.RichEditClipboardFormat.AllFormats);

        /// <summary>Set to <see cref="Xaml.Controls.RichEditClipboardFormat.PlainText"/></summary>
        public static TTarget PlainText<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.RichEditClipboardFormat> property) where TTarget : RichEditBox
        => property.Set(Xaml.Controls.RichEditClipboardFormat.PlainText);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : RichEditBox
        => property.Set(Xaml.TextAlignment.Center);

        /// <summary>Set to <see cref="Xaml.TextAlignment.DetectFromContent"/></summary>
        public static TTarget DetectFromContent<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : RichEditBox
        => property.Set(Xaml.TextAlignment.DetectFromContent);

        /// <summary>Set to <see cref="Xaml.TextAlignment.End"/></summary>
        public static TTarget End<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : RichEditBox
        => property.Set(Xaml.TextAlignment.End);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Justify"/></summary>
        public static TTarget Justify<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : RichEditBox
        => property.Set(Xaml.TextAlignment.Justify);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : RichEditBox
        => property.Set(Xaml.TextAlignment.Left);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : RichEditBox
        => property.Set(Xaml.TextAlignment.Right);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Start"/></summary>
        public static TTarget Start<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : RichEditBox
        => property.Set(Xaml.TextAlignment.Start);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : RichEditBox
        => property.Set(Xaml.TextReadingOrder.Default);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.DetectFromContent"/></summary>
        public static TTarget DetectFromContent<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : RichEditBox
        => property.Set(Xaml.TextReadingOrder.DetectFromContent);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.UseFlowDirection"/></summary>
        public static TTarget UseFlowDirection<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : RichEditBox
        => property.Set(Xaml.TextReadingOrder.UseFlowDirection);

        /// <summary>Set to <see cref="Xaml.TextWrapping.NoWrap"/></summary>
        public static TTarget NoWrap<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : RichEditBox
        => property.Set(Xaml.TextWrapping.NoWrap);

        /// <summary>Set to <see cref="Xaml.TextWrapping.Wrap"/></summary>
        public static TTarget Wrap<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : RichEditBox
        => property.Set(Xaml.TextWrapping.Wrap);

        /// <summary>Set to <see cref="Xaml.TextWrapping.WrapWholeWords"/></summary>
        public static TTarget WrapWholeWords<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : RichEditBox
        => property.Set(Xaml.TextWrapping.WrapWholeWords);
    }

    public static partial class RichTextBlockExtensions
    {
        /// <summary>Set to <see cref="Xaml.LineStackingStrategy.BaselineToBaseline"/></summary>
        public static TTarget BaselineToBaseline<TTarget>(this DependencyProperty<TTarget, Xaml.LineStackingStrategy> property) where TTarget : RichTextBlock
        => property.Set(Xaml.LineStackingStrategy.BaselineToBaseline);

        /// <summary>Set to <see cref="Xaml.LineStackingStrategy.BlockLineHeight"/></summary>
        public static TTarget BlockLineHeight<TTarget>(this DependencyProperty<TTarget, Xaml.LineStackingStrategy> property) where TTarget : RichTextBlock
        => property.Set(Xaml.LineStackingStrategy.BlockLineHeight);

        /// <summary>Set to <see cref="Xaml.LineStackingStrategy.MaxHeight"/></summary>
        public static TTarget MaxHeight<TTarget>(this DependencyProperty<TTarget, Xaml.LineStackingStrategy> property) where TTarget : RichTextBlock
        => property.Set(Xaml.LineStackingStrategy.MaxHeight);

        /// <summary>Set to <see cref="Xaml.OpticalMarginAlignment.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.OpticalMarginAlignment> property) where TTarget : RichTextBlock
        => property.Set(Xaml.OpticalMarginAlignment.None);

        /// <summary>Set to <see cref="Xaml.OpticalMarginAlignment.TrimSideBearings"/></summary>
        public static TTarget TrimSideBearings<TTarget>(this DependencyProperty<TTarget, Xaml.OpticalMarginAlignment> property) where TTarget : RichTextBlock
        => property.Set(Xaml.OpticalMarginAlignment.TrimSideBearings);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextAlignment.Center);

        /// <summary>Set to <see cref="Xaml.TextAlignment.DetectFromContent"/></summary>
        public static TTarget DetectFromContent<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextAlignment.DetectFromContent);

        /// <summary>Set to <see cref="Xaml.TextAlignment.End"/></summary>
        public static TTarget End<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextAlignment.End);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Justify"/></summary>
        public static TTarget Justify<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextAlignment.Justify);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextAlignment.Left);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextAlignment.Right);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Start"/></summary>
        public static TTarget Start<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextAlignment.Start);

        /// <summary>Set to <see cref="Xaml.TextLineBounds.Full"/></summary>
        public static TTarget Full<TTarget>(this DependencyProperty<TTarget, Xaml.TextLineBounds> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextLineBounds.Full);

        /// <summary>Set to <see cref="Xaml.TextLineBounds.Tight"/></summary>
        public static TTarget Tight<TTarget>(this DependencyProperty<TTarget, Xaml.TextLineBounds> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextLineBounds.Tight);

        /// <summary>Set to <see cref="Xaml.TextLineBounds.TrimToBaseline"/></summary>
        public static TTarget TrimToBaseline<TTarget>(this DependencyProperty<TTarget, Xaml.TextLineBounds> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextLineBounds.TrimToBaseline);

        /// <summary>Set to <see cref="Xaml.TextLineBounds.TrimToCapHeight"/></summary>
        public static TTarget TrimToCapHeight<TTarget>(this DependencyProperty<TTarget, Xaml.TextLineBounds> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextLineBounds.TrimToCapHeight);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextReadingOrder.Default);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.DetectFromContent"/></summary>
        public static TTarget DetectFromContent<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextReadingOrder.DetectFromContent);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.UseFlowDirection"/></summary>
        public static TTarget UseFlowDirection<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextReadingOrder.UseFlowDirection);

        /// <summary>Set to <see cref="Xaml.TextTrimming.CharacterEllipsis"/></summary>
        public static TTarget CharacterEllipsis<TTarget>(this DependencyProperty<TTarget, Xaml.TextTrimming> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextTrimming.CharacterEllipsis);

        /// <summary>Set to <see cref="Xaml.TextTrimming.Clip"/></summary>
        public static TTarget Clip<TTarget>(this DependencyProperty<TTarget, Xaml.TextTrimming> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextTrimming.Clip);

        /// <summary>Set to <see cref="Xaml.TextTrimming.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.TextTrimming> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextTrimming.None);

        /// <summary>Set to <see cref="Xaml.TextTrimming.WordEllipsis"/></summary>
        public static TTarget WordEllipsis<TTarget>(this DependencyProperty<TTarget, Xaml.TextTrimming> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextTrimming.WordEllipsis);

        /// <summary>Set to <see cref="Xaml.TextWrapping.NoWrap"/></summary>
        public static TTarget NoWrap<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextWrapping.NoWrap);

        /// <summary>Set to <see cref="Xaml.TextWrapping.Wrap"/></summary>
        public static TTarget Wrap<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextWrapping.Wrap);

        /// <summary>Set to <see cref="Xaml.TextWrapping.WrapWholeWords"/></summary>
        public static TTarget WrapWholeWords<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : RichTextBlock
        => property.Set(Xaml.TextWrapping.WrapWholeWords);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Condensed"/></summary>
        public static TTarget Condensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.FontStretch.Condensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Expanded"/></summary>
        public static TTarget Expanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.FontStretch.Expanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.ExtraCondensed"/></summary>
        public static TTarget ExtraCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.FontStretch.ExtraCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.ExtraExpanded"/></summary>
        public static TTarget ExtraExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.FontStretch.ExtraExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.FontStretch.Normal);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.SemiCondensed"/></summary>
        public static TTarget SemiCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.FontStretch.SemiCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.SemiExpanded"/></summary>
        public static TTarget SemiExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.FontStretch.SemiExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.UltraCondensed"/></summary>
        public static TTarget UltraCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.FontStretch.UltraCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.UltraExpanded"/></summary>
        public static TTarget UltraExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.FontStretch.UltraExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Undefined"/></summary>
        public static TTarget Undefined<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.FontStretch.Undefined);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Italic"/></summary>
        public static TTarget Italic<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.FontStyle.Italic);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.FontStyle.Normal);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Oblique"/></summary>
        public static TTarget Oblique<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.FontStyle.Oblique);

        /// <summary>Set to <see cref="Windows.UI.Text.TextDecorations.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.TextDecorations> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.TextDecorations.None);

        /// <summary>Set to <see cref="Windows.UI.Text.TextDecorations.Strikethrough"/></summary>
        public static TTarget Strikethrough<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.TextDecorations> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.TextDecorations.Strikethrough);

        /// <summary>Set to <see cref="Windows.UI.Text.TextDecorations.Underline"/></summary>
        public static TTarget Underline<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.TextDecorations> property) where TTarget : RichTextBlock
        => property.Set(Windows.UI.Text.TextDecorations.Underline);
    }

    public static partial class RunExtensions
    {
        /// <summary>Set to <see cref="Xaml.FlowDirection.LeftToRight"/></summary>
        public static TTarget LeftToRight<TTarget>(this DependencyProperty<TTarget, Xaml.FlowDirection> property) where TTarget : Run
        => property.Set(Xaml.FlowDirection.LeftToRight);

        /// <summary>Set to <see cref="Xaml.FlowDirection.RightToLeft"/></summary>
        public static TTarget RightToLeft<TTarget>(this DependencyProperty<TTarget, Xaml.FlowDirection> property) where TTarget : Run
        => property.Set(Xaml.FlowDirection.RightToLeft);
    }

    public static partial class ScrollBarExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : ScrollBar
        => property.Set(Xaml.Controls.Orientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : ScrollBar
        => property.Set(Xaml.Controls.Orientation.Vertical);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.ScrollingIndicatorMode.MouseIndicator"/></summary>
        public static TTarget MouseIndicator<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.ScrollingIndicatorMode> property) where TTarget : ScrollBar
        => property.Set(Xaml.Controls.Primitives.ScrollingIndicatorMode.MouseIndicator);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.ScrollingIndicatorMode.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.ScrollingIndicatorMode> property) where TTarget : ScrollBar
        => property.Set(Xaml.Controls.Primitives.ScrollingIndicatorMode.None);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.ScrollingIndicatorMode.TouchIndicator"/></summary>
        public static TTarget TouchIndicator<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.ScrollingIndicatorMode> property) where TTarget : ScrollBar
        => property.Set(Xaml.Controls.Primitives.ScrollingIndicatorMode.TouchIndicator);
    }

    public static partial class ScrollPresenterExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.ScrollingChainMode.Always"/></summary>
        public static TTarget Always<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingChainMode.Always);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingChainMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingChainMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingChainMode.Never"/></summary>
        public static TTarget Never<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingChainMode.Never);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingContentOrientation.Both"/></summary>
        public static TTarget Both<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingContentOrientation> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingContentOrientation.Both);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingContentOrientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingContentOrientation> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingContentOrientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingContentOrientation.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingContentOrientation> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingContentOrientation.None);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingContentOrientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingContentOrientation> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingContentOrientation.Vertical);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingInputKinds.All"/></summary>
        public static TTarget All<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingInputKinds.All);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingInputKinds.Gamepad"/></summary>
        public static TTarget Gamepad<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingInputKinds.Gamepad);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingInputKinds.Keyboard"/></summary>
        public static TTarget Keyboard<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingInputKinds.Keyboard);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingInputKinds.MouseWheel"/></summary>
        public static TTarget MouseWheel<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingInputKinds.MouseWheel);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingInputKinds.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingInputKinds.None);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingInputKinds.Pen"/></summary>
        public static TTarget Pen<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingInputKinds.Pen);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingInputKinds.Touch"/></summary>
        public static TTarget Touch<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingInputKinds.Touch);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingRailMode.Disabled"/></summary>
        public static TTarget Disabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingRailMode> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingRailMode.Disabled);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingRailMode.Enabled"/></summary>
        public static TTarget Enabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingRailMode> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingRailMode.Enabled);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingScrollMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingScrollMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingScrollMode.Disabled"/></summary>
        public static TTarget Disabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingScrollMode.Disabled);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingScrollMode.Enabled"/></summary>
        public static TTarget Enabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingScrollMode.Enabled);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingZoomMode.Disabled"/></summary>
        public static TTarget Disabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingZoomMode> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingZoomMode.Disabled);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingZoomMode.Enabled"/></summary>
        public static TTarget Enabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingZoomMode> property) where TTarget : ScrollPresenter
        => property.Set(Xaml.Controls.ScrollingZoomMode.Enabled);
    }

    public static partial class ScrollViewExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.ScrollingChainMode.Always"/></summary>
        public static TTarget Always<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingChainMode.Always);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingChainMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingChainMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingChainMode.Never"/></summary>
        public static TTarget Never<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingChainMode> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingChainMode.Never);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingContentOrientation.Both"/></summary>
        public static TTarget Both<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingContentOrientation> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingContentOrientation.Both);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingContentOrientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingContentOrientation> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingContentOrientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingContentOrientation.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingContentOrientation> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingContentOrientation.None);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingContentOrientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingContentOrientation> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingContentOrientation.Vertical);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingInputKinds.All"/></summary>
        public static TTarget All<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingInputKinds.All);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingInputKinds.Gamepad"/></summary>
        public static TTarget Gamepad<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingInputKinds.Gamepad);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingInputKinds.Keyboard"/></summary>
        public static TTarget Keyboard<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingInputKinds.Keyboard);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingInputKinds.MouseWheel"/></summary>
        public static TTarget MouseWheel<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingInputKinds.MouseWheel);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingInputKinds.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingInputKinds.None);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingInputKinds.Pen"/></summary>
        public static TTarget Pen<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingInputKinds.Pen);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingInputKinds.Touch"/></summary>
        public static TTarget Touch<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingInputKinds> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingInputKinds.Touch);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingRailMode.Disabled"/></summary>
        public static TTarget Disabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingRailMode> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingRailMode.Disabled);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingRailMode.Enabled"/></summary>
        public static TTarget Enabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingRailMode> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingRailMode.Enabled);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingScrollBarVisibility.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollBarVisibility> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingScrollBarVisibility.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingScrollBarVisibility.Hidden"/></summary>
        public static TTarget Hidden<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollBarVisibility> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingScrollBarVisibility.Hidden);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingScrollBarVisibility.Visible"/></summary>
        public static TTarget Visible<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollBarVisibility> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingScrollBarVisibility.Visible);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingScrollMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingScrollMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingScrollMode.Disabled"/></summary>
        public static TTarget Disabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingScrollMode.Disabled);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingScrollMode.Enabled"/></summary>
        public static TTarget Enabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingScrollMode> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingScrollMode.Enabled);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingZoomMode.Disabled"/></summary>
        public static TTarget Disabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingZoomMode> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingZoomMode.Disabled);

        /// <summary>Set to <see cref="Xaml.Controls.ScrollingZoomMode.Enabled"/></summary>
        public static TTarget Enabled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.ScrollingZoomMode> property) where TTarget : ScrollView
        => property.Set(Xaml.Controls.ScrollingZoomMode.Enabled);
    }

    public static partial class ScrollViewerExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Primitives.SnapPointsAlignment.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.SnapPointsAlignment> property) where TTarget : ScrollViewer
        => property.Set(Xaml.Controls.Primitives.SnapPointsAlignment.Center);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.SnapPointsAlignment.Far"/></summary>
        public static TTarget Far<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.SnapPointsAlignment> property) where TTarget : ScrollViewer
        => property.Set(Xaml.Controls.Primitives.SnapPointsAlignment.Far);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.SnapPointsAlignment.Near"/></summary>
        public static TTarget Near<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.SnapPointsAlignment> property) where TTarget : ScrollViewer
        => property.Set(Xaml.Controls.Primitives.SnapPointsAlignment.Near);

        /// <summary>Set to <see cref="Xaml.Controls.SnapPointsType.Mandatory"/></summary>
        public static TTarget Mandatory<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SnapPointsType> property) where TTarget : ScrollViewer
        => property.Set(Xaml.Controls.SnapPointsType.Mandatory);

        /// <summary>Set to <see cref="Xaml.Controls.SnapPointsType.MandatorySingle"/></summary>
        public static TTarget MandatorySingle<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SnapPointsType> property) where TTarget : ScrollViewer
        => property.Set(Xaml.Controls.SnapPointsType.MandatorySingle);

        /// <summary>Set to <see cref="Xaml.Controls.SnapPointsType.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SnapPointsType> property) where TTarget : ScrollViewer
        => property.Set(Xaml.Controls.SnapPointsType.None);

        /// <summary>Set to <see cref="Xaml.Controls.SnapPointsType.Optional"/></summary>
        public static TTarget Optional<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SnapPointsType> property) where TTarget : ScrollViewer
        => property.Set(Xaml.Controls.SnapPointsType.Optional);

        /// <summary>Set to <see cref="Xaml.Controls.SnapPointsType.OptionalSingle"/></summary>
        public static TTarget OptionalSingle<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SnapPointsType> property) where TTarget : ScrollViewer
        => property.Set(Xaml.Controls.SnapPointsType.OptionalSingle);
    }

    public static partial class ShapeExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.PenLineCap.Flat"/></summary>
        public static TTarget Flat<TTarget>(this DependencyProperty<TTarget, Xaml.Media.PenLineCap> property) where TTarget : Shape
        => property.Set(Xaml.Media.PenLineCap.Flat);

        /// <summary>Set to <see cref="Xaml.Media.PenLineCap.Round"/></summary>
        public static TTarget Round<TTarget>(this DependencyProperty<TTarget, Xaml.Media.PenLineCap> property) where TTarget : Shape
        => property.Set(Xaml.Media.PenLineCap.Round);

        /// <summary>Set to <see cref="Xaml.Media.PenLineCap.Square"/></summary>
        public static TTarget Square<TTarget>(this DependencyProperty<TTarget, Xaml.Media.PenLineCap> property) where TTarget : Shape
        => property.Set(Xaml.Media.PenLineCap.Square);

        /// <summary>Set to <see cref="Xaml.Media.PenLineCap.Triangle"/></summary>
        public static TTarget Triangle<TTarget>(this DependencyProperty<TTarget, Xaml.Media.PenLineCap> property) where TTarget : Shape
        => property.Set(Xaml.Media.PenLineCap.Triangle);

        /// <summary>Set to <see cref="Xaml.Media.PenLineJoin.Bevel"/></summary>
        public static TTarget Bevel<TTarget>(this DependencyProperty<TTarget, Xaml.Media.PenLineJoin> property) where TTarget : Shape
        => property.Set(Xaml.Media.PenLineJoin.Bevel);

        /// <summary>Set to <see cref="Xaml.Media.PenLineJoin.Miter"/></summary>
        public static TTarget Miter<TTarget>(this DependencyProperty<TTarget, Xaml.Media.PenLineJoin> property) where TTarget : Shape
        => property.Set(Xaml.Media.PenLineJoin.Miter);

        /// <summary>Set to <see cref="Xaml.Media.PenLineJoin.Round"/></summary>
        public static TTarget Round<TTarget>(this DependencyProperty<TTarget, Xaml.Media.PenLineJoin> property) where TTarget : Shape
        => property.Set(Xaml.Media.PenLineJoin.Round);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.Fill"/></summary>
        public static TTarget Fill<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : Shape
        => property.Set(Xaml.Media.Stretch.Fill);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : Shape
        => property.Set(Xaml.Media.Stretch.None);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.Uniform"/></summary>
        public static TTarget Uniform<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : Shape
        => property.Set(Xaml.Media.Stretch.Uniform);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.UniformToFill"/></summary>
        public static TTarget UniformToFill<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : Shape
        => property.Set(Xaml.Media.Stretch.UniformToFill);
    }

    public static partial class SlideNavigationTransitionInfoExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.Animation.SlideNavigationTransitionEffect.FromBottom"/></summary>
        public static TTarget FromBottom<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Animation.SlideNavigationTransitionEffect> property) where TTarget : SlideNavigationTransitionInfo
        => property.Set(Xaml.Media.Animation.SlideNavigationTransitionEffect.FromBottom);

        /// <summary>Set to <see cref="Xaml.Media.Animation.SlideNavigationTransitionEffect.FromLeft"/></summary>
        public static TTarget FromLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Animation.SlideNavigationTransitionEffect> property) where TTarget : SlideNavigationTransitionInfo
        => property.Set(Xaml.Media.Animation.SlideNavigationTransitionEffect.FromLeft);

        /// <summary>Set to <see cref="Xaml.Media.Animation.SlideNavigationTransitionEffect.FromRight"/></summary>
        public static TTarget FromRight<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Animation.SlideNavigationTransitionEffect> property) where TTarget : SlideNavigationTransitionInfo
        => property.Set(Xaml.Media.Animation.SlideNavigationTransitionEffect.FromRight);
    }

    public static partial class SliderExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : Slider
        => property.Set(Xaml.Controls.Orientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : Slider
        => property.Set(Xaml.Controls.Orientation.Vertical);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.SliderSnapsTo.StepValues"/></summary>
        public static TTarget StepValues<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.SliderSnapsTo> property) where TTarget : Slider
        => property.Set(Xaml.Controls.Primitives.SliderSnapsTo.StepValues);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.SliderSnapsTo.Ticks"/></summary>
        public static TTarget Ticks<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.SliderSnapsTo> property) where TTarget : Slider
        => property.Set(Xaml.Controls.Primitives.SliderSnapsTo.Ticks);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.TickPlacement.BottomRight"/></summary>
        public static TTarget BottomRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.TickPlacement> property) where TTarget : Slider
        => property.Set(Xaml.Controls.Primitives.TickPlacement.BottomRight);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.TickPlacement.Inline"/></summary>
        public static TTarget Inline<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.TickPlacement> property) where TTarget : Slider
        => property.Set(Xaml.Controls.Primitives.TickPlacement.Inline);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.TickPlacement.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.TickPlacement> property) where TTarget : Slider
        => property.Set(Xaml.Controls.Primitives.TickPlacement.None);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.TickPlacement.Outside"/></summary>
        public static TTarget Outside<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.TickPlacement> property) where TTarget : Slider
        => property.Set(Xaml.Controls.Primitives.TickPlacement.Outside);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.TickPlacement.TopLeft"/></summary>
        public static TTarget TopLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.TickPlacement> property) where TTarget : Slider
        => property.Set(Xaml.Controls.Primitives.TickPlacement.TopLeft);
    }

    public static partial class SplitCloseThemeAnimationExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Primitives.AnimationDirection.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> property) where TTarget : SplitCloseThemeAnimation
        => property.Set(Xaml.Controls.Primitives.AnimationDirection.Bottom);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.AnimationDirection.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> property) where TTarget : SplitCloseThemeAnimation
        => property.Set(Xaml.Controls.Primitives.AnimationDirection.Left);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.AnimationDirection.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> property) where TTarget : SplitCloseThemeAnimation
        => property.Set(Xaml.Controls.Primitives.AnimationDirection.Right);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.AnimationDirection.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> property) where TTarget : SplitCloseThemeAnimation
        => property.Set(Xaml.Controls.Primitives.AnimationDirection.Top);
    }

    public static partial class SplitOpenThemeAnimationExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Primitives.AnimationDirection.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> property) where TTarget : SplitOpenThemeAnimation
        => property.Set(Xaml.Controls.Primitives.AnimationDirection.Bottom);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.AnimationDirection.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> property) where TTarget : SplitOpenThemeAnimation
        => property.Set(Xaml.Controls.Primitives.AnimationDirection.Left);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.AnimationDirection.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> property) where TTarget : SplitOpenThemeAnimation
        => property.Set(Xaml.Controls.Primitives.AnimationDirection.Right);

        /// <summary>Set to <see cref="Xaml.Controls.Primitives.AnimationDirection.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Primitives.AnimationDirection> property) where TTarget : SplitOpenThemeAnimation
        => property.Set(Xaml.Controls.Primitives.AnimationDirection.Top);
    }

    public static partial class SplitViewExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : SplitView
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Off"/></summary>
        public static TTarget Off<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : SplitView
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Off);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.On"/></summary>
        public static TTarget On<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : SplitView
        => property.Set(Xaml.Controls.LightDismissOverlayMode.On);

        /// <summary>Set to <see cref="Xaml.Controls.SplitViewDisplayMode.CompactInline"/></summary>
        public static TTarget CompactInline<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SplitViewDisplayMode> property) where TTarget : SplitView
        => property.Set(Xaml.Controls.SplitViewDisplayMode.CompactInline);

        /// <summary>Set to <see cref="Xaml.Controls.SplitViewDisplayMode.CompactOverlay"/></summary>
        public static TTarget CompactOverlay<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SplitViewDisplayMode> property) where TTarget : SplitView
        => property.Set(Xaml.Controls.SplitViewDisplayMode.CompactOverlay);

        /// <summary>Set to <see cref="Xaml.Controls.SplitViewDisplayMode.Inline"/></summary>
        public static TTarget Inline<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SplitViewDisplayMode> property) where TTarget : SplitView
        => property.Set(Xaml.Controls.SplitViewDisplayMode.Inline);

        /// <summary>Set to <see cref="Xaml.Controls.SplitViewDisplayMode.Overlay"/></summary>
        public static TTarget Overlay<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SplitViewDisplayMode> property) where TTarget : SplitView
        => property.Set(Xaml.Controls.SplitViewDisplayMode.Overlay);

        /// <summary>Set to <see cref="Xaml.Controls.SplitViewPanePlacement.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SplitViewPanePlacement> property) where TTarget : SplitView
        => property.Set(Xaml.Controls.SplitViewPanePlacement.Left);

        /// <summary>Set to <see cref="Xaml.Controls.SplitViewPanePlacement.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SplitViewPanePlacement> property) where TTarget : SplitView
        => property.Set(Xaml.Controls.SplitViewPanePlacement.Right);
    }

    public static partial class StackLayoutExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : StackLayout
        => property.Set(Xaml.Controls.Orientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : StackLayout
        => property.Set(Xaml.Controls.Orientation.Vertical);
    }

    public static partial class StackPanelExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.BackgroundSizing.InnerBorderEdge"/></summary>
        public static TTarget InnerBorderEdge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> property) where TTarget : StackPanel
        => property.Set(Xaml.Controls.BackgroundSizing.InnerBorderEdge);

        /// <summary>Set to <see cref="Xaml.Controls.BackgroundSizing.OuterBorderEdge"/></summary>
        public static TTarget OuterBorderEdge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.BackgroundSizing> property) where TTarget : StackPanel
        => property.Set(Xaml.Controls.BackgroundSizing.OuterBorderEdge);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : StackPanel
        => property.Set(Xaml.Controls.Orientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : StackPanel
        => property.Set(Xaml.Controls.Orientation.Vertical);
    }

    public static partial class StandardUICommandExtensions
    {
        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Backward"/></summary>
        public static TTarget Backward<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Backward);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Close"/></summary>
        public static TTarget Close<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Close);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Copy"/></summary>
        public static TTarget Copy<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Copy);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Cut"/></summary>
        public static TTarget Cut<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Cut);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Delete"/></summary>
        public static TTarget Delete<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Delete);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Forward"/></summary>
        public static TTarget Forward<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Forward);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.None);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Open"/></summary>
        public static TTarget Open<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Open);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Paste"/></summary>
        public static TTarget Paste<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Paste);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Pause"/></summary>
        public static TTarget Pause<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Pause);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Play"/></summary>
        public static TTarget Play<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Play);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Redo"/></summary>
        public static TTarget Redo<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Redo);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Save"/></summary>
        public static TTarget Save<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Save);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.SelectAll"/></summary>
        public static TTarget SelectAll<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.SelectAll);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Share"/></summary>
        public static TTarget Share<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Share);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Stop"/></summary>
        public static TTarget Stop<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Stop);

        /// <summary>Set to <see cref="Xaml.Input.StandardUICommandKind.Undo"/></summary>
        public static TTarget Undo<TTarget>(this DependencyProperty<TTarget, Xaml.Input.StandardUICommandKind> property) where TTarget : StandardUICommand
        => property.Set(Xaml.Input.StandardUICommandKind.Undo);
    }

    public static partial class SwipeItemExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.SwipeBehaviorOnInvoked.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SwipeBehaviorOnInvoked> property) where TTarget : SwipeItem
        => property.Set(Xaml.Controls.SwipeBehaviorOnInvoked.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.SwipeBehaviorOnInvoked.Close"/></summary>
        public static TTarget Close<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SwipeBehaviorOnInvoked> property) where TTarget : SwipeItem
        => property.Set(Xaml.Controls.SwipeBehaviorOnInvoked.Close);

        /// <summary>Set to <see cref="Xaml.Controls.SwipeBehaviorOnInvoked.RemainOpen"/></summary>
        public static TTarget RemainOpen<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SwipeBehaviorOnInvoked> property) where TTarget : SwipeItem
        => property.Set(Xaml.Controls.SwipeBehaviorOnInvoked.RemainOpen);
    }

    public static partial class SwipeItemsExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.SwipeMode.Execute"/></summary>
        public static TTarget Execute<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SwipeMode> property) where TTarget : SwipeItems
        => property.Set(Xaml.Controls.SwipeMode.Execute);

        /// <summary>Set to <see cref="Xaml.Controls.SwipeMode.Reveal"/></summary>
        public static TTarget Reveal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.SwipeMode> property) where TTarget : SwipeItems
        => property.Set(Xaml.Controls.SwipeMode.Reveal);
    }

    public static partial class SymbolIconExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Accept"/></summary>
        public static TTarget Accept<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Accept);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Account"/></summary>
        public static TTarget Account<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Account);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Add"/></summary>
        public static TTarget Add<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Add);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.AddFriend"/></summary>
        public static TTarget AddFriend<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.AddFriend);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Admin"/></summary>
        public static TTarget Admin<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Admin);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.AlignCenter"/></summary>
        public static TTarget AlignCenter<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.AlignCenter);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.AlignLeft"/></summary>
        public static TTarget AlignLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.AlignLeft);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.AlignRight"/></summary>
        public static TTarget AlignRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.AlignRight);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.AllApps"/></summary>
        public static TTarget AllApps<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.AllApps);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Attach"/></summary>
        public static TTarget Attach<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Attach);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.AttachCamera"/></summary>
        public static TTarget AttachCamera<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.AttachCamera);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Audio"/></summary>
        public static TTarget Audio<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Audio);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Back"/></summary>
        public static TTarget Back<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Back);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.BackToWindow"/></summary>
        public static TTarget BackToWindow<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.BackToWindow);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.BlockContact"/></summary>
        public static TTarget BlockContact<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.BlockContact);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Bold"/></summary>
        public static TTarget Bold<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Bold);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Bookmarks"/></summary>
        public static TTarget Bookmarks<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Bookmarks);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.BrowsePhotos"/></summary>
        public static TTarget BrowsePhotos<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.BrowsePhotos);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Bullets"/></summary>
        public static TTarget Bullets<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Bullets);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Calculator"/></summary>
        public static TTarget Calculator<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Calculator);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Calendar"/></summary>
        public static TTarget Calendar<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Calendar);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.CalendarDay"/></summary>
        public static TTarget CalendarDay<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.CalendarDay);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.CalendarReply"/></summary>
        public static TTarget CalendarReply<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.CalendarReply);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.CalendarWeek"/></summary>
        public static TTarget CalendarWeek<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.CalendarWeek);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Camera"/></summary>
        public static TTarget Camera<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Camera);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Cancel"/></summary>
        public static TTarget Cancel<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Cancel);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Caption"/></summary>
        public static TTarget Caption<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Caption);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.CellPhone"/></summary>
        public static TTarget CellPhone<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.CellPhone);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Character"/></summary>
        public static TTarget Character<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Character);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Clear"/></summary>
        public static TTarget Clear<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Clear);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ClearSelection"/></summary>
        public static TTarget ClearSelection<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ClearSelection);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Clock"/></summary>
        public static TTarget Clock<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Clock);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ClosedCaption"/></summary>
        public static TTarget ClosedCaption<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ClosedCaption);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ClosePane"/></summary>
        public static TTarget ClosePane<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ClosePane);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Comment"/></summary>
        public static TTarget Comment<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Comment);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Contact"/></summary>
        public static TTarget Contact<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Contact);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Contact2"/></summary>
        public static TTarget Contact2<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Contact2);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ContactInfo"/></summary>
        public static TTarget ContactInfo<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ContactInfo);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ContactPresence"/></summary>
        public static TTarget ContactPresence<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ContactPresence);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Copy"/></summary>
        public static TTarget Copy<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Copy);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Crop"/></summary>
        public static TTarget Crop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Crop);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Cut"/></summary>
        public static TTarget Cut<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Cut);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Delete"/></summary>
        public static TTarget Delete<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Delete);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Directions"/></summary>
        public static TTarget Directions<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Directions);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.DisableUpdates"/></summary>
        public static TTarget DisableUpdates<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.DisableUpdates);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.DisconnectDrive"/></summary>
        public static TTarget DisconnectDrive<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.DisconnectDrive);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Dislike"/></summary>
        public static TTarget Dislike<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Dislike);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.DockBottom"/></summary>
        public static TTarget DockBottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.DockBottom);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.DockLeft"/></summary>
        public static TTarget DockLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.DockLeft);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.DockRight"/></summary>
        public static TTarget DockRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.DockRight);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Document"/></summary>
        public static TTarget Document<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Document);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Download"/></summary>
        public static TTarget Download<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Download);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Edit"/></summary>
        public static TTarget Edit<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Edit);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Emoji"/></summary>
        public static TTarget Emoji<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Emoji);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Emoji2"/></summary>
        public static TTarget Emoji2<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Emoji2);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Favorite"/></summary>
        public static TTarget Favorite<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Favorite);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Filter"/></summary>
        public static TTarget Filter<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Filter);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Find"/></summary>
        public static TTarget Find<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Find);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Flag"/></summary>
        public static TTarget Flag<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Flag);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Folder"/></summary>
        public static TTarget Folder<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Folder);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Font"/></summary>
        public static TTarget Font<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Font);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.FontColor"/></summary>
        public static TTarget FontColor<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.FontColor);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.FontDecrease"/></summary>
        public static TTarget FontDecrease<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.FontDecrease);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.FontIncrease"/></summary>
        public static TTarget FontIncrease<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.FontIncrease);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.FontSize"/></summary>
        public static TTarget FontSize<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.FontSize);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Forward"/></summary>
        public static TTarget Forward<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Forward);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.FourBars"/></summary>
        public static TTarget FourBars<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.FourBars);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.FullScreen"/></summary>
        public static TTarget FullScreen<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.FullScreen);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.GlobalNavigationButton"/></summary>
        public static TTarget GlobalNavigationButton<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.GlobalNavigationButton);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Globe"/></summary>
        public static TTarget Globe<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Globe);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Go"/></summary>
        public static TTarget Go<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Go);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.GoToStart"/></summary>
        public static TTarget GoToStart<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.GoToStart);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.GoToToday"/></summary>
        public static TTarget GoToToday<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.GoToToday);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.HangUp"/></summary>
        public static TTarget HangUp<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.HangUp);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Help"/></summary>
        public static TTarget Help<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Help);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.HideBcc"/></summary>
        public static TTarget HideBcc<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.HideBcc);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Highlight"/></summary>
        public static TTarget Highlight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Highlight);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Home"/></summary>
        public static TTarget Home<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Home);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Import"/></summary>
        public static TTarget Import<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Import);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ImportAll"/></summary>
        public static TTarget ImportAll<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ImportAll);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Important"/></summary>
        public static TTarget Important<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Important);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Italic"/></summary>
        public static TTarget Italic<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Italic);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Keyboard"/></summary>
        public static TTarget Keyboard<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Keyboard);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.LeaveChat"/></summary>
        public static TTarget LeaveChat<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.LeaveChat);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Library"/></summary>
        public static TTarget Library<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Library);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Like"/></summary>
        public static TTarget Like<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Like);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.LikeDislike"/></summary>
        public static TTarget LikeDislike<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.LikeDislike);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Link"/></summary>
        public static TTarget Link<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Link);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.List"/></summary>
        public static TTarget List<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.List);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Mail"/></summary>
        public static TTarget Mail<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Mail);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MailFilled"/></summary>
        public static TTarget MailFilled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.MailFilled);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MailForward"/></summary>
        public static TTarget MailForward<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.MailForward);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MailReply"/></summary>
        public static TTarget MailReply<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.MailReply);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MailReplyAll"/></summary>
        public static TTarget MailReplyAll<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.MailReplyAll);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Manage"/></summary>
        public static TTarget Manage<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Manage);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Map"/></summary>
        public static TTarget Map<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Map);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MapDrive"/></summary>
        public static TTarget MapDrive<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.MapDrive);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MapPin"/></summary>
        public static TTarget MapPin<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.MapPin);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Memo"/></summary>
        public static TTarget Memo<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Memo);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Message"/></summary>
        public static TTarget Message<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Message);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Microphone"/></summary>
        public static TTarget Microphone<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Microphone);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.More"/></summary>
        public static TTarget More<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.More);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MoveToFolder"/></summary>
        public static TTarget MoveToFolder<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.MoveToFolder);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MusicInfo"/></summary>
        public static TTarget MusicInfo<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.MusicInfo);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Mute"/></summary>
        public static TTarget Mute<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Mute);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.NewFolder"/></summary>
        public static TTarget NewFolder<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.NewFolder);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.NewWindow"/></summary>
        public static TTarget NewWindow<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.NewWindow);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Next"/></summary>
        public static TTarget Next<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Next);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.OneBar"/></summary>
        public static TTarget OneBar<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.OneBar);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.OpenFile"/></summary>
        public static TTarget OpenFile<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.OpenFile);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.OpenLocal"/></summary>
        public static TTarget OpenLocal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.OpenLocal);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.OpenPane"/></summary>
        public static TTarget OpenPane<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.OpenPane);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.OpenWith"/></summary>
        public static TTarget OpenWith<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.OpenWith);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Orientation"/></summary>
        public static TTarget Orientation<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Orientation);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.OtherUser"/></summary>
        public static TTarget OtherUser<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.OtherUser);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.OutlineStar"/></summary>
        public static TTarget OutlineStar<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.OutlineStar);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Page"/></summary>
        public static TTarget Page<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Page);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Page2"/></summary>
        public static TTarget Page2<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Page2);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Paste"/></summary>
        public static TTarget Paste<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Paste);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Pause"/></summary>
        public static TTarget Pause<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Pause);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.People"/></summary>
        public static TTarget People<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.People);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Permissions"/></summary>
        public static TTarget Permissions<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Permissions);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Phone"/></summary>
        public static TTarget Phone<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Phone);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.PhoneBook"/></summary>
        public static TTarget PhoneBook<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.PhoneBook);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Pictures"/></summary>
        public static TTarget Pictures<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Pictures);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Pin"/></summary>
        public static TTarget Pin<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Pin);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Placeholder"/></summary>
        public static TTarget Placeholder<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Placeholder);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Play"/></summary>
        public static TTarget Play<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Play);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.PostUpdate"/></summary>
        public static TTarget PostUpdate<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.PostUpdate);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Preview"/></summary>
        public static TTarget Preview<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Preview);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.PreviewLink"/></summary>
        public static TTarget PreviewLink<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.PreviewLink);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Previous"/></summary>
        public static TTarget Previous<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Previous);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Print"/></summary>
        public static TTarget Print<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Print);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Priority"/></summary>
        public static TTarget Priority<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Priority);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ProtectedDocument"/></summary>
        public static TTarget ProtectedDocument<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ProtectedDocument);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Read"/></summary>
        public static TTarget Read<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Read);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Redo"/></summary>
        public static TTarget Redo<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Redo);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Refresh"/></summary>
        public static TTarget Refresh<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Refresh);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Remote"/></summary>
        public static TTarget Remote<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Remote);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Remove"/></summary>
        public static TTarget Remove<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Remove);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Rename"/></summary>
        public static TTarget Rename<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Rename);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Repair"/></summary>
        public static TTarget Repair<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Repair);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.RepeatAll"/></summary>
        public static TTarget RepeatAll<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.RepeatAll);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.RepeatOne"/></summary>
        public static TTarget RepeatOne<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.RepeatOne);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ReportHacked"/></summary>
        public static TTarget ReportHacked<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ReportHacked);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ReShare"/></summary>
        public static TTarget ReShare<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ReShare);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Rotate"/></summary>
        public static TTarget Rotate<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Rotate);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.RotateCamera"/></summary>
        public static TTarget RotateCamera<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.RotateCamera);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Save"/></summary>
        public static TTarget Save<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Save);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SaveLocal"/></summary>
        public static TTarget SaveLocal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.SaveLocal);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Scan"/></summary>
        public static TTarget Scan<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Scan);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SelectAll"/></summary>
        public static TTarget SelectAll<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.SelectAll);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Send"/></summary>
        public static TTarget Send<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Send);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SetLockScreen"/></summary>
        public static TTarget SetLockScreen<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.SetLockScreen);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SetTile"/></summary>
        public static TTarget SetTile<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.SetTile);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Setting"/></summary>
        public static TTarget Setting<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Setting);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Share"/></summary>
        public static TTarget Share<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Share);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Shop"/></summary>
        public static TTarget Shop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Shop);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ShowBcc"/></summary>
        public static TTarget ShowBcc<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ShowBcc);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ShowResults"/></summary>
        public static TTarget ShowResults<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ShowResults);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Shuffle"/></summary>
        public static TTarget Shuffle<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Shuffle);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SlideShow"/></summary>
        public static TTarget SlideShow<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.SlideShow);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SolidStar"/></summary>
        public static TTarget SolidStar<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.SolidStar);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Sort"/></summary>
        public static TTarget Sort<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Sort);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Stop"/></summary>
        public static TTarget Stop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Stop);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.StopSlideShow"/></summary>
        public static TTarget StopSlideShow<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.StopSlideShow);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Street"/></summary>
        public static TTarget Street<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Street);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Switch"/></summary>
        public static TTarget Switch<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Switch);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SwitchApps"/></summary>
        public static TTarget SwitchApps<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.SwitchApps);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Sync"/></summary>
        public static TTarget Sync<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Sync);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SyncFolder"/></summary>
        public static TTarget SyncFolder<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.SyncFolder);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Tag"/></summary>
        public static TTarget Tag<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Tag);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Target"/></summary>
        public static TTarget Target<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Target);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ThreeBars"/></summary>
        public static TTarget ThreeBars<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ThreeBars);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.TouchPointer"/></summary>
        public static TTarget TouchPointer<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.TouchPointer);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Trim"/></summary>
        public static TTarget Trim<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Trim);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.TwoBars"/></summary>
        public static TTarget TwoBars<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.TwoBars);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.TwoPage"/></summary>
        public static TTarget TwoPage<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.TwoPage);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Underline"/></summary>
        public static TTarget Underline<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Underline);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Undo"/></summary>
        public static TTarget Undo<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Undo);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.UnFavorite"/></summary>
        public static TTarget UnFavorite<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.UnFavorite);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.UnPin"/></summary>
        public static TTarget UnPin<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.UnPin);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.UnSyncFolder"/></summary>
        public static TTarget UnSyncFolder<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.UnSyncFolder);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Up"/></summary>
        public static TTarget Up<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Up);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Upload"/></summary>
        public static TTarget Upload<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Upload);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Video"/></summary>
        public static TTarget Video<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Video);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.VideoChat"/></summary>
        public static TTarget VideoChat<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.VideoChat);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.View"/></summary>
        public static TTarget View<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.View);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ViewAll"/></summary>
        public static TTarget ViewAll<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ViewAll);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Volume"/></summary>
        public static TTarget Volume<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Volume);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.WebCam"/></summary>
        public static TTarget WebCam<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.WebCam);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.World"/></summary>
        public static TTarget World<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.World);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.XboxOneConsole"/></summary>
        public static TTarget XboxOneConsole<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.XboxOneConsole);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ZeroBars"/></summary>
        public static TTarget ZeroBars<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ZeroBars);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Zoom"/></summary>
        public static TTarget Zoom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.Zoom);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ZoomIn"/></summary>
        public static TTarget ZoomIn<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ZoomIn);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ZoomOut"/></summary>
        public static TTarget ZoomOut<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIcon
        => property.Set(Xaml.Controls.Symbol.ZoomOut);
    }

    public static partial class SymbolIconSourceExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Accept"/></summary>
        public static TTarget Accept<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Accept);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Account"/></summary>
        public static TTarget Account<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Account);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Add"/></summary>
        public static TTarget Add<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Add);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.AddFriend"/></summary>
        public static TTarget AddFriend<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.AddFriend);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Admin"/></summary>
        public static TTarget Admin<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Admin);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.AlignCenter"/></summary>
        public static TTarget AlignCenter<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.AlignCenter);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.AlignLeft"/></summary>
        public static TTarget AlignLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.AlignLeft);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.AlignRight"/></summary>
        public static TTarget AlignRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.AlignRight);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.AllApps"/></summary>
        public static TTarget AllApps<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.AllApps);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Attach"/></summary>
        public static TTarget Attach<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Attach);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.AttachCamera"/></summary>
        public static TTarget AttachCamera<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.AttachCamera);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Audio"/></summary>
        public static TTarget Audio<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Audio);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Back"/></summary>
        public static TTarget Back<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Back);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.BackToWindow"/></summary>
        public static TTarget BackToWindow<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.BackToWindow);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.BlockContact"/></summary>
        public static TTarget BlockContact<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.BlockContact);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Bold"/></summary>
        public static TTarget Bold<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Bold);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Bookmarks"/></summary>
        public static TTarget Bookmarks<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Bookmarks);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.BrowsePhotos"/></summary>
        public static TTarget BrowsePhotos<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.BrowsePhotos);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Bullets"/></summary>
        public static TTarget Bullets<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Bullets);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Calculator"/></summary>
        public static TTarget Calculator<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Calculator);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Calendar"/></summary>
        public static TTarget Calendar<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Calendar);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.CalendarDay"/></summary>
        public static TTarget CalendarDay<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.CalendarDay);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.CalendarReply"/></summary>
        public static TTarget CalendarReply<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.CalendarReply);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.CalendarWeek"/></summary>
        public static TTarget CalendarWeek<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.CalendarWeek);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Camera"/></summary>
        public static TTarget Camera<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Camera);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Cancel"/></summary>
        public static TTarget Cancel<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Cancel);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Caption"/></summary>
        public static TTarget Caption<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Caption);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.CellPhone"/></summary>
        public static TTarget CellPhone<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.CellPhone);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Character"/></summary>
        public static TTarget Character<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Character);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Clear"/></summary>
        public static TTarget Clear<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Clear);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ClearSelection"/></summary>
        public static TTarget ClearSelection<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ClearSelection);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Clock"/></summary>
        public static TTarget Clock<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Clock);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ClosedCaption"/></summary>
        public static TTarget ClosedCaption<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ClosedCaption);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ClosePane"/></summary>
        public static TTarget ClosePane<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ClosePane);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Comment"/></summary>
        public static TTarget Comment<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Comment);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Contact"/></summary>
        public static TTarget Contact<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Contact);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Contact2"/></summary>
        public static TTarget Contact2<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Contact2);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ContactInfo"/></summary>
        public static TTarget ContactInfo<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ContactInfo);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ContactPresence"/></summary>
        public static TTarget ContactPresence<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ContactPresence);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Copy"/></summary>
        public static TTarget Copy<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Copy);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Crop"/></summary>
        public static TTarget Crop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Crop);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Cut"/></summary>
        public static TTarget Cut<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Cut);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Delete"/></summary>
        public static TTarget Delete<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Delete);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Directions"/></summary>
        public static TTarget Directions<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Directions);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.DisableUpdates"/></summary>
        public static TTarget DisableUpdates<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.DisableUpdates);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.DisconnectDrive"/></summary>
        public static TTarget DisconnectDrive<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.DisconnectDrive);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Dislike"/></summary>
        public static TTarget Dislike<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Dislike);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.DockBottom"/></summary>
        public static TTarget DockBottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.DockBottom);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.DockLeft"/></summary>
        public static TTarget DockLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.DockLeft);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.DockRight"/></summary>
        public static TTarget DockRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.DockRight);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Document"/></summary>
        public static TTarget Document<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Document);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Download"/></summary>
        public static TTarget Download<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Download);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Edit"/></summary>
        public static TTarget Edit<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Edit);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Emoji"/></summary>
        public static TTarget Emoji<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Emoji);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Emoji2"/></summary>
        public static TTarget Emoji2<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Emoji2);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Favorite"/></summary>
        public static TTarget Favorite<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Favorite);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Filter"/></summary>
        public static TTarget Filter<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Filter);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Find"/></summary>
        public static TTarget Find<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Find);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Flag"/></summary>
        public static TTarget Flag<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Flag);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Folder"/></summary>
        public static TTarget Folder<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Folder);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Font"/></summary>
        public static TTarget Font<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Font);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.FontColor"/></summary>
        public static TTarget FontColor<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.FontColor);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.FontDecrease"/></summary>
        public static TTarget FontDecrease<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.FontDecrease);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.FontIncrease"/></summary>
        public static TTarget FontIncrease<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.FontIncrease);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.FontSize"/></summary>
        public static TTarget FontSize<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.FontSize);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Forward"/></summary>
        public static TTarget Forward<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Forward);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.FourBars"/></summary>
        public static TTarget FourBars<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.FourBars);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.FullScreen"/></summary>
        public static TTarget FullScreen<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.FullScreen);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.GlobalNavigationButton"/></summary>
        public static TTarget GlobalNavigationButton<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.GlobalNavigationButton);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Globe"/></summary>
        public static TTarget Globe<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Globe);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Go"/></summary>
        public static TTarget Go<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Go);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.GoToStart"/></summary>
        public static TTarget GoToStart<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.GoToStart);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.GoToToday"/></summary>
        public static TTarget GoToToday<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.GoToToday);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.HangUp"/></summary>
        public static TTarget HangUp<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.HangUp);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Help"/></summary>
        public static TTarget Help<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Help);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.HideBcc"/></summary>
        public static TTarget HideBcc<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.HideBcc);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Highlight"/></summary>
        public static TTarget Highlight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Highlight);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Home"/></summary>
        public static TTarget Home<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Home);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Import"/></summary>
        public static TTarget Import<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Import);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ImportAll"/></summary>
        public static TTarget ImportAll<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ImportAll);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Important"/></summary>
        public static TTarget Important<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Important);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Italic"/></summary>
        public static TTarget Italic<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Italic);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Keyboard"/></summary>
        public static TTarget Keyboard<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Keyboard);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.LeaveChat"/></summary>
        public static TTarget LeaveChat<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.LeaveChat);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Library"/></summary>
        public static TTarget Library<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Library);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Like"/></summary>
        public static TTarget Like<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Like);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.LikeDislike"/></summary>
        public static TTarget LikeDislike<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.LikeDislike);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Link"/></summary>
        public static TTarget Link<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Link);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.List"/></summary>
        public static TTarget List<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.List);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Mail"/></summary>
        public static TTarget Mail<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Mail);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MailFilled"/></summary>
        public static TTarget MailFilled<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.MailFilled);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MailForward"/></summary>
        public static TTarget MailForward<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.MailForward);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MailReply"/></summary>
        public static TTarget MailReply<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.MailReply);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MailReplyAll"/></summary>
        public static TTarget MailReplyAll<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.MailReplyAll);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Manage"/></summary>
        public static TTarget Manage<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Manage);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Map"/></summary>
        public static TTarget Map<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Map);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MapDrive"/></summary>
        public static TTarget MapDrive<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.MapDrive);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MapPin"/></summary>
        public static TTarget MapPin<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.MapPin);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Memo"/></summary>
        public static TTarget Memo<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Memo);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Message"/></summary>
        public static TTarget Message<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Message);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Microphone"/></summary>
        public static TTarget Microphone<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Microphone);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.More"/></summary>
        public static TTarget More<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.More);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MoveToFolder"/></summary>
        public static TTarget MoveToFolder<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.MoveToFolder);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.MusicInfo"/></summary>
        public static TTarget MusicInfo<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.MusicInfo);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Mute"/></summary>
        public static TTarget Mute<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Mute);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.NewFolder"/></summary>
        public static TTarget NewFolder<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.NewFolder);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.NewWindow"/></summary>
        public static TTarget NewWindow<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.NewWindow);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Next"/></summary>
        public static TTarget Next<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Next);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.OneBar"/></summary>
        public static TTarget OneBar<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.OneBar);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.OpenFile"/></summary>
        public static TTarget OpenFile<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.OpenFile);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.OpenLocal"/></summary>
        public static TTarget OpenLocal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.OpenLocal);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.OpenPane"/></summary>
        public static TTarget OpenPane<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.OpenPane);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.OpenWith"/></summary>
        public static TTarget OpenWith<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.OpenWith);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Orientation"/></summary>
        public static TTarget Orientation<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Orientation);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.OtherUser"/></summary>
        public static TTarget OtherUser<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.OtherUser);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.OutlineStar"/></summary>
        public static TTarget OutlineStar<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.OutlineStar);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Page"/></summary>
        public static TTarget Page<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Page);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Page2"/></summary>
        public static TTarget Page2<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Page2);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Paste"/></summary>
        public static TTarget Paste<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Paste);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Pause"/></summary>
        public static TTarget Pause<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Pause);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.People"/></summary>
        public static TTarget People<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.People);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Permissions"/></summary>
        public static TTarget Permissions<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Permissions);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Phone"/></summary>
        public static TTarget Phone<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Phone);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.PhoneBook"/></summary>
        public static TTarget PhoneBook<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.PhoneBook);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Pictures"/></summary>
        public static TTarget Pictures<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Pictures);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Pin"/></summary>
        public static TTarget Pin<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Pin);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Placeholder"/></summary>
        public static TTarget Placeholder<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Placeholder);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Play"/></summary>
        public static TTarget Play<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Play);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.PostUpdate"/></summary>
        public static TTarget PostUpdate<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.PostUpdate);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Preview"/></summary>
        public static TTarget Preview<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Preview);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.PreviewLink"/></summary>
        public static TTarget PreviewLink<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.PreviewLink);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Previous"/></summary>
        public static TTarget Previous<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Previous);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Print"/></summary>
        public static TTarget Print<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Print);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Priority"/></summary>
        public static TTarget Priority<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Priority);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ProtectedDocument"/></summary>
        public static TTarget ProtectedDocument<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ProtectedDocument);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Read"/></summary>
        public static TTarget Read<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Read);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Redo"/></summary>
        public static TTarget Redo<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Redo);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Refresh"/></summary>
        public static TTarget Refresh<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Refresh);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Remote"/></summary>
        public static TTarget Remote<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Remote);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Remove"/></summary>
        public static TTarget Remove<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Remove);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Rename"/></summary>
        public static TTarget Rename<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Rename);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Repair"/></summary>
        public static TTarget Repair<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Repair);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.RepeatAll"/></summary>
        public static TTarget RepeatAll<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.RepeatAll);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.RepeatOne"/></summary>
        public static TTarget RepeatOne<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.RepeatOne);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ReportHacked"/></summary>
        public static TTarget ReportHacked<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ReportHacked);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ReShare"/></summary>
        public static TTarget ReShare<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ReShare);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Rotate"/></summary>
        public static TTarget Rotate<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Rotate);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.RotateCamera"/></summary>
        public static TTarget RotateCamera<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.RotateCamera);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Save"/></summary>
        public static TTarget Save<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Save);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SaveLocal"/></summary>
        public static TTarget SaveLocal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.SaveLocal);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Scan"/></summary>
        public static TTarget Scan<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Scan);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SelectAll"/></summary>
        public static TTarget SelectAll<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.SelectAll);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Send"/></summary>
        public static TTarget Send<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Send);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SetLockScreen"/></summary>
        public static TTarget SetLockScreen<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.SetLockScreen);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SetTile"/></summary>
        public static TTarget SetTile<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.SetTile);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Setting"/></summary>
        public static TTarget Setting<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Setting);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Share"/></summary>
        public static TTarget Share<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Share);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Shop"/></summary>
        public static TTarget Shop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Shop);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ShowBcc"/></summary>
        public static TTarget ShowBcc<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ShowBcc);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ShowResults"/></summary>
        public static TTarget ShowResults<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ShowResults);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Shuffle"/></summary>
        public static TTarget Shuffle<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Shuffle);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SlideShow"/></summary>
        public static TTarget SlideShow<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.SlideShow);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SolidStar"/></summary>
        public static TTarget SolidStar<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.SolidStar);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Sort"/></summary>
        public static TTarget Sort<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Sort);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Stop"/></summary>
        public static TTarget Stop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Stop);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.StopSlideShow"/></summary>
        public static TTarget StopSlideShow<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.StopSlideShow);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Street"/></summary>
        public static TTarget Street<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Street);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Switch"/></summary>
        public static TTarget Switch<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Switch);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SwitchApps"/></summary>
        public static TTarget SwitchApps<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.SwitchApps);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Sync"/></summary>
        public static TTarget Sync<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Sync);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.SyncFolder"/></summary>
        public static TTarget SyncFolder<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.SyncFolder);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Tag"/></summary>
        public static TTarget Tag<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Tag);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Target"/></summary>
        public static TTarget Target<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Target);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ThreeBars"/></summary>
        public static TTarget ThreeBars<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ThreeBars);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.TouchPointer"/></summary>
        public static TTarget TouchPointer<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.TouchPointer);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Trim"/></summary>
        public static TTarget Trim<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Trim);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.TwoBars"/></summary>
        public static TTarget TwoBars<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.TwoBars);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.TwoPage"/></summary>
        public static TTarget TwoPage<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.TwoPage);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Underline"/></summary>
        public static TTarget Underline<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Underline);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Undo"/></summary>
        public static TTarget Undo<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Undo);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.UnFavorite"/></summary>
        public static TTarget UnFavorite<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.UnFavorite);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.UnPin"/></summary>
        public static TTarget UnPin<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.UnPin);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.UnSyncFolder"/></summary>
        public static TTarget UnSyncFolder<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.UnSyncFolder);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Up"/></summary>
        public static TTarget Up<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Up);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Upload"/></summary>
        public static TTarget Upload<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Upload);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Video"/></summary>
        public static TTarget Video<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Video);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.VideoChat"/></summary>
        public static TTarget VideoChat<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.VideoChat);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.View"/></summary>
        public static TTarget View<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.View);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ViewAll"/></summary>
        public static TTarget ViewAll<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ViewAll);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Volume"/></summary>
        public static TTarget Volume<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Volume);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.WebCam"/></summary>
        public static TTarget WebCam<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.WebCam);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.World"/></summary>
        public static TTarget World<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.World);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.XboxOneConsole"/></summary>
        public static TTarget XboxOneConsole<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.XboxOneConsole);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ZeroBars"/></summary>
        public static TTarget ZeroBars<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ZeroBars);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.Zoom"/></summary>
        public static TTarget Zoom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.Zoom);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ZoomIn"/></summary>
        public static TTarget ZoomIn<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ZoomIn);

        /// <summary>Set to <see cref="Xaml.Controls.Symbol.ZoomOut"/></summary>
        public static TTarget ZoomOut<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Symbol> property) where TTarget : SymbolIconSource
        => property.Set(Xaml.Controls.Symbol.ZoomOut);
    }

    public static partial class TabViewExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.TabViewCloseButtonOverlayMode.Always"/></summary>
        public static TTarget Always<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TabViewCloseButtonOverlayMode> property) where TTarget : TabView
        => property.Set(Xaml.Controls.TabViewCloseButtonOverlayMode.Always);

        /// <summary>Set to <see cref="Xaml.Controls.TabViewCloseButtonOverlayMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TabViewCloseButtonOverlayMode> property) where TTarget : TabView
        => property.Set(Xaml.Controls.TabViewCloseButtonOverlayMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.TabViewCloseButtonOverlayMode.OnPointerOver"/></summary>
        public static TTarget OnPointerOver<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TabViewCloseButtonOverlayMode> property) where TTarget : TabView
        => property.Set(Xaml.Controls.TabViewCloseButtonOverlayMode.OnPointerOver);

        /// <summary>Set to <see cref="Xaml.Controls.TabViewWidthMode.Compact"/></summary>
        public static TTarget Compact<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TabViewWidthMode> property) where TTarget : TabView
        => property.Set(Xaml.Controls.TabViewWidthMode.Compact);

        /// <summary>Set to <see cref="Xaml.Controls.TabViewWidthMode.Equal"/></summary>
        public static TTarget Equal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TabViewWidthMode> property) where TTarget : TabView
        => property.Set(Xaml.Controls.TabViewWidthMode.Equal);

        /// <summary>Set to <see cref="Xaml.Controls.TabViewWidthMode.SizeToContent"/></summary>
        public static TTarget SizeToContent<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TabViewWidthMode> property) where TTarget : TabView
        => property.Set(Xaml.Controls.TabViewWidthMode.SizeToContent);
    }

    public static partial class TeachingTipExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipHeroContentPlacementMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipHeroContentPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipHeroContentPlacementMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipHeroContentPlacementMode.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipHeroContentPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipHeroContentPlacementMode.Bottom);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipHeroContentPlacementMode.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipHeroContentPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipHeroContentPlacementMode.Top);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipPlacementMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipPlacementMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipPlacementMode.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipPlacementMode.Bottom);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipPlacementMode.BottomLeft"/></summary>
        public static TTarget BottomLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipPlacementMode.BottomLeft);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipPlacementMode.BottomRight"/></summary>
        public static TTarget BottomRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipPlacementMode.BottomRight);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipPlacementMode.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipPlacementMode.Center);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipPlacementMode.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipPlacementMode.Left);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipPlacementMode.LeftBottom"/></summary>
        public static TTarget LeftBottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipPlacementMode.LeftBottom);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipPlacementMode.LeftTop"/></summary>
        public static TTarget LeftTop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipPlacementMode.LeftTop);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipPlacementMode.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipPlacementMode.Right);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipPlacementMode.RightBottom"/></summary>
        public static TTarget RightBottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipPlacementMode.RightBottom);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipPlacementMode.RightTop"/></summary>
        public static TTarget RightTop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipPlacementMode.RightTop);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipPlacementMode.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipPlacementMode.Top);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipPlacementMode.TopLeft"/></summary>
        public static TTarget TopLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipPlacementMode.TopLeft);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipPlacementMode.TopRight"/></summary>
        public static TTarget TopRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipPlacementMode> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipPlacementMode.TopRight);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipTailVisibility.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipTailVisibility> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipTailVisibility.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipTailVisibility.Collapsed"/></summary>
        public static TTarget Collapsed<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipTailVisibility> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipTailVisibility.Collapsed);

        /// <summary>Set to <see cref="Xaml.Controls.TeachingTipTailVisibility.Visible"/></summary>
        public static TTarget Visible<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TeachingTipTailVisibility> property) where TTarget : TeachingTip
        => property.Set(Xaml.Controls.TeachingTipTailVisibility.Visible);
    }

    public static partial class TextBlockExtensions
    {
        /// <summary>Set to <see cref="Xaml.LineStackingStrategy.BaselineToBaseline"/></summary>
        public static TTarget BaselineToBaseline<TTarget>(this DependencyProperty<TTarget, Xaml.LineStackingStrategy> property) where TTarget : TextBlock
        => property.Set(Xaml.LineStackingStrategy.BaselineToBaseline);

        /// <summary>Set to <see cref="Xaml.LineStackingStrategy.BlockLineHeight"/></summary>
        public static TTarget BlockLineHeight<TTarget>(this DependencyProperty<TTarget, Xaml.LineStackingStrategy> property) where TTarget : TextBlock
        => property.Set(Xaml.LineStackingStrategy.BlockLineHeight);

        /// <summary>Set to <see cref="Xaml.LineStackingStrategy.MaxHeight"/></summary>
        public static TTarget MaxHeight<TTarget>(this DependencyProperty<TTarget, Xaml.LineStackingStrategy> property) where TTarget : TextBlock
        => property.Set(Xaml.LineStackingStrategy.MaxHeight);

        /// <summary>Set to <see cref="Xaml.OpticalMarginAlignment.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.OpticalMarginAlignment> property) where TTarget : TextBlock
        => property.Set(Xaml.OpticalMarginAlignment.None);

        /// <summary>Set to <see cref="Xaml.OpticalMarginAlignment.TrimSideBearings"/></summary>
        public static TTarget TrimSideBearings<TTarget>(this DependencyProperty<TTarget, Xaml.OpticalMarginAlignment> property) where TTarget : TextBlock
        => property.Set(Xaml.OpticalMarginAlignment.TrimSideBearings);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : TextBlock
        => property.Set(Xaml.TextAlignment.Center);

        /// <summary>Set to <see cref="Xaml.TextAlignment.DetectFromContent"/></summary>
        public static TTarget DetectFromContent<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : TextBlock
        => property.Set(Xaml.TextAlignment.DetectFromContent);

        /// <summary>Set to <see cref="Xaml.TextAlignment.End"/></summary>
        public static TTarget End<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : TextBlock
        => property.Set(Xaml.TextAlignment.End);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Justify"/></summary>
        public static TTarget Justify<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : TextBlock
        => property.Set(Xaml.TextAlignment.Justify);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : TextBlock
        => property.Set(Xaml.TextAlignment.Left);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : TextBlock
        => property.Set(Xaml.TextAlignment.Right);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Start"/></summary>
        public static TTarget Start<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : TextBlock
        => property.Set(Xaml.TextAlignment.Start);

        /// <summary>Set to <see cref="Xaml.TextLineBounds.Full"/></summary>
        public static TTarget Full<TTarget>(this DependencyProperty<TTarget, Xaml.TextLineBounds> property) where TTarget : TextBlock
        => property.Set(Xaml.TextLineBounds.Full);

        /// <summary>Set to <see cref="Xaml.TextLineBounds.Tight"/></summary>
        public static TTarget Tight<TTarget>(this DependencyProperty<TTarget, Xaml.TextLineBounds> property) where TTarget : TextBlock
        => property.Set(Xaml.TextLineBounds.Tight);

        /// <summary>Set to <see cref="Xaml.TextLineBounds.TrimToBaseline"/></summary>
        public static TTarget TrimToBaseline<TTarget>(this DependencyProperty<TTarget, Xaml.TextLineBounds> property) where TTarget : TextBlock
        => property.Set(Xaml.TextLineBounds.TrimToBaseline);

        /// <summary>Set to <see cref="Xaml.TextLineBounds.TrimToCapHeight"/></summary>
        public static TTarget TrimToCapHeight<TTarget>(this DependencyProperty<TTarget, Xaml.TextLineBounds> property) where TTarget : TextBlock
        => property.Set(Xaml.TextLineBounds.TrimToCapHeight);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : TextBlock
        => property.Set(Xaml.TextReadingOrder.Default);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.DetectFromContent"/></summary>
        public static TTarget DetectFromContent<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : TextBlock
        => property.Set(Xaml.TextReadingOrder.DetectFromContent);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.UseFlowDirection"/></summary>
        public static TTarget UseFlowDirection<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : TextBlock
        => property.Set(Xaml.TextReadingOrder.UseFlowDirection);

        /// <summary>Set to <see cref="Xaml.TextTrimming.CharacterEllipsis"/></summary>
        public static TTarget CharacterEllipsis<TTarget>(this DependencyProperty<TTarget, Xaml.TextTrimming> property) where TTarget : TextBlock
        => property.Set(Xaml.TextTrimming.CharacterEllipsis);

        /// <summary>Set to <see cref="Xaml.TextTrimming.Clip"/></summary>
        public static TTarget Clip<TTarget>(this DependencyProperty<TTarget, Xaml.TextTrimming> property) where TTarget : TextBlock
        => property.Set(Xaml.TextTrimming.Clip);

        /// <summary>Set to <see cref="Xaml.TextTrimming.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.TextTrimming> property) where TTarget : TextBlock
        => property.Set(Xaml.TextTrimming.None);

        /// <summary>Set to <see cref="Xaml.TextTrimming.WordEllipsis"/></summary>
        public static TTarget WordEllipsis<TTarget>(this DependencyProperty<TTarget, Xaml.TextTrimming> property) where TTarget : TextBlock
        => property.Set(Xaml.TextTrimming.WordEllipsis);

        /// <summary>Set to <see cref="Xaml.TextWrapping.NoWrap"/></summary>
        public static TTarget NoWrap<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : TextBlock
        => property.Set(Xaml.TextWrapping.NoWrap);

        /// <summary>Set to <see cref="Xaml.TextWrapping.Wrap"/></summary>
        public static TTarget Wrap<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : TextBlock
        => property.Set(Xaml.TextWrapping.Wrap);

        /// <summary>Set to <see cref="Xaml.TextWrapping.WrapWholeWords"/></summary>
        public static TTarget WrapWholeWords<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : TextBlock
        => property.Set(Xaml.TextWrapping.WrapWholeWords);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Condensed"/></summary>
        public static TTarget Condensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.FontStretch.Condensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Expanded"/></summary>
        public static TTarget Expanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.FontStretch.Expanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.ExtraCondensed"/></summary>
        public static TTarget ExtraCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.FontStretch.ExtraCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.ExtraExpanded"/></summary>
        public static TTarget ExtraExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.FontStretch.ExtraExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.FontStretch.Normal);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.SemiCondensed"/></summary>
        public static TTarget SemiCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.FontStretch.SemiCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.SemiExpanded"/></summary>
        public static TTarget SemiExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.FontStretch.SemiExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.UltraCondensed"/></summary>
        public static TTarget UltraCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.FontStretch.UltraCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.UltraExpanded"/></summary>
        public static TTarget UltraExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.FontStretch.UltraExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Undefined"/></summary>
        public static TTarget Undefined<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.FontStretch.Undefined);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Italic"/></summary>
        public static TTarget Italic<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.FontStyle.Italic);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.FontStyle.Normal);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Oblique"/></summary>
        public static TTarget Oblique<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.FontStyle.Oblique);

        /// <summary>Set to <see cref="Windows.UI.Text.TextDecorations.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.TextDecorations> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.TextDecorations.None);

        /// <summary>Set to <see cref="Windows.UI.Text.TextDecorations.Strikethrough"/></summary>
        public static TTarget Strikethrough<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.TextDecorations> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.TextDecorations.Strikethrough);

        /// <summary>Set to <see cref="Windows.UI.Text.TextDecorations.Underline"/></summary>
        public static TTarget Underline<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.TextDecorations> property) where TTarget : TextBlock
        => property.Set(Windows.UI.Text.TextDecorations.Underline);
    }

    public static partial class TextBoxExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.CandidateWindowAlignment.BottomEdge"/></summary>
        public static TTarget BottomEdge<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CandidateWindowAlignment> property) where TTarget : TextBox
        => property.Set(Xaml.Controls.CandidateWindowAlignment.BottomEdge);

        /// <summary>Set to <see cref="Xaml.Controls.CandidateWindowAlignment.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CandidateWindowAlignment> property) where TTarget : TextBox
        => property.Set(Xaml.Controls.CandidateWindowAlignment.Default);

        /// <summary>Set to <see cref="Xaml.Controls.CharacterCasing.Lower"/></summary>
        public static TTarget Lower<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CharacterCasing> property) where TTarget : TextBox
        => property.Set(Xaml.Controls.CharacterCasing.Lower);

        /// <summary>Set to <see cref="Xaml.Controls.CharacterCasing.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CharacterCasing> property) where TTarget : TextBox
        => property.Set(Xaml.Controls.CharacterCasing.Normal);

        /// <summary>Set to <see cref="Xaml.Controls.CharacterCasing.Upper"/></summary>
        public static TTarget Upper<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.CharacterCasing> property) where TTarget : TextBox
        => property.Set(Xaml.Controls.CharacterCasing.Upper);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : TextBox
        => property.Set(Xaml.TextAlignment.Center);

        /// <summary>Set to <see cref="Xaml.TextAlignment.DetectFromContent"/></summary>
        public static TTarget DetectFromContent<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : TextBox
        => property.Set(Xaml.TextAlignment.DetectFromContent);

        /// <summary>Set to <see cref="Xaml.TextAlignment.End"/></summary>
        public static TTarget End<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : TextBox
        => property.Set(Xaml.TextAlignment.End);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Justify"/></summary>
        public static TTarget Justify<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : TextBox
        => property.Set(Xaml.TextAlignment.Justify);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : TextBox
        => property.Set(Xaml.TextAlignment.Left);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : TextBox
        => property.Set(Xaml.TextAlignment.Right);

        /// <summary>Set to <see cref="Xaml.TextAlignment.Start"/></summary>
        public static TTarget Start<TTarget>(this DependencyProperty<TTarget, Xaml.TextAlignment> property) where TTarget : TextBox
        => property.Set(Xaml.TextAlignment.Start);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.Default"/></summary>
        public static TTarget Default<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : TextBox
        => property.Set(Xaml.TextReadingOrder.Default);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.DetectFromContent"/></summary>
        public static TTarget DetectFromContent<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : TextBox
        => property.Set(Xaml.TextReadingOrder.DetectFromContent);

        /// <summary>Set to <see cref="Xaml.TextReadingOrder.UseFlowDirection"/></summary>
        public static TTarget UseFlowDirection<TTarget>(this DependencyProperty<TTarget, Xaml.TextReadingOrder> property) where TTarget : TextBox
        => property.Set(Xaml.TextReadingOrder.UseFlowDirection);

        /// <summary>Set to <see cref="Xaml.TextWrapping.NoWrap"/></summary>
        public static TTarget NoWrap<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : TextBox
        => property.Set(Xaml.TextWrapping.NoWrap);

        /// <summary>Set to <see cref="Xaml.TextWrapping.Wrap"/></summary>
        public static TTarget Wrap<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : TextBox
        => property.Set(Xaml.TextWrapping.Wrap);

        /// <summary>Set to <see cref="Xaml.TextWrapping.WrapWholeWords"/></summary>
        public static TTarget WrapWholeWords<TTarget>(this DependencyProperty<TTarget, Xaml.TextWrapping> property) where TTarget : TextBox
        => property.Set(Xaml.TextWrapping.WrapWholeWords);
    }

    public static partial class TextElementExtensions
    {
        /// <summary>Set to <see cref="Xaml.Input.KeyTipPlacementMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> property) where TTarget : TextElement
        => property.Set(Xaml.Input.KeyTipPlacementMode.Auto);

        /// <summary>Set to <see cref="Xaml.Input.KeyTipPlacementMode.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> property) where TTarget : TextElement
        => property.Set(Xaml.Input.KeyTipPlacementMode.Bottom);

        /// <summary>Set to <see cref="Xaml.Input.KeyTipPlacementMode.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> property) where TTarget : TextElement
        => property.Set(Xaml.Input.KeyTipPlacementMode.Center);

        /// <summary>Set to <see cref="Xaml.Input.KeyTipPlacementMode.Hidden"/></summary>
        public static TTarget Hidden<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> property) where TTarget : TextElement
        => property.Set(Xaml.Input.KeyTipPlacementMode.Hidden);

        /// <summary>Set to <see cref="Xaml.Input.KeyTipPlacementMode.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> property) where TTarget : TextElement
        => property.Set(Xaml.Input.KeyTipPlacementMode.Left);

        /// <summary>Set to <see cref="Xaml.Input.KeyTipPlacementMode.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> property) where TTarget : TextElement
        => property.Set(Xaml.Input.KeyTipPlacementMode.Right);

        /// <summary>Set to <see cref="Xaml.Input.KeyTipPlacementMode.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> property) where TTarget : TextElement
        => property.Set(Xaml.Input.KeyTipPlacementMode.Top);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Condensed"/></summary>
        public static TTarget Condensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.FontStretch.Condensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Expanded"/></summary>
        public static TTarget Expanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.FontStretch.Expanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.ExtraCondensed"/></summary>
        public static TTarget ExtraCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.FontStretch.ExtraCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.ExtraExpanded"/></summary>
        public static TTarget ExtraExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.FontStretch.ExtraExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.FontStretch.Normal);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.SemiCondensed"/></summary>
        public static TTarget SemiCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.FontStretch.SemiCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.SemiExpanded"/></summary>
        public static TTarget SemiExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.FontStretch.SemiExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.UltraCondensed"/></summary>
        public static TTarget UltraCondensed<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.FontStretch.UltraCondensed);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.UltraExpanded"/></summary>
        public static TTarget UltraExpanded<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.FontStretch.UltraExpanded);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStretch.Undefined"/></summary>
        public static TTarget Undefined<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStretch> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.FontStretch.Undefined);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Italic"/></summary>
        public static TTarget Italic<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.FontStyle.Italic);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Normal"/></summary>
        public static TTarget Normal<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.FontStyle.Normal);

        /// <summary>Set to <see cref="Windows.UI.Text.FontStyle.Oblique"/></summary>
        public static TTarget Oblique<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.FontStyle> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.FontStyle.Oblique);

        /// <summary>Set to <see cref="Windows.UI.Text.TextDecorations.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.TextDecorations> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.TextDecorations.None);

        /// <summary>Set to <see cref="Windows.UI.Text.TextDecorations.Strikethrough"/></summary>
        public static TTarget Strikethrough<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.TextDecorations> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.TextDecorations.Strikethrough);

        /// <summary>Set to <see cref="Windows.UI.Text.TextDecorations.Underline"/></summary>
        public static TTarget Underline<TTarget>(this DependencyProperty<TTarget, Windows.UI.Text.TextDecorations> property) where TTarget : TextElement
        => property.Set(Windows.UI.Text.TextDecorations.Underline);
    }

    public static partial class TileBrushExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.AlignmentX.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.Media.AlignmentX> property) where TTarget : TileBrush
        => property.Set(Xaml.Media.AlignmentX.Center);

        /// <summary>Set to <see cref="Xaml.Media.AlignmentX.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Media.AlignmentX> property) where TTarget : TileBrush
        => property.Set(Xaml.Media.AlignmentX.Left);

        /// <summary>Set to <see cref="Xaml.Media.AlignmentX.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Media.AlignmentX> property) where TTarget : TileBrush
        => property.Set(Xaml.Media.AlignmentX.Right);

        /// <summary>Set to <see cref="Xaml.Media.AlignmentY.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Media.AlignmentY> property) where TTarget : TileBrush
        => property.Set(Xaml.Media.AlignmentY.Bottom);

        /// <summary>Set to <see cref="Xaml.Media.AlignmentY.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.Media.AlignmentY> property) where TTarget : TileBrush
        => property.Set(Xaml.Media.AlignmentY.Center);

        /// <summary>Set to <see cref="Xaml.Media.AlignmentY.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Media.AlignmentY> property) where TTarget : TileBrush
        => property.Set(Xaml.Media.AlignmentY.Top);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.Fill"/></summary>
        public static TTarget Fill<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : TileBrush
        => property.Set(Xaml.Media.Stretch.Fill);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : TileBrush
        => property.Set(Xaml.Media.Stretch.None);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.Uniform"/></summary>
        public static TTarget Uniform<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : TileBrush
        => property.Set(Xaml.Media.Stretch.Uniform);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.UniformToFill"/></summary>
        public static TTarget UniformToFill<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : TileBrush
        => property.Set(Xaml.Media.Stretch.UniformToFill);
    }

    public static partial class TimelineExtensions
    {
        /// <summary>Set to <see cref="Xaml.Media.Animation.FillBehavior.HoldEnd"/></summary>
        public static TTarget HoldEnd<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Animation.FillBehavior> property) where TTarget : Timeline
        => property.Set(Xaml.Media.Animation.FillBehavior.HoldEnd);

        /// <summary>Set to <see cref="Xaml.Media.Animation.FillBehavior.Stop"/></summary>
        public static TTarget Stop<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Animation.FillBehavior> property) where TTarget : Timeline
        => property.Set(Xaml.Media.Animation.FillBehavior.Stop);
    }

    public static partial class TimePickerExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : TimePicker
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Auto);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.Off"/></summary>
        public static TTarget Off<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : TimePicker
        => property.Set(Xaml.Controls.LightDismissOverlayMode.Off);

        /// <summary>Set to <see cref="Xaml.Controls.LightDismissOverlayMode.On"/></summary>
        public static TTarget On<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.LightDismissOverlayMode> property) where TTarget : TimePicker
        => property.Set(Xaml.Controls.LightDismissOverlayMode.On);
    }

    public static partial class TreeViewExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.TreeViewSelectionMode.Multiple"/></summary>
        public static TTarget Multiple<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TreeViewSelectionMode> property) where TTarget : TreeView
        => property.Set(Xaml.Controls.TreeViewSelectionMode.Multiple);

        /// <summary>Set to <see cref="Xaml.Controls.TreeViewSelectionMode.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TreeViewSelectionMode> property) where TTarget : TreeView
        => property.Set(Xaml.Controls.TreeViewSelectionMode.None);

        /// <summary>Set to <see cref="Xaml.Controls.TreeViewSelectionMode.Single"/></summary>
        public static TTarget Single<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TreeViewSelectionMode> property) where TTarget : TreeView
        => property.Set(Xaml.Controls.TreeViewSelectionMode.Single);
    }

    public static partial class TreeViewItemTemplateSettingsExtensions
    {
        /// <summary>Set to <see cref="Xaml.Visibility.Collapsed"/></summary>
        public static TTarget Collapsed<TTarget>(this DependencyProperty<TTarget, Xaml.Visibility> property) where TTarget : TreeViewItemTemplateSettings
        => property.Set(Xaml.Visibility.Collapsed);

        /// <summary>Set to <see cref="Xaml.Visibility.Visible"/></summary>
        public static TTarget Visible<TTarget>(this DependencyProperty<TTarget, Xaml.Visibility> property) where TTarget : TreeViewItemTemplateSettings
        => property.Set(Xaml.Visibility.Visible);
    }

    public static partial class TwoPaneViewExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.TwoPaneViewMode.SinglePane"/></summary>
        public static TTarget SinglePane<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewMode> property) where TTarget : TwoPaneView
        => property.Set(Xaml.Controls.TwoPaneViewMode.SinglePane);

        /// <summary>Set to <see cref="Xaml.Controls.TwoPaneViewMode.Tall"/></summary>
        public static TTarget Tall<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewMode> property) where TTarget : TwoPaneView
        => property.Set(Xaml.Controls.TwoPaneViewMode.Tall);

        /// <summary>Set to <see cref="Xaml.Controls.TwoPaneViewMode.Wide"/></summary>
        public static TTarget Wide<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewMode> property) where TTarget : TwoPaneView
        => property.Set(Xaml.Controls.TwoPaneViewMode.Wide);

        /// <summary>Set to <see cref="Xaml.Controls.TwoPaneViewPriority.Pane1"/></summary>
        public static TTarget Pane1<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewPriority> property) where TTarget : TwoPaneView
        => property.Set(Xaml.Controls.TwoPaneViewPriority.Pane1);

        /// <summary>Set to <see cref="Xaml.Controls.TwoPaneViewPriority.Pane2"/></summary>
        public static TTarget Pane2<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewPriority> property) where TTarget : TwoPaneView
        => property.Set(Xaml.Controls.TwoPaneViewPriority.Pane2);

        /// <summary>Set to <see cref="Xaml.Controls.TwoPaneViewTallModeConfiguration.BottomTop"/></summary>
        public static TTarget BottomTop<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewTallModeConfiguration> property) where TTarget : TwoPaneView
        => property.Set(Xaml.Controls.TwoPaneViewTallModeConfiguration.BottomTop);

        /// <summary>Set to <see cref="Xaml.Controls.TwoPaneViewTallModeConfiguration.SinglePane"/></summary>
        public static TTarget SinglePane<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewTallModeConfiguration> property) where TTarget : TwoPaneView
        => property.Set(Xaml.Controls.TwoPaneViewTallModeConfiguration.SinglePane);

        /// <summary>Set to <see cref="Xaml.Controls.TwoPaneViewTallModeConfiguration.TopBottom"/></summary>
        public static TTarget TopBottom<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewTallModeConfiguration> property) where TTarget : TwoPaneView
        => property.Set(Xaml.Controls.TwoPaneViewTallModeConfiguration.TopBottom);

        /// <summary>Set to <see cref="Xaml.Controls.TwoPaneViewWideModeConfiguration.LeftRight"/></summary>
        public static TTarget LeftRight<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewWideModeConfiguration> property) where TTarget : TwoPaneView
        => property.Set(Xaml.Controls.TwoPaneViewWideModeConfiguration.LeftRight);

        /// <summary>Set to <see cref="Xaml.Controls.TwoPaneViewWideModeConfiguration.RightLeft"/></summary>
        public static TTarget RightLeft<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewWideModeConfiguration> property) where TTarget : TwoPaneView
        => property.Set(Xaml.Controls.TwoPaneViewWideModeConfiguration.RightLeft);

        /// <summary>Set to <see cref="Xaml.Controls.TwoPaneViewWideModeConfiguration.SinglePane"/></summary>
        public static TTarget SinglePane<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.TwoPaneViewWideModeConfiguration> property) where TTarget : TwoPaneView
        => property.Set(Xaml.Controls.TwoPaneViewWideModeConfiguration.SinglePane);
    }

    public static partial class UIElementExtensions
    {
        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.AppBar"/></summary>
        public static TTarget AppBar<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.AppBar);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Button"/></summary>
        public static TTarget Button<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Button);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Calendar"/></summary>
        public static TTarget Calendar<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Calendar);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.CheckBox"/></summary>
        public static TTarget CheckBox<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.CheckBox);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.ComboBox"/></summary>
        public static TTarget ComboBox<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.ComboBox);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Custom"/></summary>
        public static TTarget Custom<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Custom);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.DataGrid"/></summary>
        public static TTarget DataGrid<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.DataGrid);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.DataItem"/></summary>
        public static TTarget DataItem<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.DataItem);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Document"/></summary>
        public static TTarget Document<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Document);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Edit"/></summary>
        public static TTarget Edit<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Edit);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.FlipView"/></summary>
        public static TTarget FlipView<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.FlipView);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Group"/></summary>
        public static TTarget Group<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Group);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Header"/></summary>
        public static TTarget Header<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Header);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.HeaderItem"/></summary>
        public static TTarget HeaderItem<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.HeaderItem);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Hyperlink"/></summary>
        public static TTarget Hyperlink<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Hyperlink);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Image"/></summary>
        public static TTarget Image<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Image);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.List"/></summary>
        public static TTarget List<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.List);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.ListItem"/></summary>
        public static TTarget ListItem<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.ListItem);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Menu"/></summary>
        public static TTarget Menu<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Menu);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.MenuBar"/></summary>
        public static TTarget MenuBar<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.MenuBar);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.MenuItem"/></summary>
        public static TTarget MenuItem<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.MenuItem);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Pane"/></summary>
        public static TTarget Pane<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Pane);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.ProgressBar"/></summary>
        public static TTarget ProgressBar<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.ProgressBar);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.RadioButton"/></summary>
        public static TTarget RadioButton<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.RadioButton);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.ScrollBar"/></summary>
        public static TTarget ScrollBar<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.ScrollBar);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.SemanticZoom"/></summary>
        public static TTarget SemanticZoom<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.SemanticZoom);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Separator"/></summary>
        public static TTarget Separator<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Separator);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Slider"/></summary>
        public static TTarget Slider<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Slider);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Spinner"/></summary>
        public static TTarget Spinner<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Spinner);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.SplitButton"/></summary>
        public static TTarget SplitButton<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.SplitButton);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.StatusBar"/></summary>
        public static TTarget StatusBar<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.StatusBar);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Tab"/></summary>
        public static TTarget Tab<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Tab);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.TabItem"/></summary>
        public static TTarget TabItem<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.TabItem);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Table"/></summary>
        public static TTarget Table<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Table);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Text"/></summary>
        public static TTarget Text<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Text);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Thumb"/></summary>
        public static TTarget Thumb<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Thumb);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.TitleBar"/></summary>
        public static TTarget TitleBar<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.TitleBar);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.ToolBar"/></summary>
        public static TTarget ToolBar<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.ToolBar);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.ToolTip"/></summary>
        public static TTarget ToolTip<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.ToolTip);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Tree"/></summary>
        public static TTarget Tree<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Tree);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.TreeItem"/></summary>
        public static TTarget TreeItem<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.TreeItem);

        /// <summary>Set to <see cref="Xaml.Automation.Peers.AutomationControlType.Window"/></summary>
        public static TTarget Window<TTarget>(this DependencyProperty<TTarget, Xaml.Automation.Peers.AutomationControlType> property) where TTarget : UIElement
        => property.Set(Xaml.Automation.Peers.AutomationControlType.Window);

        /// <summary>Set to <see cref="Xaml.ElementHighContrastAdjustment.Application"/></summary>
        public static TTarget Application<TTarget>(this DependencyProperty<TTarget, Xaml.ElementHighContrastAdjustment> property) where TTarget : UIElement
        => property.Set(Xaml.ElementHighContrastAdjustment.Application);

        /// <summary>Set to <see cref="Xaml.ElementHighContrastAdjustment.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.ElementHighContrastAdjustment> property) where TTarget : UIElement
        => property.Set(Xaml.ElementHighContrastAdjustment.Auto);

        /// <summary>Set to <see cref="Xaml.ElementHighContrastAdjustment.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.ElementHighContrastAdjustment> property) where TTarget : UIElement
        => property.Set(Xaml.ElementHighContrastAdjustment.None);

        /// <summary>Set to <see cref="Xaml.FocusState.Keyboard"/></summary>
        public static TTarget Keyboard<TTarget>(this DependencyProperty<TTarget, Xaml.FocusState> property) where TTarget : UIElement
        => property.Set(Xaml.FocusState.Keyboard);

        /// <summary>Set to <see cref="Xaml.FocusState.Pointer"/></summary>
        public static TTarget Pointer<TTarget>(this DependencyProperty<TTarget, Xaml.FocusState> property) where TTarget : UIElement
        => property.Set(Xaml.FocusState.Pointer);

        /// <summary>Set to <see cref="Xaml.FocusState.Programmatic"/></summary>
        public static TTarget Programmatic<TTarget>(this DependencyProperty<TTarget, Xaml.FocusState> property) where TTarget : UIElement
        => property.Set(Xaml.FocusState.Programmatic);

        /// <summary>Set to <see cref="Xaml.FocusState.Unfocused"/></summary>
        public static TTarget Unfocused<TTarget>(this DependencyProperty<TTarget, Xaml.FocusState> property) where TTarget : UIElement
        => property.Set(Xaml.FocusState.Unfocused);

        /// <summary>Set to <see cref="Xaml.Input.KeyboardAcceleratorPlacementMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyboardAcceleratorPlacementMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.KeyboardAcceleratorPlacementMode.Auto);

        /// <summary>Set to <see cref="Xaml.Input.KeyboardAcceleratorPlacementMode.Hidden"/></summary>
        public static TTarget Hidden<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyboardAcceleratorPlacementMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.KeyboardAcceleratorPlacementMode.Hidden);

        /// <summary>Set to <see cref="Xaml.Input.KeyboardNavigationMode.Cycle"/></summary>
        public static TTarget Cycle<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyboardNavigationMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.KeyboardNavigationMode.Cycle);

        /// <summary>Set to <see cref="Xaml.Input.KeyboardNavigationMode.Local"/></summary>
        public static TTarget Local<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyboardNavigationMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.KeyboardNavigationMode.Local);

        /// <summary>Set to <see cref="Xaml.Input.KeyboardNavigationMode.Once"/></summary>
        public static TTarget Once<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyboardNavigationMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.KeyboardNavigationMode.Once);

        /// <summary>Set to <see cref="Xaml.Input.KeyTipPlacementMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.KeyTipPlacementMode.Auto);

        /// <summary>Set to <see cref="Xaml.Input.KeyTipPlacementMode.Bottom"/></summary>
        public static TTarget Bottom<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.KeyTipPlacementMode.Bottom);

        /// <summary>Set to <see cref="Xaml.Input.KeyTipPlacementMode.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.KeyTipPlacementMode.Center);

        /// <summary>Set to <see cref="Xaml.Input.KeyTipPlacementMode.Hidden"/></summary>
        public static TTarget Hidden<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.KeyTipPlacementMode.Hidden);

        /// <summary>Set to <see cref="Xaml.Input.KeyTipPlacementMode.Left"/></summary>
        public static TTarget Left<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.KeyTipPlacementMode.Left);

        /// <summary>Set to <see cref="Xaml.Input.KeyTipPlacementMode.Right"/></summary>
        public static TTarget Right<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.KeyTipPlacementMode.Right);

        /// <summary>Set to <see cref="Xaml.Input.KeyTipPlacementMode.Top"/></summary>
        public static TTarget Top<TTarget>(this DependencyProperty<TTarget, Xaml.Input.KeyTipPlacementMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.KeyTipPlacementMode.Top);

        /// <summary>Set to <see cref="Xaml.Input.ManipulationModes.All"/></summary>
        public static TTarget All<TTarget>(this DependencyProperty<TTarget, Xaml.Input.ManipulationModes> property) where TTarget : UIElement
        => property.Set(Xaml.Input.ManipulationModes.All);

        /// <summary>Set to <see cref="Xaml.Input.ManipulationModes.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Input.ManipulationModes> property) where TTarget : UIElement
        => property.Set(Xaml.Input.ManipulationModes.None);

        /// <summary>Set to <see cref="Xaml.Input.ManipulationModes.Rotate"/></summary>
        public static TTarget Rotate<TTarget>(this DependencyProperty<TTarget, Xaml.Input.ManipulationModes> property) where TTarget : UIElement
        => property.Set(Xaml.Input.ManipulationModes.Rotate);

        /// <summary>Set to <see cref="Xaml.Input.ManipulationModes.RotateInertia"/></summary>
        public static TTarget RotateInertia<TTarget>(this DependencyProperty<TTarget, Xaml.Input.ManipulationModes> property) where TTarget : UIElement
        => property.Set(Xaml.Input.ManipulationModes.RotateInertia);

        /// <summary>Set to <see cref="Xaml.Input.ManipulationModes.Scale"/></summary>
        public static TTarget Scale<TTarget>(this DependencyProperty<TTarget, Xaml.Input.ManipulationModes> property) where TTarget : UIElement
        => property.Set(Xaml.Input.ManipulationModes.Scale);

        /// <summary>Set to <see cref="Xaml.Input.ManipulationModes.ScaleInertia"/></summary>
        public static TTarget ScaleInertia<TTarget>(this DependencyProperty<TTarget, Xaml.Input.ManipulationModes> property) where TTarget : UIElement
        => property.Set(Xaml.Input.ManipulationModes.ScaleInertia);

        /// <summary>Set to <see cref="Xaml.Input.ManipulationModes.System"/></summary>
        public static TTarget System<TTarget>(this DependencyProperty<TTarget, Xaml.Input.ManipulationModes> property) where TTarget : UIElement
        => property.Set(Xaml.Input.ManipulationModes.System);

        /// <summary>Set to <see cref="Xaml.Input.ManipulationModes.TranslateInertia"/></summary>
        public static TTarget TranslateInertia<TTarget>(this DependencyProperty<TTarget, Xaml.Input.ManipulationModes> property) where TTarget : UIElement
        => property.Set(Xaml.Input.ManipulationModes.TranslateInertia);

        /// <summary>Set to <see cref="Xaml.Input.ManipulationModes.TranslateRailsX"/></summary>
        public static TTarget TranslateRailsX<TTarget>(this DependencyProperty<TTarget, Xaml.Input.ManipulationModes> property) where TTarget : UIElement
        => property.Set(Xaml.Input.ManipulationModes.TranslateRailsX);

        /// <summary>Set to <see cref="Xaml.Input.ManipulationModes.TranslateRailsY"/></summary>
        public static TTarget TranslateRailsY<TTarget>(this DependencyProperty<TTarget, Xaml.Input.ManipulationModes> property) where TTarget : UIElement
        => property.Set(Xaml.Input.ManipulationModes.TranslateRailsY);

        /// <summary>Set to <see cref="Xaml.Input.ManipulationModes.TranslateX"/></summary>
        public static TTarget TranslateX<TTarget>(this DependencyProperty<TTarget, Xaml.Input.ManipulationModes> property) where TTarget : UIElement
        => property.Set(Xaml.Input.ManipulationModes.TranslateX);

        /// <summary>Set to <see cref="Xaml.Input.ManipulationModes.TranslateY"/></summary>
        public static TTarget TranslateY<TTarget>(this DependencyProperty<TTarget, Xaml.Input.ManipulationModes> property) where TTarget : UIElement
        => property.Set(Xaml.Input.ManipulationModes.TranslateY);

        /// <summary>Set to <see cref="Xaml.Input.XYFocusKeyboardNavigationMode.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Input.XYFocusKeyboardNavigationMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.XYFocusKeyboardNavigationMode.Auto);

        /// <summary>Set to <see cref="Xaml.Input.XYFocusKeyboardNavigationMode.Disabled"/></summary>
        public static TTarget Disabled<TTarget>(this DependencyProperty<TTarget, Xaml.Input.XYFocusKeyboardNavigationMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.XYFocusKeyboardNavigationMode.Disabled);

        /// <summary>Set to <see cref="Xaml.Input.XYFocusKeyboardNavigationMode.Enabled"/></summary>
        public static TTarget Enabled<TTarget>(this DependencyProperty<TTarget, Xaml.Input.XYFocusKeyboardNavigationMode> property) where TTarget : UIElement
        => property.Set(Xaml.Input.XYFocusKeyboardNavigationMode.Enabled);

        /// <summary>Set to <see cref="Xaml.Input.XYFocusNavigationStrategy.Auto"/></summary>
        public static TTarget Auto<TTarget>(this DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> property) where TTarget : UIElement
        => property.Set(Xaml.Input.XYFocusNavigationStrategy.Auto);

        /// <summary>Set to <see cref="Xaml.Input.XYFocusNavigationStrategy.NavigationDirectionDistance"/></summary>
        public static TTarget NavigationDirectionDistance<TTarget>(this DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> property) where TTarget : UIElement
        => property.Set(Xaml.Input.XYFocusNavigationStrategy.NavigationDirectionDistance);

        /// <summary>Set to <see cref="Xaml.Input.XYFocusNavigationStrategy.Projection"/></summary>
        public static TTarget Projection<TTarget>(this DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> property) where TTarget : UIElement
        => property.Set(Xaml.Input.XYFocusNavigationStrategy.Projection);

        /// <summary>Set to <see cref="Xaml.Input.XYFocusNavigationStrategy.RectilinearDistance"/></summary>
        public static TTarget RectilinearDistance<TTarget>(this DependencyProperty<TTarget, Xaml.Input.XYFocusNavigationStrategy> property) where TTarget : UIElement
        => property.Set(Xaml.Input.XYFocusNavigationStrategy.RectilinearDistance);

        /// <summary>Set to <see cref="Xaml.Media.ElementCompositeMode.Inherit"/></summary>
        public static TTarget Inherit<TTarget>(this DependencyProperty<TTarget, Xaml.Media.ElementCompositeMode> property) where TTarget : UIElement
        => property.Set(Xaml.Media.ElementCompositeMode.Inherit);

        /// <summary>Set to <see cref="Xaml.Media.ElementCompositeMode.MinBlend"/></summary>
        public static TTarget MinBlend<TTarget>(this DependencyProperty<TTarget, Xaml.Media.ElementCompositeMode> property) where TTarget : UIElement
        => property.Set(Xaml.Media.ElementCompositeMode.MinBlend);

        /// <summary>Set to <see cref="Xaml.Media.ElementCompositeMode.SourceOver"/></summary>
        public static TTarget SourceOver<TTarget>(this DependencyProperty<TTarget, Xaml.Media.ElementCompositeMode> property) where TTarget : UIElement
        => property.Set(Xaml.Media.ElementCompositeMode.SourceOver);

        /// <summary>Set to <see cref="Xaml.Visibility.Collapsed"/></summary>
        public static TTarget Collapsed<TTarget>(this DependencyProperty<TTarget, Xaml.Visibility> property) where TTarget : UIElement
        => property.Set(Xaml.Visibility.Collapsed);

        /// <summary>Set to <see cref="Xaml.Visibility.Visible"/></summary>
        public static TTarget Visible<TTarget>(this DependencyProperty<TTarget, Xaml.Visibility> property) where TTarget : UIElement
        => property.Set(Xaml.Visibility.Visible);
    }

    public static partial class UniformGridLayoutExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : UniformGridLayout
        => property.Set(Xaml.Controls.Orientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : UniformGridLayout
        => property.Set(Xaml.Controls.Orientation.Vertical);

        /// <summary>Set to <see cref="Xaml.Controls.UniformGridLayoutItemsJustification.Center"/></summary>
        public static TTarget Center<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.UniformGridLayoutItemsJustification> property) where TTarget : UniformGridLayout
        => property.Set(Xaml.Controls.UniformGridLayoutItemsJustification.Center);

        /// <summary>Set to <see cref="Xaml.Controls.UniformGridLayoutItemsJustification.End"/></summary>
        public static TTarget End<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.UniformGridLayoutItemsJustification> property) where TTarget : UniformGridLayout
        => property.Set(Xaml.Controls.UniformGridLayoutItemsJustification.End);

        /// <summary>Set to <see cref="Xaml.Controls.UniformGridLayoutItemsJustification.SpaceAround"/></summary>
        public static TTarget SpaceAround<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.UniformGridLayoutItemsJustification> property) where TTarget : UniformGridLayout
        => property.Set(Xaml.Controls.UniformGridLayoutItemsJustification.SpaceAround);

        /// <summary>Set to <see cref="Xaml.Controls.UniformGridLayoutItemsJustification.SpaceBetween"/></summary>
        public static TTarget SpaceBetween<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.UniformGridLayoutItemsJustification> property) where TTarget : UniformGridLayout
        => property.Set(Xaml.Controls.UniformGridLayoutItemsJustification.SpaceBetween);

        /// <summary>Set to <see cref="Xaml.Controls.UniformGridLayoutItemsJustification.SpaceEvenly"/></summary>
        public static TTarget SpaceEvenly<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.UniformGridLayoutItemsJustification> property) where TTarget : UniformGridLayout
        => property.Set(Xaml.Controls.UniformGridLayoutItemsJustification.SpaceEvenly);

        /// <summary>Set to <see cref="Xaml.Controls.UniformGridLayoutItemsJustification.Start"/></summary>
        public static TTarget Start<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.UniformGridLayoutItemsJustification> property) where TTarget : UniformGridLayout
        => property.Set(Xaml.Controls.UniformGridLayoutItemsJustification.Start);

        /// <summary>Set to <see cref="Xaml.Controls.UniformGridLayoutItemsStretch.Fill"/></summary>
        public static TTarget Fill<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.UniformGridLayoutItemsStretch> property) where TTarget : UniformGridLayout
        => property.Set(Xaml.Controls.UniformGridLayoutItemsStretch.Fill);

        /// <summary>Set to <see cref="Xaml.Controls.UniformGridLayoutItemsStretch.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.UniformGridLayoutItemsStretch> property) where TTarget : UniformGridLayout
        => property.Set(Xaml.Controls.UniformGridLayoutItemsStretch.None);

        /// <summary>Set to <see cref="Xaml.Controls.UniformGridLayoutItemsStretch.Uniform"/></summary>
        public static TTarget Uniform<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.UniformGridLayoutItemsStretch> property) where TTarget : UniformGridLayout
        => property.Set(Xaml.Controls.UniformGridLayoutItemsStretch.Uniform);
    }

    public static partial class VariableSizedWrapGridExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : VariableSizedWrapGrid
        => property.Set(Xaml.Controls.Orientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : VariableSizedWrapGrid
        => property.Set(Xaml.Controls.Orientation.Vertical);
    }

    public static partial class ViewboxExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.StretchDirection.Both"/></summary>
        public static TTarget Both<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.StretchDirection> property) where TTarget : Viewbox
        => property.Set(Xaml.Controls.StretchDirection.Both);

        /// <summary>Set to <see cref="Xaml.Controls.StretchDirection.DownOnly"/></summary>
        public static TTarget DownOnly<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.StretchDirection> property) where TTarget : Viewbox
        => property.Set(Xaml.Controls.StretchDirection.DownOnly);

        /// <summary>Set to <see cref="Xaml.Controls.StretchDirection.UpOnly"/></summary>
        public static TTarget UpOnly<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.StretchDirection> property) where TTarget : Viewbox
        => property.Set(Xaml.Controls.StretchDirection.UpOnly);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.Fill"/></summary>
        public static TTarget Fill<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : Viewbox
        => property.Set(Xaml.Media.Stretch.Fill);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.None"/></summary>
        public static TTarget None<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : Viewbox
        => property.Set(Xaml.Media.Stretch.None);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.Uniform"/></summary>
        public static TTarget Uniform<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : Viewbox
        => property.Set(Xaml.Media.Stretch.Uniform);

        /// <summary>Set to <see cref="Xaml.Media.Stretch.UniformToFill"/></summary>
        public static TTarget UniformToFill<TTarget>(this DependencyProperty<TTarget, Xaml.Media.Stretch> property) where TTarget : Viewbox
        => property.Set(Xaml.Media.Stretch.UniformToFill);
    }

    public static partial class VirtualizingStackPanelExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : VirtualizingStackPanel
        => property.Set(Xaml.Controls.Orientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : VirtualizingStackPanel
        => property.Set(Xaml.Controls.Orientation.Vertical);
    }

    public static partial class WrapGridExtensions
    {
        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Horizontal"/></summary>
        public static TTarget Horizontal<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : WrapGrid
        => property.Set(Xaml.Controls.Orientation.Horizontal);

        /// <summary>Set to <see cref="Xaml.Controls.Orientation.Vertical"/></summary>
        public static TTarget Vertical<TTarget>(this DependencyProperty<TTarget, Xaml.Controls.Orientation> property) where TTarget : WrapGrid
        => property.Set(Xaml.Controls.Orientation.Vertical);
    }
}

#endif
// End of generated C# Markup API for Microsoft.WindowsAppSDK
